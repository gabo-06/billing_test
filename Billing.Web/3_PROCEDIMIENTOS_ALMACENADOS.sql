USE OmnimedBD
GO

-- *******************************************************************************************************
-- FUNCIONES DE LA APLICACION
-- *******************************************************************************************************

-- Antes de eiminar la función "FN_GET_CODE_OF_MIKEDUFEK" elimina las restricciones default que hacen referencia a ella.

IF ((SELECT COUNT(*) FROM [OmnimedBD].[sys].[default_constraints] WHERE [name] = N'DF_Patient_Pat_operatorUser') > 0)
BEGIN
	ALTER TABLE		[OmnimedBD].[dbo].[Patient]
	DROP CONSTRAINT [DF_Patient_Pat_operatorUser]
END
IF ((SELECT COUNT(*) FROM [OmnimedBD].[sys].[default_constraints] WHERE [name] = N'DF_Medical_Med_operatorUser') > 0)
BEGIN
	ALTER TABLE		[OmnimedBD].[dbo].[Medical]
	DROP CONSTRAINT [DF_Medical_Med_operatorUser]
END
IF ((SELECT COUNT(*) FROM [OmnimedBD].[sys].[default_constraints] WHERE [name] = N'DF_Insurer_Ins_operatorUser') > 0)
BEGIN
	ALTER TABLE		[OmnimedBD].[dbo].[Insurer]
	DROP CONSTRAINT [DF_Insurer_Ins_operatorUser]
END
IF ((SELECT COUNT(*) FROM [OmnimedBD].[sys].[default_constraints] WHERE [name] = N'DF_Attorney_Att_operatorUser') > 0)
BEGIN
	ALTER TABLE		[OmnimedBD].[dbo].[Attorney]
	DROP CONSTRAINT [DF_Attorney_Att_operatorUser]
END
IF ((SELECT COUNT(*) FROM [OmnimedBD].[sys].[default_constraints] WHERE [name] = N'DF_Adjuster_Adj_operatorUser') > 0)
BEGIN
	ALTER TABLE		[OmnimedBD].[dbo].[Adjuster]
	DROP CONSTRAINT [DF_Adjuster_Adj_operatorUser]
END
IF ((SELECT COUNT(*) FROM [OmnimedBD].[sys].[default_constraints] WHERE [name] = N'DF_Provider_Pro_operatorUser') > 0)
BEGIN
	ALTER TABLE		[OmnimedBD].[dbo].[Provider]
	DROP CONSTRAINT [DF_Provider_Pro_operatorUser]
END
IF ((SELECT COUNT(*) FROM [OmnimedBD].[sys].[default_constraints] WHERE [name] = N'DF_Activity_Act_operatorUser') > 0)
BEGIN
	ALTER TABLE		[OmnimedBD].[dbo].[Activity]
	DROP CONSTRAINT [DF_Activity_Act_operatorUser]
END
IF ((SELECT COUNT(*) FROM [OmnimedBD].[sys].[default_constraints] WHERE [name] = N'DF_Specialty_Spe_operatorUser') > 0)
BEGIN
	ALTER TABLE		[OmnimedBD].[dbo].[Specialty]
	DROP CONSTRAINT [DF_Specialty_Spe_operatorUser]
END
IF ((SELECT COUNT(*) FROM [OmnimedBD].[sys].[default_constraints] WHERE [name] = N'DF_Evento_Eve_operatorUser') > 0)
BEGIN
	ALTER TABLE		[OmnimedBD].[dbo].[Evento]
	DROP CONSTRAINT [DF_Evento_Eve_operatorUser]
END
GO
IF ((SELECT COUNT(*) FROM [OmnimedBD].[sys].[default_constraints] WHERE [name] = N'DF_DataEntry_Dae_operatorUser') > 0)
BEGIN
	ALTER TABLE		[OmnimedBD].[dbo].[DataEntry]
	DROP CONSTRAINT [DF_DataEntry_Dae_operatorUser]
END
GO

-- Elimina y vuelve a crear la función "FN_GET_CODE_OF_MIKEDUFEK"

IF (OBJECT_ID(N'FN_GET_CODE_OF_MIKEDUFEK', N'FN') IS NOT NULL)
	DROP FUNCTION FN_GET_CODE_OF_MIKEDUFEK
GO
CREATE FUNCTION FN_GET_CODE_OF_MIKEDUFEK
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	1/20/2017.
-- System			:	Billing.
-- Program			:	Data Audit.
-- Description		:	Return the user code by his user name.
-- Change Log		:
--=============================================
(
	@userName VARCHAR(100) = 92
)
RETURNS INT
AS
BEGIN
	DECLARE @userCode INT
	 
	SELECT @userCode      = [Use_code]
	FROM   [User] 
	WHERE  [Use_userName] = @userName
        
	RETURN @userCode
END
GO

-- Vuelve a crear las restricciones default que hacen referencia a la función "FN_GET_CODE_OF_MIKEDUFEK".

IF ((SELECT COUNT(*) FROM [OmnimedBD].[sys].[default_constraints] WHERE [name] = N'DF_Patient_Pat_operatorUser') = 0)
BEGIN
	ALTER TABLE			  [OmnimedBD].[dbo].[Patient]
	ADD CONSTRAINT		  [DF_Patient_Pat_operatorUser]
	DEFAULT (dbo.FN_GET_CODE_OF_MIKEDUFEK('mikedufek')) FOR [Pat_operatorUser];
END
IF ((SELECT COUNT(*) FROM [OmnimedBD].[sys].[default_constraints] WHERE [name] = N'DF_Medical_Med_operatorUser') = 0)
BEGIN
	ALTER TABLE			  [OmnimedBD].[dbo].[Medical]
	ADD CONSTRAINT		  [DF_Medical_Med_operatorUser]
	DEFAULT (dbo.FN_GET_CODE_OF_MIKEDUFEK('mikedufek')) FOR [Med_operatorUser];
END
IF ((SELECT COUNT(*) FROM [OmnimedBD].[sys].[default_constraints] WHERE [name] = N'DF_Insurer_Ins_operatorUser') = 0)
BEGIN
	ALTER TABLE			  [OmnimedBD].[dbo].[Insurer]
	ADD CONSTRAINT		  [DF_Insurer_Ins_operatorUser]
	DEFAULT (dbo.FN_GET_CODE_OF_MIKEDUFEK('mikedufek')) FOR [Ins_operatorUser];
END
IF ((SELECT COUNT(*) FROM [OmnimedBD].[sys].[default_constraints] WHERE [name] = N'DF_Attorney_Att_operatorUser') = 0)
BEGIN
	ALTER TABLE			  [OmnimedBD].[dbo].[Attorney]
	ADD CONSTRAINT		  [DF_Attorney_Att_operatorUser]
	DEFAULT (dbo.FN_GET_CODE_OF_MIKEDUFEK('mikedufek')) FOR [Att_operatorUser];
END
IF ((SELECT COUNT(*) FROM [OmnimedBD].[sys].[default_constraints] WHERE [name] = N'DF_Adjuster_Adj_operatorUser') = 0)
BEGIN
	ALTER TABLE			  [OmnimedBD].[dbo].[Adjuster]
	ADD CONSTRAINT		  [DF_Adjuster_Adj_operatorUser]
	DEFAULT (dbo.FN_GET_CODE_OF_MIKEDUFEK('mikedufek')) FOR [Adj_operatorUser];
END
IF ((SELECT COUNT(*) FROM [OmnimedBD].[sys].[default_constraints] WHERE [name] = N'DF_Provider_Pro_operatorUser') = 0)
BEGIN
	ALTER TABLE			  [OmnimedBD].[dbo].[Provider]
	ADD CONSTRAINT		  [DF_Provider_Pro_operatorUser]
	DEFAULT (dbo.FN_GET_CODE_OF_MIKEDUFEK('mikedufek')) FOR [Pro_operatorUser];
END
IF ((SELECT COUNT(*) FROM [OmnimedBD].[sys].[default_constraints] WHERE [name] = N'DF_Activity_Act_operatorUser') = 0)
BEGIN
	ALTER TABLE			  [OmnimedBD].[dbo].[Activity]
	ADD CONSTRAINT		  [DF_Activity_Act_operatorUser]
	DEFAULT (dbo.FN_GET_CODE_OF_MIKEDUFEK('mikedufek')) FOR [Act_operatorUser];
END
IF ((SELECT COUNT(*) FROM [OmnimedBD].[sys].[default_constraints] WHERE [name] = N'DF_Specialty_Spe_operatorUser') = 0)
BEGIN
	ALTER TABLE			  [OmnimedBD].[dbo].[Specialty]
	ADD CONSTRAINT		  [DF_Specialty_Spe_operatorUser]
	DEFAULT (dbo.FN_GET_CODE_OF_MIKEDUFEK('mikedufek')) FOR [Spe_operatorUser];
END
GO

IF ((SELECT COUNT(*) FROM [OmnimedBD].[sys].[default_constraints] WHERE [name] = N'DF_Evento_Eve_operatorUser') = 0)
BEGIN
	ALTER TABLE			  [OmnimedBD].[dbo].[Evento]
	ADD CONSTRAINT		  [DF_Evento_Eve_operatorUser]
	DEFAULT (dbo.FN_GET_CODE_OF_MIKEDUFEK('mikedufek')) FOR [Eve_operatorUser];
END
GO
IF ((SELECT COUNT(*) FROM [OmnimedBD].[sys].[default_constraints] WHERE [name] = N'DF_DataEntry_Dae_operatorUser') = 0)
BEGIN
	ALTER TABLE			  [OmnimedBD].[dbo].[DataEntry]
	ADD CONSTRAINT		  [DF_DataEntry_Dae_operatorUser]
	DEFAULT (dbo.FN_GET_CODE_OF_MIKEDUFEK('mikedufek')) FOR [Dae_operatorUser];
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID(N'FN_COUNT_ENTRIES_OF_CASE',N'FN') IS NOT NULL)
	DROP FUNCTION FN_COUNT_ENTRIES_OF_CASE
GO
CREATE FUNCTION FN_COUNT_ENTRIES_OF_CASE
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	10/6/2016.
-- System			:	Billing.
-- Program			:	Monthly Closing.
-- Description		:	Get the count of entries of a case.
-- Change Log		:
--=============================================
(
  @Cis_code				INT			= 1993			-- Código del caso.
 ,@Dae_closedDateSTR	CHAR(10)	= '10/31/2016'	-- Fecha de cierre.
 ,@Dae_facNum			CHAR(1)		= '1'
)
RETURNS INT
AS
BEGIN
	-- SET NOCOUNT ON
	
	-- select * from BillingBody order by bib_code desc
	-- select Cis_code from BillingHead where Bih_code = 16914
	-- select (select Pat_firstName + ' ' + Pat_lastName from Patient where Pat_code = cis.Pat_code) from CaseInformationSheetHead as cis where Cis_code = 166

	DECLARE @Ins_name			VARCHAR(100);
	DECLARE @Dae_closedDateDT	DATE;
	DECLARE @CantidadEntradas	INT;

	--BEGIN TRY
	--	BEGIN TRANSACTION	
			SET @Dae_closedDateDT = CONVERT(DATE, @Dae_closedDateSTR, 101);

			-- Obtiene el nombre de la aseguradora según el código del caso que se pase.
			SELECT @Ins_name  = (SELECT Ins_name 
				                 FROM Insurer 
					             WHERE Ins_code = CIS.Ins_code)
			FROM   [CaseInformationSheetHead] AS CIS
			WHERE  [Cis_code] = @Cis_code

			IF ( LTRIM(RTRIM(@Ins_name)) = 'AMTRUST C/O CARLISLE & ASSOC') -- Si la aseguradora es: "AMTRUST C/O CARLISLE & ASSOC" cuyo código original es: 'Fe16I00064'
			BEGIN
				IF (@Dae_facNum = '-')
				BEGIN
					SELECT @CantidadEntradas =  count(*)
					FROM [DataEntry]    AS [DAE]
					    ,[Activity]     AS [ACT]
						,[ActivityType]	AS [ATY]
					WHERE [DAE].[Cis_code] = @Cis_code
					  AND [DAE].[Act_code] = [ACT].[Act_code]
					  AND [ACT].[Aty_code] = [ATY].[Aty_code]
					  AND [DAE].[Dae_closedDate] IS NULL		-- Que no tenga fecha de cierre.
					  AND [DAE].[Dae_invoiceStatus] = 0			-- Que el estado de la factura sea abierta.
					  AND [DAE].[Dae_parameterDate] IS NULL		-- Que no tenga fecha referencial del día de cierre.
					  AND [DAE].[Dae_facturable] = 1			-- Indica que una entrada es facturable.
					  AND [DAE].[Dae_date] <= @Dae_closedDateDT -- Verifica que la fecha de la entrada sea menor a la fecha de cierre.
				      AND [DAE].[Dae_deletingStatus] = 0		-- Verifica que el estado de anulación sea "0", es decir "No anulada".

				END
				ELSE
				BEGIN
					SELECT @CantidadEntradas = count(*)
					FROM [DataEntry]    AS [DAE]
					    ,[Activity]     AS [ACT]
						,[ActivityType]	AS [ATY]
					WHERE [DAE].[Cis_code] = @Cis_code
					  AND [DAE].[Act_code] = [ACT].[Act_code]
					  AND [ACT].[Aty_code] = [ATY].[Aty_code]
					  AND [DAE].[Dae_closedDate] IS NULL		-- Que no tenga fecha de cierre.
					  AND [DAE].[Dae_invoiceStatus] = 0			-- Que el estado de la factura sea abierta.
					  AND [DAE].[Dae_parameterDate] IS NULL		-- Que no tenga fecha referencial del día de cierre.
					  AND [DAE].[Dae_facturable] = 1			-- Indica que una entrada es facturable.
					  AND [DAE].[Dae_date] <= @Dae_closedDateDT -- Verifica que la fecha de la entrada sea menor a la fecha de cierre.
				      AND [DAE].[Dae_deletingStatus] = 0		-- Verifica que el estado de anulación sea "0", es decir "No anulada".
					  AND [DAE].[Dae_facNum] = CONVERT(int, @Dae_facNum) 					  					  
					  

				END
			END
			ELSE				-- Si la aseguradora no es "AMTRUST C/O CARLISLE & ASSOC"
			BEGIN
				SELECT @CantidadEntradas =  count(*)
				FROM [DataEntry]    AS [DAE]
					,[Activity]     AS [ACT]
					,[ActivityType]	AS [ATY]
			    WHERE [DAE].[Cis_code] = @Cis_code
				  AND [DAE].[Act_code] = [ACT].[Act_code]
				  AND [ACT].[Aty_code] = [ATY].[Aty_code]				  
				  AND [DAE].[Dae_closedDate] IS NULL		-- Que no tenga fecha de cierre.
				  AND [DAE].[Dae_invoiceStatus] = 0			-- Que el estado de la factura sea abierta.
				  AND [DAE].[Dae_parameterDate] IS NULL		-- Que no tenga fecha referencial del día de cierre.
				  AND [DAE].[Dae_facturable] = 1			-- Indica que una entrada es facturable.
				  AND [DAE].[Dae_date] <= @Dae_closedDateDT -- Verifica que la fecha de la entrada sea menor a la fecha de cierre.
				  AND [DAE].[Dae_deletingStatus] = 0		-- Verifica que el estado de anulación sea "0", es decir "No anulada".
			END

			-- select @CantidadEntradas;
			-- return 

			RETURN @CantidadEntradas;
	--	COMMIT TRANSACTION				
	--END TRY
	--BEGIN CATCH
		
	--END CATCH				
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID(N'FN_SPLIT_STRINGS_BY_CHARACTER',N'TF') IS NOT NULL)
	DROP FUNCTION FN_SPLIT_STRINGS_BY_CHARACTER
GO
CREATE FUNCTION FN_SPLIT_STRINGS_BY_CHARACTER
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	1/26/2017.
-- System			:	Billing.
-- Program			:	Data Audit.
-- Description		:	Returns separated strings by a separator character.
-- Change Log		:
--=============================================
(    
	@Input NVARCHAR(MAX),
	@Character CHAR(1)
)
RETURNS @Output TABLE (Item NVARCHAR(1000))
AS
BEGIN
	DECLARE @StartIndex INT
	       ,@EndIndex   INT
    
	SET @StartIndex = 1
    
	IF SUBSTRING(@Input, LEN(@Input) - 1, LEN(@Input)) <> @Character
    BEGIN
        SET @Input = @Input + @Character
    END

    WHILE CHARINDEX(@Character, @Input) > 0
    BEGIN
        SET @EndIndex = CHARINDEX(@Character, @Input)

        INSERT INTO @Output(Item)
        SELECT SUBSTRING(@Input, @StartIndex, @EndIndex - 1)

        SET @Input = SUBSTRING(@Input, @EndIndex + 1, LEN(@Input))
    END

    RETURN
END
GO

-- *******************************************************************************************************
-- PROCEDIMIENTOS ALMACENADOS DE LA APLICACION
-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_MEDICAL_SPECIALTY', N'P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_MEDICAL_SPECIALTY 
GO
CREATE PROCEDURE SP_LIST_MEDICAL_SPECIALTY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	6/30/2016.
-- System			:	Billing.
-- Program			:	Specialty.
-- Description		:	Get all Specialties.
-- Change Log		:
--=============================================
AS
BEGIN
	SELECT  Spe_code
		   ,Spe_name
	FROM	  Specialty 
	WHERE     Spe_type = 'M' 
		  AND Spe_name IS NOT NULL
	ORDER BY Spe_name ASC 
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_ATTORNEY_SPECIALTY','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_ATTORNEY_SPECIALTY 
GO
CREATE PROCEDURE SP_LIST_ATTORNEY_SPECIALTY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/6/2016.
-- System			:	Billing.
-- Program			:	Specialty.
-- Description		:	Get all attorney specialties .
-- Change Log		:
--=============================================
AS
BEGIN
	SELECT Spe_code, Spe_name
	FROM  Specialty 
	WHERE     Spe_type = 'A'
		  AND Spe_name IS NOT NULL
	ORDER BY Spe_name ASC 
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_FIND_MEDICAL','P') IS NOT NULL)
	DROP PROCEDURE SP_FIND_MEDICAL 
GO
CREATE PROCEDURE SP_FIND_MEDICAL
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	6/23/2016.
-- System			:	Billing.
-- Program			:	Medical.
-- Description		:	Find a Medical.
-- Change Log		:
--=============================================
(
@Med_Code int
)
AS
BEGIN
	SELECT  M.[Med_code]
		   ,M.[Med_firstName]
		   ,M.[Med_lastName]
		   ,M.[Med_address]
		   ,CASE 
				WHEN (LTRIM(RTRIM(M.[Med_city])) = '') THEN NULL
				WHEN (M.[Med_city] IS NULL) THEN NULL
				ELSE (SELECT LTRIM(RTRIM(C.[Cit_name])) 
					  FROM [City] AS C 
					  WHERE LTRIM(RTRIM(C.[Cit_name])) = LTRIM(RTRIM(M.[Med_city])) )
			END AS [Med_city]
		   ,CASE 
				WHEN (LTRIM(RTRIM(M.[Med_state])) = '') THEN NULL
				WHEN (M.[Med_state] IS NULL) THEN NULL
				ELSE (SELECT LTRIM(RTRIM(S.[Sta_name])) 
					  FROM [State] AS S 
					  WHERE LTRIM(RTRIM(S.[Sta_abbreviation])) = LTRIM(RTRIM(M.[Med_state])) )
			END AS [Med_state]
		   ,CASE 
				WHEN (LTRIM(RTRIM(M.[Med_state])) = '') THEN NULL
				WHEN (M.[Med_state] IS NULL) THEN NULL
				ELSE (SELECT LTRIM(RTRIM(S.[Sta_abbreviation])) 
					  FROM [State] AS S 
					  WHERE LTRIM(RTRIM(S.[Sta_abbreviation])) = LTRIM(RTRIM(M.[Med_state])) )
			END AS [Sta_abbreviation]
		   ,M.[Med_zipCode]
		   ,M.[Med_zipCodeExt]
		   ,M.[Med_phone]
		   ,M.[Med_phoneExt]
		   ,M.[Med_alternatePhone]
		   ,M.[Med_fax]
		   ,M.[Spe_code]
		   ,S.[Spe_name]
		   ,M.[Med_office]
	FROM [Medical] AS M
	    ,[Specialty] AS S
	WHERE     M.[Spe_code] = S.[Spe_code]
		  AND M.[Med_code] = @Med_code
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_PATIENT','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_PATIENT 
GO
CREATE PROCEDURE SP_LIST_PATIENT
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	6/17/2016.
-- system			:	Billing.
-- Program			:	Patients.
-- Description		:	Get all patients.
-- change log		:
--=============================================
AS
BEGIN
	SET NOCOUNT ON

	SELECT [Pat_code]
		  ,[Pat_firstName]
		  ,[Pat_lastName]
		  ,[Pat_firstName] + ' ' + [Pat_lastName] AS fullname
		  ,[Pat_birthday]
		  ,[Pat_socialSecurityNumberD]
		  ,[Pat_address]
		  ,[Pat_city]
		  ,[Pat_state]
		  ,[Pat_zipCode]
		  ,[Pat_zipCodeExt]
		  ,[Pat_phone]
		  ,[Pat_fax]
		  ,[Pat_sex]
	FROM [Patient]
	WHERE [Pat_status] = 1
	ORDER BY [Pat_lastName] ASC
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_PATIENT_FOR_TRACEABILITY','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_PATIENT_FOR_TRACEABILITY
GO
CREATE PROCEDURE SP_LIST_PATIENT_FOR_TRACEABILITY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	2/7/2017.
-- system			:	Billing.
-- Program			:	Data audit.
-- Description		:	Get all patients including eliminated.
-- change log		:
--=============================================
AS
BEGIN
	SET NOCOUNT ON

	SELECT [Pat_code]
		  ,[Pat_firstName]
		  ,[Pat_lastName]
		  ,[Pat_firstName] + ' ' + [Pat_lastName] AS fullname
		  ,[Pat_birthday]
		  ,[Pat_socialSecurityNumberD]
		  ,[Pat_address]
		  ,[Pat_city]
		  ,[Pat_state]
		  ,[Pat_zipCode]
		  ,[Pat_zipCodeExt]
		  ,[Pat_phone]
		  ,[Pat_fax]
		  ,[Pat_sex]
	FROM [Patient]
	ORDER BY [Pat_lastName] ASC
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_UPDATE_MEDICAL','P') IS NOT NULL)
	DROP PROCEDURE SP_UPDATE_MEDICAL 
GO
CREATE PROCEDURE SP_UPDATE_MEDICAL
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/4/2016.
-- System			:	Billing.
-- Program			:	Medical.
-- Description		:	Update a doctor.
-- Change Log		:
--=============================================
(
@Med_Code INT,
@Med_firstName varchar(100),
@Med_lastName varchar(100),
@Med_address varchar(255),
@Med_city varchar(50),
@Med_state varchar(50),
@Med_zipCode varchar(5),				
@Med_zipCodeExt varchar(4),			
@Med_phone varchar(15),				
@Med_phoneExt varchar(5),			
@Med_alternatePhone varchar(20),		
@Med_fax varchar(15),		
@Spe_code int, 			
@Med_office varchar(100),
@Med_operatorUser			INT			    = 92
)
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @MedicalCode INT; -- Variable que almacena el código del paciente actualizado
	DECLARE @ExistsCity INT; -- Variable que almacena una cantidad '> 0' o '0', '> 0' es si la ciudad que se está tratando de almacenar en la tabla Medical existe en la tabla City y '0' es si no existe. Se utiliza por que si es '0' esta ciudad se registrará en la tabla City.

	BEGIN TRY
		BEGIN TRANSACTION
			
			SELECT @ExistsCity = COUNT(*) FROM City WHERE LTRIM(RTRIM(Cit_name)) = LTRIM(RTRIM(@Med_city)) -- Encuentra cantidad de conincidencias de la ciudad del doctor en la tabla "City"

			IF (@ExistsCity = 0 AND @Med_city IS NOT NULL) -- Si la ciudad que se está tratando de registrar en la tabla Medical no existe en la tabla City, entonces se registrará en esta tabla 
				INSERT INTO City(Cit_name) VALUES(@Med_city)

			-- Esta condición sirve para restringir al usuario cuando intente actualizar un doctor que ya existe después de haberle mostrado las coincidencias.
			IF ( (SELECT COUNT(*) FROM [Medical] WHERE Med_code <> @Med_code AND
														ISNULL(Med_firstName, '') = ISNULL(@Med_firstName, '') AND
													    ISNULL(Med_lastName, '') =  ISNULL(@Med_lastName, '') AND
													    ISNULL(Med_address, '') =   ISNULL(@Med_address, '') AND
													    ISNULL(Med_zipCode, '') =   ISNULL(@Med_zipCode, '') AND
													    ISNULL(Med_city, '')	=   ISNULL(@Med_city, '')	   AND
													    ISNULL(Med_state, '')	=   ISNULL(@Med_state, ''))	   > 0)
				RAISERROR('This doctor already exists!', -- Message  )
						  16, -- Severity
						  1); -- State;

			UPDATE [Medical]
			SET	Med_firstName		= @Med_firstName 
				,Med_lastName		= @Med_lastName 
				,Med_address		= @Med_address 
				,Med_city			= @Med_city 
				,Med_state			= @Med_state 
				,Med_zipCode		= @Med_zipCode 
				,Med_zipCodeExt		= @Med_zipCodeExt 
				,Med_phone			= @Med_phone 
				,Med_phoneExt		= @Med_phoneExt 
				,Med_alternatePhone	= @Med_alternatePhone 
				,Med_fax			= @Med_fax 
				,Spe_code			= @Spe_code 
				,Med_office			= @Med_office 
				,Med_status			= 1
				,[Med_operatorUser]	= @Med_operatorUser
			WHERE [Med_code]		= @Med_code
			
			SELECT @Med_Code AS MedicalErrorCode, '' AS ErrorMessage;
		COMMIT TRANSACTION				
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS MedicalErrorCode, ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT >= 1
			ROLLBACK TRANSACTION
	END CATCH
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_MEDICAL','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_MEDICAL 
GO
CREATE PROCEDURE SP_LIST_MEDICAL
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	6/17/2016.
-- System			:	Billing.
-- Program			:	Doctors and Facilities.
-- Description		:	Get all doctors.
-- Change Log		:
--=============================================
AS
SELECT M.[Med_code]
	  ,M.[Med_firstName]
	  ,M.[Med_lastName]
	  ,M.[Med_address]
	  ,M.[Med_city]
	  ,M.[Med_state]
	  ,M.[Med_zipCode]
	  ,M.[Med_zipCodeExt]
	  ,M.[Med_phone]
	  ,M.[Med_phoneExt]
	  ,M.[Med_alternatePhone]
	  ,M.[Med_fax]
	  ,M.[Spe_code]
	  ,S.[Spe_name]
	  ,M.[Med_office]
FROM [Medical] AS M LEFT JOIN
	 [Specialty] AS S ON
	 M.[Spe_code] = S.[Spe_code]
WHERE M.[Med_lastName] NOT LIKE '%-----%' AND
      M.[Med_status] = 1
ORDER BY [Med_code] ASC
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_MEDICAL_FOR_TRACEABILITY','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_MEDICAL_FOR_TRACEABILITY
GO
CREATE PROCEDURE SP_LIST_MEDICAL_FOR_TRACEABILITY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	2/7/2017.
-- System			:	Billing.
-- Program			:	Doctors and Facilities.
-- Description		:	Get all doctors including eliminated.
-- Change Log		:
--=============================================
AS
SELECT M.[Med_code]
	  ,M.[Med_firstName]
	  ,M.[Med_lastName]
	  ,M.[Med_address]
	  ,M.[Med_city]
	  ,M.[Med_state]
	  ,M.[Med_zipCode]
	  ,M.[Med_zipCodeExt]
	  ,M.[Med_phone]
	  ,M.[Med_phoneExt]
	  ,M.[Med_alternatePhone]
	  ,M.[Med_fax]
	  ,M.[Spe_code]
	  ,S.[Spe_name]
	  ,M.[Med_office]
FROM [Medical] AS M LEFT JOIN
	 [Specialty] AS S ON
	 M.[Spe_code] = S.[Spe_code]
WHERE M.[Med_lastName] NOT LIKE '%-----%'
ORDER BY [Med_code] ASC
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_INSURER','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_INSURER 
GO
CREATE PROCEDURE SP_LIST_INSURER
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	6/20/2016.
-- System			:	Billing.
-- Program			:	Insurers.
-- Description		:	Get all Insurers.
-- Change Log		:
--=============================================
AS
SELECT [Ins_code]
	  ,[Ins_name]
	  ,[Ins_address]
	  ,[Ins_city]
	  ,[Ins_state]
	  ,[Ins_phone]
	  ,[Ins_phoneExt]
	  ,[Ins_fax]
	  ,[Ins_zipCode]
	  ,[Ins_zipExt]  
	  ,[Ins_scTpaCode]
	  ,[Ins_feinSc]
	  ,[Ins_carrierCode]
	  ,[Ins_feinCc]
FROM [Insurer] 
WHERE [Ins_name] NOT LIKE '%-----%' AND 
	  [Ins_status] = 1
ORDER BY [Ins_name] ASC
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_INSURER_FOR_TRACEABILITY','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_INSURER_FOR_TRACEABILITY
GO
CREATE PROCEDURE SP_LIST_INSURER_FOR_TRACEABILITY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	2/7/2017.
-- System			:	Billing.
-- Program			:	Insurers.
-- Description		:	Get all Insurers including eliminated.
-- Change Log		:
--=============================================
AS
SELECT [Ins_code]
	  ,[Ins_name]
	  ,[Ins_address]
	  ,[Ins_city]
	  ,[Ins_state]
	  ,[Ins_phone]
	  ,[Ins_phoneExt]
	  ,[Ins_fax]
	  ,[Ins_zipCode]
	  ,[Ins_zipExt]  
	  ,[Ins_scTpaCode]
	  ,[Ins_feinSc]
	  ,[Ins_carrierCode]
	  ,[Ins_feinCc]
FROM [Insurer] 
WHERE [Ins_name] NOT LIKE '%-----%'
ORDER BY [Ins_name] ASC
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_SAVE_PATIENT','P') IS NOT NULL)
	DROP PROCEDURE SP_SAVE_PATIENT 
GO
CREATE PROCEDURE SP_SAVE_PATIENT
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	6/21/2016.
-- System			:	Billing.
-- Program			:	Patient.
-- Description		:	Save a Patient.
-- Change Log		:
--=============================================
(
     @Pat_firstName				VARCHAR(100) = 'firstNameTrigger'
	,@Pat_lastName				VARCHAR(100) = 'lastNameTrigger'
	,@Pat_socialSecurityNumberD VARCHAR(20)  = NULL
	,@Pat_birthday	            DATETIME     = NULL
	,@Pat_address	            VARCHAR(225) = NULL
	,@Pat_city		            VARCHAR(50)  = NULL
	,@Pat_state                 VARCHAR(50)  = NULL
	,@Pat_zipCode	            VARCHAR(5)   = NULL
	,@Pat_phone		            VARCHAR(15)  = NULL
	,@Pat_fax		            VARCHAR(15)  = NULL
	,@Pat_zipCodeExt            VARCHAR(4)   = NULL
	,@Pat_sex		            CHAR(1)		 = NULL	
	,@Pat_operatorUser			INT			 = 92
)
AS
BEGIN
	DECLARE @PatientCode INT; -- Variable que almacena el código del paciente recién registrado
	DECLARE @ExistsCity INT; -- Variable que amacena una cantidad '> 0' o '0', '> 0' es si la ciudad que se está tratando de almacenar en la tabla Patient existe en la tabla City y '0' es si no existe. Se utiliza por que si es '0' esta ciudad se registrará en la tabla City.

	BEGIN TRY
		BEGIN TRANSACTION

			SELECT @ExistsCity = COUNT(*) FROM City WHERE LTRIM(RTRIM(Cit_name)) = LTRIM(RTRIM(@Pat_city)) -- Encuentra cantidad de conincidencias de la ciudad del pacienta en la tabla "City"
			
			IF (@ExistsCity = 0 AND @Pat_city IS NOT NULL) -- Si la ciudad que se está tratando de registrar en la tabla Patient no existe en la tabla City, entonces se registrará en esta tabla 
				INSERT INTO City(Cit_name) VALUES(@Pat_city)

			-- Esta condición sirve para restringir al usuario cuando intente registrar un paciente que ya existe después de haberle mostrado las coincidencias.
			IF ( (SELECT COUNT(*) FROM [Patient] WHERE  ISNULL(Pat_firstName, '') = ISNULL(@Pat_firstName, '') AND
													    ISNULL(Pat_lastName, '') =  ISNULL(@Pat_lastName, '') AND
													    ISNULL(Pat_address, '') =   ISNULL(@Pat_address, '') AND
													    ISNULL(Pat_zipCode, '') =   ISNULL(@Pat_zipCode, '') AND
													    ISNULL(Pat_city, '')	=   ISNULL(@Pat_city, '')	   AND
													    ISNULL(Pat_state, '')	=   ISNULL(@Pat_state, ''))	   > 0)
				RAISERROR('This patient already exists!', -- Message  )
						  16, -- Severity
						  1); -- State;

			INSERT INTO [Patient](Pat_firstName 
						  		 ,Pat_lastName 
						  		 ,Pat_socialSecurityNumberD 
						  		 ,Pat_birthday
						  		 ,Pat_address 
						  		 ,Pat_city 
						  		 ,Pat_state 
						  		 ,Pat_zipCode 
						  		 ,Pat_phone
						  		 ,Pat_fax 
						  		 ,Pat_zipCodeExt
						  		 ,Pat_sex
								 ,Pat_operatorUser)
			VALUES (@Pat_firstName, 
					@Pat_lastName, 
					@Pat_socialSecurityNumberD, 
					@Pat_birthday,
					@Pat_address, 
					@Pat_city, 
					@Pat_state, 
					@Pat_zipCode, 
					@Pat_phone,
					@Pat_fax, 
					@Pat_zipCodeExt,
					@Pat_sex,
					@Pat_operatorUser)

			SET @PatientCode = SCOPE_IDENTITY();

			SELECT @PatientCode AS PatientErrorCode, '' AS ErrorMessage;
		COMMIT TRANSACTION			
	END TRY
	BEGIN CATCH
		IF (ERROR_NUMBER() = 2601 AND ERROR_MESSAGE() LIKE '%UniqueExceptNulls_SSND%') -- Si el error es de duplicación de clave única y pertence al campo seguro social
			SELECT ERROR_NUMBER() AS PatientErrorCode, 'The social security number already exists' AS ErrorMessage;
		ELSE
			SELECT ERROR_NUMBER() AS PatientErrorCode, ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION
	END CATCH
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_DELETE_MEDICAL','P') IS NOT NULL)
	DROP PROCEDURE SP_DELETE_MEDICAL 
GO
CREATE PROCEDURE SP_DELETE_MEDICAL
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/5/2016.
-- System			:	Billing.
-- Program			:	Medical.
-- Description		:	Change the status of a Medical.
-- Change Log		:
--=============================================
(
	@Med_Code INT = 2530
)
AS
BEGIN
	DECLARE @ExistsMedical INT = 0; 

	BEGIN TRY
		BEGIN TRANSACTION

			-- Compara si existe en la tabla "CaseInformationSheetBodyMed"
			SELECT @ExistsMedical = COUNT(*) FROM CaseInformationSheetBodyMed WHERE Med_code = @Med_Code 

			IF (@ExistsMedical > 0) -- Si el paciente que está tratando de eliminar tiene casos, genera un error
				RAISERROR('You can´t remove this medical because is related to a case or event.', -- Message  )
						  16, -- Severity
						  1); -- State;

			-- Compara si existe en la tabla "Confirmacion"
			SELECT @ExistsMedical = COUNT(*) FROM Confirmacion WHERE Med_code = @Med_Code 
			
			IF (@ExistsMedical > 0) -- Si el paciente que está tratando de eliminar tiene casos, genera un error
				RAISERROR('You can´t remove this medical because is related to a case or event.', -- Message  )
						  16, -- Severity
						  1); -- State;

			-- Compara si existe en la tabla "Evento"
			SELECT @ExistsMedical = COUNT(*) FROM Evento WHERE Med_code = @Med_Code 
			
			IF (@ExistsMedical > 0) -- Si el paciente que está tratando de eliminar tiene casos, genera un error
				RAISERROR('You can´t remove this medical because is related to a case or event.', -- Message  )
						  16, -- Severity
						  1); -- State;


			UPDATE [Medical]
			SET [Med_status] = 0
			WHERE [Med_code] = @Med_Code
	
			SELECT @Med_Code AS 'MedicalErrorCode', '' AS 'ErrorMessage';
			
		COMMIT TRANSACTION			
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS 'MedicalErrorCode', ERROR_MESSAGE() AS 'ErrorMessage'

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION
	END CATCH

	SET NOCOUNT OFF
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_SAVE_INSURER','P') IS NOT NULL)
	DROP PROCEDURE SP_SAVE_INSURER 
GO
CREATE PROCEDURE SP_SAVE_INSURER
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/5/2016.
-- System			:	Billing.
-- Program			:	Insurer.
-- Description		:	Save a Insurer.
-- Change Log		:
--=============================================
(
 @Ins_name			varchar(100) 
,@Ins_phone			varchar(15)	 = NULL
,@Ins_phoneExt		varchar(5)	 = NULL
,@Ins_fax			varchar(15)	 = NULL
,@Ins_address		varchar(255) = NULL
,@Ins_city			varchar(50)	 = NULL
,@Ins_state			varchar(50)	 = NULL
,@Ins_zipCode		varchar(5)	 = NULL
,@Ins_zipExt		varchar(4)	 = NULL
,@Ins_scTpaCode		varchar(30)	 = NULL
,@Ins_feinSc		varchar(30)	 = NULL
,@Ins_carrierCode	varchar(30)	 = NULL
,@Ins_feinCc		varchar(9)	 = NULL
,@Ins_operatorUser	INT			 = 92
)
AS
BEGIN
	DECLARE @InsurerCode INT; -- Variable que almacena el código de la aseguradora reién registrada
	DECLARE @ExistsCity INT; -- Variable que almacena una cantidad '> 0' o '0', '> 0' es si la ciudad que se está tratando de almacenar en la tabla Insurer existe en la tabla City y '0' es si no existe. Se utiliza por que si es '0' esta ciudad se registrará en la tabla City.

	BEGIN TRY
		BEGIN TRANSACTION

			SELECT @ExistsCity = COUNT(*) FROM City WHERE LTRIM(RTRIM(Cit_name)) = LTRIM(RTRIM(@Ins_city)) -- Encuentra cantidad de conincidencias de la ciudad de la aseguradora en la tabla "City"
			
			IF (@ExistsCity = 0 AND @Ins_city IS NOT NULL) -- Si la ciudad que se está tratando de registrar en la tabla "Insurer" no existe en la tabla City, entonces se registrará en esta tabla 
				INSERT INTO City(Cit_name) VALUES(@Ins_city)

			-- Esta condición sirve para restringir al usuario cuando intente registrar una aseguradora que ya existe después de haberle mostrado las coincidencias.
			IF ( (SELECT COUNT(*) FROM [Insurer] WHERE  ISNULL(Ins_name, '')	= ISNULL(@Ins_name, '') AND
													    ISNULL(Ins_address, '') = ISNULL(@Ins_address, '') AND
													    ISNULL(Ins_zipCode, '') = ISNULL(@Ins_zipCode, '') AND
													    ISNULL(Ins_city, '')	= ISNULL(@Ins_city, '')	   AND
													    ISNULL(Ins_state, '')	= ISNULL(@Ins_state, ''))	   > 0)
				RAISERROR('This insurer already exists!', -- Message  )
						  16, -- Severity
						  1); -- State;

			INSERT INTO [Insurer](Ins_name		
													,Ins_phone		
													,Ins_phoneExt	
													,Ins_fax		
													,Ins_address	
													,Ins_city		
													,Ins_state		
													,Ins_zipCode	
													,Ins_zipExt	
													,Ins_scTpaCode	
													,Ins_feinSc	
													,Ins_carrierCode
													,Ins_feinCc
													,Ins_operatorUser)
			VALUES (@Ins_name		
					,@Ins_phone		
					,@Ins_phoneExt	
					,@Ins_fax		
					,@Ins_address	
					,@Ins_city		
					,@Ins_state		
					,@Ins_zipCode	
					,@Ins_zipExt	
					,@Ins_scTpaCode	
					,@Ins_feinSc	
					,@Ins_carrierCode
					,@Ins_feinCc
					,@Ins_operatorUser)

			SET @InsurerCode = SCOPE_IDENTITY();

			SELECT @InsurerCode AS InsurerErrorCode, '' AS ErrorMessage;
		COMMIT TRANSACTION			
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS InsurerErrorCode, ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION
	END CATCH

	SET NOCOUNT OFF
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_UPDATE_INSURER','P') IS NOT NULL)
	DROP PROCEDURE SP_UPDATE_INSURER 
GO
CREATE PROCEDURE SP_UPDATE_INSURER
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/5/2016.
-- System			:	Billing.
-- Program			:	Insurer.
-- Description		:	Update a Insurer.
-- Change Log		:
--=============================================
(
 @Ins_code			INT
,@Ins_name			varchar(100) 
,@Ins_phone			varchar(15)	 
,@Ins_phoneExt		varchar(5)	 
,@Ins_fax			varchar(15)	 
,@Ins_address		varchar(255) 
,@Ins_city			varchar(50)	 
,@Ins_state			varchar(50)	 
,@Ins_zipCode		varchar(5)	 
,@Ins_zipExt		varchar(4)	 
,@Ins_scTpaCode		varchar(30)	 
,@Ins_feinSc		varchar(30)	 
,@Ins_carrierCode	varchar(30)	 
,@Ins_feinCc		varchar(9)	 
,@Ins_operatorUser	INT			    = 92
)
AS
BEGIN
	DECLARE @InsurerCode INT; -- Variable que almacena el código de la aseguradora actualizado
	DECLARE @ExistsCity INT; -- Variable que almacena una cantidad '> 0' o '0', '> 0' es si la ciudad que se está tratando de almacenar en la tabla "Insurer" existe en la tabla City y '0' es si no existe. Se utiliza por que si es '0' esta ciudad se registrará en la tabla City.

	BEGIN TRY
		BEGIN TRANSACTION
			
			SELECT @ExistsCity = COUNT(*) FROM City WHERE LTRIM(RTRIM(Cit_name)) = LTRIM(RTRIM(@Ins_city)) -- Encuentra cantidad de conincidencias de la ciudad de la aseguradora en la tabla "City"

			IF (@ExistsCity = 0 AND @Ins_city IS NOT NULL) -- Si la ciudad que se está tratando de registrar en la tabla "Insurer" no existe en la tabla City, entonces se registrará en esta tabla 
				INSERT INTO City(Cit_name) VALUES(@Ins_city )

			-- Esta condición sirve para restringir al usuario cuando intente actualizar una aseguradora que ya existe después de haberle mostrado las coincidencias.
			IF ( (SELECT COUNT(*) FROM [Insurer] WHERE  Ins_code <> @Ins_code AND
														ISNULL(Ins_name, '')	=	ISNULL(@Ins_name, '') AND
													    ISNULL(Ins_address, '') =   ISNULL(@Ins_address, '') AND
													    ISNULL(Ins_zipCode, '') =   ISNULL(@Ins_zipCode, '') AND
													    ISNULL(Ins_city, '')	=   ISNULL(@Ins_city, '')	   AND
													    ISNULL(Ins_state, '')	=   ISNULL(@Ins_state, ''))	   > 0)
				RAISERROR('This insurer already exists!', -- Message  )
						  16, -- Severity
						  1); -- State;

			UPDATE [Insurer]
			SET [Ins_name]				= @Ins_name			,
				[Ins_phone]				= @Ins_phone		,	
				[Ins_phoneExt]			= @Ins_phoneExt		,
				[Ins_fax]				= @Ins_fax			,
				[Ins_address]			= @Ins_address		,
				[Ins_city]				= @Ins_city			,
				[Ins_state]				= @Ins_state		,	
				[Ins_zipCode]			= @Ins_zipCode		,
				[Ins_zipExt]			= @Ins_zipExt		,
				[Ins_scTpaCode]			= @Ins_scTpaCode	,	
				[Ins_feinSc]			= @Ins_feinSc		,
				[Ins_carrierCode]		= @Ins_carrierCode	,
				[Ins_feinCc]			= @Ins_feinCc,		
				[Ins_status]			= 1,
				[Ins_operatorUser]      = @Ins_operatorUser
			WHERE [Ins_code] = @Ins_Code
			
			SELECT @Ins_code AS InsurerErrorCode, '' AS ErrorMessage;
			
		COMMIT TRANSACTION				
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS InsurerErrorCode, ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION

	END CATCH

	SET NOCOUNT OFF
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_DELETE_INSURER','P') IS NOT NULL)
	DROP PROCEDURE SP_DELETE_INSURER 
GO
CREATE PROCEDURE SP_DELETE_INSURER
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/5/2016.
-- System			:	Billing.
-- Program			:	Insurer.
-- Description		:	Change the status of a Insurer.
-- Change Log		:
--=============================================
(
@Ins_Code INT
)
AS
BEGIN
	DECLARE @ExistsInsurer INT = 0; 

	BEGIN TRY
		BEGIN TRANSACTION

			-- Compara si existe en la tabla "CaseInformationSheetHead"
			SELECT @ExistsInsurer = COUNT(*) FROM CaseInformationSheetHead WHERE Ins_code = @Ins_code
			
			IF (@ExistsInsurer > 0) -- Si la aseguradora que está tratando de eliminar tiene casos, genera un error
				RAISERROR('You can´t remove this Insurer because is related to a case.', -- Message  )
						  16, -- Severity
						  1); -- State;

			UPDATE [Insurer]
			SET [Ins_status] = 0
			WHERE [Ins_code] = @Ins_Code
	
			SELECT @Ins_Code AS 'InsurerErrorCode', '' AS 'ErrorMessage';;
		COMMIT TRANSACTION			
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS 'InsurerErrorCode', ERROR_MESSAGE() AS 'ErrorMessage'

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION
	END CATCH

	SET NOCOUNT OFF
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_FIND_INSURER','P') IS NOT NULL)
	DROP PROCEDURE SP_FIND_INSURER 
GO
CREATE PROCEDURE SP_FIND_INSURER
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/5/2016.
-- System			:	Billing.
-- Program			:	Insurer.
-- Description		:	Find a Insurer.
-- Change Log		:
--=============================================
(
@Ins_Code int
)
AS
BEGIN
	SELECT  I.[Ins_code]
		   ,I.[Ins_name]
		   ,I.[Ins_address]
		   ,I.[Ins_phone]
		   ,I.[Ins_fax]
		   ,I.[Ins_zipCode]
		   ,I.[Ins_scTpaCode]
		   ,I.[Ins_feinSc]
		   ,I.[Ins_carrierCode]
		   ,I.[Ins_feinCc]
		   ,CASE 
				WHEN (LTRIM(RTRIM(I.[Ins_city])) = '') THEN NULL
				WHEN (I.[Ins_city] IS NULL) THEN NULL
				ELSE (SELECT LTRIM(RTRIM(C.[Cit_name])) 
					  FROM [City] AS C 
					  WHERE LTRIM(RTRIM(C.[Cit_name])) = LTRIM(RTRIM(I.[Ins_city])) )
			END AS [Ins_city]
		   ,CASE 
				WHEN (LTRIM(RTRIM(I.[Ins_state])) = '') THEN NULL
				WHEN (I.[Ins_state] IS NULL) THEN NULL
				ELSE (SELECT LTRIM(RTRIM(S.[Sta_name])) 
					  FROM [State] AS S 
					  WHERE LTRIM(RTRIM(S.[Sta_abbreviation])) = LTRIM(RTRIM(I.[Ins_state])) )
			END AS [Ins_state]
		   ,CASE 
				WHEN (LTRIM(RTRIM(I.[Ins_state])) = '') THEN NULL
				WHEN (I.[Ins_state] IS NULL) THEN NULL
				ELSE (SELECT LTRIM(RTRIM(S.[Sta_abbreviation])) 
					  FROM [State] AS S 
					  WHERE LTRIM(RTRIM(S.[Sta_abbreviation])) = LTRIM(RTRIM(I.[Ins_state])) )
			END AS [Sta_abbreviation]
		   ,I.[Ins_zipExt]
		   ,I.[Ins_phoneExt]
	FROM [Insurer] AS I
	WHERE I.[Ins_code] = @Ins_Code
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_ATTORNEY','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_ATTORNEY 
GO
CREATE PROCEDURE SP_LIST_ATTORNEY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/6/2016.
-- system			:	Billing.
-- Program			:	Attorney.
-- Description		:	Get all attorneys.
-- change log		:
--=============================================
AS
SELECT A.[Att_code]
	  ,A.[Att_firstName]
	  ,A.[Att_lastName]
	  ,A.[Att_address]
	  ,A.[Att_phone]
	  ,A.[Att_fax]
	  ,A.[Att_assistant]
	  ,A.[Spe_code]
	  ,S.[Spe_name]
	  ,A.[Att_city]
	  ,A.[Att_state]
	  ,A.[Att_zipCode]
	  ,A.[Att_zipCodeExt]
FROM [Attorney] AS A LEFT JOIN
	 [Specialty] AS S ON
	 A.[Spe_code] = S.[Spe_code]
WHERE A.[Att_lastName] NOT LIKE '%-----%' AND
	  A.[Att_status] = 1 
ORDER BY A.[Att_lastName] ASC
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_ATTORNEY_FOR_TRACEABILITY','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_ATTORNEY_FOR_TRACEABILITY
GO
CREATE PROCEDURE SP_LIST_ATTORNEY_FOR_TRACEABILITY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	2/7/2017.
-- system			:	Billing.
-- Program			:	Attorney.
-- Description		:	Get all attorneys including eliminated..
-- change log		:
--=============================================
AS
SELECT A.[Att_code]
	  ,A.[Att_firstName]
	  ,A.[Att_lastName]
	  ,A.[Att_address]
	  ,A.[Att_phone]
	  ,A.[Att_fax]
	  ,A.[Att_assistant]
	  ,A.[Spe_code]
	  ,S.[Spe_name]
	  ,A.[Att_city]
	  ,A.[Att_state]
	  ,A.[Att_zipCode]
	  ,A.[Att_zipCodeExt]
FROM [Attorney] AS A LEFT JOIN
	 [Specialty] AS S ON
	 A.[Spe_code] = S.[Spe_code]
WHERE A.[Att_lastName] NOT LIKE '%-----%'
ORDER BY A.[Att_lastName] ASC
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_SAVE_ATTORNEY','P') IS NOT NULL)
	DROP PROCEDURE SP_SAVE_ATTORNEY 
GO
CREATE PROCEDURE SP_SAVE_ATTORNEY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/6/2016.
-- System			:	Billing.
-- Program			:	Attorney.
-- Description		:	Save a attorney.
-- Change Log		:
--=============================================
(
 @Att_firstName		VARCHAR(100)  
,@Att_lastName		VARCHAR(100)  
,@Att_address		VARCHAR(255) = NULL
,@Att_phone			VARCHAR(15)  = NULL
,@Att_fax			VARCHAR(15)  = NULL
,@Att_assistant		VARCHAR(100) = NULL
,@Spe_code			INT		  
,@Att_city			VARCHAR(50)  = NULL
,@Att_state			VARCHAR(50)  = NULL
,@Att_zipCode		VARCHAR(5)	  = NULL
,@Att_zipCodeExt	VARCHAR(4)	  = NULL
,@Att_operatorUser	INT			 = 92
)
AS
BEGIN
	DECLARE @AttorneyCode INT; -- Variable que almacena el código del abogado reién registrada
	DECLARE @ExistsCity INT; -- Variable que almacena una cantidad '> 0' o '0', '> 0' es si la ciudad que se está tratando de almacenar en la tabla "Attorney" existe en la tabla City y '0' es si no existe. Se utiliza por que si es '0' esta ciudad se registrará en la tabla City.

	BEGIN TRY
		BEGIN TRANSACTION

			SELECT @ExistsCity = COUNT(*) FROM City WHERE LTRIM(RTRIM(Cit_name)) = LTRIM(RTRIM(@Att_city)) -- Encuentra cantidad de conincidencias de la ciudad del abogado en la tabla "City"
			
			IF (@ExistsCity = 0 AND @Att_city IS NOT NULL) -- Si la ciudad que se está tratando de registrar en la tabla "Attorney" no existe en la tabla City, entonces se registrará en esta tabla 
				INSERT INTO City(Cit_name) VALUES(@Att_city)

			-- Esta condición sirve para restringir al usuario cuando intente registrar un aboagdo que ya existe después de haberle mostrado las coincidencias.
			IF ( (SELECT COUNT(*) FROM [Attorney] WHERE ISNULL(Att_firstName, '') = ISNULL(@Att_firstName, '') AND
													    ISNULL(Att_lastName, '') = ISNULL(@Att_lastName, '')   AND
													    ISNULL(Att_address, '') = ISNULL(@Att_address, '')	   AND
													    ISNULL(Att_zipCode, '') = ISNULL(@Att_zipCode, '')	   AND
													    ISNULL(Att_city, '')	= ISNULL(@Att_city, '')		   AND
													    ISNULL(Att_state, '')	= ISNULL(@Att_state, ''))	   > 0)
				RAISERROR('This attorney already exists!', -- Message  )
						  16, -- Severity
						  1); -- State;

			INSERT INTO [Attorney]( Att_firstName	
                                                     ,Att_lastName	
                                                     ,Att_address	
                                                     ,Att_phone		
                                                     ,Att_fax		
                                                     ,Att_assistant	
                                                     ,Spe_code		
                                                     ,Att_city		
                                                     ,Att_state		
                                                     ,Att_zipCode	
                                                     ,Att_zipCodeExt
													 ,Att_operatorUser)
			VALUES ( @Att_firstName	 
                    ,@Att_lastName	 
                    ,@Att_address	 
                    ,@Att_phone		 
                    ,@Att_fax		 
                    ,@Att_assistant	 
                    ,@Spe_code		 
                    ,@Att_city		 
                    ,@Att_state		 
                    ,@Att_zipCode	 
                    ,@Att_zipCodeExt
					,@Att_operatorUser)

			SET @AttorneyCode = SCOPE_IDENTITY();

			SELECT @AttorneyCode AS AttorneyErrorCode, '' AS ErrorMessage;
		COMMIT TRANSACTION			
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS AttorneyErrorCode, ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION
	END CATCH

	SET NOCOUNT OFF
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_FIND_ATTORNEY','P') IS NOT NULL)
	DROP PROCEDURE SP_FIND_ATTORNEY 
GO
CREATE PROCEDURE SP_FIND_ATTORNEY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/6/2016.
-- System			:	Billing.
-- Program			:	Attorney.
-- Description		:	Find a attorney.
-- Change Log		:
--=============================================
(
@Att_Code int
)
AS
BEGIN
	SELECT  A.[Att_code]
		   ,A.[Att_firstName]
		   ,A.[Att_lastName]
		   ,A.[Att_address]
		   ,A.[Att_phone]
		   ,A.[Att_fax]
		   ,A.[Att_assistant]
		   ,A.[Spe_code]
		   ,S.[Spe_name]
		   ,CASE 
				WHEN (LTRIM(RTRIM(A.[Att_city])) = '') THEN NULL
				WHEN (A.[Att_city] IS NULL) THEN NULL
				ELSE (SELECT LTRIM(RTRIM(C.[Cit_name])) 
					  FROM [City] AS C 
					  WHERE LTRIM(RTRIM(C.[Cit_name])) = LTRIM(RTRIM(A.[Att_city])) )
			END AS [Att_city]
		   ,CASE 
				WHEN (LTRIM(RTRIM(A.[Att_state])) = '') THEN NULL
				WHEN (A.[Att_state] IS NULL) THEN NULL
				ELSE (SELECT LTRIM(RTRIM(S.[Sta_name])) 
					  FROM [State] AS S 
					  WHERE LTRIM(RTRIM(S.[Sta_abbreviation])) = LTRIM(RTRIM(A.[Att_state])) )
			END AS [Att_state]
		   ,CASE 
				WHEN (LTRIM(RTRIM(A.[Att_state])) = '') THEN NULL
				WHEN (A.[Att_state] IS NULL) THEN NULL
				ELSE (SELECT LTRIM(RTRIM(S.[Sta_abbreviation])) 
					  FROM [State] AS S 
					  WHERE LTRIM(RTRIM(S.[Sta_abbreviation])) = LTRIM(RTRIM(A.[Att_state])) )
			END AS [Sta_abbreviation]
			,A.[Att_zipCode]
			,A.[Att_zipCodeExt]
	FROM [Attorney] AS A
	    ,[Specialty] AS S
	WHERE     A.[Spe_code] = S.[Spe_code]
		  AND A.[Att_code] = @Att_code
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_UPDATE_ATTORNEY','P') IS NOT NULL)
	DROP PROCEDURE SP_UPDATE_ATTORNEY 
GO
CREATE PROCEDURE SP_UPDATE_ATTORNEY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/6/2016.
-- System			:	Billing.
-- Program			:	Attorney.
-- Description		:	Update a attorney.
-- Change Log		:
--=============================================
(
 @Att_code			INT
,@Att_firstName		VARCHAR(100)  
,@Att_lastName		VARCHAR(100)  
,@Att_address		VARCHAR(255) 
,@Att_phone			VARCHAR(15)  
,@Att_fax			VARCHAR(15)  
,@Att_assistant		VARCHAR(100) 
,@Spe_code			INT		  
,@Att_city			VARCHAR(50)  
,@Att_state			VARCHAR(50)  
,@Att_zipCode		VARCHAR(5)	  
,@Att_zipCodeExt	VARCHAR(4)	  
,@Att_operatorUser	INT			    = 92
)
AS
BEGIN
	DECLARE @AttorneyCode INT; -- Variable que almacena el código del abogado actualizado
	DECLARE @ExistsCity INT; -- Variable que almacena una cantidad '> 0' o '0', '> 0' es si la ciudad que se está tratando de almacenar en la tabla "Attorney" existe en la tabla City y '0' es si no existe. Se utiliza por que si es '0' esta ciudad se registrará en la tabla City.

	BEGIN TRY
		BEGIN TRANSACTION
			
			SELECT @ExistsCity = COUNT(*) FROM City WHERE LTRIM(RTRIM(Cit_name)) = LTRIM(RTRIM(@Att_city)) -- Encuentra cantidad de conincidencias de la ciudad del abogado en la tabla "City"

			IF (@ExistsCity = 0 AND @Att_city IS NOT NULL) -- Si la ciudad que se está tratando de registrar en la tabla "Attorney" no existe en la tabla City, entonces se registrará en esta tabla 
				INSERT INTO City(Cit_name) VALUES(@Att_city)

			-- Esta condición sirve para restringir al usuario cuando intente actualizar un abogado que ya existe después de haberle mostrado las coincidencias.
			IF ( (SELECT COUNT(*) FROM [Attorney] WHERE Att_code <> @Att_code AND
														ISNULL(Att_firstName, '') = ISNULL(@Att_firstName, '') AND
													    ISNULL(Att_lastName, '') =  ISNULL(@Att_lastName, '') AND
													    ISNULL(Att_address, '') = ISNULL(@Att_address, '') AND
													    ISNULL(Att_zipCode, '') = ISNULL(@Att_zipCode, '') AND
													    ISNULL(Att_city, '')	= ISNULL(@Att_city, '')	   AND
													    ISNULL(Att_state, '')	= ISNULL(@Att_state, ''))	   > 0)
				RAISERROR('This attorney already exists!', -- Message  )
						  16, -- Severity
						  1); -- State;

			UPDATE [Attorney]
			SET	  Att_firstName	    = @Att_firstName
				, Att_lastName	    = @Att_lastName 	
				, Att_address	    = @Att_address	 	
				, Att_phone		    = @Att_phone	 
				, Att_fax		    = @Att_fax		 	
				, Att_assistant	    = @Att_assistant 
				, Spe_code		    = @Spe_code	 	
				, Att_city		    = @Att_city	 	
				, Att_state		    = @Att_state	 	
				, Att_zipCode	    = @Att_zipCode	 	
				, Att_zipCodeExt    = @Att_zipCodeExt		
				, Att_status		= 1
				,[Att_operatorUser]	= @Att_operatorUser
			WHERE [Att_code]        = @Att_code
			
			SELECT @Att_code AS AttorneyErrorCode, '' AS ErrorMessage;
		COMMIT TRANSACTION				
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS AttorneyErrorCode, ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION

	END CATCH

	SET NOCOUNT OFF
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_DELETE_ATTORNEY','P') IS NOT NULL)
	DROP PROCEDURE SP_DELETE_ATTORNEY 
GO
CREATE PROCEDURE SP_DELETE_ATTORNEY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/6/2016.
-- System			:	Billing.
-- Program			:	Attorney.
-- Description		:	Change the status of a attorney.
-- Change Log		:
--=============================================
(
@Att_Code INT
)
AS
BEGIN
	DECLARE @ExistsAttorney INT = 0; 

	BEGIN TRY
		BEGIN TRANSACTION

			-- Compara si existe en la tabla "CaseInformationSheetBodyAtt"
			SELECT @ExistsAttorney = COUNT(*) FROM CaseInformationSheetBodyAtt WHERE Att_code = @Att_Code 

			IF (@ExistsAttorney > 0) -- Si el abogado que está tratando de eliminar tiene casos, genera un error
				RAISERROR('You can´t remove this attorney because is related to a case or event.', -- Message  )
						  16, -- Severity
						  1); -- State;

			UPDATE [Attorney]
			SET [Att_status] = 0
			WHERE [Att_code] = @Att_code
	
			SELECT @Att_Code AS 'AttorneyErrorCode', '' AS 'ErrorMessage';
			
		COMMIT TRANSACTION			
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS 'AttorneyErrorCode', ERROR_MESSAGE() AS 'ErrorMessage'

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION
	END CATCH

	SET NOCOUNT OFF
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_SAVE_ACTIVITY','P') IS NOT NULL)
	DROP PROCEDURE SP_SAVE_ACTIVITY 
GO
CREATE PROCEDURE SP_SAVE_ACTIVITY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/7/2016.
-- System			:	Billing.
-- Program			:	Activity.
-- Description		:	Save a activity.
-- Change Log		:
--=============================================
(
 @Act_description VARCHAR(255)
,@Aty_code INT
,@Act_operatorUser			INT			 = 92
)
AS
BEGIN
	DECLARE @ActivityCode INT; -- Variable que almacena el código de la actividad recién registrada
	DECLARE @ExistsActivity INT = 0; -- Variable que notifica si ya se encuentra la actividad y el tipo que se intentan registrar

	BEGIN TRY
		BEGIN TRANSACTION		
			-- comprueba si ys existe la actividad con el tipo en la tabla
			SELECT @ExistsActivity = count(*) FROM Activity WHERE Act_description = @Act_description AND Aty_code = @Aty_code

			IF (@ExistsActivity > 0) -- Si la especialidad y el tipo ya existen en la tabla, genera un error
				RAISERROR('This activity already exists with this type.', -- Message  )
						  16, -- Severity
						  1); -- State;				

			INSERT INTO [Activity](Act_description
						          ,Aty_code
								  ,Act_operatorUser)
			VALUES (@Act_description
				   ,@Aty_code
				   ,@Act_operatorUser)

			SET @ActivityCode = SCOPE_IDENTITY();

			SELECT @ActivityCode AS ActivityErrorCode, '' AS ErrorMessage;
		COMMIT TRANSACTION			
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ActivityErrorCode, ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION
	END CATCH

	SET NOCOUNT OFF
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_FIND_ACTIVITY','P') IS NOT NULL)
	DROP PROCEDURE SP_FIND_ACTIVITY 
GO
CREATE PROCEDURE SP_FIND_ACTIVITY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/7/2016.
-- System			:	Billing.
-- Program			:	Activity.
-- Description		:	Find a activity.
-- Change Log		:
--=============================================
(
@Act_Code INT
)
AS
BEGIN
SELECT   AC.[Act_code]
	   , AC.[Act_description]
	   , TA.[Aty_code]
	FROM [Activity] AS AC,
		 [ActivityType] AS TA
	WHERE AC.Aty_code = TA.Aty_code AND
	      AC.Act_code = @Act_Code
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_UPDATE_ACTIVITY','P') IS NOT NULL)
	DROP PROCEDURE SP_UPDATE_ACTIVITY 
GO
CREATE PROCEDURE SP_UPDATE_ACTIVITY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/7/2016.
-- System			:	Billing.
-- Program			:	Activity.
-- Description		:	Update a activity.
-- Change Log		:
--=============================================
(
	 @Act_code INT
	,@Act_description VARCHAR(255)
	,@Aty_code INT
	,@Act_operatorUser			INT			    = 92
)
AS
BEGIN
	DECLARE @ActivityCode INT; -- Variable que almacena el código de la actividad actualizada
	DECLARE @ExistsActivity INT = 0; -- Variable que notifica si ya se encuentra la actividad y el tipo que se intentan registrar

	BEGIN TRY
		BEGIN TRANSACTION
			-- comprueba si ya existe la actividad con el tipo en la tabla a excepción de la actividad actual que se está intentado de actualizar
			SELECT @ExistsActivity = count(*) 
			FROM Activity 
			WHERE Act_description = @Act_description AND 
				  Aty_code = @Aty_code AND 
				  Act_code <> @Act_code

			IF (@ExistsActivity > 0) -- Si la especialidad y el tipo ya existen en la tabla, genera un error
				RAISERROR('This activity already exists with this type.', -- Message  )
						  16, -- Severity
						  1); -- State;				
			
			UPDATE [Activity]
			SET    [Act_description]  = @Act_description
				  ,[Aty_code]		  = @Aty_code
				  ,[Act_operatorUser] = @Act_operatorUser
			WHERE  [Act_code] = @Act_Code
			
			SELECT @Act_code AS ActivityErrorCode, '' AS ErrorMessage;
		COMMIT TRANSACTION				
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS ActivityErrorCode, ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION

	END CATCH

	SET NOCOUNT OFF
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_FIND_PATIENT','P') IS NOT NULL)
	DROP PROCEDURE SP_FIND_PATIENT 
GO
CREATE PROCEDURE SP_FIND_PATIENT
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	6/23/2016.
-- System			:	Billing.
-- Program			:	Patient.
-- Description		:	Find a Patient.
-- Change Log		:
--=============================================
(
@Pat_Code int = 2
)
AS
BEGIN
	SELECT  P.[Pat_code]
		   ,P.[Pat_firstName]
		   ,P.[Pat_lastName]
		   ,P.[Pat_socialSecurityNumberD]
		   ,P.[Pat_birthday]
		   ,P.[Pat_address]
		   ,CASE 
				WHEN (LTRIM(RTRIM(P.[Pat_city])) = '') THEN NULL
				WHEN (P.[Pat_city] IS NULL) THEN NULL
				ELSE (SELECT LTRIM(RTRIM(C.[Cit_name])) 
					  FROM [City] AS C 
					  WHERE LTRIM(RTRIM(C.[Cit_name])) = LTRIM(RTRIM(P.[Pat_city])) )
			END AS [Pat_city]
		   ,CASE 
				WHEN (LTRIM(RTRIM(P.[Pat_state])) = '') THEN NULL
				WHEN (P.[Pat_state] IS NULL) THEN NULL
				ELSE (SELECT LTRIM(RTRIM(S.[Sta_name])) 
					  FROM [State] AS S 
					  WHERE LTRIM(RTRIM(S.[Sta_abbreviation])) = LTRIM(RTRIM(P.[Pat_state])) )
			END AS [Pat_state]
		   ,CASE 
				WHEN (LTRIM(RTRIM(P.[Pat_state])) = '') THEN NULL
				WHEN (P.[Pat_state] IS NULL) THEN NULL
				ELSE (SELECT LTRIM(RTRIM(S.[Sta_abbreviation])) 
					  FROM [State] AS S 
					  WHERE LTRIM(RTRIM(S.[Sta_abbreviation])) = LTRIM(RTRIM(P.[Pat_state])) )
			END AS [Sta_abbreviation]
		   ,P.[Pat_zipCode]
		   ,P.[Pat_phone]
		   ,P.[Pat_fax]
		   ,P.[Pat_zipCodeExt]
		   ,P.[Pat_sex]
	FROM [Patient] AS P
	WHERE P.[Pat_code] = @Pat_Code
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_ACTIVITY','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_ACTIVITY 
GO
CREATE PROCEDURE SP_LIST_ACTIVITY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/7/2016.
-- system			:	Billing.
-- Program			:	Activity.
-- Description		:	Get all activities.
-- change log		:
--=============================================
AS
	SELECT   MIN([AC].[Act_code]) AS [Act_code]
			,[AC].[Act_description]
			,[TA].[Aty_description]
	FROM     [Activity]		AS [AC]
			,[ActivityType] AS [TA]
	WHERE    [AC].[Aty_code] = [TA].[Aty_code]
	GROUP BY [AC].[Act_description]
			,[TA].[Aty_description]
	ORDER BY [AC].[Act_description] ASC
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_ACTIVITYTYPE','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_ACTIVITYTYPE 
GO
CREATE PROCEDURE SP_LIST_ACTIVITYTYPE
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/7/2016.
-- system			:	Billing.
-- Program			:	ActivityType.
-- Description		:	Get all types of activities.
-- change log		:
--=============================================
AS
SELECT   [Aty_code]
	   , [Aty_description]
FROM [ActivityType]
ORDER BY [Aty_description] ASC
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_SPECIALTY','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_SPECIALTY 
GO
CREATE PROCEDURE SP_LIST_SPECIALTY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/7/2016.
-- System			:	Billing.
-- Program			:	Specialty.
-- Description		:	Get all specialties.
-- Change Log		:
--=============================================
AS
BEGIN
	SELECT   Spe_code
		   , Spe_name
		   , CASE 
				WHEN LTRIM(RTRIM(Spe_type)) = 'M' then 'MEDICAL'
				WHEN LTRIM(RTRIM(Spe_type)) = 'A' then 'ATTORNEY'
			 END AS Spe_type
	FROM  Specialty 
	WHERE Spe_name NOT LIKe '%----%' AND
		  Spe_name IS NOT NULL
	ORDER BY Spe_name ASC 
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_SAVE_SPECIALTY','P') IS NOT NULL)
	DROP PROCEDURE SP_SAVE_SPECIALTY 
GO
CREATE PROCEDURE SP_SAVE_SPECIALTY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/7/2016.
-- System			:	Billing.
-- Program			:	Specialty.
-- Description		:	Save a specialty.
-- Change Log		:
--=============================================
(
	 @Spe_name         VARCHAR(100)
	,@Spe_type         CHAR
	,@Spe_operatorUser INT			    = 92
)
AS
BEGIN
	DECLARE @SpecialtyCode INT; -- Variable que almacena el código de la especialidad recién registrada
	DECLARE @ExistsSpecialty INT = 0; -- Variable que notifica si ya se encuentra la especialidad y el tipo que se intentan registrar

	BEGIN TRY
		BEGIN TRANSACTION
			-- comprueba si ys existe la especialidad con el tipo en la tabla
			SELECT @ExistsSpecialty = count(*) FROM Specialty WHERE Spe_name = @Spe_name AND Spe_type = @Spe_type

			IF (@ExistsSpecialty > 0) -- Si la especialidad y el tipo ya existen en la tabla, genera un error
				RAISERROR('This specialty already exists with this type.', -- Message  )
						  16, -- Severity
						  1); -- State;				
		
			INSERT INTO [Specialty](Spe_name
							       ,Spe_type
								   ,Spe_operatorUser)
			VALUES (@Spe_name
				   ,@Spe_type
				   ,@Spe_operatorUser)

			SET @SpecialtyCode = SCOPE_IDENTITY();

			SELECT @SpecialtyCode AS SpecialtyErrorCode, '' AS ErrorMessage;
		COMMIT TRANSACTION			
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS SpecialtyErrorCode, ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION
	END CATCH

	SET NOCOUNT OFF
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_FIND_SPECIALTY','P') IS NOT NULL)
	DROP PROCEDURE SP_FIND_SPECIALTY 
GO
CREATE PROCEDURE SP_FIND_SPECIALTY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/7/2016.
-- System			:	Billing.
-- Program			:	Specialty.
-- Description		:	Find a specialty.
-- Change Log		:
--=============================================
(
@Spe_Code int
)
AS
BEGIN
	SELECT   [Spe_code]
		   , [Spe_name]
		   , [Spe_type]
	FROM [Specialty]
	WHERE [Spe_code] = @Spe_Code
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_UPDATE_SPECIALTY','P') IS NOT NULL)
	DROP PROCEDURE SP_UPDATE_SPECIALTY 
GO
CREATE PROCEDURE SP_UPDATE_SPECIALTY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/7/2016.
-- System			:	Billing.
-- Program			:	Specialty.
-- Description		:	Update a specialty.
-- Change Log		:
--=============================================
(
	 @Spe_code         INT
	,@Spe_name         VARCHAR(100)
	,@Spe_type         CHAR
	,@Spe_operatorUser INT			    = 92
)
AS
BEGIN
	DECLARE @SpecialtyCode INT; -- Variable que almacena el código de la especialidad actualizada
	DECLARE @ExistsSpecialty INT = 0; -- Variable que notifica si ya se encuentra la especialidad y el tipo que se intentan registrar

	BEGIN TRY
		BEGIN TRANSACTION
			-- comprueba si ya existe la especialidad con el tipo en la tabla a excepción de la especialidad actual que se está intentado de actualizar
			SELECT @ExistsSpecialty = count(*) 
			FROM Specialty 
			WHERE Spe_name = @Spe_name AND 
				  Spe_type = @Spe_type AND
				  Spe_code <> @Spe_code

			IF (@ExistsSpecialty > 0) -- Si la especialidad y el tipo ya existen en la tabla, genera un error
				RAISERROR('This specialty already exists with this type.', -- Message  )
						  16, -- Severity
						  1); -- State;				

			UPDATE [Specialty]
			SET    [Spe_name]         = @Spe_name
				  ,[Spe_type]	      = @Spe_type
				  ,[Spe_operatorUser] = @Spe_operatorUser
			WHERE  [Spe_code]         = @Spe_code
			
			SELECT @Spe_code AS SpecialtyErrorCode, '' AS ErrorMessage;
		COMMIT TRANSACTION				
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS SpecialtyErrorCode, ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION

	END CATCH

	SET NOCOUNT OFF
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_PROVIDER','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_PROVIDER 
GO
CREATE PROCEDURE SP_LIST_PROVIDER
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/7/2016.
-- System			:	Billing.
-- Program			:	Provider.
-- Description		:	Get all providers.
-- Change Log		:
--=============================================
AS
BEGIN
	SELECT  Pro_code
		   ,Pro_firstName
		   ,Pro_lastName 
		   ,Pro_number
	FROM  Provider
	WHERE Pro_firstName NOT LIKE '%----%' AND 
		  Pro_lastName NOT LIKE '%----%' AND
		  Pro_status = 1
	ORDER BY Pro_lastName ASC 
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_PROVIDER_FOR_TRACEABILITY','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_PROVIDER_FOR_TRACEABILITY
GO
CREATE PROCEDURE SP_LIST_PROVIDER_FOR_TRACEABILITY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	2/7/2017.
-- System			:	Billing.
-- Program			:	Provider.
-- Description		:	Get all providers including eliminated.
-- Change Log		:
--=============================================
AS
BEGIN
	SELECT  Pro_code
		   ,Pro_firstName
		   ,Pro_lastName 
		   ,Pro_number
	FROM  Provider
	WHERE Pro_firstName NOT LIKE '%----%' AND 
		  Pro_lastName NOT LIKE '%----%'
	ORDER BY Pro_lastName ASC 
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_SAVE_PROVIDER','P') IS NOT NULL)
	DROP PROCEDURE SP_SAVE_PROVIDER 
GO
CREATE PROCEDURE SP_SAVE_PROVIDER
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/7/2016.
-- System			:	Billing.
-- Program			:	Provider.
-- Description		:	Save a provider.
-- Change Log		:
--=============================================
(
	 @Pro_firstName    VARCHAR(100)
	,@Pro_lastName     VARCHAR(100)
	,@Pro_number	   VARCHAR(20) = null
	,@Pro_operatorUser INT			    = 92
)
AS
BEGIN
	DECLARE @ProviderCode INT; -- Variable que almacena el código del proveedor recién registrado

	BEGIN TRY
		BEGIN TRANSACTION

			-- Esta condición sirve para restringir al usuario cuando intente registrar un proveedor que ya existe después de haberle mostrado las coincidencias.
			IF ( (SELECT COUNT(*) FROM [Provider] WHERE ISNULL(Pro_firstName, '') = ISNULL(@Pro_firstName, '') AND
													    ISNULL(Pro_lastName, '')	=   ISNULL(@Pro_lastName, ''))	   > 0)
				RAISERROR('This provider already exists!', -- Message  )
						  16, -- Severity
						  1); -- State;
		
			INSERT INTO [Provider](Pro_firstName
								  ,Pro_lastName
								  ,Pro_number
								  ,Pro_operatorUser)
			VALUES ( @Pro_firstName
					,@Pro_lastName
					,@Pro_number
					,@Pro_operatorUser)
			SET @ProviderCode = SCOPE_IDENTITY();

			SELECT @ProviderCode AS ProviderErrorCode, '' AS ErrorMessage;
		COMMIT TRANSACTION			
	END TRY
	BEGIN CATCH
		IF (ERROR_NUMBER() = 2601 AND ERROR_MESSAGE() LIKE '%UniqueExceptNulls_NBR%') -- Si el error es de duplicación de clave única y pertence al campo seguro social
			SELECT ERROR_NUMBER() AS ProviderErrorCode, 'The provider number already exists' AS ErrorMessage;
		ELSE
			SELECT ERROR_NUMBER() AS ProviderErrorCode, ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION
	END CATCH

	SET NOCOUNT OFF
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_FIND_PROVIDER','P') IS NOT NULL)
	DROP PROCEDURE SP_FIND_PROVIDER 
GO
CREATE PROCEDURE SP_FIND_PROVIDER
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/7/2016.
-- System			:	Billing.
-- Program			:	Provider.
-- Description		:	Find a provider.
-- Change Log		:
--=============================================
(
@Pro_Code int
)
AS
BEGIN
	SELECT  [Pro_code]
	       ,[Pro_firstName]
		   ,[Pro_lastName]
		   ,[Pro_number]
	FROM [Provider]
	WHERE [Pro_code] = @Pro_code
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_UPDATE_PROVIDER','P') IS NOT NULL)
	DROP PROCEDURE SP_UPDATE_PROVIDER 
GO
CREATE PROCEDURE SP_UPDATE_PROVIDER
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/7/2016.
-- System			:	Billing.
-- Program			:	Provider.
-- Description		:	Update a provider.
-- Change Log		:
--=============================================
(
	 @Pro_code INT
	,@Pro_firstName VARCHAR(100)
	,@Pro_lastName VARCHAR(100)
	,@Pro_number VARCHAR(20) = NULL
	,@Pro_operatorUser			INT			    = 92
)
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION

			-- Esta condición sirve para restringir al usuario cuando intente actualizar un proveedor que ya existe después de haberle mostrado las coincidencias.
			IF ( (SELECT COUNT(*) FROM [Provider] WHERE  Pro_code <> @Pro_code AND
														ISNULL(Pro_firstName, '') = ISNULL(@Pro_firstName, '') AND
													    ISNULL(Pro_lastName, '')	=   ISNULL(@Pro_lastName, ''))	   > 0)
				RAISERROR('This provider already exists!', -- Message  )
						  16, -- Severity
						  1); -- State;
					
			UPDATE [Provider]
			SET  [Pro_firstName] = @Pro_firstName
				,[Pro_lastName]	= @Pro_lastName
				,[Pro_number]	= @Pro_number
				,[Pro_status]	= 1
				,[Pro_operatorUser]		     = @Pro_operatorUser
			WHERE [Pro_code] = @Pro_code
			
			SELECT @Pro_code AS ProviderErrorCode, '' AS ErrorMessage;
		COMMIT TRANSACTION				
	END TRY
	BEGIN CATCH
		IF (ERROR_NUMBER() = 2601 AND ERROR_MESSAGE() LIKE '%UniqueExceptNulls_NBR%') -- Si el error es de duplicación de clave única y pertence al campo seguro social
			SELECT ERROR_NUMBER() AS ProviderErrorCode, 'The provider number already exists' AS ErrorMessage;
		ELSE
			SELECT ERROR_NUMBER() AS ProviderErrorCode, ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION

	END CATCH

	SET NOCOUNT OFF
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_DELETE_PROVIDER','P') IS NOT NULL)
	DROP PROCEDURE SP_DELETE_PROVIDER 
GO
CREATE PROCEDURE SP_DELETE_PROVIDER
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/5/2016.
-- System			:	Billing.
-- Program			:	Provider.
-- Description		:	Change the status of a provider.
-- Change Log		:
--=============================================
(
@Pro_Code INT
)
AS
BEGIN
	DECLARE @ExistsProvider INT = 0; 

	BEGIN TRY
		BEGIN TRANSACTION
		
			-- Compara si existe en la tabla "CaseInformationSheetHead"
			SELECT @ExistsProvider = COUNT(*) FROM CaseInformationSheetHead WHERE Pro_code = @Pro_code
			
			IF (@ExistsProvider > 0) -- Si el proveedor que está tratando de eliminar está siendo referenciado por la tabla "CaseInformationSheetHead"
				RAISERROR('You can´t remove this provider because is related to a case or event.', -- Message  )
						  16, -- Severity
						  1); -- State;

			-- ----------------------------------------------------------------------------------------------------------------------------------------
			
			-- Compara si existe en la tabla "Confirmacion"
			SELECT @ExistsProvider = COUNT(*) FROM Confirmacion WHERE Pro_code = @Pro_code
			
			IF (@ExistsProvider > 0) -- Si el proveedor que está tratando de eliminar está siendo referenciado por la tabla "Confirmacion"
				RAISERROR('You can´t remove this provider because is related to a case or event.', -- Message  )
						  16, -- Severity
						  1); -- State;

			-- ----------------------------------------------------------------------------------------------------------------------------------------
			
			-- Compara si existe en la tabla "Evento"
			SELECT @ExistsProvider = COUNT(*) FROM Evento WHERE Pro_code = @Pro_code
			
			IF (@ExistsProvider > 0) -- Si el proveedor que está tratando de eliminar está siendo referenciado por la tabla "Evento"
				RAISERROR('You can´t remove this provider because is related to a case or event.', -- Message  )
						  16, -- Severity
						  1); -- State;

			-- ----------------------------------------------------------------------------------------------------------------------------------------
			
			-- Compara si existe en la tabla "EventoNurseOverride"
			SELECT @ExistsProvider = COUNT(*) FROM EventoNurseOverride WHERE Pro_code = @Pro_code
			
			IF (@ExistsProvider > 0) -- Si el proveedor que está tratando de eliminar está siendo referenciado por la tabla "EventoNurseOverride"
				RAISERROR('You can´t remove this provider because is related to a case or event.', -- Message  )
						  16, -- Severity
						  1); -- State;

			UPDATE [Provider]
			SET [Pro_status] = 0
			WHERE [Pro_code] = @Pro_Code
	
			SELECT @Pro_Code AS 'ProviderErrorCode', '' AS 'ErrorMessage';;
			
		COMMIT TRANSACTION			
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS 'ProviderErrorCode', ERROR_MESSAGE() AS 'ErrorMessage'

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION
	END CATCH

	SET NOCOUNT OFF
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_ADJUSTER','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_ADJUSTER 
GO
CREATE PROCEDURE SP_LIST_ADJUSTER
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/7/2016.
-- System			:	Billing.
-- Program			:	Adjuster.
-- Description		:	Get all adjuster.
-- Change Log		:
--=============================================
AS
BEGIN
	SELECT  Adj_code
		   ,Adj_firstName
		   ,Adj_lastName 
		   ,Adj_phone
		   ,Adj_phoneExt
	FROM  Adjuster	
	WHERE Adj_firstName NOT LIKe '%----%' AND 
		  Adj_lastName NOT LIKe '%----%' AND
		  Adj_status = 1
	ORDER BY Adj_lastName ASC 
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_ADJUSTER_FOR_TRACEABILITY','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_ADJUSTER_FOR_TRACEABILITY
GO
CREATE PROCEDURE SP_LIST_ADJUSTER_FOR_TRACEABILITY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	2/7/2017.
-- System			:	Billing.
-- Program			:	Adjuster.
-- Description		:	Get all adjuster including eliminated.
-- Change Log		:
--=============================================
AS
BEGIN
	SELECT  Adj_code
		   ,Adj_firstName
		   ,Adj_lastName 
		   ,Adj_phone
		   ,Adj_phoneExt
	FROM  Adjuster	
	WHERE Adj_firstName NOT LIKe '%----%' AND 
	 	  Adj_lastName NOT LIKe '%----%'
	ORDER BY Adj_lastName ASC 
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_SAVE_ADJUSTER','P') IS NOT NULL)
	DROP PROCEDURE SP_SAVE_ADJUSTER 
GO
CREATE PROCEDURE SP_SAVE_ADJUSTER
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/7/2016.
-- System			:	Billing.
-- Program			:	Adjuster.
-- Description		:	Save a adjuster.
-- Change Log		:
--=============================================
(
 @Adj_firstName  VARCHAR(100)
,@Adj_lastName 	 VARCHAR(100)
,@Adj_phone	     VARCHAR(15)
,@Adj_phoneExt	 VARCHAR(5)
,@Adj_operatorUser			INT			 = 92
)
AS
BEGIN
	DECLARE @AdjusterCode INT; -- Variable que almacena el código del ajustador recién registrado

	BEGIN TRY
		BEGIN TRANSACTION

			-- Esta condición sirve para restringir al usuario cuando intente registrar un ajustador que ya existe después de haberle mostrado las coincidencias.
			IF ( (SELECT COUNT(*) FROM [Adjuster] WHERE  ISNULL(Adj_firstName, '') = ISNULL(@Adj_firstName, '') AND
													    ISNULL(Adj_lastName, '')	=   ISNULL(@Adj_lastName, ''))	   > 0)
				RAISERROR('This adjuster already exists!', -- Message  )
						  16, -- Severity
						  1); -- State;
		
			INSERT INTO [Adjuster]( Adj_firstName 
									,Adj_lastName 	
									,Adj_phone	    
									,Adj_phoneExt
									,Adj_operatorUser)
			VALUES ( @Adj_firstName 
					,@Adj_lastName 	
					,@Adj_phone	    
					,@Adj_phoneExt
					,@Adj_operatorUser)

			SET @AdjusterCode = SCOPE_IDENTITY();

			SELECT @AdjusterCode AS AdjusterErrorCode, '' AS ErrorMessage;
		COMMIT TRANSACTION			
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS AdjusterErrorCode, ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION
	END CATCH

	SET NOCOUNT OFF
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_FIND_ADJUSTER','P') IS NOT NULL)
	DROP PROCEDURE SP_FIND_ADJUSTER 
GO
CREATE PROCEDURE SP_FIND_ADJUSTER
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/7/2016.
-- System			:	Billing.
-- Program			:	Adjuster.
-- Description		:	Find a adjuster.
-- Change Log		:
--=============================================
(
@Adj_Code INT
)
AS
BEGIN
	SELECT  Adj_code
		   ,Adj_firstName 
		   ,Adj_lastName 	
		   ,Adj_phone	    
		   ,Adj_phoneExt	
	FROM [Adjuster]
	WHERE [Adj_code] = @Adj_code
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_UPDATE_ADJUSTER','P') IS NOT NULL)
	DROP PROCEDURE SP_UPDATE_ADJUSTER 
GO
CREATE PROCEDURE SP_UPDATE_ADJUSTER
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/7/2016.
-- System			:	Billing.
-- Program			:	Adjuster.
-- Description		:	Update a adjuster.
-- Change Log		:
--=============================================
(
 @Adj_code		    INT
,@Adj_firstName     VARCHAR(100)
,@Adj_lastName 	    VARCHAR(100)
,@Adj_phone	        VARCHAR(15)
,@Adj_phoneExt	    VARCHAR(5)
,@Adj_operatorUser	INT			    = 92
)
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION

			-- Esta condición sirve para restringir al usuario cuando intente actualizar un ajustador que ya existe después de haberle mostrado las coincidencias.
			IF ( (SELECT COUNT(*) FROM [Adjuster] WHERE  Adj_code <> @Adj_code AND
														ISNULL(Adj_firstName, '') = ISNULL(@Adj_firstName, '') AND
													    ISNULL(Adj_lastName, '')	=   ISNULL(@Adj_lastName, ''))	   > 0)
				RAISERROR('This adjuster already exists!', -- Message  )
						  16, -- Severity
						  1); -- State;
			
			UPDATE [Adjuster]
			SET    [Adj_firstName]    = @Adj_firstName
				  ,[Adj_lastName]	  = @Adj_lastName
				  ,[Adj_phone]	      = @Adj_phone
				  ,[Adj_phoneExt]	  = @Adj_phoneExt
				  ,[Adj_status]	      = 1
				  ,[Adj_operatorUser] = @Adj_operatorUser
			WHERE  [Adj_code]         = @Adj_code
			
			SELECT @Adj_code AS AdjusterErrorCode, '' AS ErrorMessage;
		COMMIT TRANSACTION				
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS AdjusterErrorCode, ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION

	END CATCH

	SET NOCOUNT OFF
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_DELETE_ADJUSTER','P') IS NOT NULL)
	DROP PROCEDURE SP_DELETE_ADJUSTER 
GO
CREATE PROCEDURE SP_DELETE_ADJUSTER
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/5/2016.
-- System			:	Billing.
-- Program			:	Adjuster.
-- Description		:	Change the status of a adjuster.
-- Change Log		:
--=============================================
(
@Adj_Code INT
)
AS
BEGIN
	DECLARE @ExistsAdjuster INT = 0; 

	BEGIN TRY
		BEGIN TRANSACTION
		
			-- Compara si existe en la tabla "CaseInformationSheetHead"
			SELECT @ExistsAdjuster = COUNT(*) FROM CaseInformationSheetHead WHERE Adj_code = @Adj_code
			
			IF (@ExistsAdjuster > 0) -- Si el ajustador que está tratando de eliminar está siendo referenciado por la tabla "CaseInformationSheetHead"
				RAISERROR('You can´t remove this adjuster because is related to a case.', -- Message  )
						  16, -- Severity
						  1); -- State;

			UPDATE [Adjuster]
			SET [Adj_status] = 0
			WHERE [Adj_code] = @Adj_code
	
			SELECT @Adj_Code AS 'AdjusterErrorCode', '' AS 'ErrorMessage';;
			
		COMMIT TRANSACTION			
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS 'AdjusterErrorCode', ERROR_MESSAGE() AS 'ErrorMessage'

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION
	END CATCH

	SET NOCOUNT OFF
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_ROLES','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_ROLES
GO
CREATE PROCEDURE SP_LIST_ROLES
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	12/29/2016.
-- system			:	Billing.
-- Program			:	Configuration.
-- Description		:	Get all roles.
-- change log		:
--=============================================
AS
BEGIN
	SET NOCOUNT ON

	SELECT   [RoleId]
		    ,[RoleName]
	FROM     [aspnet_Roles]
	WHERE    [Vigencia] = 1
	ORDER BY [RoleName] ASC
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_CASE_FOR_ADVANCED_SEARCH','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_CASE_FOR_ADVANCED_SEARCH 
GO
CREATE PROCEDURE SP_LIST_CASE_FOR_ADVANCED_SEARCH
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/8/2016.
-- system			:	Billing.
-- Program			:	Patient.
-- Description		:	Get all cases for advanced_search.
-- change log		:
--=============================================
AS
SELECT  [CIS].[Cis_code] AS [CaseCode]									-- case code
       ,[CIS].[Cis_caseCode] AS [ClaimNumber]							-- case code (case_cod)
	   ,[PAT].[Pat_code] AS [PatientCode]								-- patient code
	   ,[PAT].[Pat_firstName] + ' ' + PAT.[Pat_lastName] AS [Patient]	-- patient fullname 
	   ,LTRIM(RTRIM([PAT].[Pat_firstName])) AS [FirsNamePatient]        -- patient first name
	   ,LTRIM(RTRIM([PAT].[Pat_lastName]))  AS [LastNamePatient]		-- patient last name
	   ,[INS].[Ins_name] AS [Insurer]									-- insurer name
	   ,[CIS].[Cis_accidentDate] AS [AccidentDate]						-- accident date
	   ,CASE CIS.[Cis_status] 
			WHEN 1 THEN 'OPEN'
			WHEN 0 THEN 'CLOSED'
		END AS [Status]
FROM  [CaseInformationSheetHead] AS CIS
	 ,[Patient] AS PAT
	 ,[Insurer] AS INS
WHERE CIS.[Pat_code] = PAT.[Pat_code]	AND
      CIS.[Ins_code] = INS.[Ins_code]	AND
	  PAT.[Pat_status] = 1				AND 
	  PAT.[Pat_firstName] IS NOT NULL	AND 
	  PAT.[Pat_lastName] IS NOT NULL
ORDER BY [Pat_lastName] ASC
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_PATIENT_FOR_FIND_MATCHES','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_PATIENT_FOR_FIND_MATCHES 
GO
CREATE PROCEDURE SP_LIST_PATIENT_FOR_FIND_MATCHES
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/8/2016.
-- system			:	Billing.
-- Program			:	Patient.
-- Description		:	Get all patients for find_matches.
-- change log		:
--=============================================
AS
SELECT [Pat_code] AS [Codigo]
	  ,[Pat_firstName] + ' ' + [Pat_lastName] AS [NombreCompleto]
FROM [Patient]
WHERE [Pat_status] = 1 AND
	  LTRIM(RTRIM([Pat_firstName])) <> '' AND 
	  LTRIM(RTRIM([Pat_lastName])) <> '' 
ORDER BY [Pat_lastName] ASC
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_UPDATE_PATIENT','P') IS NOT NULL)
	DROP PROCEDURE SP_UPDATE_PATIENT 
GO
CREATE PROCEDURE SP_UPDATE_PATIENT
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	6/24/2016.
-- System			:	Billing.
-- Program			:	Patients.
-- Description		:	Update a Patient.
-- Change Log		:
--=============================================
(
	 @Pat_Code					INT				= 2840
	,@Pat_firstName				VARCHAR(100)	= 'firstNameTriggerUpdate'
	,@Pat_lastName				VARCHAR(100)	= 'lastNameTriggerUpdate'
	,@Pat_socialSecurityNumberD VARCHAR(20)		= NULL
	,@Pat_birthday				SMALLDATETIME	= NULL
	,@Pat_address				VARCHAR(225)	= NULL
	,@Pat_city					VARCHAR(50)		= NULL
	,@Pat_state					VARCHAR(50)		= NULL
	,@Pat_zipCode				VARCHAR(5)		= NULL
	,@Pat_phone					VARCHAR(15)		= NULL
	,@Pat_fax					VARCHAR(15)		= NULL
	,@Pat_zipCodeExt			VARCHAR(4)		= NULL
	,@Pat_sex					CHAR(1)			= NULL
    ,@Pat_operatorUser			INT			    = 92
)
AS
BEGIN
	DECLARE @PatientCode INT; -- Variable que almacena el código del paciente actualizado
	DECLARE @ExistsCity INT; -- Variable que almacena una cantidad '> 0' o '0', '> 0' es si la ciudad que se está tratando de almacenar en la tabla Patient existe en la tabla City y '0' es si no existe. Se utiliza por que si es '0' esta ciudad se registrará en la tabla City.

	BEGIN TRY
		BEGIN TRANSACTION
			SELECT @ExistsCity = COUNT(*) FROM City WHERE LTRIM(RTRIM(Cit_name)) = LTRIM(RTRIM(@Pat_city)) -- Encuentra cantidad de conincidencias de la ciudad del paciente en la tabla "City"

			IF (@ExistsCity = 0 AND @Pat_city IS NOT NULL) -- Si la ciudad que se está tratando de registrar en la tabla Patient no existe en la tabla City, entonces se registrará en esta tabla 
				INSERT INTO City(Cit_name) VALUES(@Pat_city)

			-- Esta condición sirve para restringir al usuario cuando intente actualizar un paciente que ya existe después de haberle mostrado las coincidencias.
			IF ( (SELECT COUNT(*) FROM [Patient] WHERE  Pat_code <> @Pat_code AND
														ISNULL(Pat_firstName, '') = ISNULL(@Pat_firstName, '') AND
													    ISNULL(Pat_lastName, '') =  ISNULL(@Pat_lastName, '') AND
													    ISNULL(Pat_address, '') =   ISNULL(@Pat_address, '') AND
													    ISNULL(Pat_zipCode, '') =   ISNULL(@Pat_zipCode, '') AND
													    ISNULL(Pat_city, '')	=   ISNULL(@Pat_city, '')	   AND
													    ISNULL(Pat_state, '')	=   ISNULL(@Pat_state, ''))	   > 0)
				RAISERROR('This patient already exists!', -- Message  )
						  16, -- Severity
						  1); -- State;

			UPDATE [Patient]
			SET  [Pat_firstName]			 = @Pat_firstName
				,[Pat_lastName]				 = @Pat_lastName
				,[Pat_socialSecurityNumberD] = @Pat_socialSecurityNumberD
				,[Pat_birthday]			     = @Pat_birthday
				,[Pat_address]			     = @Pat_address
				,[Pat_city]				     = @Pat_city
				,[Pat_state]			     = @Pat_state
				,[Pat_zipCode]			     = @Pat_zipCode
				,[Pat_phone]			     = @Pat_phone
				,[Pat_fax]				     = @Pat_fax
				,[Pat_zipCodeExt]		     = @Pat_zipCodeExt
				,[Pat_sex]				     = @Pat_sex
				,[Pat_status]			     = 1				
				,[Pat_operatorUser]		     = @Pat_operatorUser
			WHERE [Pat_code]			     = @Pat_Code
			
			SELECT @Pat_Code AS PatientErrorCode, '' AS ErrorMessage;
		COMMIT TRANSACTION				
	END TRY
	BEGIN CATCH
		IF (ERROR_NUMBER() = 2601 AND ERROR_MESSAGE() LIKE '%UniqueExceptNulls_SSND%') -- Si el error es de duplicación de clave única y pertence al campo seguro social
			SELECT ERROR_NUMBER() AS PatientErrorCode, 'The social security number already exists' AS ErrorMessage;
		ELSE
			SELECT ERROR_NUMBER() AS PatientErrorCode, ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION

	END CATCH

	SET NOCOUNT OFF
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_DELETE_PATIENT','P') IS NOT NULL)
	DROP PROCEDURE SP_DELETE_PATIENT 
GO
CREATE PROCEDURE SP_DELETE_PATIENT
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	6/24/2016.
-- System			:	Billing.
-- Program			:	Patients.
-- Description		:	Change the status of a Patient.
-- Change Log		:
--=============================================
(
@Pat_Code INT
)
AS
BEGIN
	DECLARE @ExistsPatient INT = 0; 

	BEGIN TRY
		BEGIN TRANSACTION

			-- Compara si existe en la tabla "CaseInformationSheetHead"
			SELECT @ExistsPatient = COUNT(*) FROM CaseInformationSheetHead WHERE Pat_code = @Pat_Code 
			
			IF (@ExistsPatient > 0) -- Si el paciente que está tratando de eliminar tiene casos, genera un error
				RAISERROR('You can´t remove this patient because is related to a case.', -- Message  )
						  16, -- Severity
						  1); -- State;
						  
			UPDATE [Patient]
			SET    [Pat_status] = 0
			WHERE  [Pat_code] = @Pat_Code
	
			SELECT @Pat_Code AS 'PatientErrorCode', '' AS 'ErrorMessage';
			
		COMMIT TRANSACTION			
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS 'PatientErrorCode', ERROR_MESSAGE() AS 'ErrorMessage'

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION
	END CATCH

	SET NOCOUNT OFF
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_STATE','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_STATE 
GO
CREATE PROCEDURE SP_LIST_STATE
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	6/27/2016.
-- System			:	Billing.
-- Program			:	State.
-- Description		:	Get all states.
-- Change Log		:
--=============================================
AS
BEGIN
	SET NOCOUNT ON

	SELECT  [Sta_code]
		   ,[Sta_name]
		   ,[Sta_abbreviation]
	FROM [State] 	 
	ORDER BY [Sta_name] ASC
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_CITY','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_CITY 
GO
CREATE PROCEDURE SP_LIST_CITY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	6/27/2016.
-- System			:	Billing.
-- Program			:	City.
-- Description		:	Get all cities.
-- Change Log		:
--=============================================
AS
BEGIN 
	SET NOCOUNT ON

	SELECT [Cit_name]
	FROM [City]
	ORDER BY [Cit_name] ASC
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_FIND_HOMONYM_PATIENTS','P') IS NOT NULL)
	DROP PROCEDURE SP_FIND_HOMONYM_PATIENTS 
GO
CREATE PROCEDURE SP_FIND_HOMONYM_PATIENTS
-- sp_help patient
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	6/28/2016.
-- System			:	Billing.
-- Program			:	Patient.
-- Description		:	Check homonyms.
-- Change Log		:
--=============================================
(
 @ParametroSalida				INT OUTPUT
,@Pat_code						INT			 = 0
,@Pat_firstName					VARCHAR(100) = 'tesdfvsdt'
,@Pat_lastName					VARCHAR(100) = 'tasdfsadfest'
,@Pat_zipCode					VARCHAR(5)   = null
,@Pat_city						VARCHAR(50)  = 'AAROasdfasdNSBURG'	
,@Pat_state						VARCHAR(50)  = 'AL'	
,@Pat_socialSecurityNumberD		VARCHAR(20)	 = '324-23-4234'
)
AS
BEGIN
	DECLARE @CantidadCoincidenciasCamposCriticos INT = 0;
	-- ************************************************************
	-- ******* SI EL NÚMERO DE SEGURO SOCIAL ESTÁ REPETIDO. *******
	-- ************************************************************
	IF ((SELECT COUNT(*) FROM Patient WHERE Pat_socialSecurityNumberD = @Pat_socialSecurityNumberD AND Pat_code <> ISNULL(@Pat_code, '')) > 0) 
	BEGIN
		SELECT  0  AS [Pat_code]
		       ,'The social security number is repeated' AS [Pat_firstName]
			   ,'' AS [Pat_lastName] 
			   ,'' AS [Pat_zipCode] 
			   ,'' AS [Pat_address] 
			   ,'' AS [Pat_city] 
			   ,'' AS [Pat_state] 
			   ,CAST(0 AS BIT) AS [Pat_status] 
		SELECT @ParametroSalida = 2; -- Retorna 2 cuando es error de duplicado de socialSecurityNumber
	END	
	-- ***************************************************************
	-- ******* SI EL NÚMERO DE SEGURO SOCIAL NO ESTÁ REPETIDO. *******
	-- ***************************************************************
	ELSE 	
	BEGIN	
		IF (@Pat_code = 0) -- ********** CUANDO ES UNA INSERCION **********
		BEGIN 
			IF (@Pat_zipCode IS NULL) -- Si el código postal es nulo
			BEGIN 
				SELECT @CantidadCoincidenciasCamposCriticos = COUNT(*) 
				FROM	[Patient] 
				WHERE   LTRIM(RTRIM([Pat_state]))	 	= @Pat_state				AND
						LTRIM(RTRIM([Pat_city]))		= @Pat_city					AND
					    (LTRIM(RTRIM([Pat_firstName]))	LIKE '%'+@Pat_firstName+'%' OR
					     LTRIM(RTRIM([Pat_lastName]))	LIKE '%'+@Pat_lastName+'%'  OR
					     CHARINDEX([Pat_firstName], @Pat_firstName) > 0				OR
					     CHARINDEX([Pat_lastName], @Pat_lastName) > 0)
						
				IF (@CantidadCoincidenciasCamposCriticos > 0) 
				BEGIN
					SELECT  [Pat_code] 
						   ,[Pat_firstName] 
						   ,[Pat_lastName] 
						   ,[Pat_zipCode] 
						   ,[Pat_address] 
						   ,[Pat_city] 
						   ,[Pat_state] 
						   ,[Pat_status]
					FROM	[Patient]
					WHERE   
						  LTRIM(RTRIM([Pat_state]))	 	= @Pat_state					AND
						  LTRIM(RTRIM([Pat_city]))		= @Pat_city						AND
						  (LTRIM(RTRIM([Pat_firstName]))	LIKE '%'+@Pat_firstName+'%' OR
						   LTRIM(RTRIM([Pat_lastName]))	LIKE '%'+@Pat_lastName+'%'		OR
						   CHARINDEX([Pat_firstName], @Pat_firstName) > 0				OR
						   CHARINDEX([Pat_lastName], @Pat_lastName) > 0)
					ORDER BY Pat_lastName ASC

					SELECT @ParametroSalida = 1;			
				END			
				ELSE		
				BEGIN
					SELECT  0  AS [Pat_code]
						   ,'' AS [Pat_firstName]
						   ,'' AS [Pat_lastName] 
						   ,'' AS [Pat_zipCode] 
						   ,'' AS [Pat_address] 
						   ,'' AS [Pat_city] 
						   ,'' AS [Pat_state] 
						   ,CAST(0 AS BIT)	AS [Pat_status]
					SELECT @ParametroSalida = 0;
				END	
			END 
			-- --------------------------------------------------------------------------
			IF (@Pat_zipCode IS NOT NULL) -- Si el código postal no es nulo
			BEGIN 
				SELECT @CantidadCoincidenciasCamposCriticos = COUNT(*) 
				FROM	[Patient] 
				WHERE   LTRIM(RTRIM([Pat_state]))	 	= @Pat_state				AND
						LTRIM(RTRIM([Pat_city]))		= @Pat_city					AND
						LTRIM(RTRIM([Pat_zipCode]))		= @Pat_zipCode				AND
						(LTRIM(RTRIM([Pat_firstName]))	LIKE '%'+@Pat_firstName+'%' OR
						 LTRIM(RTRIM([Pat_lastName]))	LIKE '%'+@Pat_lastName+'%'	OR
						 CHARINDEX([Pat_firstName], @Pat_firstName) > 0				OR
						 CHARINDEX([Pat_lastName], @Pat_lastName) > 0) 			

				IF (@CantidadCoincidenciasCamposCriticos > 0) 
				BEGIN
					SELECT  [Pat_code] 
						   ,[Pat_firstName] 
						   ,[Pat_lastName] 
						   ,[Pat_zipCode] 
						   ,[Pat_address] 
						   ,[Pat_city] 
						   ,[Pat_state]
						   ,[Pat_status] 
					FROM	[Patient]
					WHERE   
						  LTRIM(RTRIM([Pat_state]))	 	= @Pat_state					AND
						  LTRIM(RTRIM([Pat_city]))		= @Pat_city						AND
						  LTRIM(RTRIM([Pat_zipCode]))	= @Pat_zipCode					AND
						  (LTRIM(RTRIM([Pat_firstName]))	LIKE '%'+@Pat_firstName+'%' OR
						   LTRIM(RTRIM([Pat_lastName]))	LIKE '%'+@Pat_lastName+'%'		OR
						   CHARINDEX([Pat_firstName], @Pat_firstName) > 0				OR
						   CHARINDEX([Pat_lastName], @Pat_lastName) > 0)
					ORDER BY Pat_lastName ASC

					SELECT @ParametroSalida = 1;
				END			
				ELSE		
				BEGIN
					SELECT  0  AS [Pat_code]
						   ,'' AS [Pat_firstName]
						   ,'' AS [Pat_lastName] 
						   ,'' AS [Pat_zipCode] 
						   ,'' AS [Pat_address] 
						   ,'' AS [Pat_city] 
						   ,'' AS [Pat_state] 
						   ,CAST(0 AS BIT)	AS [Pat_status]
					SELECT @ParametroSalida = 0;
				END
			END
		END
		ELSE -- ********** CUANDO ES UNA ACTUALIZACION **********
		BEGIN 
			IF (@Pat_zipCode IS NULL) -- Si el código postal es nulo
			BEGIN 
				SELECT @CantidadCoincidenciasCamposCriticos = COUNT(*) 
				FROM	[Patient] 
				WHERE   LTRIM(RTRIM([Pat_state]))	  = @Pat_state				   AND Pat_code <> @Pat_code	AND
						LTRIM(RTRIM([Pat_city]))	  = @Pat_city				   AND Pat_code <> @Pat_code	AND
						(LTRIM(RTRIM([Pat_firstName])) LIKE '%'+@Pat_firstName+'%' AND Pat_code <> @Pat_code	OR
						 LTRIM(RTRIM([Pat_lastName]))  LIKE '%'+@Pat_lastName+'%'  AND Pat_code <> @Pat_code	OR
						 CHARINDEX([Pat_firstName], @Pat_firstName) > 0			   AND Pat_code <> @Pat_code	OR
						 CHARINDEX([Pat_lastName], @Pat_lastName) > 0			   AND Pat_code <> @Pat_code)

				IF (@CantidadCoincidenciasCamposCriticos > 0) 
				BEGIN
					SELECT  [Pat_code] 
						   ,[Pat_firstName] 
						   ,[Pat_lastName] 
						   ,[Pat_zipCode] 
						   ,[Pat_address] 
						   ,[Pat_city] 
						   ,[Pat_state]
						   ,[Pat_status] 
					FROM	[Patient]
				WHERE   LTRIM(RTRIM([Pat_state]))	  = @Pat_state				   AND Pat_code <> @Pat_code	AND
						LTRIM(RTRIM([Pat_city]))	  = @Pat_city				   AND Pat_code <> @Pat_code	AND
						(LTRIM(RTRIM([Pat_firstName])) LIKE '%'+@Pat_firstName+'%' AND Pat_code <> @Pat_code	OR
						 LTRIM(RTRIM([Pat_lastName]))  LIKE '%'+@Pat_lastName+'%'  AND Pat_code <> @Pat_code	OR
						 CHARINDEX([Pat_firstName], @Pat_firstName) > 0			   AND Pat_code <> @Pat_code	OR
						 CHARINDEX([Pat_lastName], @Pat_lastName) > 0			   AND Pat_code <> @Pat_code)

					ORDER BY Pat_lastName ASC

					SELECT @ParametroSalida = 1;			
				END			
				ELSE		
				BEGIN
					SELECT  0  AS [Pat_code]					
						   ,'' AS [Pat_firstName]
						   ,'' AS [Pat_lastName] 
						   ,'' AS [Pat_zipCode] 
						   ,'' AS [Pat_address] 
						   ,'' AS [Pat_city] 
						   ,'' AS [Pat_state] 
						   ,CAST(0 AS BIT)	AS [Pat_status]
					SELECT @ParametroSalida = 0;
				END	
			END 
			-- --------------------------------------------------------------------------
			IF (@Pat_zipCode IS NOT NULL) -- Si el código postal no es nulo
			BEGIN 
				SELECT @CantidadCoincidenciasCamposCriticos = COUNT(*) 
				FROM	[Patient] 
				WHERE   LTRIM(RTRIM([Pat_state]))	 	= @Pat_state				AND Pat_code <> @Pat_code	AND
						LTRIM(RTRIM([Pat_city]))		= @Pat_city					AND Pat_code <> @Pat_code	AND
						LTRIM(RTRIM([Pat_zipCode]))		= @Pat_zipCode				AND Pat_code <> @Pat_code	AND
						(LTRIM(RTRIM([Pat_firstName]))	LIKE '%'+@Pat_firstName+'%' AND Pat_code <> @Pat_code	OR
						 LTRIM(RTRIM([Pat_lastName]))	LIKE '%'+@Pat_lastName+'%' 	AND Pat_code <> @Pat_code	OR
						 CHARINDEX([Pat_firstName], @Pat_firstName) > 0			    AND Pat_code <> @Pat_code	OR
						 CHARINDEX([Pat_lastName], @Pat_lastName) > 0			    AND Pat_code <> @Pat_code)

				IF (@CantidadCoincidenciasCamposCriticos > 0) 
				BEGIN
					SELECT  [Pat_code] 
						   ,[Pat_firstName] 
						   ,[Pat_lastName] 
						   ,[Pat_zipCode] 
						   ,[Pat_address] 
						   ,[Pat_city] 
						   ,[Pat_state]
						   ,[Pat_status] 
					FROM	[Patient]
					WHERE   LTRIM(RTRIM([Pat_state]))	 	= @Pat_state				AND Pat_code <> @Pat_code	AND
							LTRIM(RTRIM([Pat_city]))		= @Pat_city					AND Pat_code <> @Pat_code	AND
							LTRIM(RTRIM([Pat_zipCode]))		= @Pat_zipCode				AND Pat_code <> @Pat_code	AND
							(LTRIM(RTRIM([Pat_firstName]))	LIKE '%'+@Pat_firstName+'%' AND Pat_code <> @Pat_code	OR
							 LTRIM(RTRIM([Pat_lastName]))	LIKE '%'+@Pat_lastName+'%' 	AND Pat_code <> @Pat_code	OR
							 CHARINDEX([Pat_firstName], @Pat_firstName) > 0			    AND Pat_code <> @Pat_code	OR
							 CHARINDEX([Pat_lastName], @Pat_lastName) > 0			    AND Pat_code <> @Pat_code)

					ORDER BY Pat_lastName ASC

					SELECT @ParametroSalida = 1;
				END			
				ELSE		
				BEGIN
					SELECT  0  AS [Pat_code]
						   ,'' AS [Pat_firstName]
						   ,'' AS [Pat_lastName] 
						   ,'' AS [Pat_zipCode] 
						   ,'' AS [Pat_address] 
						   ,'' AS [Pat_city] 
						   ,'' AS [Pat_state] 
						   ,CAST(0 AS BIT)	AS [Pat_status]
					SELECT @ParametroSalida = 0;
				END
			END
		END
	END
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_FIND_HOMONYM_MEDICALS','P') IS NOT NULL)
	DROP PROCEDURE SP_FIND_HOMONYM_MEDICALS 
GO
CREATE PROCEDURE SP_FIND_HOMONYM_MEDICALS
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/15/2016.
-- System			:	Billing.
-- Program			:	Medical.
-- Description		:	Check homonyms.
-- Change Log		:
--=============================================
(
 @ParametroSalida BIT OUTPUT
,@Med_code		  INT
,@Med_firstName   VARCHAR(100) = 'gabriel'
,@Med_lastName	  VARCHAR(100) = 'gil'
,@Med_zipCode	  VARCHAR(5)   = null
,@Med_city		  VARCHAR(50)  = 'MIAMI'	
,@Med_state		  VARCHAR(50)  = 'FL'	
)
AS
BEGIN
	DECLARE @CantidadCoincidenciasCamposCriticos INT = 0;
	
	IF (@Med_code = 0) -- ********** CUANDO ES UNA INSERCION **********
	BEGIN
		IF (@Med_zipCode IS NULL) -- Si el código postal es nulo
		BEGIN 
			SELECT @CantidadCoincidenciasCamposCriticos = COUNT(*) 
			FROM	[Medical] 
			WHERE   LTRIM(RTRIM([Med_state]))	 	= @Med_state				AND
					LTRIM(RTRIM([Med_city]))		= @Med_city					AND
					(LTRIM(RTRIM([Med_firstName]))	LIKE '%'+@Med_firstName+'%' OR
					 LTRIM(RTRIM([Med_lastName]))	LIKE '%'+@Med_lastName+'%'	OR
					 CHARINDEX([Med_firstName], @Med_firstName) > 0			    OR
					 CHARINDEX([Med_lastName], @Med_lastName) > 0)

			IF (@CantidadCoincidenciasCamposCriticos > 0) 
			BEGIN
				SELECT   [Med_code]
				        ,[Med_firstName]
					    ,[Med_lastName] 
						,[Med_zipCode]
						,[Med_address] 
						,[Med_city]
						,[Med_state] 
						,[Med_status] 					   
				FROM	 [Medical]
			WHERE   LTRIM(RTRIM([Med_state]))	 	= @Med_state				AND
					LTRIM(RTRIM([Med_city]))		= @Med_city					AND
					(LTRIM(RTRIM([Med_firstName]))	LIKE '%'+@Med_firstName+'%' OR
					 LTRIM(RTRIM([Med_lastName]))	LIKE '%'+@Med_lastName+'%'	OR
					 CHARINDEX([Med_firstName], @Med_firstName) > 0			    OR
					 CHARINDEX([Med_lastName], @Med_lastName) > 0)
				ORDER BY Med_lastName ASC

				SELECT @ParametroSalida = 1;			
			END			
			ELSE		
			BEGIN
				SELECT  0				AS [Med_code]
					   ,NULL			AS [Med_firstName]
					   ,NULL			AS [Med_lastName] 
					   ,NULL			AS [Med_zipCode]
					   ,NULL			AS [Med_address] 
					   ,NULL			AS [Med_city]
					   ,NULL			AS [Med_state] 
					   ,CAST(0 AS BIT)	AS [Med_status]
				SELECT @ParametroSalida = 0;
			END	
		END 
		-- --------------------------------------------------------------------------
		IF (@Med_zipCode IS NOT NULL) -- Si el código postal no es nulo
		BEGIN 
			SELECT @CantidadCoincidenciasCamposCriticos = COUNT(*) 
			FROM	[Medical] 
			WHERE   LTRIM(RTRIM([Med_state]))	 	= @Med_state				AND
					LTRIM(RTRIM([Med_city]))		= @Med_city					AND
					LTRIM(RTRIM([Med_zipCode]))		= @Med_zipCode				AND
					(LTRIM(RTRIM([Med_firstName]))	LIKE '%'+@Med_firstName+'%' OR
					 LTRIM(RTRIM([Med_lastName]))	LIKE '%'+@Med_lastName+'%'	OR
					 CHARINDEX([Med_firstName], @Med_firstName) > 0			    OR
					 CHARINDEX([Med_lastName], @Med_lastName) > 0)			

			IF (@CantidadCoincidenciasCamposCriticos > 0) 
			BEGIN
				SELECT   [Med_code]
						,[Med_firstName]
					    ,[Med_lastName] 
						,[Med_zipCode]
						,[Med_address] 
						,[Med_city]
						,[Med_state] 
						,[Med_status] 					   
						FROM	[Medical]
				WHERE   
					  LTRIM(RTRIM([Med_state]))	 	= @Med_state					AND
					  LTRIM(RTRIM([Med_city]))		= @Med_city						AND
					  LTRIM(RTRIM([Med_zipCode]))	= @Med_zipCode					AND
					  (LTRIM(RTRIM([Med_firstName]))	LIKE '%'+@Med_firstName+'%' OR
					   LTRIM(RTRIM([Med_lastName]))	LIKE '%'+@Med_lastName+'%'		OR
					   CHARINDEX([Med_firstName], @Med_firstName) > 0			    OR
					   CHARINDEX([Med_lastName], @Med_lastName) > 0)
				ORDER BY Med_lastName ASC

				SELECT @ParametroSalida = 1;
			END			
			ELSE		
			BEGIN
				SELECT  0		 AS [Med_code]
					   ,NULL     AS [Med_firstName]
					   ,NULL	 AS [Med_lastName] 
					   ,NULL	 AS [Med_zipCode]
					   ,NULL	 AS [Med_address] 
					   ,NULL	 AS [Med_city]
					   ,NULL	 AS [Med_state] 
					   ,CAST(0 AS BIT)	AS [Med_status]
				SELECT @ParametroSalida = 0;
			END
		END

	END
	ELSE -- ********** CUANDO ES UNA ACTUALIZACION **********
	BEGIN
		IF (@Med_zipCode IS NULL) -- Si el código postal es nulo
		BEGIN 
			SELECT @CantidadCoincidenciasCamposCriticos = COUNT(*) 
			FROM	[Medical] 
			WHERE   LTRIM(RTRIM([Med_state]))	 	= @Med_state				AND Med_code <> @Med_code AND
					LTRIM(RTRIM([Med_city]))		= @Med_city					AND Med_code <> @Med_code AND
					(LTRIM(RTRIM([Med_firstName]))	LIKE '%'+@Med_firstName+'%' AND Med_code <> @Med_code OR
					 LTRIM(RTRIM([Med_lastName]))	LIKE '%'+@Med_lastName+'%' 	AND Med_code <> @Med_code OR
					 CHARINDEX([Med_firstName], @Med_firstName) > 0				AND Med_code <> @Med_code OR
					 CHARINDEX([Med_lastName], @Med_lastName) > 0	            AND Med_code <> @Med_code)

			IF (@CantidadCoincidenciasCamposCriticos > 0) 
			BEGIN
				SELECT   [Med_code]
					    ,[Med_firstName]
					    ,[Med_lastName] 
						,[Med_zipCode]
						,[Med_address] 
						,[Med_city]
						,[Med_state] 
						,[Med_status] 					   
				FROM	[Medical]
				WHERE   
					  LTRIM(RTRIM([Med_state]))	 	= @Med_state				    AND Med_code <> @Med_code AND
					  LTRIM(RTRIM([Med_city]))		= @Med_city					    AND Med_code <> @Med_code AND
					  (LTRIM(RTRIM([Med_firstName]))	LIKE '%'+@Med_firstName+'%' AND Med_code <> @Med_code OR
					   LTRIM(RTRIM([Med_lastName]))	LIKE '%'+@Med_lastName+'%' 	    AND Med_code <> @Med_code OR
					   CHARINDEX([Med_firstName], @Med_firstName) > 0			    AND Med_code <> @Med_code OR
					   CHARINDEX([Med_lastName], @Med_lastName) > 0	                AND Med_code <> @Med_code)
				ORDER BY Med_lastName ASC

				SELECT @ParametroSalida = 1;			
			END			
			ELSE		
			BEGIN
				SELECT  0		 AS [Med_code]
					   ,NULL	 AS [Med_firstName]
					   ,NULL	 AS [Med_lastName] 
					   ,NULL	 AS [Med_zipCode]
					   ,NULL	 AS [Med_address] 
					   ,NULL	 AS [Med_city]
					   ,NULL	 AS [Med_state] 				
					   ,CAST(0 AS BIT)	AS [Med_status]
				SELECT @ParametroSalida = 0;
			END	
		END 
		-- --------------------------------------------------------------------------
		IF (@Med_zipCode IS NOT NULL) -- Si el código postal no es nulo
		BEGIN 
			SELECT @CantidadCoincidenciasCamposCriticos = COUNT(*) 
			FROM	[Medical] 
			WHERE   LTRIM(RTRIM([Med_state]))	 	= @Med_state				AND Med_code <> @Med_code AND
					LTRIM(RTRIM([Med_city]))		= @Med_city					AND Med_code <> @Med_code AND
					LTRIM(RTRIM([Med_zipCode]))		= @Med_zipCode				AND Med_code <> @Med_code AND
					(LTRIM(RTRIM([Med_firstName]))	LIKE '%'+@Med_firstName+'%' AND Med_code <> @Med_code OR
					 LTRIM(RTRIM([Med_lastName]))	LIKE '%'+@Med_lastName+'%'  AND Med_code <> @Med_code OR
					 CHARINDEX([Med_firstName], @Med_firstName) > 0			    AND Med_code <> @Med_code OR
					 CHARINDEX([Med_lastName], @Med_lastName) > 0	            AND Med_code <> @Med_code) 

			IF (@CantidadCoincidenciasCamposCriticos > 0) 
			BEGIN
				SELECT   [Med_code] 
					    ,[Med_firstName]
					    ,[Med_lastName] 
						,[Med_zipCode]
						,[Med_address] 
						,[Med_city]
						,[Med_state] 
						,[Med_status] 					   
				FROM	[Medical]
				WHERE   
					  LTRIM(RTRIM([Med_state]))	 	= @Med_state				    AND Med_code <> @Med_code AND
					  LTRIM(RTRIM([Med_city]))		= @Med_city					    AND Med_code <> @Med_code AND
					  LTRIM(RTRIM([Med_zipCode]))	= @Med_zipCode				    AND Med_code <> @Med_code AND
					  (LTRIM(RTRIM([Med_firstName]))	LIKE '%'+@Med_firstName+'%' AND Med_code <> @Med_code OR
					   LTRIM(RTRIM([Med_lastName]))	LIKE '%'+@Med_lastName+'%'      AND Med_code <> @Med_code OR
					   CHARINDEX([Med_firstName], @Med_firstName) > 0			    AND Med_code <> @Med_code OR
					   CHARINDEX([Med_lastName], @Med_lastName) > 0					AND Med_code <> @Med_code)
				ORDER BY Med_lastName ASC

				SELECT @ParametroSalida = 1;
			END			
			ELSE		
			BEGIN
				SELECT  0		 AS [Med_code]
					   ,NULL	 AS [Med_firstName]
					   ,NULL	 AS [Med_lastName] 
					   ,NULL	 AS [Med_zipCode]
					   ,NULL	 AS [Med_address] 
					   ,NULL	 AS [Med_city]
					   ,NULL	 AS [Med_state] 
					   ,CAST(0 AS BIT)	AS [Med_status]
				SELECT @ParametroSalida = 0;
			END
		END
	END
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_FIND_HOMONYM_INSURERS','P') IS NOT NULL)
	DROP PROCEDURE SP_FIND_HOMONYM_INSURERS 
GO
CREATE PROCEDURE SP_FIND_HOMONYM_INSURERS
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/15/2016.
-- System			:	Billing.
-- Program			:	Insurer.
-- Description		:	Check homonyms.
-- Change Log		:
--=============================================
(
 @ParametroSalida BIT OUTPUT
,@Ins_code		  INT
,@Ins_name		  VARCHAR(100) = 'gabriel'
,@Ins_zipCode	  VARCHAR(5)   = null
,@Ins_city		  VARCHAR(50)  = 'MIAMI'	
,@Ins_state		  VARCHAR(50)  = 'FL'	
)
AS
BEGIN
	DECLARE @CantidadCoincidenciasCamposCriticos INT = 0;
	
	IF (@Ins_code = 0) -- ********** CUANDO ES UNA INSERCION **********
	BEGIN
		IF (@Ins_zipCode IS NULL) -- Si el código postal es nulo
		BEGIN 
			SELECT @CantidadCoincidenciasCamposCriticos = COUNT(*) 
			FROM	[Insurer] 
			WHERE   LTRIM(RTRIM([Ins_state]))	 	= @Ins_state		AND
					LTRIM(RTRIM([Ins_city]))		= @Ins_city			AND
					(LTRIM(RTRIM([Ins_name]))	LIKE '%'+@Ins_name+'%'	OR
					 CHARINDEX([Ins_name], @Ins_name) > 0)

			IF (@CantidadCoincidenciasCamposCriticos > 0) 
			BEGIN
				SELECT  [Ins_code] 
					   ,[Ins_name] 
					   ,[Ins_zipCode] 
					   ,[Ins_address] 
					   ,[Ins_city] 
					   ,[Ins_state] 
					   ,[Ins_status] 
				FROM   [Insurer]
				WHERE   
					  LTRIM(RTRIM([Ins_state]))	 	= @Ins_state		AND
					  LTRIM(RTRIM([Ins_city]))		= @Ins_city			AND
					(LTRIM(RTRIM([Ins_name]))	LIKE '%'+@Ins_name+'%'	OR
					 CHARINDEX([Ins_name], @Ins_name) > 0)
				ORDER BY Ins_name ASC

				SELECT @ParametroSalida = 1;			
			END			
			ELSE		
			BEGIN
				SELECT  0 AS [Ins_code] 
					   ,NULL AS [Ins_name] 
					   ,NULL AS [Ins_zipCode]
					   ,NULL AS [Ins_address]
					   ,NULL AS [Ins_city] 
					   ,NULL AS [Ins_state] 
					   ,CAST(0 AS BIT) AS [Ins_status] 
				SELECT @ParametroSalida = 0;
			END	
		END 
		-- --------------------------------------------------------------------------
		IF (@Ins_zipCode IS NOT NULL) -- Si el código postal no es nulo
		BEGIN 
			SELECT @CantidadCoincidenciasCamposCriticos = COUNT(*) 
			FROM	[Insurer] 
			WHERE   LTRIM(RTRIM([Ins_state]))	 	= @Ins_state		AND
					LTRIM(RTRIM([Ins_city]))		= @Ins_city			AND
					LTRIM(RTRIM([Ins_zipCode]))		= @Ins_zipCode		AND
					(LTRIM(RTRIM([Ins_name]))	LIKE '%'+@Ins_name+'%'	OR
					 CHARINDEX([Ins_name], @Ins_name) > 0)

			IF (@CantidadCoincidenciasCamposCriticos > 0) 
			BEGIN
				SELECT   [Ins_code] 
					    ,[Ins_name] 
						,[Ins_zipCode] 
						,[Ins_address] 
						,[Ins_city] 
						,[Ins_state] 
						,[Ins_status] 
				FROM	[Insurer]
				WHERE   
					  LTRIM(RTRIM([Ins_state]))	 	= @Ins_state		AND
					  LTRIM(RTRIM([Ins_city]))		= @Ins_city			AND
					  LTRIM(RTRIM([Ins_zipCode]))	= @Ins_zipCode		AND
					(LTRIM(RTRIM([Ins_name]))	LIKE '%'+@Ins_name+'%'	OR
					 CHARINDEX([Ins_name], @Ins_name) > 0)
				ORDER BY Ins_name ASC

				SELECT @ParametroSalida = 1;
			END			
			ELSE		
			BEGIN
				SELECT  0 AS [Ins_code] 
					   ,NULL AS [Ins_name] 
					   ,NULL AS [Ins_zipCode]
					   ,NULL AS [Ins_address]
					   ,NULL AS [Ins_city] 
					   ,NULL AS [Ins_state] 
					   ,CAST(0 AS BIT) AS [Ins_status] 
				SELECT @ParametroSalida = 0;
			END
		END
	END
	ELSE -- ********** CUANDO ES UNA ACTUALIZACION **********
	BEGIN
		IF (@Ins_zipCode IS NULL) -- Si el código postal es nulo
		BEGIN 
			SELECT @CantidadCoincidenciasCamposCriticos = COUNT(*) 
			FROM	[Insurer] 
			WHERE   LTRIM(RTRIM([Ins_state]))	 	= @Ins_state		AND Ins_code <> @Ins_code	AND
					LTRIM(RTRIM([Ins_city]))		= @Ins_city			AND Ins_code <> @Ins_code	AND
					(LTRIM(RTRIM([Ins_name]))	LIKE '%'+@Ins_name+'%'  AND Ins_code <> @Ins_code	OR
					 CHARINDEX([Ins_name], @Ins_name) > 0               AND Ins_code <> @Ins_code)

			IF (@CantidadCoincidenciasCamposCriticos > 0) 
			BEGIN
				SELECT   [Ins_code] 
					    ,[Ins_name] 
						,[Ins_zipCode] 
						,[Ins_address] 
						,[Ins_city] 
						,[Ins_state] 
						,[Ins_status] 
				FROM	[Insurer]
				WHERE   
					  LTRIM(RTRIM([Ins_state]))	 	= @Ins_state		AND Ins_code <> @Ins_code	AND
					  LTRIM(RTRIM([Ins_city]))		= @Ins_city			AND Ins_code <> @Ins_code	AND
					(LTRIM(RTRIM([Ins_name]))	LIKE '%'+@Ins_name+'%'	AND Ins_code <> @Ins_code   OR
					 CHARINDEX([Ins_name], @Ins_name) > 0               AND Ins_code <> @Ins_code)
				ORDER BY Ins_name ASC

				SELECT @ParametroSalida = 1;			
			END			
			ELSE		
			BEGIN
				SELECT  0 AS [Ins_code] 
					   ,NULL AS [Ins_name] 
					   ,NULL AS [Ins_zipCode]
					   ,NULL AS [Ins_address]
					   ,NULL AS [Ins_city] 
					   ,NULL AS [Ins_state] 
					   ,CAST(0 AS BIT) AS [Ins_status] 
				SELECT @ParametroSalida = 0;
			END	
		END 
		-- --------------------------------------------------------------------------
		IF (@Ins_zipCode IS NOT NULL) -- Si el código postal no es nulo
		BEGIN 
			SELECT @CantidadCoincidenciasCamposCriticos = COUNT(*) 
			FROM	[Insurer] 
			WHERE   LTRIM(RTRIM([Ins_state]))	 	= @Ins_state		AND Ins_code <> @Ins_code AND
					LTRIM(RTRIM([Ins_city]))		= @Ins_city			AND Ins_code <> @Ins_code AND
					LTRIM(RTRIM([Ins_zipCode]))		= @Ins_zipCode		AND Ins_code <> @Ins_code AND
					(LTRIM(RTRIM([Ins_name]))	LIKE '%'+@Ins_name+'%'	AND Ins_code <> @Ins_code OR
					 CHARINDEX([Ins_name], @Ins_name) > 0)

			IF (@CantidadCoincidenciasCamposCriticos > 0) 
			BEGIN
				SELECT   [Ins_code] 
					    ,[Ins_name] 
						,[Ins_zipCode] 
						,[Ins_address] 
						,[Ins_city] 
						,[Ins_state] 
						,[Ins_status] 
				FROM	[Insurer]
				WHERE   
					  LTRIM(RTRIM([Ins_state]))	 	= @Ins_state		AND Ins_code <> @Ins_code AND
					  LTRIM(RTRIM([Ins_city]))		= @Ins_city			AND Ins_code <> @Ins_code AND
					  LTRIM(RTRIM([Ins_zipCode]))	= @Ins_zipCode		AND Ins_code <> @Ins_code AND
					(LTRIM(RTRIM([Ins_name]))	LIKE '%'+@Ins_name+'%'	AND Ins_code <> @Ins_code OR
					 CHARINDEX([Ins_name], @Ins_name) > 0)
				ORDER BY Ins_name ASC

				SELECT @ParametroSalida = 1;
			END			
			ELSE		
			BEGIN
				SELECT  0 AS [Ins_code] 
					   ,NULL AS [Ins_name] 
					   ,NULL AS [Ins_zipCode]
					   ,NULL AS [Ins_address]
					   ,NULL AS [Ins_city] 
					   ,NULL AS [Ins_state] 
					   ,CAST(0 AS BIT) AS [Ins_status] 
				SELECT @ParametroSalida = 0;
			END
		END
	END
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_FIND_HOMONYM_ATTORNEYS','P') IS NOT NULL)
	DROP PROCEDURE SP_FIND_HOMONYM_ATTORNEYS 
GO
CREATE PROCEDURE SP_FIND_HOMONYM_ATTORNEYS
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/15/2016.
-- System			:	Billing.
-- Program			:	Attorney.
-- Description		:	Check homonyms.
-- Change Log		:
--=============================================
(
 @ParametroSalida BIT OUTPUT
,@Att_code		  INT
,@Att_firstName   VARCHAR(100) = 'gabriel'
,@Att_lastName	  VARCHAR(100) = 'gil'
,@Att_zipCode	  VARCHAR(5)   = null
,@Att_city		  VARCHAR(50)  = 'MIAMI'	
,@Att_state		  VARCHAR(50)  = 'FL'	
)
AS
BEGIN
	DECLARE @CantidadCoincidenciasCamposCriticos INT = 0;
	
	IF (@Att_code = 0) -- ********** CUANDO ES UNA INSERCION **********
	BEGIN
		IF (@Att_zipCode IS NULL) -- Si el código postal es nulo
		BEGIN 
			SELECT @CantidadCoincidenciasCamposCriticos = COUNT(*) 
			FROM	[Attorney] 
			WHERE   LTRIM(RTRIM([Att_state]))	 	= @Att_state				AND
					LTRIM(RTRIM([Att_city]))		= @Att_city					AND
					(LTRIM(RTRIM([Att_firstName]))	LIKE '%'+@Att_firstName+'%' OR
					 LTRIM(RTRIM([Att_lastName]))	LIKE '%'+@Att_lastName+'%'  OR
					 CHARINDEX([Att_firstName], @Att_firstName) > 0			    OR
					 CHARINDEX([Att_lastName], @Att_lastName) > 0)

			IF (@CantidadCoincidenciasCamposCriticos > 0) 
			BEGIN
				SELECT   [Att_code]
					    ,[Att_firstName] 
						,[Att_lastName] 
						,[Att_zipCode] 
						,[Att_address] 
						,[Att_city] 
						,[Att_state] 
						,[Att_status] 
				FROM	[Attorney]
				WHERE   
					  LTRIM(RTRIM([Att_state]))	 	= @Att_state				    AND
					  LTRIM(RTRIM([Att_city]))		= @Att_city					    AND
					  (LTRIM(RTRIM([Att_firstName]))	LIKE '%'+@Att_firstName+'%' OR
					   LTRIM(RTRIM([Att_lastName]))	LIKE '%'+@Att_lastName+'%'      OR
					   CHARINDEX([Att_firstName], @Att_firstName) > 0			    OR
					   CHARINDEX([Att_lastName], @Att_lastName) > 0) 
				ORDER BY Att_lastName ASC

				SELECT @ParametroSalida = 1;			
			END			
			ELSE		
			BEGIN
				SELECT  0	 AS [Att_code]
					   ,NULL AS [Att_firstName]
					   ,NULL AS [Att_lastName] 
					   ,NULL AS [Att_zipCode] 
					   ,NULL AS [Att_address] 
					   ,NULL AS [Att_city] 
					   ,NULL AS [Att_state] 
					   ,CAST(0 AS BIT) AS [Att_status] 
				SELECT @ParametroSalida = 0;
			END	
		END 
		-- --------------------------------------------------------------------------
		IF (@Att_zipCode IS NOT NULL) -- Si el código postal no es nulo
		BEGIN 
			SELECT @CantidadCoincidenciasCamposCriticos = COUNT(*) 
			FROM	[Attorney] 
			WHERE   LTRIM(RTRIM([Att_state]))	 	= @Att_state				AND
					LTRIM(RTRIM([Att_city]))		= @Att_city					AND
					LTRIM(RTRIM([Att_zipCode]))		= @Att_zipCode				AND
					(LTRIM(RTRIM([Att_firstName]))	LIKE '%'+@Att_firstName+'%' OR
					 LTRIM(RTRIM([Att_lastName]))	LIKE '%'+@Att_lastName+'%'  OR
					 CHARINDEX([Att_firstName], @Att_firstName) > 0			    OR
					 CHARINDEX([Att_lastName], @Att_lastName) > 0) 			

			IF (@CantidadCoincidenciasCamposCriticos > 0) 
			BEGIN
				SELECT   [Att_code]
					    ,[Att_firstName] 
						,[Att_lastName] 
						,[Att_zipCode] 
						,[Att_address] 
						,[Att_city] 
						,[Att_state] 
						,[Att_status] 
				FROM	[Attorney]
				WHERE   
					  LTRIM(RTRIM([Att_state]))	 	= @Att_state				    AND
					  LTRIM(RTRIM([Att_city]))		= @Att_city					    AND
					  LTRIM(RTRIM([Att_zipCode]))	= @Att_zipCode				    AND
					  (LTRIM(RTRIM([Att_firstName]))	LIKE '%'+@Att_firstName+'%' OR
					   LTRIM(RTRIM([Att_lastName]))	LIKE '%'+@Att_lastName+'%'      OR
					   CHARINDEX([Att_firstName], @Att_firstName) > 0			    OR
					   CHARINDEX([Att_lastName], @Att_lastName) > 0)
				ORDER BY Att_lastName ASC

				SELECT @ParametroSalida = 1;
			END			
			ELSE		
			BEGIN
				SELECT  0	 AS [Att_code]
					   ,NULL AS [Att_firstName]
					   ,NULL AS [Att_lastName] 
					   ,NULL AS [Att_zipCode] 
					   ,NULL AS [Att_address] 
					   ,NULL AS [Att_city] 
					   ,NULL AS [Att_state] 
					   ,CAST(0 AS BIT) AS [Att_status] 
				SELECT @ParametroSalida = 0;
			END
		END
	END
	ELSE	-- ********** CUANDO ES UNA ACTUALIZACION **********
	BEGIN
		IF (@Att_zipCode IS NULL) -- Si el código postal es nulo
		BEGIN 
			SELECT @CantidadCoincidenciasCamposCriticos = COUNT(*) 
			FROM	[Attorney] 
			WHERE   LTRIM(RTRIM([Att_state]))	 	= @Att_state				AND Att_code <> @Att_code AND
					LTRIM(RTRIM([Att_city]))		= @Att_city					AND Att_code <> @Att_code AND
					(LTRIM(RTRIM([Att_firstName]))	LIKE '%'+@Att_firstName+'%' AND Att_code <> @Att_code OR
					 LTRIM(RTRIM([Att_lastName]))	LIKE '%'+@Att_lastName+'%' 	AND Att_code <> @Att_code OR
					 CHARINDEX([Att_firstName], @Att_firstName) > 0			    AND Att_code <> @Att_code OR
					 CHARINDEX([Att_lastName], @Att_lastName) > 0				AND Att_code <> @Att_code)
					
			IF (@CantidadCoincidenciasCamposCriticos > 0) 
			BEGIN
				SELECT   [Att_code]
					    ,[Att_firstName] 
						,[Att_lastName] 
						,[Att_zipCode] 
						,[Att_address] 
						,[Att_city] 
						,[Att_state] 
						,[Att_status] 
				FROM	[Attorney]
				WHERE   
					  LTRIM(RTRIM([Att_state]))	 	= @Att_state				    AND Att_code <> @Att_code AND
					  LTRIM(RTRIM([Att_city]))		= @Att_city					    AND Att_code <> @Att_code AND
					  (LTRIM(RTRIM([Att_firstName]))	LIKE '%'+@Att_firstName+'%' AND Att_code <> @Att_code OR
					   LTRIM(RTRIM([Att_lastName]))	LIKE '%'+@Att_lastName+'%' 	    AND Att_code <> @Att_code OR
					   CHARINDEX([Att_firstName], @Att_firstName) > 0			    AND Att_code <> @Att_code OR
					   CHARINDEX([Att_lastName], @Att_lastName) > 0		            AND Att_code <> @Att_code)
				ORDER BY Att_lastName ASC

				SELECT @ParametroSalida = 1;			
			END			
			ELSE		
			BEGIN
				SELECT  0	 AS [Att_code]
					   ,NULL AS [Att_firstName]
					   ,NULL AS [Att_lastName] 
					   ,NULL AS [Att_zipCode] 
					   ,NULL AS [Att_address] 
					   ,NULL AS [Att_city] 
					   ,NULL AS [Att_state] 
					   ,CAST(0 AS BIT) AS [Att_status] 
				SELECT @ParametroSalida = 0;
			END	
		END 
		-- --------------------------------------------------------------------------
		IF (@Att_zipCode IS NOT NULL) -- Si el código postal no es nulo
		BEGIN 
			SELECT @CantidadCoincidenciasCamposCriticos = COUNT(*) 
			FROM	[Attorney] 
			WHERE   LTRIM(RTRIM([Att_state]))	 	= @Att_state				AND Att_code <> @Att_code AND
					LTRIM(RTRIM([Att_city]))		= @Att_city					AND Att_code <> @Att_code AND
					LTRIM(RTRIM([Att_zipCode]))		= @Att_zipCode				AND Att_code <> @Att_code AND
					(LTRIM(RTRIM([Att_firstName]))	LIKE '%'+@Att_firstName+'%' AND Att_code <> @Att_code OR
					 LTRIM(RTRIM([Att_lastName]))	LIKE '%'+@Att_lastName+'%' 	AND Att_code <> @Att_code OR
					 CHARINDEX([Att_firstName], @Att_firstName) > 0			    AND Att_code <> @Att_code OR
					 CHARINDEX([Att_lastName], @Att_lastName) > 0               AND Att_code <> @Att_code)

			IF (@CantidadCoincidenciasCamposCriticos > 0) 
			BEGIN
				SELECT   [Att_code]
					    ,[Att_firstName] 
						,[Att_lastName] 
						,[Att_zipCode] 
						,[Att_address] 
						,[Att_city] 
						,[Att_state] 
						,[Att_status] 
				FROM	[Attorney]
				WHERE   
					  LTRIM(RTRIM([Att_state]))	 	= @Att_state					AND Att_code <> @Att_code AND
					  LTRIM(RTRIM([Att_city]))		= @Att_city						AND Att_code <> @Att_code AND
					  LTRIM(RTRIM([Att_zipCode]))	= @Att_zipCode					AND Att_code <> @Att_code AND
					  (LTRIM(RTRIM([Att_firstName]))	LIKE '%'+@Att_firstName+'%' AND Att_code <> @Att_code OR
					   LTRIM(RTRIM([Att_lastName]))	LIKE '%'+@Att_lastName+'%' 		AND Att_code <> @Att_code OR
					   CHARINDEX([Att_firstName], @Att_firstName) > 0				AND Att_code <> @Att_code OR
					   CHARINDEX([Att_lastName], @Att_lastName) > 0					AND Att_code <> @Att_code)
				ORDER BY Att_lastName ASC

				SELECT @ParametroSalida = 1;
			END			
			ELSE		
			BEGIN
				SELECT  0	 AS [Att_code]
					   ,NULL AS [Att_firstName]
					   ,NULL AS [Att_lastName] 
					   ,NULL AS [Att_zipCode] 
					   ,NULL AS [Att_address] 
					   ,NULL AS [Att_city] 
					   ,NULL AS [Att_state] 
					   ,CAST(0 AS BIT) AS [Att_status] 
				SELECT @ParametroSalida = 0;
			END
		END
	END
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_FIND_HOMONYM_ADJUSTERS','P') IS NOT NULL)
	DROP PROCEDURE SP_FIND_HOMONYM_ADJUSTERS
GO
CREATE PROCEDURE SP_FIND_HOMONYM_ADJUSTERS
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	8/9/2016.
-- System			:	Billing.
-- Program			:	Adjuster.
-- Description		:	Check homonyms.
-- Change Log		:
--=============================================
(
 @ParametroSalida BIT OUTPUT
,@Adj_code		  INT
,@Adj_firstName   VARCHAR(100) = 'gabriel'
,@Adj_lastName	  VARCHAR(100) = 'gil'
)
AS
BEGIN
	DECLARE @CantidadCoincidenciasCamposCriticos INT = 0;
	
	IF (@Adj_code = 0) -- ********** CUANDO ES UNA INSERCION **********
	BEGIN
		SELECT @CantidadCoincidenciasCamposCriticos = COUNT(*) 
		FROM	[Adjuster] 
		WHERE   LTRIM(RTRIM([Adj_firstName]))	LIKE '%'+@Adj_firstName+'%' OR
				LTRIM(RTRIM([Adj_lastName]))	LIKE '%'+@Adj_lastName+'%'  OR
		        CHARINDEX([Adj_firstName], @Adj_firstName) > 0			    OR
				CHARINDEX([Adj_lastName], @Adj_lastName) > 0

		IF (@CantidadCoincidenciasCamposCriticos > 0) -- Si encuentra coincidencias.
		BEGIN
			SELECT  [Adj_code] 
				   ,[Adj_firstName] 
				   ,[Adj_lastName] 
				   ,[Adj_phone] 
				   ,[Adj_phoneExt] 
				   ,[Adj_status] 
			FROM	[Adjuster]
			WHERE   LTRIM(RTRIM([Adj_firstName]))	LIKE '%'+@Adj_firstName+'%' OR
					LTRIM(RTRIM([Adj_lastName]))	LIKE '%'+@Adj_lastName+'%'	OR
		            CHARINDEX([Adj_firstName], @Adj_firstName) > 0			    OR
				    CHARINDEX([Adj_lastName], @Adj_lastName) > 0
			ORDER BY Adj_lastName ASC

			SELECT @ParametroSalida = 1;
		END			
		ELSE		
		BEGIN
			SELECT  0 AS [Adj_code] 
				   ,NULL AS [Adj_firstName] 
				   ,NULL AS [Adj_lastName] 
				   ,NULL AS [Adj_phone] 
				   ,NULL AS [Adj_phoneExt] 
				   ,CAST(0 AS BIT) AS [Adj_status]
			SELECT @ParametroSalida = 0;
		END
	END
	ELSE	-- ********** CUANDO ES UNA ACTUALIZACION **********
	BEGIN
		SELECT @CantidadCoincidenciasCamposCriticos = COUNT(*) 
		FROM	[Adjuster] 
		WHERE   LTRIM(RTRIM([Adj_firstName]))	LIKE '%'+@Adj_firstName+'%' AND Adj_code <> @Adj_code OR
				LTRIM(RTRIM([Adj_lastName]))	LIKE '%'+@Adj_lastName+'%' 	AND Adj_code <> @Adj_code OR
		        CHARINDEX([Adj_firstName], @Adj_firstName) > 0				AND Adj_code <> @Adj_code OR
				CHARINDEX([Adj_lastName], @Adj_lastName) > 0				AND Adj_code <> @Adj_code

		IF (@CantidadCoincidenciasCamposCriticos > 0) 
		BEGIN
			SELECT  [Adj_code] 
				   ,[Adj_firstName] 
				   ,[Adj_lastName] 
				   ,[Adj_phone] 
				   ,[Adj_phoneExt] 
				   ,[Adj_status] 
			FROM	[Adjuster]
		    WHERE   LTRIM(RTRIM([Adj_firstName]))	LIKE '%'+@Adj_firstName+'%' AND Adj_code <> @Adj_code OR
		    		LTRIM(RTRIM([Adj_lastName]))	LIKE '%'+@Adj_lastName+'%' 	AND Adj_code <> @Adj_code OR
		            CHARINDEX([Adj_firstName], @Adj_firstName) > 0				AND Adj_code <> @Adj_code OR
				    CHARINDEX([Adj_lastName], @Adj_lastName) > 0				AND Adj_code <> @Adj_code
			ORDER BY Adj_lastName ASC

			SELECT @ParametroSalida = 1;
		END			
		ELSE		
		BEGIN
			SELECT  0	 AS [Adj_code] 
				   ,NULL AS [Adj_firstName] 
				   ,NULL AS [Adj_lastName] 
				   ,NULL AS [Adj_phone] 
				   ,NULL AS [Adj_phoneExt] 
				   ,CAST(0 AS BIT) AS [Adj_status]
			SELECT @ParametroSalida = 0;
		END
	END
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_FIND_HOMONYM_PROVIDERS','P') IS NOT NULL)
	DROP PROCEDURE SP_FIND_HOMONYM_PROVIDERS
GO
CREATE PROCEDURE SP_FIND_HOMONYM_PROVIDERS
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	8/4/2016.
-- System			:	Billing.
-- Program			:	Provider.
-- Description		:	Check homonyms.
-- Change Log		:
--=============================================
(
 @ParametroSalida BIT OUTPUT
,@Pro_code		  INT
,@Pro_firstName   VARCHAR(100) = 'gabriel'
,@Pro_lastName	  VARCHAR(100) = 'gil'
)
AS
BEGIN
	DECLARE @CantidadCoincidenciasCamposCriticos INT = 0;
	
	IF (@Pro_code = 0) -- ********** CUANDO ES UNA INSERCION **********
	BEGIN
		SELECT @CantidadCoincidenciasCamposCriticos = COUNT(*) 
		FROM	[Provider] 
		WHERE   LTRIM(RTRIM([Pro_firstName]))	LIKE '%'+@Pro_firstName+'%' OR
				LTRIM(RTRIM([Pro_lastName]))	LIKE '%'+@Pro_lastName+'%'  OR
		        CHARINDEX([Pro_firstName], @Pro_firstName) > 0			    OR
				CHARINDEX([Pro_lastName], @Pro_lastName) > 0

		IF (@CantidadCoincidenciasCamposCriticos > 0) -- Si encuentra coincidencias.
		BEGIN
			SELECT  [Pro_code] 
				   ,[Pro_firstName] 
				   ,[Pro_lastName] 
				   ,[Pro_number] 
				   ,[Pro_status] 
			FROM	[Provider]
			WHERE   LTRIM(RTRIM([Pro_firstName]))	LIKE '%'+@Pro_firstName+'%' OR
					LTRIM(RTRIM([Pro_lastName]))	LIKE '%'+@Pro_lastName+'%'	OR
		            CHARINDEX([Pro_firstName], @Pro_firstName) > 0			    OR
				    CHARINDEX([Pro_lastName], @Pro_lastName) > 0
			ORDER BY Pro_lastName ASC

			SELECT @ParametroSalida = 1;
		END			
		ELSE		
		BEGIN
			SELECT  0 AS [Pro_code] 
				   ,NULL AS [Pro_firstName] 
				   ,NULL AS [Pro_lastName] 
				   ,NULL AS [Pro_number] 
				   ,CAST(0 AS BIT) AS [Pro_status]
			SELECT @ParametroSalida = 0;
		END
	END
	ELSE	-- ********** CUANDO ES UNA ACTUALIZACION **********
	BEGIN
		SELECT @CantidadCoincidenciasCamposCriticos = COUNT(*) 
		FROM	[Provider] 
		WHERE   LTRIM(RTRIM([Pro_firstName]))	LIKE '%'+@Pro_firstName+'%' AND Pro_code <> @Pro_code OR
				LTRIM(RTRIM([Pro_lastName]))	LIKE '%'+@Pro_lastName+'%' 	AND Pro_code <> @Pro_code OR
		        CHARINDEX([Pro_firstName], @Pro_firstName) > 0				AND Pro_code <> @Pro_code OR
				CHARINDEX([Pro_lastName], @Pro_lastName) > 0				AND Pro_code <> @Pro_code

		IF (@CantidadCoincidenciasCamposCriticos > 0) 
		BEGIN
			SELECT  [Pro_code] 
				   ,[Pro_firstName] 
				   ,[Pro_lastName] 
				   ,[Pro_number] 
				   ,[Pro_status] 
			FROM	[Provider]
		    WHERE   LTRIM(RTRIM([Pro_firstName]))	LIKE '%'+@Pro_firstName+'%' AND Pro_code <> @Pro_code OR
		    		LTRIM(RTRIM([Pro_lastName]))	LIKE '%'+@Pro_lastName+'%' 	AND Pro_code <> @Pro_code OR
		            CHARINDEX([Pro_firstName], @Pro_firstName) > 0				AND Pro_code <> @Pro_code OR
				    CHARINDEX([Pro_lastName], @Pro_lastName) > 0				AND Pro_code <> @Pro_code
			ORDER BY Pro_lastName ASC

			SELECT @ParametroSalida = 1;
		END			
		ELSE		
		BEGIN
			SELECT --- NULL AS [Pro_code]
			       0 AS [Pro_code] 
				   ,NULL AS [Pro_firstName] 
				   ,NULL AS [Pro_lastName] 
				   ,NULL AS [Pro_number] 
				   ,CAST(0 AS BIT) AS [Pro_status]
			SELECT @ParametroSalida = 0;
		END
	END
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_ADJUSTER_FOR_FIND_MATCHES','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_ADJUSTER_FOR_FIND_MATCHES 
GO
CREATE PROCEDURE SP_LIST_ADJUSTER_FOR_FIND_MATCHES
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/15/2016.
-- system			:	Billing.
-- Program			:	Adjuster.
-- Description		:	Get all adjusters for find_matches.
-- change log		:
--=============================================
AS
SELECT [Adj_code] AS [Codigo]
	  ,[Adj_firstName] + ' ' + [Adj_lastName] AS [NombreCompleto]
FROM [Adjuster]
WHERE [Adj_firstName] NOT LIKE '%-----%'	AND 
	  [Adj_lastName]  NOT LIKE '%-----%'	AND 
	  LTRIM(RTRIM([Adj_firstName])) <> ''	AND 
	  LTRIM(RTRIM([Adj_lastName]))  <> ''	AND
	  [Adj_status] = 1					
ORDER BY [Adj_lastName] ASC
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_INSURER_FOR_FIND_MATCHES','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_INSURER_FOR_FIND_MATCHES 
GO
CREATE PROCEDURE SP_LIST_INSURER_FOR_FIND_MATCHES
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/15/2016.
-- system			:	Billing.
-- Program			:	Insurer.
-- Description		:	Get all insureres for find_matches.
-- change log		:
--=============================================
AS
SELECT [Ins_code] AS [Codigo]
	  ,[Ins_name] AS [NombreCompleto]
FROM [Insurer]
WHERE -- [Ins_name]  NOT LIKE '%-----%'	AND 
	  LTRIM(RTRIM([Ins_name])) <> ''	AND
	  [Ins_status] = 1 
ORDER BY [Ins_name] ASC
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_PROVIDER_FOR_FIND_MATCHES','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_PROVIDER_FOR_FIND_MATCHES 
GO
CREATE PROCEDURE SP_LIST_PROVIDER_FOR_FIND_MATCHES
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/18/2016.
-- system			:	Billing.
-- Program			:	Provider.
-- Description		:	Get all providers for find_matches.
-- change log		:
--=============================================
AS
SELECT [Pro_code] AS [Codigo]
	  ,[Pro_firstName] + ' ' + [Pro_lastName] AS [NombreCompleto]
FROM [Provider]
WHERE [Pro_firstName] NOT LIKE '%-----%'	AND 
	  [Pro_lastName]  NOT LIKE '%-----%'	AND 
	  LTRIM(RTRIM([Pro_firstName])) <> ''	AND 
	  LTRIM(RTRIM([Pro_lastName]))  <> ''	AND
	  [Pro_status] = 1					
ORDER BY [Pro_lastName] ASC
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_SUPERVISOR_FOR_FIND_MATCHES','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_SUPERVISOR_FOR_FIND_MATCHES 
GO
CREATE PROCEDURE SP_LIST_SUPERVISOR_FOR_FIND_MATCHES
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/18/2016.
-- system			:	Billing.
-- Program			:	User.
-- Description		:	Get all supervisors for find_matches.
-- change log		:
--=============================================
AS
BEGIN
	SELECT  [USR].[Use_code] AS [Codigo]
		   ,UPPER([USR].[Use_firstName]) + ' ' + UPPER([USR].[Use_lastName]) AS [NombreCompleto]
	FROM	[User] AS [USR]
		   ,(SELECT	[UIR].[UserId]
			  	   ,[ROL].[RoleId]
			  	   ,[ROL].[RoleName]
			  FROM	[aspnet_Roles]						AS	[ROL]
			  	   ,[aspnet_UsersInRoles]				AS	[UIR]
			  WHERE	[ROL].RoleId	= [UIR].[RoleId]		AND
			  		[ROL].RoleName	= 'Supervisor') AS t2
	WHERE [USR].[UserId] = t2.[UserId] AND
		  [USR].[Use_status] = 1
	ORDER BY [USR].[Use_lastName] ASC
END
GO
 
-- *******************************************************************************************************

IF (OBJECT_ID('SP_GET_TYPE_USER','P') IS NOT NULL)
	DROP PROCEDURE SP_GET_TYPE_USER 
GO
CREATE PROCEDURE SP_GET_TYPE_USER
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	6/29/2016.
-- System			:	Billing.
-- Program			:	User.
-- Description		:	get a user.
-- Change Log		:
--=============================================
(
@UserName NVARCHAR(512) = 'sdufek'
)
AS
BEGIN

	if ('Administrator' in (select rol.RoleName
							from aspnet_UsersInRoles as UIR
                        		,aspnet_Users as USR
                        		,[User] as USRL
                        		,aspnet_Roles as ROL
							where UIR.UserId = USR.UserId
							  and USR.UserId = USRL.UserId
							  and UIR.RoleId = ROL.RoleId
							  and USRL.Use_userName = @UserName))
	begin
		select 1
	end
	else
	begin
		select 0
	end

END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_GET_USER','P') IS NOT NULL)
	DROP PROCEDURE SP_GET_USER
GO
CREATE PROCEDURE SP_GET_USER
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	6/29/2016.
-- System			:	Billing.
-- Program			:	User.
-- Description		:	get a user.
-- Change Log		:
--=============================================
(
	-- @UserName NVARCHAR(512) = 'josevillalobos'
	@UserName NVARCHAR(512) = 'aquito02'
)
AS
BEGIN
	SELECT [US].[Use_code]
		  -- -------------------------------------------------------
		  ,[US].[Use_firstName]
		  -- -------------------------------------------------------
		  ,[US].[Use_lastName]
		  -- -------------------------------------------------------
		  ,(SELECT TOP 1 (SELECT TOP 1 [RoleName]
					      FROM         [aspnet_Roles]
						  WHERE        [RoleId] = [UIR].[RoleId] 
						  ORDER BY     [Orden] ASC) AS Roles
		    FROM  [aspnet_UsersInRoles] AS [UIR] 
		    WHERE [UIR].[UserId] = [US].[UserId]
			ORDER BY Roles) AS [Rol]
		  -- -------------------------------------------------------
		  ,CASE
				WHEN ((SELECT COUNT(*)
					  FROM aspnet_UsersInRoles 
					  WHERE UserId = (SELECT UserId 
									  FROM [User] 
									  WHERE Use_code = [US].[Use_code] 
									    AND Use_status = 1)
						AND RoleId  = (SELECT RoleId  
									   FROM   aspnet_Roles 
									   WHERE RoleName = 'Billing Manager')) > 0) THEN 1
				ELSE 0
		   END AS BillManager
	FROM [User]         AS [US]
	    ,[aspnet_Users] AS [AU]
	WHERE [US].[UserId]     = [AU].[UserId]
	  AND [AU].[UserName]   = @UserName
	  AND [US].[Use_status] = 1
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_SAVE_MEDICAL','P') IS NOT NULL)
	DROP PROCEDURE SP_SAVE_MEDICAL 
GO
CREATE PROCEDURE SP_SAVE_MEDICAL
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	6/29/2016.
-- System			:	Billing.
-- Program			:	Medical.
-- Description		:	Save a doctor.
-- Change Log		:
--=============================================
(
	 @Med_firstName	     VARCHAR(100)
	,@Med_lastName	     VARCHAR(100)
	,@Med_address	     VARCHAR(255) = NULL
	,@Med_city		     VARCHAR(50)  = NULL
	,@Med_state		     VARCHAR(50)  = NULL
	,@Med_zipCode	     VARCHAR(5)	  = NULL				
	,@Med_zipCodeExt     VARCHAR(4)	  = NULL			
	,@Med_phone		     VARCHAR(15)  = NULL				
	,@Med_phoneExt	     VARCHAR(5)   = NULL			
	,@Med_alternatePhone VARCHAR(20)  = NULL		
	,@Med_fax			 VARCHAR(15)  = NULL
	,@Spe_code			 INT 			
	,@Med_office		 VARCHAR(100) = NULL
	,@Med_operatorUser	 INT		  = 92
)
AS
BEGIN
	DECLARE @MedicalCode INT; -- Variable que almacena el código del doctor recién registrado
	DECLARE @ExistsCity INT; -- Variable que almacena una cantidad '> 0' o '0', '> 0' es si la ciudad que se está tratando de almacenar en la tabla Patient existe en la tabla City y '0' es si no existe. Se utiliza por que si es '0' esta ciudad se registrará en la tabla City.

	BEGIN TRY
		BEGIN TRANSACTION
			SELECT @ExistsCity = COUNT(*) FROM City WHERE LTRIM(RTRIM(Cit_name)) = LTRIM(RTRIM(@Med_city)) 
			
			IF (@ExistsCity = 0 AND @Med_city IS NOT NULL) -- Si la ciudad que se está tratando de registrar en la tabla Patient no existe en la tabla City, entonces se registrará en esta tabla 
				-- INSERT INTO City(Cit_name, Sta_code) VALUES(@Med_city, @Med_state)
				INSERT INTO City(Cit_name) VALUES(@Med_city)

			-- Esta condición sirve para restringir al usuario cuando intente registrar un doctor que ya existe después de haberle mostrado las coincidencias.
			IF ( (SELECT COUNT(*) FROM [Medical] WHERE  ISNULL(Med_firstName, '') = ISNULL(@Med_firstName, '') AND
													    ISNULL(Med_lastName, '') =  ISNULL(@Med_lastName, '') AND
													    ISNULL(Med_address, '') =   ISNULL(@Med_address, '') AND
													    ISNULL(Med_zipCode, '') =   ISNULL(@Med_zipCode, '') AND
													    ISNULL(Med_city, '')	=   ISNULL(@Med_city, '')	   AND
													    ISNULL(Med_state, '')	=   ISNULL(@Med_state, ''))	   > 0)
				RAISERROR('This doctor already exists!', -- Message  )
						  16, -- Severity
						  1); -- State;

			INSERT INTO [Medical](Med_firstName,
													Med_lastName,
													Med_address,
													Med_city,
													Med_state,
													Med_zipCode,
													Med_zipCodeExt,
													Med_phone,
													Med_phoneExt,
													Med_alternatePhone,
													Med_fax,
													Spe_code, 		
													Med_office,
													Med_operatorUser)
			VALUES (@Med_firstName,
                    @Med_lastName,
                    @Med_address,
                    @Med_city,
                    @Med_state,
                    @Med_zipCode,
                    @Med_zipCodeExt,
                    @Med_phone,
                    @Med_phoneExt,
                    @Med_alternatePhone,
                    @Med_fax,
                    @Spe_code, 		
                    @Med_office,
					@Med_operatorUser)

			SET @MedicalCode = SCOPE_IDENTITY();

			SELECT @MedicalCode AS MedicalErrorCode, '' AS ErrorMessage;
		COMMIT TRANSACTION			
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS MedicalErrorCode, ERROR_MESSAGE() AS ErrorMessage;		

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION
	END CATCH

	SET NOCOUNT OFF
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_GET_CASE_DATA','P') IS NOT NULL)
	DROP PROCEDURE SP_GET_CASE_DATA 
GO
CREATE PROCEDURE SP_GET_CASE_DATA
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/11/2016.
-- System			:	Billing.
-- Program			:	Case.
-- Description		:	Get information of a case (Obtiene la información del caso).
-- Change Log		:
--=============================================
(
	@Cis_code				INT		= 2574				-- case code to be read (código del caso que se va a leer).	
)
AS
BEGIN
	SET NOCOUNT ON	

	BEGIN TRY		
		BEGIN TRANSACTION	
			SELECT  [CIS].[Cis_code]				                    AS [CaseCode]
				   ,[CIS].[Pat_code]                                    AS [PatientCode]
				   ,[CIS].[Adj_code]                                    AS [AdjusterCode]
				   ,[CIS].[Ins_code]                                    AS [InsurerCode]
				   ,[CIS].[Pro_code]                                    AS [ProviderCode]
				   ,[CIS].[Cis_price]						            AS [CasePrice]
				   ,CONVERT(DATE, [CIS].[Cis_accidentDate], 101)        AS [CaseAccidentDate]
				   ,[CIS].[Cis_caseCode]							    AS [CaseCaseCode]
				   ,CONVERT(DATE, [CIS].[Cis_referralDate], 101)	    AS [CaseReferralDate]
				   ,[CIS].[Cis_transportation]				            AS [CaseTransportation]
				   ,[CIS].[Cis_comment]									AS [CaseComment]
				   ,[CIS].[Cis_Injury]								    AS [CaseInjury]
				   ,[CIS].[Cis_status]								    AS [CaseStatus]
				   ,[PAT].[Pat_firstName] + ' ' + [PAT].[Pat_lastName]  AS [Patient]
				   ,CONVERT(DATE, [PAT].[Pat_birthday], 101)			AS [Birthday]
				   ,[PRO].[Pro_firstName] + ' ' + [PRO].[Pro_lastName]  AS [Provider]
				   ,[ADJ].[Adj_firstName] + ' ' + [ADJ].[Adj_lastName]  AS [Adjuster]
				   ,[ADJ].[Adj_phone]                                   AS [AdjusterPhone]
				   ,[ADJ].[Adj_phoneExt]                                AS [AdjusterPhoneExt]
				   ,[INS].[Ins_name]                                    AS [Insurer]
				   ,[INS].[Ins_address]                                 AS [InsurerAddress]			   
				   ,[INS].[Ins_city]                                    AS [InsurerCity]
				   ,[INS].[Ins_state]                                   AS [InsurerState]
				   ,[INS].[Ins_zipCode]                                 AS [InsurerZipCode]
				   ,[INS].[Ins_zipExt]                                  AS [InsurerZipCodeExt]
				   ,[INS].[Ins_phone]                                   AS [InsurerPhone]
				   ,[INS].[Ins_phoneExt]                                AS [InsurerPhoneExt]
				   ,[INS].[Ins_fax]                                     AS [InsurerFax]
				   ,[CIS].[Cis_transportationCompany]			        AS [CaseTransportationCompany]
				   ,[CIS].[Cis_translation]								AS [CaseTranslation]
				   ,[CIS].[Cis_translationCompany]					    AS [CaseTranslationCompany]
				   ,[CIS].[Cis_physicalTherapy]							AS [CasePhysicalTherapy]
				   ,[CIS].[Cis_physicalTherapyCompany]	                AS [CasePhysicalTherapyCompany]
				   ,[CIS].[Cis_permisionContact]				        AS [CasePermisionContact] 
				   ,[CIS].[Cis_permisionContactCompany]                 AS [CasePermisionContactCompany]
				   ,[CIS].[Cis_Longshore]                               AS [CaseLongshore]
				   ,[CIS].[Cis_companyStatus]                           AS [CaseCompanyStatus]  
				   ,[CIS].[Cis_other]                                   AS [CaseOther]
				   ,[CIS].[Cis_otherText]                               AS [CaseOtherText]  
				   ,[CIS].[Cis_contact1]                                AS [CaseContact1]
				   ,[CIS].[Cis_contact2]                                AS [CaseContact2]
				   ,[CIS].[Cis_caseSupervisor]                          AS [CaseSupervisorCode]
				   ,[CIS].[Cis_presumption]								AS [CasePresumption]
				   ,ISNULL([CIS].[Cis_acuity], 0)                       AS [CaseAcuity]
				   ,[USR].[Use_firstName] + ' ' + [USR].[Use_lastName]  AS [CaseSupervisor]
			FROM    [CaseInformationSheetHead]	                        AS [CIS]
				   ,[Insurer]                                           AS [INS]
				   ,[Patient]					                        AS [PAT]
				   ,[Provider]                                          AS [PRO]
				   ,[Adjuster]                                          AS [ADJ]
				   ,[User]                                              AS [USR]
			WHERE	[CIS].[Ins_code] = [INS].[Ins_code]				AND
					[CIS].[Pat_code] = [PAT].[Pat_code]				AND
					[CIS].[Pro_code] = [PRO].[Pro_code]				AND
					[CIS].[Adj_code] = [ADJ].[Adj_code]				AND
					[CIS].[Cis_caseSupervisor] = [USR].[Use_code]	AND
					[CIS].[Cis_code] = @Cis_code					
					
		COMMIT TRANSACTION																		
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION
	END CATCH	
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_GET_STATUS_OF_CASE','P') IS NOT NULL)
	DROP PROCEDURE SP_GET_STATUS_OF_CASE
GO
CREATE PROCEDURE SP_GET_STATUS_OF_CASE
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/11/2016.
-- System			:	Billing.
-- Program			:	Case.
-- Description		:	Get information of a case (Obtiene la información del caso).
-- Change Log		:
--=============================================
(
	@Cis_code	INT = 3215
)
AS
BEGIN
	SELECT [Cis_status]
	FROM   [CaseInformationSheetHead]
	WHERE  [Cis_code] = @Cis_code
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_GET_CASE_DATA_FOR_PDF_BILLING','P') IS NOT NULL)
	DROP PROCEDURE SP_GET_CASE_DATA_FOR_PDF_BILLING
GO
CREATE PROCEDURE SP_GET_CASE_DATA_FOR_PDF_BILLING
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/11/2016.
-- System			:	Billing.
-- Program			:	Case.
-- Description		:	Get information of a case (Obtiene la información del caso).
-- Change Log		:
--=============================================
(
-- select Bih_code from BillingHead where Bih_code_old = 'O6B0017058'
	@Cis_code				INT		= 1195
   ,@Bih_code				INT		= 16025
)
AS
BEGIN
	SET NOCOUNT ON	
	
	BEGIN TRY		
		BEGIN TRANSACTION	
			SELECT  [INS].[Ins_name]                                    AS [Insurer]				   
				   ,[INS].[Ins_address]                                 AS [InsurerAddress]			   				   
				   ,[INS].[Ins_city]                                    AS [InsurerCity]
				   ,[INS].[Ins_zipCode]                                 AS [InsurerZipCode]
				   ,[CIS].[Cis_caseCode]							    AS [CaseCaseCode]
				   ,CONVERT(DATE, [CIS].[Cis_accidentDate], 101)        AS [CaseAccidentDate]
				   ,CONVERT(DATE, [CIS].[Cis_referralDate], 101)	    AS [CaseReferralDate]
				   
				   ,[INS].[Ins_feinSc]
				   ,[INS].[Ins_carrierCode]
				   ,[INS].[Ins_feinCc]
				   ,[INS].[Ins_fax]
				   ,[INS].[Ins_phone]
				   ,[INS].[Ins_scTpaCode]
				   
				   ,[ADJ].[Adj_firstName] + ' ' + [ADJ].[Adj_lastName] As [Adj_fullName]

				   ,[PAR].[Par_city]
				   ,[PAR].[Par_name]
				   ,[PAR].[Par_address]
				   ,[PAR].[Par_number]
				   ,[PAR].[Par_phone]
				   ,[PAR].[Par_state]
				   ,[PAR].[Par_zipCode]
				   
				   ,[PRO].[Pro_status]
				   ,[PRO].[Pro_firstName] + ' ' + [PRO].[Pro_lastName] As [Pro_fullName]
				   ,[PRO].[Pro_number]
				   ,[PRO].[Pro_fein]

				   ,[BIH].[Bih_returnDate]
				   ,[BIH].[Bih_startWeekly]

			FROM    [CaseInformationSheetHead]	                        AS [CIS]
				   ,[Insurer]                                           AS [INS]
				   ,[Adjuster]                                          AS [ADJ]
				   ,[Provider]                                          AS [PRO]
				   ,[BillingHead]                                       AS [BIH]
				   ,[Parameter]											AS [PAR]

			WHERE	[CIS].[Ins_code] = [INS].[Ins_code]				AND
					[CIS].[Pro_code] = [PRO].[Pro_code]				AND
					[CIS].[Adj_code] = [ADJ].[Adj_code]				AND
					[CIS].[Cis_code] = [BIH].[Cis_code]				AND
					[BIH].[Par_code] = [PAR].[Par_code]				AND
					[CIS].[Cis_code] = @Cis_code					AND
					[BIH].[Bih_code] = @Bih_code
					
		COMMIT TRANSACTION																		
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION
	END CATCH	
END
GO

-- *******************************************************************************************************
/* 
update CaseInformationSheetHead set Cis_availability = 0, Cis_loggedUserCode = null where Cis_code = 2574
update CaseInformationSheetHead set Cis_availability = 1, Cis_loggedUserCode = 98 where Cis_code = 2574

select Cis_availability, Cis_loggedUserCode from CaseInformationSheetHead where Cis_code = 2574
*/
IF (OBJECT_ID('SP_CHECK_AVAILABILITY_CASE','P') IS NOT NULL)
	DROP PROCEDURE SP_CHECK_AVAILABILITY_CASE 
GO
CREATE PROCEDURE SP_CHECK_AVAILABILITY_CASE
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/21/2016.
-- System			:	Billing.
-- Program			:	Case.
-- Description		:	Checks whether a case is being read by another user (Verifica si un caso está siendo leído por otro usuario).
-- Change Log		:
--=============================================
(
	@Cis_code			INT	= 3164	-- case code to be read (Código del caso a ser leído).
   ,@Cis_loggedUserCode	INT = 29    -- 57 es el código de usuario del usuario "rdiaz".
)
AS
BEGIN
	SET NOCOUNT ON;
	
	-- It indicates whether the selected case in being occupied by another user, if 
	-- there is a case greater than zero amount. (Indica si el caso seleccionado está 
	-- siendo ocupado por otro usuario, si encuentra una cantidad mayor a cero de este).
	DECLARE @CaseStatus INT = 0; 
	DECLARE @CantidadTotalEntradas INT = 0 -- Variable que recibirá del procedimiento "SP_COUNT_DATAENTRY" la cantidad total de entradas que tiene el caso que se está leyendo, este valor se incluirá en los valores del caso leído.

	DECLARE @Busy		BIT			
	DECLARE @User		VARCHAR(200)
	
	-- BEGIN TRY		
	-- 	BEGIN TRANSACTION	
			-- Obtains the availability status of the case to be read, busy: 0 or not busy:1 (Obtiene el estado de disponibilidad del caso, busy: 0 o not busy: 1).
			SET @CaseStatus = (SELECT COUNT (*)
			                   FROM   [OmnimedBD].[dbo].[CaseInformationSheetHead]
			                   WHERE  [Cis_code]           = @Cis_code AND 
									  [Cis_availability]   = 1 AND
									  [Cis_loggedUserCode] <> @Cis_loggedUserCode)

			-- select @CaseStatus
			-- return 

			IF (@CaseStatus > 0) -- if the case is busy (Si el caso está ocupado).
			BEGIN									
				SET @Busy = 1; -- Indicate that the case is busy (Indica que el caso está ocupado).

				-- Read the user who is occupying the case (Lee el usuario que está ocupando el caso).
				SET @User = (SELECT [Use_firstName] + ' ' + [Use_lastName]
				             FROM   [OmnimedBD].[dbo].[User]
				             WHERE  [Use_code] = (SELECT [Cis_loggedUserCode]
				           				          FROM   [OmnimedBD].[dbo].[CaseInformationSheetHead]
				               				      WHERE  [Cis_code] = @Cis_code))
			END
			ELSE  -- if the case is not busy (Si el caso está desocupado).
			BEGIN				
				SET @Busy = 0; -- Indicate that the case is not busy (Indica que el caso está desocupado).
				SET @User = ''; -- if there is no user, returns an empty string (Si no hay un usuario, retorna una cadena vacía).  
			END

			-- Obtiene la cantidad total de entradas.				
			EXEC	SP_COUNT_DATAENTRY @CantidadTotalEntradas OUTPUT, @Cis_code

			-- Devolución de recultados

			-- (1) Primer Resultado
			SELECT  @Busy AS [Busy]
					,@User AS [User]
			
			-- (2) Segundo Resultado
			SELECT  [CIS].[Cis_code]				                    AS [CaseCode]
				    ,[CIS].[Cis_caseCode]							    AS [CaseCaseCode]
					,[PAT].[Pat_firstName] + ' ' + [PAT].[Pat_lastName]  AS [Patient]
					,CONVERT(DATE, [CIS].[Cis_accidentDate], 101)        AS [CaseAccidentDate]
					,[INS].[Ins_name]                                    AS [Insurer]
					,[ADJ].[Adj_firstName] + ' ' + [ADJ].[Adj_lastName]  AS [Adjuster]
					,CONVERT(DATE, [PAT].[Pat_birthday], 101)			AS [Birthday]
				    ,[CIS].[Cis_contact1]                                AS [CaseContact1]
				    ,[CIS].[Cis_contact2]                                AS [CaseContact2]
					,[USR].[Use_firstName] + ' ' + [USR].[Use_lastName]  AS [CaseSupervisor]
					,@CantidadTotalEntradas								AS [CantidadTotalEntradas]
			FROM    [CaseInformationSheetHead]	                        AS [CIS]
					,[Insurer]                                           AS [INS]
					,[Patient]					                        AS [PAT]
					,[Provider]                                          AS [PRO]
					,[Adjuster]                                          AS [ADJ]
					,[User]                                              AS [USR]
			WHERE	[CIS].[Ins_code] = [INS].[Ins_code]				
				AND [CIS].[Pat_code] = [PAT].[Pat_code]				
				AND [CIS].[Pro_code] = [PRO].[Pro_code]				
				AND [CIS].[Adj_code] = [ADJ].[Adj_code]				
				AND [CIS].[Cis_caseSupervisor] = [USR].[Use_code]	
				AND [CIS].[Cis_code] = @Cis_code
 	-- 	COMMIT TRANSACTION																		
 	-- END TRY
 	-- BEGIN CATCH
 	-- 	-- SELECT ERROR_NUMBER() AS PatientErrorCode, ERROR_MESSAGE() AS ErrorMessage;
 	-- 
 	-- 	IF @@TRANCOUNT>=1
 	-- 		ROLLBACK TRANSACTION
 	-- END CATCH	
END
GO

-- *******************************************************************************************************
-- SP_CHECK_AVAILABILITY_CASE
IF (OBJECT_ID('SP_OCCUPY_LIBERATE_CASES','P') IS NOT NULL)
	DROP PROCEDURE SP_OCCUPY_LIBERATE_CASES
GO
CREATE PROCEDURE SP_OCCUPY_LIBERATE_CASES
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/25/2016.
-- System			:	Billing.
-- Program			:	Case.
-- Description		:	Lock the read case and releases the previous case (Bloquea el caso leído y libera el caso anterior).
-- Change Log		:
--=============================================
(
 @CaseCodeRead			INT	= 2319	-- read case code (Código del caso leído).
,@UserCodeReading		INT	= 98	-- user code that read the case (Código del usuario lee el caso).
,@CaseCodeToBeReleased	INT	= 2319		-- case code to be released (Código del caso a ser liberado).
)
AS
BEGIN
	SET NOCOUNT ON;
	
	BEGIN TRY		
		BEGIN TRANSACTION	
			-- This takes the read case (Ocupa el caso que se ha leído).
			UPDATE   [OmnimedBD].[dbo].[CaseInformationSheetHead]
			SET		 [Cis_availability]		= 1
					,[Cis_loggedUserCode]	= @UserCodeReading
			WHERE    [Cis_code]				= @CaseCodeRead

			-- Liberate the previous case (Libera el caso anterior al caso leído).
			if (@CaseCodeRead <> @CaseCodeToBeReleased)
			BEGIN
				UPDATE   [OmnimedBD].[dbo].[CaseInformationSheetHead]
				SET		 [Cis_availability]		= 0
						,[Cis_loggedUserCode]	= NULL
				WHERE    [Cis_code]				= @CaseCodeToBeReleased
			END
		COMMIT TRANSACTION																		
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION
	END CATCH	
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIBERATE_CASE_CURRENT_USER','P') IS NOT NULL)
	DROP PROCEDURE SP_LIBERATE_CASE_CURRENT_USER
GO
CREATE PROCEDURE SP_LIBERATE_CASE_CURRENT_USER
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	9/21/2016.
-- System			:	Billing.
-- Program			:	Case.
-- Description		:	Liberate a case when leave the case interface in the application.
-- Change Log		:
--=============================================
(
	@CurrentUserCode	INT
)
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION
			-- It liberates the case that belongs to the current user (Libera el caso que pertenece al usuario actual).
			UPDATE   [OmnimedBD].[dbo].[CaseInformationSheetHead]
			SET		 [Cis_availability]		  = 0
					,[Cis_loggedUserCode]	  = NULL
			WHERE    [Cis_loggedUserCode] = @CurrentUserCode
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		
	END CATCH
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('RELEASES_ALL_CASES','P') IS NOT NULL)
	DROP PROCEDURE RELEASES_ALL_CASES
GO
CREATE PROCEDURE RELEASES_ALL_CASES
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	5/4/2017.
-- System			:	Billing.
-- Program			:	Case.
-- Description		:	Liberate all cases.
-- Change Log		:
--=============================================
AS
BEGIN
	BEGIN TRY
			
			UPDATE   [OmnimedBD].[dbo].[CaseInformationSheetHead]
			SET		 [Cis_availability]		  = 0
					,[Cis_loggedUserCode]	  = NULL			
	END TRY
	BEGIN CATCH
		
	END CATCH
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_FIND_HOMONYM_CASES','P') IS NOT NULL)
	DROP PROCEDURE SP_FIND_HOMONYM_CASES
GO
CREATE PROCEDURE SP_FIND_HOMONYM_CASES
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/26/2016.
-- System			:	Billing.
-- Program			:	Case.
-- Description		:	Check homonyms.
-- Change Log		:
--=============================================
(
 @ParametroSalida	BIT			OUTPUT
,@Cis_code			INT
,@Cis_caseCode		VARCHAR(25)	= 'Wx20090345'
)
AS
BEGIN
	DECLARE @CantidadCoincidenciasClaim INT = 0;

	IF (@Cis_code = 0) -- ********** CUANDO ES UNA INSERCION **********
	BEGIN
		SELECT @CantidadCoincidenciasClaim = COUNT(*) 
		FROM	[CaseInformationSheetHead] 
		WHERE   LTRIM(RTRIM([Cis_caseCode])) = @Cis_caseCode

		IF (@CantidadCoincidenciasClaim > 0) 
		BEGIN
			SELECT  [PAT].[Pat_firstName]	AS [Pat_firstName]
				   ,[PAT].[Pat_lastName]	AS [Pat_lastName]
				   ,[CIS].[Cis_caseCode]	AS [Cis_caseCode]
			FROM   	[CaseInformationSheetHead] AS [CIS]
				   ,[Patient] AS [PAT]
			WHERE   [CIS].Pat_code = [PAT].Pat_code	AND
					LTRIM(RTRIM(CIS.[Cis_caseCode])) = @Cis_caseCode
			ORDER BY [PAT].Pat_lastName ASC

			SELECT @ParametroSalida = 1; -- Indica que si se encontró un claim igual			
		END	 		
		ELSE 		
		BEGIN	    
			SELECT  NULL AS [Pat_firstName]
				   ,NULL AS [Pat_lastName] 
				   ,NULL AS [Cis_caseCode] 

			SELECT @ParametroSalida = 0; -- Indica que no se encontró un claim igual
		END	
	END
	ELSE -- ********** CUANDO ES UNA ACTUALIZACION **********
	BEGIN
		SELECT @CantidadCoincidenciasClaim = COUNT(*) 
		FROM	[CaseInformationSheetHead] 
		WHERE   LTRIM(RTRIM([Cis_caseCode])) = @Cis_caseCode AND
			    Cis_code <> @Cis_code

		IF (@CantidadCoincidenciasClaim > 0) 
		BEGIN
			SELECT  [PAT].[Pat_firstName]	AS [Pat_firstName]
				   ,[PAT].[Pat_lastName]	AS [Pat_lastName]
				   ,[CIS].[Cis_caseCode]	AS [Cis_caseCode]
			FROM   	[CaseInformationSheetHead] AS [CIS]
				   ,[Patient] AS [PAT]
			WHERE   [CIS].Pat_code = [PAT].Pat_code	AND
					LTRIM(RTRIM(CIS.[Cis_caseCode])) = @Cis_caseCode AND
					Cis_code <> @Cis_code
			ORDER BY [PAT].Pat_lastName ASC

			SELECT @ParametroSalida = 1; -- Indica que si se encontró un claim igual			
		END	 		
		ELSE 		
		BEGIN	    
			SELECT  NULL AS [Pat_firstName]
				   ,NULL AS [Pat_lastName] 
				   ,NULL AS [Cis_caseCode] 

			SELECT @ParametroSalida = 0; -- Indica que no se encontró un claim igual
		END	
	END	
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_SAVE_CASE','P') IS NOT NULL)
	DROP PROCEDURE SP_SAVE_CASE
GO
CREATE PROCEDURE SP_SAVE_CASE
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/26/2016.
-- System			:	Billing.
-- Program			:	Case.
-- Description		:	Save a Case (Guarda un case).
-- Change Log		:
--=============================================
(
	@Pat_code						INT				= 2517
   ,@Cis_accidentDate				DATE			= NULL
   ,@Cis_Injury						VARCHAR(3000)	= NULL
   ,@Cis_caseCode					VARCHAR(25)		= 'CaseCodeGabo'
   ,@Adj_code						INT				= 1
   ,@Ins_code						INT				= 1
   -- -------------------------------------------------------
   ,@Cis_contact1					VARCHAR(250)	= NULL
   ,@Cis_contact2					VARCHAR(250)	= NULL
   -- -------------------------------------------------------
   ,@Cis_price						DECIMAL(10, 2)	= 10.00
   ,@Cis_referralDate				DATE			= '1900-01-01'
   ,@Pro_code						INT				= 1
   ,@Cis_caseSupervisor				INT				= 46
   -- -------------------------------------------------------
   ,@Cis_Longshore					BIT				= NULL
   ,@Cis_companyStatus				BIT				= NULL
   ,@Cis_other						BIT				= NULL
   ,@Cis_otherText					VARCHAR(150)	= NULL
   -- -------------------------------------------------------
   ,@Cis_presumption				BIT				= NULL
   ,@Cis_acuity						TINYINT			= NULL
   -- -------------------------------------------------------
   ,@Cis_translation				BIT				= NULL
   ,@Cis_transportation				BIT				= NULL
   ,@Cis_physicalTherapy			BIT				= NULL
   ,@Cis_permisionContact			BIT				= NULL
   ,@Cis_translationCompany			VARCHAR(150)	= NULL
   ,@Cis_transportationCompany		VARCHAR(150)	= NULL
   ,@Cis_physicalTherapyCompany		VARCHAR(150)	= NULL
   ,@Cis_permisionContactCompany	VARCHAR(150)	= NULL
   ,@Use_code						INT			    = NULL  
   ,@Cis_comment					VARCHAR(255)	= NULL  
)
AS
BEGIN
	SET NOCOUNT ON	

	DECLARE @CaseCode INT; -- Variable que almacena el código del caso recién registrado

	BEGIN TRY		
		BEGIN TRANSACTION				
			INSERT INTO CaseInformationSheetHead( [Pat_code]					
												 ,[Cis_accidentDate]			
												 ,[Cis_Injury]					
												 ,[Cis_caseCode]				
												 ,[Adj_code]					
												 ,[Ins_code]					
												 ,[Cis_contact1]				
												 ,[Cis_contact2]				
												 ,[Cis_price]					
												 ,[Cis_referralDate]			
												 ,[Pro_code]					
												 ,[Cis_caseSupervisor]			
												 ,[Cis_Longshore]				
												 ,[Cis_companyStatus]			
												 ,[Cis_other]					
												 ,[Cis_otherText]				
												 ,[Cis_presumption]			
												 ,[Cis_acuity]					
												 ,[Cis_translation]			
												 ,[Cis_transportation]			
												 ,[Cis_physicalTherapy]		
												 ,[Cis_permisionContact]		
												 ,[Cis_translationCompany]		
												 ,[Cis_transportationCompany]	
												 ,[Cis_physicalTherapyCompany]	
												 ,[Cis_permisionContactCompany]
												 ,[Use_Code]
												 ,[Cis_comment])												 
			VALUES ( @Pat_code									
                    ,ISNULL(@Cis_accidentDate, CONVERT(DATE, getdate(), 101)) 				
                    ,@Cis_Injury					
                    ,@Cis_caseCode				
                    ,@Adj_code					
                    ,@Ins_code					
                    ,@Cis_contact1				
                    ,@Cis_contact2				
                    ,@Cis_price					
					,@Cis_referralDate
                    ,@Pro_code					
                    ,@Cis_caseSupervisor			
                    ,@Cis_Longshore				
                    ,@Cis_companyStatus			
                    ,@Cis_other					
                    ,@Cis_otherText				
                    ,@Cis_presumption			
                    ,@Cis_acuity					
                    ,@Cis_translation			
                    ,@Cis_transportation			
                    ,@Cis_physicalTherapy		
                    ,@Cis_permisionContact		
                    ,@Cis_translationCompany		
                    ,@Cis_transportationCompany	
                    ,@Cis_physicalTherapyCompany	
                    ,@Cis_permisionContactCompany
                    ,@Use_code
                    ,@Cis_comment)
			
			SET @CaseCode = SCOPE_IDENTITY();

			SELECT @CaseCode AS CaseErrorCode, '' AS ErrorMessage;
		COMMIT TRANSACTION																		
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS CaseErrorCode, ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION
	END CATCH	
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_UPDATE_CASE','P') IS NOT NULL)
	DROP PROCEDURE SP_UPDATE_CASE
GO
CREATE PROCEDURE SP_UPDATE_CASE
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	7/28/2016.
-- System			:	Billing.
-- Program			:	Case.
-- Description		:	Update a Case (Actualiza un caso).
-- Change Log		:
--=============================================
(
    @Cis_code						INT				
   ,@Pat_code						INT				
   ,@Cis_accidentDate				DATE			
   ,@Cis_Injury						VARCHAR(3000)	
   ,@Cis_caseCode					VARCHAR(25)		
   ,@Adj_code						INT				
   ,@Ins_code						INT				
   -- -------------------------------------------------------
   ,@Cis_contact1					VARCHAR(250)	
   ,@Cis_contact2					VARCHAR(250)	
   -- -------------------------------------------------------
   ,@Cis_price						DECIMAL(10, 2)	
   ,@Cis_referralDate				DATE				= '1900-01-01'	
   ,@Pro_code						INT				
   ,@Cis_caseSupervisor				INT				
   -- -------------------------------------------------------
   ,@Cis_Longshore					BIT				
   ,@Cis_companyStatus				BIT				
   ,@Cis_other						BIT				
   ,@Cis_otherText					VARCHAR(150)	
   -- -------------------------------------------------------
   ,@Cis_presumption				BIT				
   ,@Cis_acuity						TINYINT			
   -- -------------------------------------------------------
   ,@Cis_translation				BIT				
   ,@Cis_transportation				BIT				
   ,@Cis_physicalTherapy			BIT				
   ,@Cis_permisionContact			BIT				
   ,@Cis_translationCompany			VARCHAR(150)	
   ,@Cis_transportationCompany		VARCHAR(150)	
   ,@Cis_physicalTherapyCompany		VARCHAR(150)	
   ,@Cis_permisionContactCompany	VARCHAR(150)	
   ,@Cis_comment					VARCHAR(255)	
)
AS
BEGIN
	SET NOCOUNT ON	
	
	BEGIN TRY		
		BEGIN TRANSACTION				
			UPDATE [CaseInformationSheetHead]
			SET
				 [Pat_code]						= @Pat_code			
				,[Cis_accidentDate]				= @Cis_accidentDate	
				,[Cis_Injury]					= @Cis_Injury			
				,[Cis_caseCode]					= @Cis_caseCode		
				,[Adj_code]						= @Adj_code			
				,[Ins_code]						= @Ins_code			
				,[Cis_contact1]					= @Cis_contact1
				,[Cis_contact2]					= @Cis_contact2
				,[Cis_price]					= @Cis_price			
				,[Cis_referralDate]				= @Cis_referralDate
				,[Pro_code]						= @Pro_code			
				,[Cis_caseSupervisor]			= @Cis_caseSupervisor	
				,[Cis_Longshore]				= @Cis_Longshore		
				,[Cis_companyStatus]			= @Cis_companyStatus	
				,[Cis_other]					= @Cis_other			
				,[Cis_otherText]				= @Cis_otherText		
				,[Cis_presumption]				= @Cis_presumption
				,[Cis_acuity]					= @Cis_acuity		
				,[Cis_translation]				= @Cis_translation			
				,[Cis_transportation]			= @Cis_transportation			
				,[Cis_physicalTherapy]			= @Cis_physicalTherapy		
				,[Cis_permisionContact]			= @Cis_permisionContact		
				,[Cis_translationCompany]		= @Cis_translationCompany		
				,[Cis_transportationCompany]	= @Cis_transportationCompany	
				,[Cis_physicalTherapyCompany]	= @Cis_physicalTherapyCompany	
				,[Cis_permisionContactCompany]	= @Cis_permisionContactCompany
				,[Cis_comment]					= @Cis_comment		
			WHERE	[Cis_code]					= @Cis_code

			SELECT @Cis_code AS CaseErrorCode, '' AS ErrorMessage;
		COMMIT TRANSACTION																		
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS CaseErrorCode, ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION
	END CATCH	
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_ATTORNEY_FOR_FIND_MATCHES','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_ATTORNEY_FOR_FIND_MATCHES
GO
CREATE PROCEDURE SP_LIST_ATTORNEY_FOR_FIND_MATCHES
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	8/1/2016.
-- system			:	Billing.
-- Program			:	Attorney.
-- Description		:	Get all attorneys for find_matches.
-- change log		:
--=============================================
AS
BEGIN 
	SELECT [Att_code] AS [Codigo]
		  ,[Att_firstName] + ' ' + [Att_lastName] AS [NombreCompleto]
	FROM [Attorney]
	WHERE     [Att_status] = 1
		  AND LTRIM(RTRIM([Att_firstName])) <> '' 
		  AND LTRIM(RTRIM([Att_lastName])) <> '' 
	ORDER BY [Att_lastName] ASC
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_MEDICAL_FOR_FIND_MATCHES','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_MEDICAL_FOR_FIND_MATCHES
GO
CREATE PROCEDURE SP_LIST_MEDICAL_FOR_FIND_MATCHES
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	8/1/2016.
-- system			:	Billing.
-- Program			:	Medical.
-- Description		:	Get all doctors for find_matches.
-- change log		:
--=============================================
AS
BEGIN
	SELECT [Med_code] AS [Codigo]
		  ,[Med_firstName] + ' ' + [Med_lastName] AS [NombreCompleto]
		  ,[Med_address] AS [Direccion]
	FROM [Medical]
	WHERE     [Med_status] = 1 AND
		      LTRIM(RTRIM([Med_firstName])) <> '' 
		  AND LTRIM(RTRIM([Med_lastName])) <> '' 
		  -- AND Med_firstName not LIKE '%---%'
		  -- OR  Med_lastName not LIKE '%---%' 
	ORDER BY [Med_lastName] ASC
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_CASE_MEDICAL','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_CASE_MEDICAL
GO
CREATE PROCEDURE SP_LIST_CASE_MEDICAL 
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	8/1/2016.
-- system			:	Billing.
-- Program			:	Case.
-- Description		:	List all doctors who belong to a case.
-- change log		:
--=============================================
(
	@Cis_code	INT
)
AS
BEGIN
	SELECT  [Codigo] 
	       ,[NombreCompleto]
	       ,[Direccion]
	       ,[Ciudad]
	       ,[Estado]
	       ,[CodigoPostal]
	       ,[ExtensionCodigoPostal]
	       ,[Telefono]
	       ,[ExtensionTelefono]
	       ,[TelefonoAlternativo]
	       ,[Fax]
	       ,[Especialidad]
	       ,[Oficina]
	FROM 
		(SELECT [MEDI].[Med_code] AS [Codigo]
			  ,[MEDI].[Med_firstName] + ' ' + [MEDI].[Med_lastName] AS [NombreCompleto]
		      ,[MEDI].[Med_address] AS [Direccion]
			  ,[MEDI].[Med_city] AS [Ciudad]
			  ,[MEDI].[Med_state] AS [Estado]
			  ,[MEDI].[Med_zipCode] AS [CodigoPostal]
			  ,[MEDI].[Med_zipCodeExt] AS [ExtensionCodigoPostal]
			  ,[MEDI].[Med_phone] AS [Telefono]
			  ,[MEDI].[Med_phoneExt] AS [ExtensionTelefono]
			  ,[MEDI].[Med_alternatePhone] AS [TelefonoAlternativo]
			  ,[MEDI].[Med_fax] AS [Fax]
			  ,(SELECT Spe_name FROM Specialty WHERE Spe_code = [MEDI].[Spe_code]) AS [Especialidad]
			  ,[MEDI].[Med_office] AS [Oficina]
		FROM   [CaseInformationSheetBodyMed] AS [CISM]
			  ,[Medical] AS [MEDI]
		WHERE  [CISM].[Med_code] = [MEDI].[Med_code]	AND
			   [CISM].[Cis_code] = @Cis_code			AND
			   [CISM].Csm_status = 1
		UNION	
		SELECT  [MEDI].[Med_code] AS [Codigo]
			   ,[MEDI].[Med_firstName] + ' ' + [MEDI].[Med_lastName] AS [NombreCompleto]
			   ,[MEDI].[Med_address] AS [Direccion]
			   ,[MEDI].[Med_city] AS [Ciudad]
			   ,[MEDI].[Med_state] AS [Estado]
			   ,[MEDI].[Med_zipCode] AS [CodigoPostal]
			   ,[MEDI].[Med_zipCodeExt] AS [ExtensionCodigoPostal]
			   ,[MEDI].[Med_phone] AS [Telefono]
			   ,[MEDI].[Med_phoneExt] AS [ExtensionTelefono]
			   ,[MEDI].[Med_alternatePhone] AS [TelefonoAlternativo]
			   ,[MEDI].[Med_fax] AS [Fax]
			   ,(SELECT Spe_name FROM Specialty WHERE Spe_code = [MEDI].[Spe_code]) AS [Especialidad]
			   ,[MEDI].[Med_office] AS [Oficina]
		FROM    [Evento] AS [EVEN]
			   ,[Medical] AS [MEDI]
		WHERE   [EVEN].[Med_code] = [MEDI].[Med_code] AND
			    [EVEN].Cis_code = @Cis_code			AND
			    [EVEN].Eve_vigencia = 1				AND
			    [EVEN].Ese_codigo IN (1,5)) AS [TDoctoresCaso]
	ORDER BY [NombreCompleto] ASC
END
GO

-- *******************************************************************************************************		

IF (OBJECT_ID('SP_LIST_CASE_ATTORNEY','P') IS NOT NULL)															
	DROP PROCEDURE SP_LIST_CASE_ATTORNEY																		
GO																												
CREATE PROCEDURE SP_LIST_CASE_ATTORNEY																			
--=============================================																	
-- Company			:	ITUsaServices.																			
-- Author			:	Gabriel Gil 																			
-- creation date	:	8/2/2016.																				
-- system			:	Billing.																				
-- Program			:	Case.																					
-- Description		:	List all attorneys who belong to a case.												
-- change log		:																							
--=============================================																	
(																												
	@Cis_code	INT																								
)																												
AS																												
BEGIN																											
	SELECT [ATTO].[Att_code] AS [Codigo]																		
		  ,[ATTO].[Att_firstName] + ' ' + [ATTO].[Att_lastName] AS [NombreCompleto]								
	      ,[ATTO].[Att_address] AS [Direccion]																	
		  ,[ATTO].[Att_city] AS [Ciudad]																		
		  ,[ATTO].[Att_state] AS [Estado]																		
		  ,[ATTO].[Att_zipCode] AS [CodigoPostal]																
		  ,[ATTO].[Att_zipCodeExt] AS [ExtensionCodigoPostal]													
		  ,[ATTO].[Att_phone] AS [Telefono]																		
		  ,[ATTO].[Att_fax] AS [Fax]																			
		  ,(SELECT Spe_name FROM Specialty WHERE Spe_code = [ATTO].[Spe_code]) AS [Especialidad]				
		  ,[ATTO].[Att_assistant] AS [Asistente]																
	FROM  [CaseInformationSheetBodyAtt] AS [CISA]																
		 ,[Attorney] AS [ATTO]																					
	WHERE [CISA].[Att_code] = [ATTO].[Att_code] AND																
		  [CISA].[Cis_code] = @Cis_code AND																		
		  [CISA].Csa_status = 1																				
	ORDER BY [ATTO].[Att_firstName] ASC																			
END																												
GO																												

-- *******************************************************************************************************

IF (OBJECT_ID('SP_ASSIGN_MEDICAL_TO_CASE','P') IS NOT NULL)
	DROP PROCEDURE SP_ASSIGN_MEDICAL_TO_CASE
GO
CREATE PROCEDURE SP_ASSIGN_MEDICAL_TO_CASE
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	8/3/2016.
-- system			:	Billing.
-- Program			:	Case.
-- Description		:	Assign a medical to a case.
-- change log		:
--=============================================
(
	@Cis_code			INT				= 1447
   ,@Med_code			INT				 = 1667
   ,@Csm_provenance		VARCHAR(100)	 = 'sadasdf'
   ,@Use_code			INT				= 98
)
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @Contador INT

	BEGIN TRY
		BEGIN TRANSACTION
			SET @Contador = (SELECT COUNT(*)
							 FROM CaseInformationSheetBodyMed
							 WHERE Cis_code = @Cis_code AND
								   Med_code = @Med_code AND
								   Csm_status = 1)

			IF (@Contador = 0)
			BEGIN
				INSERT INTO CaseInformationSheetBodyMed(Cis_code			
														,Cis_code_old
													   ,Med_code
													   ,Med_code_old
													   ,Csm_date
													   ,Csm_provenance
													   ,Use_code
													   ,Use_code_old)
				VALUES(@Cis_code
					 ,(SELECT Cis_code_old FROM CaseInformationSheetHead WHERE Cis_code = @Cis_code)
					  ,@Med_code
					  ,(SELECT Med_code_old FROM Medical WHERE Med_code = @Med_code)
					  ,GETDATE()
					  ,@Csm_provenance
					  ,@Use_code
					  ,(SELECT Use_code_old FROM [User] WHERE Use_code = @Use_code))

				SELECT 0 AS Indicator, 'Doctor assigned correctly' AS ErrorMessage; -- Indica que se asignó el doctor al caso.
			END
			ELSE
			BEGIN
				SELECT 1 AS Indicator, 'This doctor has already been assigned to this case.' AS ErrorMessage; -- Indica que no se asignó el doctor al caso por que ya existe.
			END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS Indicator, ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION
	END CATCH
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_DELETE_MEDICAL_FROM_CASE','P') IS NOT NULL)
	DROP PROCEDURE SP_DELETE_MEDICAL_FROM_CASE
GO
CREATE PROCEDURE SP_DELETE_MEDICAL_FROM_CASE
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	8/9/2016.
-- system			:	Billing.
-- Program			:	Case.
-- Description		:	Delete a medical from a case (Logical delete).
-- change log		:
--=============================================
(
	@Cis_code INT = 1447
   ,@Med_code INT = 1667
)
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @Contador INT

	BEGIN TRY
		BEGIN TRANSACTION
			SET @Contador = (SELECT COUNT(*)
							 FROM Evento
							 WHERE Cis_code		= @Cis_code AND
								   Med_code		= @Med_code AND
								   Eve_vigencia = 1			AND
								   Ese_codigo	IN (1, 5))

			IF (@Contador = 0)
			BEGIN
				UPDATE CaseInformationSheetBodyMed
				SET	   Csm_status = 0
				WHERE  Cis_code = @Cis_code	AND
					   Med_code = @Med_code

				SELECT 0						   AS Indicator, 
					   'Doctor removed correctly' AS ErrorMessage; -- Indica que se eliminó el doctor del caso.
			END
			ELSE
			BEGIN
				SELECT 1 AS Indicator, 
					   'You can´t remove this doctor because is related to a event.' AS ErrorMessage; -- Indica que no se puede eliminar por que está relacionado a un evento.
			END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER()  AS Indicator, 
			   ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION
	END CATCH
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_ASSIGN_ATTORNEY_TO_CASE','P') IS NOT NULL)
	DROP PROCEDURE SP_ASSIGN_ATTORNEY_TO_CASE
GO
CREATE PROCEDURE SP_ASSIGN_ATTORNEY_TO_CASE
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	8/10/2016.
-- system			:	Billing.
-- Program			:	Case.
-- Description		:	Assign a attorney to a case.
-- change log		:
--=============================================
(
	@Cis_code			INT				= 1447
   ,@Att_code			INT				 = 1667
)
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @Contador INT

	BEGIN TRY
		BEGIN TRANSACTION
			SET @Contador = (SELECT COUNT(*)
							 FROM CaseInformationSheetBodyAtt
							 WHERE Cis_code = @Cis_code AND
								   Att_code = @Att_code AND
								   Csa_status = 1)

			IF (@Contador = 0)
			BEGIN				
				INSERT INTO CaseInformationSheetBodyAtt(Cis_code			
														,Cis_code_old
													   ,Att_code
													   ,Att_code_old)
				VALUES(@Cis_code
					 ,(SELECT Cis_code_old FROM CaseInformationSheetHead WHERE Cis_code = @Cis_code)
					 ,@Att_code
					 ,(SELECT Att_code_old FROM Attorney WHERE Att_code = @Att_code))

				SELECT 0 AS Indicator, 'Attorney assigned correctly' AS ErrorMessage; -- Indica que se asignó el abogado al caso.
			END
			ELSE
			BEGIN
				SELECT 1 AS Indicator, 'This attorney has already been assigned to this case.' AS ErrorMessage; -- Indica que no se asignó el abogado al caso por que ya existe.
			END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS Indicator, ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION
	END CATCH
END
GO

/*
select top 10 * from Attorney order by Att_code desc
-- delete from Attorney where Att_code in (499)

select * from CaseInformationSheetBodyAtt where Cis_code = 
(select Cis_code from CaseInformationSheetHead where Cis_caseCode = '1910471-1')
*/

-- *******************************************************************************************************

IF (OBJECT_ID('SP_DELETE_ATTORNEY_FROM_CASE','P') IS NOT NULL)
	DROP PROCEDURE SP_DELETE_ATTORNEY_FROM_CASE
GO
CREATE PROCEDURE SP_DELETE_ATTORNEY_FROM_CASE
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	8/10/2016.
-- system			:	Billing.
-- Program			:	Case.
-- Description		:	Delete a attorney from a case (Logical delete).
-- change log		:
--=============================================
(
	@Cis_code INT = 1447
   ,@Att_code INT = 1667
)
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @Contador INT

	BEGIN TRY
		BEGIN TRANSACTION
			UPDATE CaseInformationSheetBodyAtt
			SET	   Csa_status = 0
			WHERE  Cis_code = @Cis_code	AND
				   Att_code = @Att_code

			SELECT 0						    AS Indicator,
				   'Attorney removed correctly' AS ErrorMessage; -- Indica que se eliminó el doctor del caso.
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER()  AS Indicator, 
			   ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION
	END CATCH
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_UPDATE_SEX_PATIENT','P') IS NOT NULL)
	DROP PROCEDURE SP_UPDATE_SEX_PATIENT
GO
CREATE PROCEDURE SP_UPDATE_SEX_PATIENT
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	8/15/2016.
-- System			:	Billing.
-- Program			:	Patient.
-- Description		:	Update the sex of a Patient.
-- Change Log		:
--=============================================
(
 @Pat_Code INT		=	2446
,@Pat_sex CHAR(1)	=	'F'
)
AS
BEGIN
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

			UPDATE [Patient] 
			SET	   [Pat_sex]  = @Pat_sex 
			WHERE  [Pat_code] = @Pat_Code
			
			SELECT @Pat_Code AS PatientErrorCode, '' AS ErrorMessage;
		COMMIT TRANSACTION				
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS PatientErrorCode, ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION
	END CATCH	
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_COUNT_DATAENTRY','P') IS NOT NULL)
	DROP PROCEDURE SP_COUNT_DATAENTRY
GO
CREATE PROCEDURE SP_COUNT_DATAENTRY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil                                                                                                   
-- creation date	:	8/29/2016.
-- System			:	Billing.
-- Program			:	DataEntry.
-- Description		:	Get all data entries.
-- Change Log		:
--=============================================
(
	@CantidadTotalEntradas	INT OUTPUT
   ,@Cis_Code				INT			= 3164
	/*
	select Cis_code, count(*) from DataEntry group by Cis_code
 
	declare @CantidadTotalEntradas int 
	exec SP_COUNT_DATAENTRY @CantidadTotalEntradas output, 3155
	select @CantidadTotalEntradas
	*/ 
)
AS
BEGIN
	SET NOCOUNT ON

	-- DECLARE @Ins_code INT
	DECLARE @Ins_name			VARCHAR(100)
	DECLARE @CantidadEntradas	INT		 =		0

	BEGIN TRY
		BEGIN TRANSACTION
		
			-- Obtiene el nombre de aseguradora del caso consultado.
			SELECT @Ins_name = (SELECT Ins_name	
								FROM Insurer
								WHERE Ins_code = CIS.Ins_code)
			FROM	[CaseInformationSheetHead] AS CIS
			WHERE	[Cis_code] = @Cis_Code

			-- Obtiene el código de aseguradora del caso consultado.
			-- SELECT @Ins_code = [Ins_code]
			-- FROM   [CaseInformationSheetHead]
			-- where  [Cis_code] = @Cis_Code
			
			IF (LTRIM(RTRIM(@Ins_name)) = 'AMTRUST C/O CARLISLE & ASSOC') -- Si la aseguradora es: "AMTRUST C/O CARLISLE & ASSOC" cuyo código original es: 'Fe16I00064'
			BEGIN
				
				-- Se crea una tabla temporal.
				-- ***************************				
				DECLARE @Tabla TABLE
				(
					 [Id]				INT				IDENTITY	
					,[Dae_code]			INT					
					,[Dae_code_old]		CHAR(10)
					,[Dae_date]			DATE				
					,[Act_code]			INT					
					,[Dae_hourAct]		DECIMAL(10, 2)		
					,[Hour]				DECIMAL(10, 2)		
					,[Dae_milesAct]		DECIMAL(10, 2)		
					,[Dae_comment]		VARCHAR(8000)		
					,[Number]			INT					
					,[Flag]				CHAR(1)				
					,[InicialesUsuario]	CHAR(2)								
				)				
				-- **************************
				
				INSERT INTO @Tabla([Dae_code]								-- Código del DataEntry.																				(DataEntry)
								  ,[Dae_date]								-- Fecha del DataEntry.																					(DataEntry)
								  ,[Act_code]								-- Código de la actividad relacionada al DataEntry.														(Activity)
								  ,[Dae_hourAct]							-- Representa tiempo.																					(DataEntry)
								  ,[Hour]									-- Representa tiempo en base a si el tipo de actividad se mide en un factor que puede o no ser tiempo.
								  ,[Dae_milesAct]							--																										(DataEntry)
								  ,[Dae_comment]							-- Comentario del DataEntry.																			(DataEntry)
								  ,[Number]									
								  ,[Flag]
								  ,[InicialesUsuario])						-- Usuario que registró el DataEntry.																	(DataEntry)
				SELECT			   [C1].[Dae_code]			AS [Dae_code]
								  ,[C1].[Dae_date]			AS [Dae_date]
								  ,[C1].[Act_code]			AS [Act_code]
								  ,[C1].[Dae_hourAct]		AS [Dae_hourAct]
								  ,[C1].[Hour]				AS [Hour]
								  ,[C1].[Dae_milesAct]		AS [Dae_milesAct]
								  ,[C1].[Dae_comment]		AS [Dae_comment]
								  ,NULL						AS [Number]
								  ,'T'						AS [Flag]
								  ,[C1].[InicialesUsuario]	AS [InicialesUsuario]
				FROM
				   (SELECT  ROW_NUMBER() OVER(ORDER BY [DE].[Dae_date] ASC)														AS [Row]
						   ,[AT].[Aty_code]																						AS [Aty_code]			-- Código del tipo de actividad						(ActivityType)	
						   ,[DE].[Dae_code]																						AS [Dae_code]			-- Código del DataEntry								(DataEntry)
						   ,[DE].[Dae_date]																						AS [Dae_date]			-- Fecha del DataEntry								(DataEntry)
						   ,[AC].[Act_code]																						AS [Act_code]			-- Código de la actividad relacionada al DataEntry	(Activity)	
						   ,[DE].[Dae_hourAct]																					AS [Dae_hourAct]		-- Representa tiempo.								(DataEntry)
						   ,CASE
								WHEN [AC].[Aty_code] = 2 THEN 0 -- Si el tipo de actividad es de la que se mide por otro tipo de factor que no sea tiempo.
								ELSE [DE].[Dae_hourAct]
							END																									AS [Hour]				-- Representa tiempo en base a si el tipo de actividad se mide en un factor que puede o no ser tiempo.
						   ,[DE].[Dae_milesAct]																					AS [Dae_milesAct]
						   ,[DE].[Dae_comment]																					AS [Dae_comment]		-- Nota de la factura.
						   ,SUBSTRING(UPPER([US].[Use_firstName]),1 ,1) + SUBSTRING(UPPER([US].[Use_lastName]),1 ,1)			AS [InicialesUsuario]
					FROM    [DataEntry]		AS [DE] 
						   ,[Activity]		AS [AC] 
						   ,[ActivityType]	AS [AT]
						   ,[User]			AS [US]
					WHERE		[DE].[Act_code]				=		[AC].[Act_code]	-- Condición de combinación ("DataEntry" con "Activity").
							AND [AC].[Aty_code]			    =       [AT].[Aty_code]	-- Condición de combinación ("Activity" con "ActivityType").
							AND [DE].[Use_code]				=		[US].Use_code	-- Condición de combinación ("DataEntry" con "User").
							AND [DE].[Cis_code]				=		@Cis_Code		-- Condición de filtro (Que el DataEntry pertenezca al caso consutado).
							AND [DE].[Dae_closedDate]		IS		NULL			-- Condición de filtro (Fecha de cierre de la factura).
							AND [DE].[Dae_invoiceStatus]	=		0				-- Condición de filtro (Verifica que la factura esté abierta).
							AND [DE].[Dae_parameterDate]	IS		NULL			-- Condición de filtro (Fecha en la que se cierra una factura).
							AND [DE].[Dae_deletingStatus]	=		0				-- Condición de filtro (Que la factura no haya sido anulada).
							AND [DE].[Dae_facturable]		=		1)				-- Indica que el data entry es facturable (Cuando se genera desde el billing siempre es 1, cuando se genera desde el calendar calendar puede ser 0 o 1).
				    AS [C1] -- [C1 es alias de tabla]
					GROUP BY [C1].[Row]
							,[C1].[Dae_code]
							,[C1].[Dae_date]
							,[C1].[Act_code]
							,[C1].[Dae_hourAct]
							,[C1].[Dae_milesAct]
							,[C1].[Dae_comment]
							,[C1].[Aty_code]
							,[C1].[Hour]
							,[C1].[InicialesUsuario]											
					ORDER BY [C1].[Dae_date] ASC
							,[C1].[Dae_code] ASC

				DECLARE @Count		INT = (SELECT COUNT(*) FROM @Tabla) 
				DECLARE @Next		INT = 1
				DECLARE @Next2		INT = 1
				DECLARE @Suma		DECIMAL(10,2)
				DECLARE @Dae_code	INT

				WHILE (@Count > 0 AND @Next <= @Count)
				BEGIN
					SELECT @Suma = SUM([Hour])
					FROM @Tabla
					WHERE [Id] <= @Next AND
					   	  [Flag] = 'T'

					IF(@Suma <= 9)
					BEGIN
						UPDATE @Tabla
						SET	   [Number]  = @Next2
						WHERE  [Id]      = @Next

						SELECT @Dae_code = [Dae_code]
						FROM   @Tabla
						WHERE  [Id]      = @Next
					END
					ELSE
					BEGIN
						UPDATE @Tabla
						SET    [Flag] = 'F'
						WHERE  [Id]   < @Next

						SET @Next2 = @Next2 + 1

						UPDATE @Tabla
						SET    [Number] = @Next2
						WHERE  [Id]		= @Next

						SELECT @Dae_code = [Dae_code]
						FROM   @Tabla
						WHERE  [Id]	     = @Next
					END

					SET @Next = @Next + 1
				END

				-- -----------------------------------
				UPDATE  [DataEntry]
				SET		[Dae_facNum] = [TB].[Number]
				FROM	[DataEntry] AS [DE]	
						INNER JOIN
						@Tabla		AS [TB]
						ON ([DE].[Dae_code] = [TB].[Dae_code])
				-- -----------------------------------

				select @CantidadTotalEntradas = (select count(*) from
				(SELECT [C1].[Dae_code]																AS [Dae_code]
					  ,[C1].[Dae_code_old]															AS [Dae_code_old]
					  ,[C1].[Dae_date]																AS [Dae_date]
					  ,[C1].[Act_code]																AS [Act_code]
					  ,[C1].[Act_code_old]															AS [Act_code_old]
					  ,[C1].[Dae_hourAct]															AS [Dae_hourAct]
					  ,[C1].[Dae_milesAct]															AS [Dae_milesAct]
					  ,LTRIM(RTRIM(ISNULL([C1].[Dae_comment], '')))                                 AS [Dae_comment]
					  ,cast( CASE		
							WHEN [C1].[Aty_code] = 2 THEN 0		
							ELSE SUM([C2].[Hour])	
					   END as decimal)		AS [Acumulado]
					  ,[C1].[Row]																	AS [Row]
					  ,[C1].[Dae_facNum]															AS [Dae_facNum]
					  ,[C1].[InicialesUsuario]														AS [InicialesUsuario]
				FROM (SELECT [TB].[Id]																		AS [Row]
					        ,[AC].[Aty_code]																AS [Aty_code]
							,[TB].[Dae_code]																AS [Dae_code]
							,[TB].[Dae_code_old]															AS [Dae_code_old]
							,[TB].[Dae_date]																AS [Dae_date]
							,[AC].[Act_code]																AS [Act_code]
							,[AC].[Act_code_old]															AS [Act_code_old]
							,[TB].[Dae_hourAct]																AS [Dae_hourAct]
							,CASE	WHEN [AC].[Aty_code] = 2 THEN 0		ELSE [TB].[Dae_hourAct]		END		AS [Hour]							
							,[TB].[Dae_milesAct]															AS [Dae_milesAct]
							,LTRIM(RTRIM([TB].[Dae_comment]))  											    AS [Dae_comment]
							,[TB].[Number]																	AS [Dae_facNum]
							,[TB].[InicialesUsuario]														AS [InicialesUsuario]
					    FROM @Tabla         AS [TB]
							,[Activity]     AS [AC]
							,[ActivityType] AS [AT]
						WHERE	  [TB].[Act_code] = [AC].[Act_code]
							  AND [AC].[Aty_code] = [AT].[Aty_code]) AS [C1] -- [C1 es alias de tabla]

					    INNER JOIN

					   (SELECT [TB].[Id]																	AS [Row]
						      ,[AC].[Aty_code]
						      ,[TB].[Dae_code]
						      ,[TB].[Dae_date]
						      ,[AC].[Act_code]
						      ,[TB].[Dae_hourAct]
						      ,CASE WHEN [AC].[Aty_code] = 2 THEN 0		ELSE [TB].[Dae_hourAct] END			AS [Hour]
							  ,[TB].[Dae_milesAct]
						      ,LTRIM(RTRIM([TB].[Dae_comment]))                                             AS [Dae_comment]
						      ,[TB].[Number]																AS [Dae_facNum]
						      ,[TB].[InicialesUsuario]
						FROM @Tabla         AS [TB]
						    ,[Activity]		AS [AC]
						    ,[ActivityType] AS [AT]
					    WHERE	  [TB].[Act_code] = [AC].[Act_code] 
							  AND [AC].[Aty_code] = [AT].[Aty_code]) AS [C2] -- [C2 es alias de tabla]

						ON ([C1].[Row] >= [C2].[Row])

				GROUP BY [C1].[Row]
						,[C1].[Dae_code]
						,[C1].[Dae_code_old]
						,[C1].[Dae_date]
						,[C1].[Act_code]
						,[C1].[Act_code_old]
						,[C1].[Dae_hourAct]
						,[C1].[Dae_milesAct]
						,[C1].[Dae_comment]
						,[C1].[Aty_code]
						,[C1].[Dae_facNum]
						,[C1].[InicialesUsuario]	) as sdfsd)
				-- ORDER BY [C1].[Row]			
				
				
			END
			ELSE -- Si la aseguradora es diferente de: "AMTRUST C/O CARLISLE & ASSOC" cuyo código original es: 'Fe16I00064'
			BEGIN
				select @CantidadTotalEntradas = (select count(*) from
				(SELECT [DE].[Dae_code]																			-- AS [Dae_code]
					  ,[DE].[Dae_code_old]																		-- AS [Dae_code_old]
					  ,[DE].[Dae_date]																			-- AS [Dae_date]
					  ,[AC].[Act_code]																			-- AS [Act_code]
					  ,[AC].[Act_code_old]																		-- AS [Act_code_old]
					  ,[DE].[Dae_hourAct]																		-- AS [Dae_hourAct]
					  ,[DE].[Dae_milesAct]																		-- AS [Dae_milesAct]
					  -- ,LTRIM(RTRIM(ISNULL([DE].[Dae_comment], '')))									            -- AS [Dae_comment]
					  -- ,cast(0 AS DECIMAL)																	    --     AS [Acumulado]
					  -- ,0																				        -- AS [Row]
					  -- ,0																				        -- AS [Dae_facNum]					  
					  -- ,SUBSTRING(UPPER([US].[Use_firstName]),1 ,1) + SUBSTRING(UPPER([US].[Use_lastName]),1 ,1) -- AS [InicialesUsuario]
				FROM [DataEntry] AS [DE]
					,[Activity]	 AS [AC]
					,[User]		 AS [US]
				WHERE		[DE].[Cis_code]				=		@Cis_Code
					  AND	[DE].[Act_code]				=		[AC].[Act_code]
					  AND	[DE].[Dae_closedDate]		IS		NULL
					  AND	[DE].[Dae_invoiceStatus]	=		0
					  AND	[DE].[Dae_parameterDate]	IS		NULL
					  AND	[DE].[Dae_deletingStatus]	=		0
					  AND	[DE].[Dae_facturable]		=		1
					  AND	[DE].[Use_code]				=		[US].[Use_code]		) as sdfasd)
				--ORDER BY [DE].[Dae_date] ASC
					--    ,[DE].[Dae_code] ASC	

					
			END

			

		COMMIT TRANSACTION				
	END TRY
	BEGIN CATCH
		
	END CATCH	
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_GET_DATAENTRY','P') IS NOT NULL)
	DROP PROCEDURE SP_GET_DATAENTRY
GO
CREATE PROCEDURE SP_GET_DATAENTRY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil                                                                                                   
-- creation date	:	6/1/2017.
-- System			:	Billing.
-- Program			:	DataEntry.
-- Description		:	Get a data entry.
-- Change Log		:
--=============================================
(
	 @codigoDeEntrada INT = 702553
)
AS
BEGIN
	SELECT [DE].[Dae_date]
	      ,[DE].[Act_code]
		  ,(SELECT [Act_description] FROM [Activity] WHERE [Act_code] = [DE].[Act_code]) AS [Act_description]
	      ,[DE].[Dae_hourAct]
	      ,[DE].[Dae_milesAct]
	      ,[DE].[Dae_comment]
		  ,[DE].[Dae_facturable]
		  ,[DE].[Dae_Call]
	FROM   [DataEntry] AS [DE]
	WHERE  [Dae_code] = @codigoDeEntrada
END
GO

-- *******************************************************************************************************

/*
SP_LIST_DATAENTRY 3215, 1
GO
SP_LIST_DATAENTRY 3215, 2
go
SP_LIST_DATAENTRY 3215, 3
go
SP_LIST_DATAENTRY 3215, 4
go
SP_LIST_DATAENTRY 3215, 5
SP_LIST_DATAENTRY 3215, 6
SP_LIST_DATAENTRY 3215, 7
SP_LIST_DATAENTRY 3215, 8
SP_LIST_DATAENTRY 3215, 9
SP_LIST_DATAENTRY 3215, 10
SP_LIST_DATAENTRY 3215, 11
SP_LIST_DATAENTRY 3215, 12
SP_LIST_DATAENTRY 3215, 13
SP_LIST_DATAENTRY 3215, 14
SP_LIST_DATAENTRY 3215, 15
*/
IF (OBJECT_ID('SP_LIST_DATAENTRY','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_DATAENTRY
GO
CREATE PROCEDURE SP_LIST_DATAENTRY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil                                                                                                   
-- creation date	:	8/29/2016.
-- System			:	Billing.
-- Program			:	DataEntry.
-- Description		:	Get all data entries.
-- Change Log		:
--=============================================
(
	 @codigoDeCaso	 INT	=	3165
	,@paginaDestino	 INT	=	1 
)
AS
BEGIN
	SET NOCOUNT ON
    
	DECLARE @Ins_name					VARCHAR(100)
	DECLARE @consulta					NVARCHAR(MAX)	
	DECLARE @tamañoDePagina				INT
	DECLARE @parametros					NVARCHAR(MAX)
	DECLARE @primerIndiceDeCadaPagina	INT

	BEGIN TRY
		BEGIN TRANSACTION
		
			CREATE TABLE #entradas
			(	
				 [Dae_code]			INT				NULL
				,[Dae_code_old]		CHAR(10)		NULL
				,[Dae_date]			DATE			NULL
				,[Act_code]			INT				NULL
				,[Act_code_old]		CHAR(10)		NULL
				,[Dae_hourAct]		DECIMAL(10, 2)	NULL
				,[Dae_milesAct]		DECIMAL(10, 2)	NULL
				,[Dae_comment]		VARCHAR(8000)	NULL
				,[Acumulado]		INT				NULL
				,[Row]				INT				NULL
				,[Dae_facNum]		INT				NULL
				,[InicialesUsuario]	CHAR(2)			NULL
				,[Eve_codigo]		INT				NULL
			)

			CREATE TABLE #bloqueDeEntradas
			(	
				 [Dae_code]			INT				NULL
				,[Dae_code_old]		CHAR(10)		NULL
				,[Dae_date]			DATE			NULL
				,[Act_code]			INT				NULL
				,[Act_code_old]		CHAR(10)		NULL
				,[Dae_hourAct]		DECIMAL(10, 2)	NULL
				,[Dae_milesAct]		DECIMAL(10, 2)	NULL
				,[Dae_comment]		VARCHAR(8000)	NULL
				,[Acumulado]		INT				NULL
				,[Row]				INT				NULL
				,[Dae_facNum]		INT				NULL
				,[InicialesUsuario]	CHAR(2)			NULL
				,[Eve_codigo]		INT				NULL
			)

			-- Obtiene el nombre de aseguradora del caso consultado.
			SELECT @Ins_name = (SELECT Ins_name	
								FROM Insurer
								WHERE Ins_code = CIS.Ins_code)
			FROM	[CaseInformationSheetHead] AS CIS
			WHERE	[Cis_code] = @codigoDeCaso

			-- Obtiene el código de aseguradora del caso consultado.
			-- SELECT @Ins_code = [Ins_code]
			-- FROM   [CaseInformationSheetHead]
			-- where  [Cis_code] = @Cis_Code
			
			IF (LTRIM(RTRIM(@Ins_name)) = 'AMTRUST C/O CARLISLE & ASSOC') -- Si la aseguradora es: "AMTRUST C/O CARLISLE & ASSOC" cuyo código original es: 'Fe16I00064'
			BEGIN
				
				-- Se crea una tabla temporal.
				-- ***************************				
				DECLARE @Tabla TABLE
				(
					 [Id]				INT				IDENTITY	
					,[Dae_code]			INT					
					,[Dae_code_old]		CHAR(10)
					,[Dae_date]			DATE				
					,[Act_code]			INT					
					,[Dae_hourAct]		DECIMAL(10, 2)		
					,[Hour]				DECIMAL(10, 2)		
					,[Dae_milesAct]		DECIMAL(10, 2)		
					,[Dae_comment]		VARCHAR(8000)		
					,[Number]			INT					
					,[Flag]				CHAR(1)				
					,[InicialesUsuario]	CHAR(2)								
					,[Eve_codigo]		INT	
				)				
				-- **************************
				
				INSERT INTO @Tabla([Dae_code]								-- Código del DataEntry.																				(DataEntry)
								  ,[Dae_date]								-- Fecha del DataEntry.																					(DataEntry)
								  ,[Act_code]								-- Código de la actividad relacionada al DataEntry.														(Activity)
								  ,[Dae_hourAct]							-- Representa tiempo.																					(DataEntry)
								  ,[Hour]									-- Representa tiempo en base a si el tipo de actividad se mide en un factor que puede o no ser tiempo.
								  ,[Dae_milesAct]							--																										(DataEntry)
								  ,[Dae_comment]							-- Comentario del DataEntry.																			(DataEntry)
								  ,[Number]									
								  ,[Flag]
								  ,[InicialesUsuario]						-- Usuario que registró el DataEntry.																	(DataEntry)
								  ,[Eve_codigo])
				SELECT			   [C1].[Dae_code]			AS [Dae_code]
								  ,[C1].[Dae_date]			AS [Dae_date]
								  ,[C1].[Act_code]			AS [Act_code]
								  ,[C1].[Dae_hourAct]		AS [Dae_hourAct]
								  ,[C1].[Hour]				AS [Hour]
								  ,[C1].[Dae_milesAct]		AS [Dae_milesAct]
								  ,[C1].[Dae_comment]		AS [Dae_comment]
								  ,NULL						AS [Number]
								  ,'T'						AS [Flag]
								  ,[C1].[InicialesUsuario]	AS [InicialesUsuario]
								  ,[C1].[Eve_codigo]
				FROM
				   (SELECT  ROW_NUMBER() OVER(ORDER BY [DE].[Dae_date] ASC)														AS [Row]
						   ,[AT].[Aty_code]																						AS [Aty_code]			-- Código del tipo de actividad						(ActivityType)	
						   ,[DE].[Dae_code]																						AS [Dae_code]			-- Código del DataEntry								(DataEntry)
						   ,[DE].[Dae_date]																						AS [Dae_date]			-- Fecha del DataEntry								(DataEntry)
						   ,[AC].[Act_code]																						AS [Act_code]			-- Código de la actividad relacionada al DataEntry	(Activity)	
						   ,[DE].[Dae_hourAct]																					AS [Dae_hourAct]		-- Representa tiempo.								(DataEntry)
						   ,CASE
								WHEN [AC].[Aty_code] = 2 THEN 0 -- Si el tipo de actividad es de la que se mide por otro tipo de factor que no sea tiempo.
								ELSE [DE].[Dae_hourAct]
							END																									AS [Hour]				-- Representa tiempo en base a si el tipo de actividad se mide en un factor que puede o no ser tiempo.
						   ,[DE].[Dae_milesAct]																					AS [Dae_milesAct]
						   ,[DE].[Dae_comment]																					AS [Dae_comment]		-- Nota de la factura.
						   ,SUBSTRING(UPPER([US].[Use_firstName]),1 ,1) + SUBSTRING(UPPER([US].[Use_lastName]),1 ,1)			AS [InicialesUsuario]
						   ,[DE].[Eve_codigo]
					FROM    [DataEntry]		AS [DE] 
						   ,[Activity]		AS [AC] 
						   ,[ActivityType]	AS [AT]
						   ,[User]			AS [US]
					WHERE		[DE].[Act_code]				=		[AC].[Act_code]	-- Condición de combinación ("DataEntry" con "Activity").
							AND [AC].[Aty_code]			    =       [AT].[Aty_code]	-- Condición de combinación ("Activity" con "ActivityType").
							AND [DE].[Use_code]				=		[US].Use_code	-- Condición de combinación ("DataEntry" con "User").
							AND [DE].[Cis_code]				=		@codigoDeCaso	-- Condición de filtro (Que el DataEntry pertenezca al caso consutado).
							AND [DE].[Dae_closedDate]		IS		NULL			-- Condición de filtro (Fecha de cierre de la factura).
							AND [DE].[Dae_invoiceStatus]	=		0				-- Condición de filtro (Verifica que la factura esté abierta).
							AND [DE].[Dae_parameterDate]	IS		NULL			-- Condición de filtro (Fecha en la que se cierra una factura).
							AND [DE].[Dae_deletingStatus]	=		0				-- Condición de filtro (Que la factura no haya sido anulada).
							AND [DE].[Dae_facturable]		=		1)				-- Indica que el data entry es facturable (Cuando se genera desde el billing siempre es 1, cuando se genera desde el calendar calendar puede ser 0 o 1).
				    AS [C1] -- [C1 es alias de tabla]
					GROUP BY [C1].[Row]
							,[C1].[Dae_code]
							,[C1].[Dae_date]
							,[C1].[Act_code]
							,[C1].[Dae_hourAct]
							,[C1].[Dae_milesAct]
							,[C1].[Dae_comment]
							,[C1].[Aty_code]
							,[C1].[Hour]
							,[C1].[InicialesUsuario]											
							,[C1].[Eve_codigo]
					ORDER BY [C1].[Dae_date] ASC
							,[C1].[Dae_code] ASC

				DECLARE @Count		INT = (SELECT COUNT(*) FROM @Tabla) 
				DECLARE @Next		INT = 1
				DECLARE @Next2		INT = 1
				DECLARE @Suma		DECIMAL(10,2)
				DECLARE @Dae_code	INT

				WHILE (@Count > 0 AND @Next <= @Count)
				BEGIN
					SELECT @Suma = SUM([Hour])
					FROM @Tabla
					WHERE [Id] <= @Next AND
					   	  [Flag] = 'T'

					IF(@Suma <= 9)
					BEGIN
						UPDATE @Tabla
						SET	   [Number]  = @Next2
						WHERE  [Id]      = @Next

						SELECT @Dae_code = [Dae_code]
						FROM   @Tabla
						WHERE  [Id]      = @Next
					END
					ELSE
					BEGIN
						UPDATE @Tabla
						SET    [Flag] = 'F'
						WHERE  [Id]   < @Next

						SET @Next2 = @Next2 + 1

						UPDATE @Tabla
						SET    [Number] = @Next2
						WHERE  [Id]		= @Next

						SELECT @Dae_code = [Dae_code]
						FROM   @Tabla
						WHERE  [Id]	     = @Next
					END

					SET @Next = @Next + 1
				END

				-- -----------------------------------
				UPDATE  [DataEntry]
				SET		[Dae_facNum] = [TB].[Number]
				FROM	[DataEntry] AS [DE]	
						INNER JOIN
						@Tabla		AS [TB]
						ON ([DE].[Dae_code] = [TB].[Dae_code])
				-- -----------------------------------

				-- insert into .......
				INSERT INTO #entradas( [Dae_code]
											  ,[Dae_code_old]		
											  ,[Dae_date]			
											  ,[Act_code]			
											  ,[Act_code_old]		
											  ,[Dae_hourAct]		
											  ,[Dae_milesAct]		
											  ,[Dae_comment]		
											  ,[Acumulado]		
											  ,[Row]				
											  ,[Dae_facNum]		
											  ,[InicialesUsuario]
											  ,[Eve_codigo])
				SELECT [C1].[Dae_code]																AS [Dae_code]
					  ,[C1].[Dae_code_old]															AS [Dae_code_old]
					  ,[C1].[Dae_date]																AS [Dae_date]
					  ,[C1].[Act_code]																AS [Act_code]
					  ,[C1].[Act_code_old]															AS [Act_code_old]
					  ,[C1].[Dae_hourAct]															AS [Dae_hourAct]
					  ,[C1].[Dae_milesAct]															AS [Dae_milesAct]
					  ,LTRIM(RTRIM(ISNULL([C1].[Dae_comment], '')))                                 AS [Dae_comment]
					  ,cast( CASE		
							WHEN [C1].[Aty_code] = 2 THEN 0		
							ELSE SUM([C2].[Hour])	
					   END as decimal)		AS [Acumulado]
					  ,[C1].[Row]																	AS [Row]
					  ,[C1].[Dae_facNum]															AS [Dae_facNum]
					  ,[C1].[InicialesUsuario]														AS [InicialesUsuario]
					  ,[C1].[Eve_codigo]
				FROM (SELECT [TB].[Id]																		AS [Row]
					        ,[AC].[Aty_code]																AS [Aty_code]
							,[TB].[Dae_code]																AS [Dae_code]
							,[TB].[Dae_code_old]															AS [Dae_code_old]
							,[TB].[Dae_date]																AS [Dae_date]
							,[AC].[Act_code]																AS [Act_code]
							,[AC].[Act_code_old]															AS [Act_code_old]
							,[TB].[Dae_hourAct]																AS [Dae_hourAct]
							,CASE	WHEN [AC].[Aty_code] = 2 THEN 0		ELSE [TB].[Dae_hourAct]		END		AS [Hour]							
							,[TB].[Dae_milesAct]															AS [Dae_milesAct]
							,LTRIM(RTRIM([TB].[Dae_comment]))  											    AS [Dae_comment]
							,[TB].[Number]																	AS [Dae_facNum]
							,[TB].[InicialesUsuario]														AS [InicialesUsuario]
							,[TB].[Eve_codigo]
					    FROM @Tabla         AS [TB]
							,[Activity]     AS [AC]
							,[ActivityType] AS [AT]
						WHERE	  [TB].[Act_code] = [AC].[Act_code]
							  AND [AC].[Aty_code] = [AT].[Aty_code]) AS [C1] -- [C1 es alias de tabla]

					    INNER JOIN

					   (SELECT [TB].[Id]																	AS [Row]
						      ,[AC].[Aty_code]
						      ,[TB].[Dae_code]
						      ,[TB].[Dae_date]
						      ,[AC].[Act_code]
						      ,[TB].[Dae_hourAct]
						      ,CASE WHEN [AC].[Aty_code] = 2 THEN 0		ELSE [TB].[Dae_hourAct] END			AS [Hour]
							  ,[TB].[Dae_milesAct]
						      ,LTRIM(RTRIM([TB].[Dae_comment]))                                             AS [Dae_comment]
						      ,[TB].[Number]																AS [Dae_facNum]
						      ,[TB].[InicialesUsuario]
							  ,[TB].[Eve_codigo]
						FROM @Tabla         AS [TB]
						    ,[Activity]		AS [AC]
						    ,[ActivityType] AS [AT]
					    WHERE	  [TB].[Act_code] = [AC].[Act_code] 
							  AND [AC].[Aty_code] = [AT].[Aty_code]) AS [C2] -- [C2 es alias de tabla]

						ON ([C1].[Row] >= [C2].[Row])

				GROUP BY [C1].[Row]
						,[C1].[Dae_code]
						,[C1].[Dae_code_old]
						,[C1].[Dae_date]
						,[C1].[Act_code]
						,[C1].[Act_code_old]
						,[C1].[Dae_hourAct]
						,[C1].[Dae_milesAct]
						,[C1].[Dae_comment]
						,[C1].[Aty_code]
						,[C1].[Dae_facNum]
						,[C1].[InicialesUsuario]
						,[C1].[Eve_codigo]
				ORDER BY [C1].[Row]
			END
			ELSE -- Si la aseguradora es diferente de: "AMTRUST C/O CARLISLE & ASSOC" cuyo código original es: 'Fe16I00064'
			BEGIN
				-- insert into .......
				INSERT INTO #entradas( [Dae_code]
									  ,[Dae_code_old]		
									  ,[Dae_date]			
									  ,[Act_code]			
									  ,[Act_code_old]		
									  ,[Dae_hourAct]		
									  ,[Dae_milesAct]		
									  ,[Dae_comment]		
									  ,[Acumulado]		
									  ,[Row]				
									  ,[Dae_facNum]		
									  ,[InicialesUsuario]
									  ,[Eve_codigo])
				SELECT [DE].[Dae_code]																			AS [Dae_code]
					  ,[DE].[Dae_code_old]																		AS [Dae_code_old]
					  ,[DE].[Dae_date]																			AS [Dae_date]
					  ,[AC].[Act_code]																			AS [Act_code]
					  ,[AC].[Act_code_old]																		AS [Act_code_old]
					  ,[DE].[Dae_hourAct]																		AS [Dae_hourAct]
					  ,[DE].[Dae_milesAct]																		AS [Dae_milesAct]
					  ,LTRIM(RTRIM(ISNULL([DE].[Dae_comment], '')))									            AS [Dae_comment]
					  ,cast(0 AS DECIMAL)																	        AS [Acumulado]
					  ,0																				        AS [Row]
					  ,0																				        AS [Dae_facNum]					  
					  ,SUBSTRING(UPPER([US].[Use_firstName]),1 ,1) + SUBSTRING(UPPER([US].[Use_lastName]),1 ,1) AS [InicialesUsuario]
					  ,[DE].[Eve_codigo]
				FROM [DataEntry] AS [DE]
					,[Activity]	 AS [AC]
					,[User]		 AS [US]
				WHERE		[DE].[Cis_code]				=		@codigoDeCaso
					  AND	[DE].[Act_code]				=		[AC].[Act_code]
					  AND	[DE].[Dae_closedDate]		IS		NULL
					  AND	[DE].[Dae_invoiceStatus]	=		0
					  AND	[DE].[Dae_parameterDate]	IS		NULL
					  AND	[DE].[Dae_deletingStatus]	=		0
					  AND	[DE].[Dae_facturable]		=		1
					  AND	[DE].[Use_code]				=		[US].[Use_code]
				ORDER BY [DE].[Dae_date] ASC
					    ,[DE].[Dae_code] ASC				
			END

			-- Arma y devuelve el bloque de datos según el número de página que recibe cómo parámetro.
			-- *****************************************************************************************************
			SET @consulta = N'SELECT [Dae_code]' +
								  ', [Dae_code_old]' +
								  ', [Dae_date]' +
								  ', [Act_code]' +		
								  ', [Act_code_old]' +
								  ', [Dae_hourAct]' +
								  ', [Dae_milesAct]' +
								  ', [Dae_comment]' +
								  ', [Acumulado]' +
								  ', [Row]' +
								  ', [Dae_facNum]' +
								  ', [InicialesUsuario]' + 
								  ', [Eve_codigo]' + 
							 ' FROM #entradas' +	
							 ' ORDER BY Dae_date ASC' +
									 ', Dae_code ASC' + 
							 ' OFFSET @primerIndiceDeCadaPagina ROWS FETCH NEXT @tamañoDePagina ROWS ONLY'

			-- Calcula el índice de la primera página según el número de página que recibe el procedimiento como parámetro.
			SET @primerIndiceDeCadaPagina = (@paginaDestino - 1) * 10

			-- Establece el tamaño de página.
			SET @tamañoDePagina = 10

			-- Define los parámetros que van a ser usados dentro de la consulta dinámica SQL
			SET @parametros = N'@primerIndiceDeCadaPagina INT, @tamañoDePagina INT, @codigoDeCaso INT'

			INSERT INTO #bloqueDeEntradas([Dae_code]			
										 ,[Dae_code_old]		
										 ,[Dae_date]			
										 ,[Act_code]			
										 ,[Act_code_old]		
										 ,[Dae_hourAct]		
										 ,[Dae_milesAct]		
										 ,[Dae_comment]		
										 ,[Acumulado]		
										 ,[Row]				
										 ,[Dae_facNum]		
										 ,[InicialesUsuario]
										 ,[Eve_codigo])
			EXECUTE SP_EXECUTESQL @consulta
								, @parametros
								, @primerIndiceDeCadaPagina = @primerIndiceDeCadaPagina
								, @tamañoDePagina = @tamañoDePagina
								, @codigoDeCaso = @codigoDeCaso

			SELECT * FROM #bloqueDeEntradas ORDER BY Dae_date, Dae_code			
			-- *****************************************************************************************************

		COMMIT TRANSACTION				
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT >= 1
			ROLLBACK TRANSACTION			
	END CATCH	
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_GET_COUNT_OF_INVOICE_DETAILS','P') IS NOT NULL)
	DROP PROCEDURE SP_GET_COUNT_OF_INVOICE_DETAILS
GO
CREATE PROCEDURE SP_GET_COUNT_OF_INVOICE_DETAILS
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil
-- creation date	:	5/19/2017.
-- System			:	Billing.
-- Program			:	Billing.
-- Description		:	Get the count of details of invoice.
-- Change Log		:
--=============================================
(      
	@Bih_code_old CHAR(10) = 'M7B0019279'
)
AS
BEGIN
	SELECT COUNT(*)
	FROM	  [BillingBody] AS [BIB]
	LEFT JOIN [DataEntry]	AS [DAE]
		   ON [BIB].[Dae_code] = [DAE].[Dae_code]
	WHERE [BIB].[Bih_code] = (SELECT [Bih_code] FROM [BillingHead] WHERE [Bih_code_old] = @Bih_code_old) 
	  AND [BIB].[Bib_deletingStatus] = 0
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_DELETE_BILLING_BODY','P') IS NOT NULL)
	DROP PROCEDURE SP_DELETE_BILLING_BODY
GO
CREATE PROCEDURE SP_DELETE_BILLING_BODY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil.
-- creation date	:	11/30/2016.
-- System			:	Billing.
-- Program			:	Billing.
-- Description		:	Delete (logically) the detail of a invoice.
-- Change Log		:
--=============================================
(
	@bib_code	  INT = 0
   ,@Use_code	  INT = 0
   ,@Bih_code_old CHAR(10) = 'M7B0020221'
)
AS
BEGIN
	-- Eliminar el detalle de la factura
	UPDATE BillingBody
	SET    Bib_deletingStatus = 1
	      ,Bib_deletedUser    = @Use_code
	WHERE  Bib_code           = @bib_code

	-- Actualiza el total de la factura
	UPDATE BillingHead 
	-- SET    Bih_billTotal = (ROUND(Bih_billTotal, 2) - (SELECT ROUND((ROUND(Bib_hourMile, 2) * ROUND(Bib_priceAct, 2)), 2)
	SET    Bih_billTotal = (Bih_billTotal - (SELECT round((Bib_hourMile * Bib_priceAct),2)
											           FROM   BillingBody 
											           WHERE  Bib_code =  @bib_code ))
	WHERE Bih_code_old = @Bih_code_old
	
	-- select * from BillingHead where Bih_code_old = 'M7B0020221'
	-- update BillingHead set Bih_billTotal = 79.95 where Bih_code_old = 'M7B0020221'
END
go

-- *******************************************************************************************************

IF (OBJECT_ID('SP_GET_INVOICE_AMOUNTS','P') IS NOT NULL)
	DROP PROCEDURE SP_GET_INVOICE_AMOUNTS
GO
CREATE PROCEDURE SP_GET_INVOICE_AMOUNTS
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil
-- creation date	:	5/23/2017.
-- System			:	Billing.
-- Program			:	Billing.
-- Description		:	Get the amounts of a invoice.
-- Change Log		:
--=============================================
(
	@Bih_code_old CHAR(10) = 'M7B0020224'
)
AS
BEGIN
	-- TOTAL DE LA FACTURA
	SELECT--  [BIB].[Bib_servDate]
		  -- ,[BIB].[Act_code]
		  -- ,(SELECT Act_description FROM Activity WHERE Act_code = [BIB].[Act_code]) AS [Act_description]
		  -- ,[BIB].[Bib_hourMile]
		  --- ,[BIB].[Bib_priceAct]
		 -- ROUND(SUM(([BIB].[Bib_hourMile] * [BIB].[Bib_priceAct])),2) as 'TotalAmount'
		 case  
			when (SUM(ROUND((ROUND([BIB].[Bib_hourMile],2) * ROUND([BIB].[Bib_priceAct],2)),2)) is null) then 0
			else SUM(ROUND((ROUND([BIB].[Bib_hourMile],2) * ROUND([BIB].[Bib_priceAct],2)),2)) 
		 end as 'TotalAmount'
		  -- ,[BIB].[Bib_code]			  
		  -- (SELECT Bih_billTotal - Bih_billPay FROM [BillingHead] where Bih_code_old = @Bih_code_old) AS 'BalanceDue'
	FROM	  [BillingBody] AS [BIB]
	LEFT JOIN [DataEntry]	AS [DAE]
		   ON [BIB].[Dae_code] = [DAE].[Dae_code]
	WHERE [BIB].[Bih_code] = (SELECT [Bih_code] FROM [BillingHead] WHERE [Bih_code_old] = @Bih_code_old) 
	  AND [BIB].[Bib_deletingStatus] = 0		

	-- LO QUE SE ADEUDA
	-- SELECT--  [BIB].[Bib_servDate]
		  -- ,[BIB].[Act_code]
		  -- ,(SELECT Act_description FROM Activity WHERE Act_code = [BIB].[Act_code]) AS [Act_description]
		  -- ,[BIB].[Bib_hourMile]
		  -- ,[BIB].[Bib_priceAct]
		  -- SUM(([BIB].[Bib_hourMile] * [BIB].[Bib_priceAct])) as 'TotalAmount'
		  -- ,[BIB].[Bib_code]			  
		  -- DISTINCT((SELECT ROUND((ROUND(Bih_billTotal, 2) - ROUND(Bih_billPay, 2)), 2) FROM [BillingHead] where Bih_code_old = @Bih_code_old)) 
	select top 1 
		  case	
			 when ((SELECT count(*) FROM [BillingHead] where Bih_code_old = @Bih_code_old) = 0) then 0
			 else  (SELECT ROUND((ROUND(Bih_billTotal, 2) - ROUND(Bih_billPay, 2)), 2) FROM [BillingHead] where Bih_code_old = @Bih_code_old)
		  end AS 'BalanceDue'
	from BillingHead as bih
	-- FROM	  [BillingBody] AS [BIB]
	-- LEFT JOIN [DataEntry]	AS [DAE]
	-- 	   ON [BIB].[Dae_code] = [DAE].[Dae_code]
	-- WHERE [BIB].[Bih_code] = (SELECT [Bih_code] FROM [BillingHead] WHERE [Bih_code_old] = @Bih_code_old) 
	--   AND [BIB].[Bib_deletingStatus] = 0		
END
go
-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_BILLING','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_BILLING
GO
CREATE PROCEDURE SP_LIST_BILLING
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil
-- creation date	:	11/17/2016.
-- System			:	Billing.
-- Program			:	Billing.
-- Description		:	List the detail of a invoice.
-- Change Log		:
--=============================================
(      
	@Bih_code_old CHAR(10) = 'M7B0020224'
)
AS
BEGIN
	SELECT [BIB].[Bib_servDate]
		  ,[BIB].[Act_code]
		  ,(SELECT Act_description FROM Activity WHERE Act_code = [BIB].[Act_code]) AS [Act_description]
		  ,[BIB].[Bib_hourMile]
		  ,[BIB].[Bib_priceAct]
		  ,([BIB].[Bib_hourMile] * [BIB].[Bib_priceAct]) as Bib_amoReim
		  ,[BIB].[Bib_code]			  
		  ,(SELECT Bih_billTotal - Bih_billPay FROM [BillingHead] where Bih_code_old = @Bih_code_old) AS 'BalanceDue'
	FROM	  [BillingBody] AS [BIB]
	LEFT JOIN [DataEntry]	AS [DAE]
		   ON [BIB].[Dae_code] = [DAE].[Dae_code]
	WHERE [BIB].[Bih_code] = (SELECT [Bih_code] FROM [BillingHead] WHERE [Bih_code_old] = @Bih_code_old) 
	  AND [BIB].[Bib_deletingStatus] = 0
	ORDER BY CONVERT(SMALLDATETIME, [BIB].[Bib_servDate]) ASC
		    ,ISNULL([DAE].[Dae_code], 2147483647)
END
GO

-- *******************************************************************************************************

/*
DECLARE @numeroFactura CHAR(10) = 'M7B0020220'
EXECUTE SP_LIST_BILLING_2 @numeroFactura, 1
EXECUTE SP_LIST_BILLING_2 @numeroFactura, 2
EXECUTE SP_LIST_BILLING_2 @numeroFactura, 3
EXECUTE SP_LIST_BILLING_2 @numeroFactura, 4
EXECUTE SP_LIST_BILLING_2 @numeroFactura, 5
EXECUTE SP_LIST_BILLING_2 @numeroFactura, 6
EXECUTE SP_LIST_BILLING_2 @numeroFactura, 7
*/
IF (OBJECT_ID('SP_LIST_BILLING_2','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_BILLING_2
GO
CREATE PROCEDURE SP_LIST_BILLING_2
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil
-- creation date	:	5/19/2017.
-- System			:	Billing.
-- Program			:	Billing.
-- Description		:	List the detail of a invoice.
-- Change Log		:
--=============================================
(      
	@Bih_code_old	CHAR(10) = 'M7B0020220'
   ,@paginaDestino	INT   = 1 
)
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @consulta					NVARCHAR(MAX)	
	DECLARE @tamañoDePagina				INT
	DECLARE @parametros					NVARCHAR(MAX)
	DECLARE @primerIndiceDeCadaPagina	INT

	BEGIN TRY
		BEGIN TRANSACTION

			CREATE TABLE [#detalles]
			(	
				 [Bib_servDate]		DATE			NULL
				,[Act_code]			INT				NULL
				,[Act_description]	VARCHAR(255)	NULL
				,[Bib_hourMile]		DECIMAL(10, 2)	NULL
				,[Bib_priceAct]		DECIMAL(10, 2)	NULL
				,[Bib_amoReim]		DECIMAL(10, 2)	NULL
				,[Bib_code]			INT				NULL
				,[BalanceDue]		DECIMAL(10, 2)	NULL
				,[Dae_code]			INT				NULL
			)

			CREATE TABLE #bloqueDeDetalles
			(	
				 [Bib_servDate]		DATE			NULL
				,[Act_code]			INT				NULL
				,[Act_description]	VARCHAR(255)	NULL
				,[Bib_hourMile]		DECIMAL(10, 2)	NULL
				,[Bib_priceAct]		DECIMAL(10, 2)	NULL
				,[Bib_amoReim]		DECIMAL(10, 2)	NULL
				,[Bib_code]			INT				NULL
				,[BalanceDue]		DECIMAL(10, 2)	NULL
				,[Dae_code]			INT				NULL
			)

			INSERT INTO #detalles([Bib_servDate]	
								 ,[Act_code]		
								 ,[Act_description]
								 ,[Bib_hourMile]   
								 ,[Bib_priceAct]   
								 ,[Bib_amoReim]    
								 ,[Bib_code]		
								 ,[BalanceDue]
								 ,[Dae_code])
			SELECT [BIB].[Bib_servDate]
				  ,[BIB].[Act_code]
				  ,(SELECT Act_description FROM Activity WHERE Act_code = [BIB].[Act_code]) AS [Act_description]
				  ,[BIB].[Bib_hourMile]
				  ,[BIB].[Bib_priceAct]
				  ,([BIB].[Bib_hourMile] * [BIB].[Bib_priceAct]) as Bib_amoReim
				  ,[BIB].[Bib_code]			  
				  ,(SELECT Bih_billTotal - Bih_billPay FROM [BillingHead] where Bih_code_old = @Bih_code_old) AS 'BalanceDue'
				  ,[DAE].[Dae_code]
			FROM	  [BillingBody] AS [BIB]
			LEFT JOIN [DataEntry]	AS [DAE]
				   ON [BIB].[Dae_code] = [DAE].[Dae_code]
			WHERE [BIB].[Bih_code] = (SELECT [Bih_code] FROM [BillingHead] WHERE [Bih_code_old] = @Bih_code_old) 
			  AND [BIB].[Bib_deletingStatus] = 0
			ORDER BY CONVERT(SMALLDATETIME, [BIB].[Bib_servDate]) ASC
					,ISNULL([DAE].[Dae_code], 2147483647)

			-- Arma y devuelve el bloque de datos según el número de página que recibe cómo parámetro.
			-- *****************************************************************************************************
			SET @consulta = N'SELECT [Bib_servDate]' +
								  ', [Act_code]' +
								  ', [Act_description]' +
								  ', [Bib_hourMile]' +
								  ', [Bib_priceAct]' +
								  ', [Bib_amoReim]' +
								  ', [Bib_code]' +
								  ', [BalanceDue]' + 
								  ', [Dae_code]' + 
							 ' FROM #detalles' +	
							 ' ORDER BY CONVERT(SMALLDATETIME, [Bib_servDate]) ASC' +
									 ', ISNULL([Dae_code], 2147483647)' + 
							 ' OFFSET @primerIndiceDeCadaPagina ROWS FETCH NEXT @tamañoDePagina ROWS ONLY'

			-- Calcula el índice de la primera página según el número de página que recibe el procedimiento como parámetro.
			SET @primerIndiceDeCadaPagina = (@paginaDestino - 1) * 20

			-- Establece el tamaño de página.
			SET @tamañoDePagina = 20

			-- Define los parámetros que van a ser usados dentro de la consulta dinámica SQL
			SET @parametros = N'@primerIndiceDeCadaPagina INT, @tamañoDePagina INT'

			INSERT INTO #bloqueDeDetalles([Bib_servDate]
								         ,[Act_code]
								         ,[Act_description]
								         ,[Bib_hourMile]
								         ,[Bib_priceAct]
								         ,[Bib_amoReim]
								         ,[Bib_code]
								         ,[BalanceDue]
								         ,[Dae_code])
			EXECUTE SP_EXECUTESQL @consulta
								, @parametros
								, @primerIndiceDeCadaPagina = @primerIndiceDeCadaPagina
								, @tamañoDePagina = @tamañoDePagina
			
			SELECT [Bib_servDate]
				  ,[Act_code]
				  ,[Act_description]
				  ,[Bib_hourMile]
				  ,[Bib_priceAct]
				  ,[Bib_amoReim]
				  ,[Bib_code]
				  ,[BalanceDue]
			FROM #bloqueDeDetalles 
			-- *****************************************************************************************************

		COMMIT TRANSACTION				
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT >= 1
			ROLLBACK TRANSACTION			
	END CATCH	
END
GO

-- *******************************************************************************************************
/*
SP_LIST_DATAENTRY 3164, 1
go
SP_LIST_DATAENTRY 3164, 2
go
SP_LIST_DATAENTRY 3164, 3
go
SP_LIST_DATAENTRY 3164, 4
go
SP_LIST_DATAENTRY 3164, 5
go
SP_LIST_DATAENTRY 3164, 6
go
SP_LIST_DATAENTRY 3164, 7
go
*/
IF (OBJECT_ID('SP_SAVE_UPDATE_DATAENTRY','P') IS NOT NULL)
	DROP PROCEDURE SP_SAVE_UPDATE_DATAENTRY
GO
CREATE PROCEDURE [dbo].[SP_SAVE_UPDATE_DATAENTRY]
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	9/5/2016.
-- System			:	Billing.
-- Program			:	DataEntry.
-- Description		:	Register and update all data entries of a page.
-- Change Log		:
--=============================================
(
	@EntriesDetail XML = ''
)
AS
BEGIN
	SET NOCOUNT ON
	SET ROWCOUNT 0;

	DECLARE @CantidadEntradasRepetidas INT = 0	
	DECLARE @FilaErroneaActualiza	   INT = 0
	DECLARE @FilaErroneaRegistra       INT = 0
	DECLARE @CodigoCaso				   INT = 0
	DECLARE @CantidadEntradas		   INT = 0 
	DECLARE @Entrada table
	(
		 NumeroCorrelativoEntrada	int				not null
		,Cis_code					int				not null
        ,Dae_code					int				null
        ,Dae_code_old				char(10)		null
        ,Dae_date					date			null
        ,Act_code					int				null
        ,Dae_hourAct				decimal(10 ,2)	null
        ,Dae_milesAct				decimal(10 ,2)	null
        ,Dae_comment				varchar(8000)	null
        ,Use_code					int				not null
	)
	
	BEGIN TRY
		BEGIN TRANSACTION
			INSERT INTO @Entrada(NumeroCorrelativoEntrada
								,Cis_code		
								,Dae_code		
								,Dae_code_old	
								,Dae_date		
								,Act_code		
								,Dae_hourAct	
								,Dae_milesAct	
								,Dae_comment	
								,Use_code)
			SELECT Dato.value('(NumeroCorrelativoEntrada/text())[1]', 'INT')
				  ,Dato.value('(CodigoCaso/text())[1]', 'INT')
				  ,Dato.value('(CodigoNuevoEntrada/text())[1]', 'INT')
				  ,Dato.value('(CodigoAntiguoEntrada/text())[1]', 'CHAR(10)')
				  ,Dato.value('(FechaEntrada/text())[1]', 'DATE')
				  ,Dato.value('(CodigoActividad/text())[1]', 'INT')
				  ,Dato.value('(Unit/text())[1]', 'DECIMAL(10, 2)')
				  ,Dato.value('(PriceUnit/text())[1]', 'DECIMAL(10, 2)')
				  ,Dato.value('(Comentario/text())[1]', 'VARCHAR(8000)')
				  ,Dato.value('(CodigoUsuarioGlobal/text())[1]', 'INT')
			FROM @EntriesDetail.nodes('/ArrayOfPDataEntry_RegistraActualiza/PDataEntry_RegistraActualiza') AS TEMPTABLE(Dato)

			SET @CodigoCaso = (SELECT TOP 1 cis_code 
							   FROM @Entrada)

			--*******************--*******************--*******************--*******************--*******************--*******************--*******************
			-- RAY  -- 05/12/2017
			declare @usuregistra int = isnull((select top 1 use_code from @Entrada where isnull(dae_code,0) = 0 
										and isnull(Dae_comment,'')   <> ''),0)

			INSERT INTO EntiesXML (dataxml,cis_code,usu_code) values (@EntriesDetail, @CodigoCaso, @usuregistra)

			--*******************--*******************--*******************--*******************--*******************--*******************--*******************

			--*******************--*******************--*******************--*******************--*******************--*******************--*******************
			-- RAY 
			--SET @CantidadEntradas = (SELECT COUNT(*)
			--						 FROM   [DataEntry]
			--						 WHERE  [Cis_code]           =  @CodigoCaso
			--						   AND  [Dae_invoiceStatus]  =  0	 
			--						   AND  [Dae_closedDate]     IS NULL
			--						   AND  [Dae_deletingStatus] =  0	 
			--						   AND  [Dae_facturable]     =  1)


			-- NUEVO RAY

			SET @CantidadEntradas = (SELECT COUNT(*)
									 FROM   [DataEntry]
									 WHERE  [Cis_code]           =  @CodigoCaso
									   AND  [Dae_invoiceStatus]  =  0	 
									   AND  [Dae_closedDate]     IS NULL
									   AND  [Dae_deletingStatus] =  0	 
									   AND  [Dae_facturable]     =  1 AND Eve_codigo IS NULL)


			-- ************************************************************************************************************************************************************************************************	
			IF (@CantidadEntradas > 0)									-- En el caso de que el caso tenga entradas
			-- ************************************************************************************************************************************************************************************************
			BEGIN
				-- VERIFICA SI HAY DATOS DUPLICADOS AL MOMENTO DE ACTUALIZAR
				IF (SELECT COUNT(*)	
					FROM   DataEntry AS d
    					  ,@Entrada  AS t 
					WHERE  ((t.Dae_code <> 0) AND (d.Dae_code <> t.Dae_code)) -- Se le ha agregado la validación "t.Dae_code <> 0" para que cuando pagine, no tome en cuenta las entradas que aún no tienen Dae_code, es decir aquellas entradas que tienen Dae_code = 0 ya que este campo aún no ha sido actualizado en la aplicación más que cuando termina de ejecutarse este procedimiento y termina de paginar.
					   AND d.Cis_code                =  t.Cis_code 
					   AND d.Act_code                =  t.Act_code 
					   AND d.Dae_hourAct             =  t.Dae_hourAct 
					   AND d.Dae_milesAct            =  t.Dae_milesAct 
					   AND ISNULL(d.Dae_comment, '') =  ISNULL(t.Dae_comment, '') 
					   AND d.Dae_date                =  t.Dae_date 
					   AND d.Dae_deletingStatus      =  0) > 0
				BEGIN 
					-- DEVUELVE LA FILA EN LA CUAL SE ESTÁ INTENTANDO ACTUALIZAR DATOS DUPLICADOS.
					SELECT @FilaErroneaActualiza = t.NumeroCorrelativoEntrada, 
							@FilaErroneaRegistra = 0 
					FROM DataEntry AS d 
						,@Entrada  AS t
					WHERE d.Dae_code                <> t.Dae_code
					  AND d.Cis_code                = t.Cis_code
					  AND d.Act_code                = t.Act_code
					  AND d.Dae_hourAct             = t.Dae_hourAct
					  AND d.Dae_milesAct            = t.Dae_milesAct
					  AND ISNULL(d.Dae_comment, '') = ISNULL(t.Dae_comment, '')
					  AND d.Dae_date                = t.Dae_date
					  AND d.Dae_deletingStatus      = 0
				END
				ELSE	-- Si no hay datos duplicados al momento de actualizar, ACTUALIZA!!!
				BEGIN
					UPDATE DataEntry 
					SET	   DataEntry.Dae_date	    = T.Dae_date -- T.Dae_date
						  ,DataEntry.Act_code	    = T.Act_code
						  ,DataEntry.Dae_hourAct  = T.Dae_hourAct
						  ,DataEntry.Dae_milesAct = T.Dae_milesAct
						  ,DataEntry.Dae_comment  = T.Dae_comment	
						  ,DataEntry.Dae_operatorUser = T.Use_code			
					FROM
						(SELECT  NumeroCorrelativoEntrada
								,Cis_code
								,Dae_code
								,Dae_code_old
								,Dae_date
								,Act_code
								,Dae_hourAct
								,Dae_milesAct
								,Dae_comment
								,Use_code
						FROM @Entrada
						WHERE Dae_code <> 0) AS [T] -- Actualiza las entradas de la tabla temporal que tengan código distinto de cero, es decir que ya existan.
					WHERE DataEntry.Dae_code                =  [T].Dae_code -- Va a actualizar donde todos los códigos de entradas coincidan 
					 AND (DataEntry.Dae_date                <> [T].Dae_date -- pero sólo aquellas entradas que hayan sido modificadas.
					   OR DataEntry.Act_code                <> [T].Act_code
					   OR DataEntry.Dae_hourAct             <> [T].Dae_hourAct
 					   OR DataEntry.Dae_milesAct            <> [T].Dae_milesAct
					   OR ISNULL(DataEntry.Dae_comment, '') <> ISNULL([T].Dae_comment, ''))
					--*******************
					--AND DataEntry.Eve_codigo IS NULL -- RAY - 05102017 -- NO ACTUALICE DATAENTRIES QUE VIENEN DE CALENDAR
					--*******************
  					AND   (SELECT COUNT(*) 
						   FROM   DataEntry 
						   WHERE  Cis_code				   = T.Cis_code
				   			  AND Act_code				   = T.Act_code
				   			  AND Dae_hourAct			   = T.Dae_hourAct
				   			  AND Dae_milesAct			   = T.Dae_milesAct
				   			  AND ISNULL(Dae_comment, '')  = ISNULL(T.Dae_comment, '')
				   			  AND Dae_date				   = T.Dae_date
				   			  AND Dae_deletingStatus =  0) = 0
				END				

				-- VERIFICA SI HAY DATOS DUPLICADOS AL MOMENTO DE REGISTRAR
				IF (SELECT COUNT(*) 
					FROM DataEntry AS d
						,@Entrada  AS t 
					WHERE d.Cis_code                  = t.Cis_code 
						AND d.Act_code                = t.Act_code 
						AND d.Dae_hourAct             = t.Dae_hourAct 
						AND d.Dae_milesAct            = t.Dae_milesAct 
						AND ISNULL(d.Dae_comment, '') = ISNULL(t.Dae_comment, '') 
						AND d.Dae_date			      = t.Dae_date 
						AND t.Dae_code				  = 0
						AND d.Dae_deletingStatus = 0) > 0
				BEGIN 
					SELECT  @FilaErroneaActualiza = 0  -- DEVUELVE LA FILA EN LA CUAL SE ESTÁ INTENTANDO REGISTRAR DATOS DUPLICADOS.
						   ,@FilaErroneaRegistra  = t.NumeroCorrelativoEntrada
					FROM    DataEntry AS d
						   ,@Entrada  AS t
					WHERE   d.Cis_code                 = t.Cis_code
						AND d.Act_code                 = t.Act_code
						AND d.Dae_hourAct              = t.Dae_hourAct
						AND d.Dae_milesAct             = t.Dae_milesAct
						AND ISNULL(d.Dae_comment, '')  = ISNULL(t.Dae_comment, '')
						AND d.Dae_date                 = t.Dae_date
						AND d.Dae_deletingStatus = 0
				END
				ELSE	-- SI NO, REGISTRA
				BEGIN 
					INSERT INTO DataEntry(Cis_code
										 ,Dae_date
										 ,Act_code
										 ,Dae_hourAct
										 ,Dae_milesAct
										 ,Dae_comment
										 ,Use_code
										 ,Dae_operatorUser)
					SELECT				  Cis_code
										 ,Dae_date
										 ,Act_code
										 ,Dae_hourAct
										 ,Dae_milesAct
										 ,Dae_comment
										 ,Use_code
										 ,Use_code
					FROM			      @Entrada AS [T]
					WHERE			      Dae_code =  0 -- Verifica que no tenga código de entrada, es decir que sean entradas nuevas.
									  AND Act_code <> 0 -- Verifica que sólo va a registrar a quellas entradas donde se hayan seleccionado una actividad.
  									  AND (SELECT COUNT(*) 
										   FROM   DataEntry 
										   WHERE  Cis_code		           = T.Cis_code
											  AND Act_code                 = T.Act_code
											  AND Dae_hourAct              = T.Dae_hourAct
											  AND Dae_milesAct             = T.Dae_milesAct
											  AND ISNULL(Dae_comment, '')  = ISNULL(T.Dae_comment, '')
											  AND Dae_date                 = T.Dae_date
											  AND Dae_deletingStatus =  0) = 0
				END

				SELECT @FilaErroneaActualiza AS FilaErroneaActualiza
					  ,@FilaErroneaRegistra AS FilaErroneaRegistra				
			END
			-- ************************************************************************************************************************************************************************************************
			ELSE											-- En el caso de que el caso no tenga entradas
			-- ************************************************************************************************************************************************************************************************
			BEGIN 
				UPDATE DataEntry 
				SET	 DataEntry.Dae_date	    = T.Dae_date -- T.Dae_date
					,DataEntry.Act_code	    = T.Act_code
					,DataEntry.Dae_hourAct  = T.Dae_hourAct
					,DataEntry.Dae_milesAct = T.Dae_milesAct
					,DataEntry.Dae_comment  = T.Dae_comment		
					,DataEntry.Dae_operatorUser = T.Use_code		
				FROM
					(SELECT  NumeroCorrelativoEntrada
							,Cis_code
							,Dae_code
							,Dae_code_old
							,Dae_date
							,Act_code						   
							,Dae_hourAct
							,Dae_milesAct
							,Dae_comment
							,Use_code
					FROM    @Entrada
					WHERE   Dae_code <> 0) AS [T]					
				WHERE DataEntry.Dae_code                =  [T].Dae_code -- Va a actualizar donde todos los códigos de entradas coincidan.
				 AND (DataEntry.Dae_date                <> [T].Dae_date -- pero sólo aquellas entradas que hayan sido modificadas.
				   OR DataEntry.Act_code                <> [T].Act_code
				   OR DataEntry.Dae_hourAct             <> [T].Dae_hourAct
 				   OR DataEntry.Dae_milesAct            <> [T].Dae_milesAct
				   OR ISNULL(DataEntry.Dae_comment, '') <> ISNULL([T].Dae_comment, ''))
				--*******************
				--AND DataEntry.Eve_codigo IS NULL -- RAY - 05102017 -- NO ACTUALICE DATAENTRIES QUE VIENEN DE CALENDAR
				--*******************
  				  AND (SELECT COUNT(*) 
					   FROM   DataEntry 
					   WHERE  Cis_code                 = T.Cis_code
						  AND Act_code                 = T.Act_code
						  AND Dae_hourAct              = T.Dae_hourAct
						  AND Dae_milesAct             = T.Dae_milesAct
						  AND ISNULL(Dae_comment, '')  = ISNULL(T.Dae_comment, '')
						  AND Dae_date                 = T.Dae_date
						  AND Dae_deletingStatus =  0) = 0

				INSERT INTO DataEntry(Cis_code
									 ,Dae_date
									 ,Act_code
									 ,Dae_hourAct
									 ,Dae_milesAct
									 ,Dae_comment
									 ,Use_code
									 ,Dae_operatorUser)
				SELECT  Cis_code
					   ,Dae_date
					   ,Act_code
					   ,Dae_hourAct
					   ,Dae_milesAct
					   ,Dae_comment
					   ,Use_code
					   ,Use_code
				FROM   @Entrada AS [T]
				WHERE  Dae_code = 0 -- Verifica que no tenga código de entrada, es decir que sean entradas nuevas.
				   AND Act_code <> 0 -- Verifica que sólo va a registrar a quellas entradas donde se hayan seleccionado una actividad.
  				   AND (SELECT COUNT(*) 
						FROM   DataEntry 
						WHERE  Cis_code                  = T.Cis_code
							AND Act_code                 = T.Act_code
							AND Dae_hourAct              = T.Dae_hourAct
							AND Dae_milesAct             = T.Dae_milesAct
							AND ISNULL(Dae_comment, '')  = ISNULL(T.Dae_comment, '')
							AND Dae_date                 = T.Dae_date
							AND Dae_deletingStatus =  0) = 0

				SELECT 0 AS FilaErroneaActualiza
					  ,0 AS FilaErroneaRegistra				
			END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT >= 1
			ROLLBACK TRANSACTION
	END CATCH			
END
go

-- *******************************************************************************************************

IF (OBJECT_ID('SP_DELETE_DATAENTRY','P') IS NOT NULL)
	DROP PROCEDURE SP_DELETE_DATAENTRY
GO
CREATE PROCEDURE [dbo].[SP_DELETE_DATAENTRY]
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	9/9/2016.
-- System			:	Billing.
-- Program			:	DataEntry.
-- Description		:	Remove a data entry of a page.
-- Change Log		:
--=============================================
(
  @Dae_code INT
 ,@Use_code INT
)
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION
			
			UPDATE DataEntry
			SET    Dae_deletingStatus = 1
			      ,Dae_deletedUser = @Use_code
				  ,Dae_operatorUser = @Use_code
			WHERE  Dae_code = @Dae_code

		COMMIT TRANSACTION				
		
	END TRY
	BEGIN CATCH
		
	END CATCH				
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_GENERATED_INVOICE','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_GENERATED_INVOICE
GO
CREATE PROCEDURE SP_LIST_GENERATED_INVOICE
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil.
-- creation date	:	9/13/2016.
-- System			:	Billing.
-- Program			:	Monthly Closing.
-- Description		:	List the generated invoice.
-- Change Log		:
--=============================================
AS
BEGIN
	-- BEGIN TRY
	-- 	BEGIN TRANSACTION
			
			SELECT  ROW_NUMBER() OVER(ORDER BY [PAT].[Pat_lastName] ASC)								AS [Correlativo]
			      ,[CIS].[Cis_code]																		AS [Cis_code]
			      ,[CIS].[Cis_code_old]																	AS [Cis_code_old]
				  ,[CIS].[Cis_caseCode]																	AS [Cis_caseCode]				  
				  ,[PAT].[Pat_firstName] + ' ' + [PAT].[Pat_lastName]									AS [Patient]
				  ,[PAT].[Pat_socialSecurityNumberD]													AS [Pat_socialSecurityNumberD]
				  ,[INS].[Ins_name]																		AS [Ins_name]
				  ,[CIS].[Cis_accidentDate]   															AS [Cis_accidentDate]
				  ,'-'																					AS [Hours]									  
				  ,'-'																					AS [Date]									  
				  ,'-'																					AS [Dae_facNum]	
				  ,case 
					when ((select Cis_price from CaseInformationSheetHead where Cis_code = [CIS].[Cis_code]) = 0.00) then 'cero' 
					else 'numero' end	
				 AS [Cis_price]
			FROM [CaseInformationSheetHead] AS [CIS]
				,[Patient] AS [PAT]
				,[Insurer] AS [INS]
			WHERE     [CIS].[Ins_code] = [INS].[Ins_code]
	 			  AND [CIS].[Pat_code] = [PAT].[Pat_code]
				  AND [CIS].[Cis_code] IN (SELECT    [Cis_code]
                                           FROM	     [DataEntry]
                                           WHERE     [Dae_invoiceStatus]  = 0	  -- Verifica el estado de facturación que tiene ls entrada sea 0 ó Abierta (es decir que esa entrada aún no se haya facturado).
                                                 AND [Dae_closedDate]     IS NULL -- Verifica que aún no tenga fecha de cierre.
                                                 AND [Dae_deletingStatus] = 0	  -- Verifica que el estado de anulación esté en 0, es decir "No anulado".
                                                 AND [Dae_facturable]     = 1)    -- Campo que indica si una entrada es facturable (1: "Facturable", 0: "No facturable"). Cuando se registra por el Billing siempre es facturable, pero cuando se registra por el calendar, a veces puede ser facturable y a veces no.
		          --AND [INS].[Ins_code_old] <> 'Fe16I00064'
				  AND [INS].[Ins_code] <> 27  
		    GROUP BY [CIS].[Cis_code]
			        ,[CIS].[Cis_code_old]
				    ,[CIS].[Cis_caseCode]
					,[PAT].[Pat_firstName] 
					,[PAT].[Pat_lastName]
					,[INS].[Ins_name]
					,[PAT].[Pat_socialSecurityNumberD]
					,[CIS].[Cis_accidentDate]
			ORDER BY [PAT].[Pat_lastName]

--		COMMIT TRANSACTION				
--		
--	END TRY
--	BEGIN CATCH
--		
--	END CATCH				
END 
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_GENERATED_INVOICE_HOUR_DATE','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_GENERATED_INVOICE_HOUR_DATE
GO
CREATE PROCEDURE SP_LIST_GENERATED_INVOICE_HOUR_DATE
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	9/15/2016.
-- System			:	Billing.
-- Program			:	Monthly Closing.
-- Description		:	List the generated invoice per hour or per date.
-- Change Log		:
--=============================================
(
 @BillingType INT = 2
)
-- select top 1 * from BillingHead order by Bih_code desc
-- select * from DataEntry where  Cis_code = 925
--           and Dae_invoiceStatus  = 0    
--           and Dae_closedDate     IS NULL
--           and Dae_deletingStatus = 0    
--           and Dae_facturable     = 1    
-- 
-- select (select Pat_firstName + ' ' + Pat_lastName from Patient where Pat_code = cis.Pat_code) from CaseInformationSheetHead as cis where Cis_code = 925
AS
BEGIN
	BEGIN TRY	
		BEGIN TRANSACTION
			IF (@BillingType = 2) -- Si el cierre de mes es por horas.
			BEGIN 
				SELECT     ROW_NUMBER() OVER(ORDER BY [PAT].[Pat_lastName] ASC)      AS [Correlativo]  
						 ,[CIS].[Cis_code]									 AS [Cis_code]
						 ,[CIS].[Cis_code_old]							     AS [Cis_code_old]
					     ,[CIS].[Cis_caseCode]								 AS [Cis_caseCode]						 
						 ,[PAT].[Pat_firstName] + ' ' + [PAT].[Pat_lastName] AS [Patient]
						 ,[PAT].[Pat_socialSecurityNumberD]					 AS [Pat_socialSecurityNumberD]
						 ,[INS].[Ins_name]									 AS [Ins_name]
						 ,[CIS].[Cis_accidentDate]							 AS [Cis_accidentDate]
						 ,SUM([DAE].[Dae_hourAct])							 AS [Hours]						 
					     ,    (SELECT TOP 1 [DAE2].[Dae_date]
							   FROM [DataEntry] AS [DAE2]
									INNER JOIN 
						    		[Activity]  AS [ACT]
									ON [DAE2].[Act_code] = [ACT].[Act_code]
						   
							   WHERE     [DAE2].[Cis_code]           = [CIS].[Cis_code]
						  			 AND [DAE2].[Dae_facNum]         = [DAE].[Dae_facNum]
						  			 AND [DAE2].[Dae_invoiceStatus]  = 0     -- Estado de la factura (0: "Abierta", 1: "Cerrada").
						  			 AND [DAE2].[Dae_closedDate]     IS NULL -- Verifica que no tenga fecha de cierre.
						  			 AND [DAE2].[Dae_deletingStatus] = 0     -- Estado de anulación (0: No anulada).
						  			 AND [DAE2].[Dae_facturable]     = 1     -- Campo que indica si una entrada es facturable (1: "Facturable", 0:"No facturable"). Cuando se registra por el "Billing" siempre es facturable, pero cuando se registra por el "Calendar", a veces puede ser facturable y a veces no.
							   ORDER BY [DAE2].[Dae_date] DESC)                  AS [Date]
						 ,[DAE].[Dae_facNum]                                 AS [Dae_facNum]
						  ,case 
							when ((select Cis_price from CaseInformationSheetHead where Cis_code = [CIS].[Cis_code]) = 0.00) then 'cero' 
							else 'numero' end	
						 AS [Cis_price]
				FROM      [CaseInformationSheetHead] AS [CIS]
					     ,[Patient]					 AS [PAT]
					     ,[Insurer]	                 AS [INS]
					     ,[DataEntry]				 AS [DAE]
					     ,[Activity]				 AS [ACT]
				WHERE     [CIS].[Pat_code] = [PAT].[Pat_code]       -- Relaciona "Caso" con "Paciente".
					  AND [CIS].[Ins_code] = [INS].[Ins_code]       -- Relaciona "Caso" con "Aseguradora".
					  AND [CIS].[Cis_code] = [DAE].[Cis_code]       -- Relaciona "Caso" con "Entradas".
					  AND [DAE].[Act_code] = [ACT].[Act_code]       -- Relaciona "Entradas" con "Actividades".
					  AND [CIS].[Cis_code] IN (SELECT    [Cis_code]
                                               FROM      [DataEntry]
                                               WHERE     [Dae_invoiceStatus]  = 0	  -- Estado de la factura (0: "Abierta", 1: "Cerrada").
                                                     AND [Dae_closedDate]     IS NULL -- Verifica que no tenga fecha de cierre.
                                                     AND [Dae_deletingStatus] = 0	  -- Estado de anulación (0: No anulada).
                                                     AND [Dae_facturable]	  = 1)	  -- Campo que indica si una entrada es facturable (1: "Facturable", 0:"No facturable"). Cuando se registra por el "Billing" siempre es facturable, pero cuando se registra por el "Calendar", a veces puede ser facturable y a veces no.
					  AND [INS].[Ins_code_old]       = 'Fe16I00064' -- Que sea la aseguradora "AMTRUST C/O CARLISLE & ASSOC".
					  AND [DAE].[Dae_invoiceStatus]  = 0            -- Estado de la factura (0: "Abierta", 1: "Cerrada").
					  AND [DAE].[Dae_closedDate]     IS NULL        -- Verifica que no tenga fecha de cierre.
					  AND [DAE].[Dae_deletingStatus] = 0	        -- Estado de anulación (0: No anulada).
					  AND [DAE].[Dae_facturable]	 = 1	        -- Campo que indica si una entrada es facturable (1: "Facturable", 0:"No facturable"). Cuando se registra por el "Billing" siempre es facturable, pero cuando se registra por el "Calendar", a veces puede ser facturable y a veces no.
					  AND [ACT].[Aty_code]           = 1			-- Verifica que las entradas estén asociadas con actividades cuya unidad de medida sea "TIME".
			    GROUP BY [CIS].[Cis_code]
					    ,[CIS].[Cis_code_old]
				        ,[CIS].[Cis_caseCode]
						,[PAT].[Pat_firstName]
						,[PAT].[Pat_lastName]
						,[INS].[Ins_name]
						,[PAT].[Pat_socialSecurityNumberD]
						,[CIS].[Cis_accidentDate]
						,[DAE].[Dae_facNum]
				ORDER BY [PAT].[Pat_lastName] ASC
					    ,[DAE].[Dae_facNum] ASC						
			END
			ELSE IF (@BillingType = 3) -- Si el cierre de mes es por fecha.
			BEGIN 
				SELECT ROW_NUMBER() OVER(ORDER BY [PAT].[Pat_lastName] ASC)      AS [Correlativo]   
				      ,[CIS].[Cis_code]									  AS [Cis_code]
				      ,[CIS].[Cis_code_old]							      AS [Cis_code_old]
					  ,[CIS].[Cis_caseCode]								  AS [Cis_caseCode]
					  ,[PAT].[Pat_firstName] + ' ' + [PAT].[Pat_lastName] AS [Patient]
					  ,[PAT].[Pat_socialSecurityNumberD]				  AS [Pat_socialSecurityNumberD]
					  ,[INS].[Ins_name]									  AS [Ins_name]
					  ,[CIS].[Cis_accidentDate]							  AS [Cis_accidentDate]
					  ,SUM([DAE].[Dae_hourAct])							  AS [Hours]
					  ,(SELECT TOP 1 [DAE2].[Dae_date]
					    FROM [DataEntry] AS [DAE2]
					  	     INNER JOIN 
					  	     [Activity]  AS [ACT]
					  	     ON [DAE2].[Act_code] = [ACT].[Act_code]
					    WHERE     [DAE2].[Cis_code]           = [CIS].[Cis_code]
					  	  	  AND [DAE2].[Dae_invoiceStatus]  = 0     -- Estado de la factura (0: "Abierta", 1: "Cerrada").
					  	  	  AND [DAE2].[Dae_closedDate]     IS NULL -- Verifica que no tenga fecha de cierre.
					  	  	  AND [DAE2].[Dae_deletingStatus] = 0     -- Estado de anulación (0: No anulada).
					  	  	  AND [DAE2].[Dae_facturable]     = 1     -- Campo que indica si una entrada es facturable (1: "Facturable", 0:"No facturable"). Cuando se registra por el "Billing" siempre es facturable, pero cuando se registra por el "Calendar", a veces puede ser facturable y a veces no.
					    ORDER BY [DAE2].[Dae_date] DESC)                  AS [Date]
					  ,0                                                AS [Dae_facNum]
					  ,case 
						when ((select Cis_price from CaseInformationSheetHead where Cis_code = [CIS].[Cis_code]) = 0.00) then 'cero' 
						else 'numero' end	
					 AS [Cis_price]
				FROM [CaseInformationSheetHead] AS [CIS]
					,[Patient]		            AS [PAT]
					,[Insurer]	                AS [INS]
					,[DataEntry]                AS [DAE]
					,[Activity]                 AS [ACT]
			    WHERE     [CIS].[Pat_code] = [PAT].[Pat_code]       -- Relaciona "Caso" con "Paciente".
				      AND [CIS].[Ins_code] = [INS].[Ins_code]       -- Relaciona "Caso" con "Aseguradora".
					   AND [CIS].[Cis_code] = [DAE].[Cis_code]       -- Relaciona "Caso" con "Entradas".
					  AND [DAE].[Act_code] = [ACT].[Act_code]       -- Relaciona "Entradas" con "Actividades".
					  AND [CIS].[Cis_code] IN (SELECT    [Cis_code]
					                           FROM      [DataEntry]
											   WHERE     [Dae_invoiceStatus] = 0	  -- Estado de la factura (0: "Abierta", 1: "Cerrada").
                                                     AND [Dae_closedDate]     IS NULL -- Verifica que no tenga fecha de cierre.
                                                     AND [Dae_deletingStatus] = 0	  -- Estado de anulación (0: No anulada).
                                                     AND [Dae_facturable]	  = 1)	  -- Campo que indica si una entrada es facturable (1: "Facturable", 0:"No facturable"). Cuando se registra por el "Billing" siempre es facturable, pero cuando se registra por el "Calendar", a veces puede ser facturable y a veces no.											   
                      AND [INS].[Ins_code_old]       = 'Fe16I00064' -- Que sea la aseguradora "AMTRUST C/O CARLISLE & ASSOC".					 						   
					  AND [DAE].[Dae_invoiceStatus]  = 0            -- Estado de la factura (0: "Abierta", 1: "Cerrada").
					  AND [DAE].[Dae_closedDate]     IS NULL        -- Verifica que no tenga fecha de cierre.
					  AND [DAE].[Dae_deletingStatus] = 0	        -- Estado de anulación (0: No anulada).
					  AND [DAE].[Dae_facturable]	 = 1	        -- Campo que indica si una entrada es facturable (1: "Facturable", 0:"No facturable"). Cuando 
					  AND [ACT].[Aty_code]           = 1			-- Verifica que las entradas estén asociadas con actividades cuya unidad de medida sea "TIME".
			    GROUP BY [CIS].[Cis_code]
				        ,[CIS].[Cis_code_old]
				        ,[CIS].[Cis_caseCode]
						,[PAT].[Pat_firstName]
						,[PAT].[Pat_lastName]
						,[INS].[Ins_name]
						,[PAT].[Pat_socialSecurityNumberD]
						,[CIS].[Cis_accidentDate]
	            ORDER BY [PAT].[Pat_lastName]
			END			
		COMMIT TRANSACTION				
	END TRY
	BEGIN CATCH
		
	END CATCH				
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_GET_LAST_CLOSING_DATE','P') IS NOT NULL)
	DROP PROCEDURE SP_GET_LAST_CLOSING_DATE
GO
CREATE PROCEDURE SP_GET_LAST_CLOSING_DATE
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	10/18/2016.
-- System			:	Billing.
-- Program			:	Monthly Closing.
-- Description		:	Get the last cosing date of the entries of a case.
-- Change Log		:
--=============================================
(
 @CaseCode INT = 1518
)
AS
BEGIN
	SELECT TOP 1 Bih_closingDate AS FechaUltimoCierre 
	FROM BillingHead 
	WHERE Cis_code = @CaseCode 
	  AND Bih_deleteStatus <> 'D' 
	ORDER BY Bih_closingDate DESC
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_CHECK_PRICE','P') IS NOT NULL)
	DROP PROCEDURE SP_CHECK_PRICE
GO
CREATE PROCEDURE SP_CHECK_PRICE
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	10/6/2016.
-- System			:	Billing.
-- Program			:	Monthly Closing.
-- Description		:	Check price of a case.
-- Change Log		:
--=============================================
(
  @Cis_code				INT			= 1555			-- Código del caso.
)
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @IndicadorDeCasoSinPrecio INT;

	SET @IndicadorDeCasoSinPrecio = (SELECT COUNT(*) 
						             FROM [OmnimedBD].[dbo].[CaseInformationSheetHead]
						             WHERE [Cis_code] = @Cis_code
						               AND [Cis_price] = 0.00)

	SELECT CONVERT(INT, @IndicadorDeCasoSinPrecio) AS CantidadCasos;
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_CONVERT_ENTRIES_IN_INVOICE','P') IS NOT NULL)
	DROP PROCEDURE SP_CONVERT_ENTRIES_IN_INVOICE
GO
CREATE PROCEDURE SP_CONVERT_ENTRIES_IN_INVOICE
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	10/6/2016.
-- System			:	Billing.
-- Program			:	Monthly Closing.
-- Description		:	Convert the data entries in invoice.
-- Change Log		:

-- select  (select Pat_firstName + ' ' + Pat_lastName from Patient where Pat_code = cis.Pat_code) from caseinformationsheethead as cis where cis_code = 1993
-- select (select Pat_firstName + ' '  + Pat_lastName from Patient where pat_code  =cis.Pat_code) from OmnimedBD.dbo.caseinformationsheethead cis  where cis_code = 444

-- update dataentry 
-- set [Dae_deletingStatus] = 0
-- where dae_code in (573947,574224,582238,582239)

--=============================================
(
  @Cis_code				INT			= 1190	
 ,@Dae_closedDateSTR	CHAR(10)	= '10/10/2016'
 ,@Dae_facNum			CHAR(1)		= '-'
)
AS
BEGIN
	SET NOCOUNT ON
	
	-- select * from BillingBody order by bib_code desc
	-- select Cis_code from BillingHead where Bih_code = 16914
	-- select (select Pat_firstName + ' ' + Pat_lastName from Patient where Pat_code = cis.Pat_code) from CaseInformationSheetHead as cis where Cis_code = 166

	DECLARE @Ins_name		  VARCHAR(100);
	DECLARE @Dae_closedDateDT DATE;
	
	--BEGIN TRY
	--	BEGIN TRANSACTION	
			SET @Dae_closedDateDT = CONVERT(DATE, @Dae_closedDateSTR, 101);

			-- Obtiene el nombre de la aseguradora según el código del caso que se pase.
			SELECT @Ins_name  = (SELECT Ins_name 
				                 FROM Insurer 
					             WHERE Ins_code = CIS.Ins_code)
			FROM   [CaseInformationSheetHead] AS CIS
			WHERE  [Cis_code] = @Cis_code

			IF ( LTRIM(RTRIM(@Ins_name)) = 'AMTRUST C/O CARLISLE & ASSOC') -- Si la aseguradora es: "AMTRUST C/O CARLISLE & ASSOC" cuyo código original es: 'Fe16I00064'
			BEGIN
				IF (@Dae_facNum = '-')
				BEGIN
					SELECT [DAE].[Dae_code]		-- Código de la entrada.
						  ,[DAE].[Dae_date]		-- Fecha de le entrada.
						  ,[DAE].[Act_code]		-- Código de la actividad relacionada a la entrada.
						  ,[DAE].[Dae_hourAct]
						  ,[DAE].[Dae_milesAct]
						  ,[DAE].[Dae_comment]
						  ,[ATY].[Aty_price]	-- Tipo de la actividad (CIS o EXPENSES)
					FROM [DataEntry]    AS [DAE]
					    ,[Activity]     AS [ACT]
						,[ActivityType]	AS [ATY]
					WHERE [DAE].[Cis_code] = @Cis_code
					  AND [DAE].[Act_code] = [ACT].[Act_code]
					  AND [ACT].[Aty_code] = [ATY].[Aty_code]
					  AND [DAE].[Dae_closedDate] IS NULL		-- Que no tenga fecha de cierre.
					  AND [DAE].[Dae_invoiceStatus] = 0			-- Que el estado de la factura sea abierta.
					  AND [DAE].[Dae_parameterDate] IS NULL		-- Que no tenga fecha referencial del día de cierre.
					  AND [DAE].[Dae_facturable] = 1			-- Indica que una entrada es facturable.
					  AND [DAE].[Dae_date] <= @Dae_closedDateDT -- Verifica que la fecha de la entrada sea menor a la fecha de cierre.
				      AND [DAE].[Dae_deletingStatus] = 0		-- Verifica que el estado de anulación sea "0", es decir "No anulada".
					ORDER BY [DAE].[Dae_date] ASC
						    ,[DAE].[Dae_code] ASC
				END
				ELSE
				BEGIN

					SELECT [DAE].[Dae_code]		-- Código de la entrada.
						  ,[DAE].[Dae_date]		-- Fecha de le entrada.
						  ,[DAE].[Act_code]		-- Código de la actividad relacionada a la entrada.
						  ,[DAE].[Dae_hourAct]
						  ,[DAE].[Dae_milesAct]
						  ,[DAE].[Dae_comment]
						  ,[ATY].[Aty_price]	-- Tipo de la actividad (CIS o EXPENSES)
					FROM [DataEntry]    AS [DAE]
					    ,[Activity]     AS [ACT]
						,[ActivityType]	AS [ATY]
					WHERE [DAE].[Cis_code] = @Cis_code
					  AND [DAE].[Act_code] = [ACT].[Act_code]
					  AND [ACT].[Aty_code] = [ATY].[Aty_code]
					  AND [DAE].[Dae_closedDate] IS NULL		-- Que no tenga fecha de cierre.
					  AND [DAE].[Dae_invoiceStatus] = 0			-- Que el estado de la factura sea abierta.
					  AND [DAE].[Dae_parameterDate] IS NULL		-- Que no tenga fecha referencial del día de cierre.
					  AND [DAE].[Dae_facturable] = 1			-- Indica que una entrada es facturable.
					  AND [DAE].[Dae_date] <= @Dae_closedDateDT -- Verifica que la fecha de la entrada sea menor a la fecha de cierre.
				      AND [DAE].[Dae_deletingStatus] = 0		-- Verifica que el estado de anulación sea "0", es decir "No anulada".
					  AND [DAE].[Dae_facNum] = CONVERT(int, @Dae_facNum) 					  					  
					  
					ORDER BY [DAE].[Dae_date] ASC
						    ,[DAE].[Dae_code] ASC
				END
			END
			ELSE				-- Si la aseguradora no es "AMTRUST C/O CARLISLE & ASSOC"
			BEGIN
				SELECT [DAE].[Dae_code]		-- Código de la entrada.
					  ,[DAE].[Dae_date]		-- Fecha de le entrada.
					  ,[DAE].[Act_code]		-- Código de la actividad relacionada a la entrada.
					  ,[DAE].[Dae_hourAct]
					  ,[DAE].[Dae_milesAct]
					  ,[DAE].[Dae_comment]
					  ,[ATY].[Aty_price]	-- Tipo de la actividad (CIS o EXPENSES)
				FROM [DataEntry]    AS [DAE]
					,[Activity]     AS [ACT]
					,[ActivityType]	AS [ATY]
			    WHERE [DAE].[Cis_code] = @Cis_code
				  AND [DAE].[Act_code] = [ACT].[Act_code]
				  AND [ACT].[Aty_code] = [ATY].[Aty_code]				  
				  AND [DAE].[Dae_closedDate] IS NULL		-- Que no tenga fecha de cierre.
				  AND [DAE].[Dae_invoiceStatus] = 0			-- Que el estado de la factura sea abierta.
				  AND [DAE].[Dae_parameterDate] IS NULL		-- Que no tenga fecha referencial del día de cierre.
				  AND [DAE].[Dae_facturable] = 1			-- Indica que una entrada es facturable.
				  AND [DAE].[Dae_date] <= @Dae_closedDateDT -- Verifica que la fecha de la entrada sea menor a la fecha de cierre.
				  AND [DAE].[Dae_deletingStatus] = 0		-- Verifica que el estado de anulación sea "0", es decir "No anulada".
				ORDER BY [DAE].[Dae_date] ASC
					    ,[DAE].[Dae_code] ASC
			END
	--	COMMIT TRANSACTION				
	--END TRY
	--BEGIN CATCH
		
	--END CATCH				
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_SAVE_BILLING_HEAD_2','P') IS NOT NULL)
	DROP PROCEDURE SP_SAVE_BILLING_HEAD_2
GO
CREATE PROCEDURE SP_SAVE_BILLING_HEAD_2
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	10/14/2016.
-- System			:	Billing.
-- Program			:	Monthly Closing.
-- Description		:	Register the head of the a invoice.
-- Change Log		:
--=============================================
(
	 @CodigoFacturaGenerado	INT			 OUTPUT
	,@Cis_code				INT			 = 423				-- Código de caso.
	,@Par_code				INT			 = 1				-- Código de parametro (empresa "Omnimed Inc.") que es la clave primaria de la tabla "Parameter".
	,@Use_code				INT			 = 98				-- Código de usuario.
	,@Bih_closingDate		CHAR(10)	 = '10/25/2016'	-- Fecha de cierre.
	,@Bih_facNum			VARCHAR(10)	 = '1'	
) 
AS
BEGIN
	SET XACT_ABORT ON
	SET NOCOUNT ON
		
	-- DECLARE @CodigoFacturaGenerado INT		-- Código de factura que se genera después de la inserción.
	DECLARE @Bih_code_old		   CHAR(10)
	DECLARE	@Cantidad			   INT
	DECLARE	@Cantidad1			   INT
	DECLARE	@x					   INT
	DECLARE @a					   CHAR(10)
	DECLARE @Mes				   CHAR(1)
	DECLARE @Año				   CHAR(1)
	DECLARE @CodigoFacturaextraido CHAR(10)
	
-- 	BEGIN TRY
-- 	 	BEGIN TRANSACTION

		SET @Cantidad = (SELECT COUNT(*) FROM BillingHead)

		IF (@Cantidad = 0) -- Si no hay ningún registro en la tabla "BillingHead".
		BEGIN
			INSERT INTO BillingHead(cis_code , Bih_billPay, Bih_billDate                 , Bih_billTotal, Par_code , Use_code , Bih_closingDate                     , Bih_facNum)
			VALUES                 (@Cis_code, 0          , CONVERT(DATE, GETDATE(), 101), 0            , @Par_code, @Use_code, CONVERT(DATE, @Bih_closingDate, 101), '-'       )

			SET @CodigoFacturaGenerado = SCOPE_IDENTITY();

			-- Genera código de factura en formato cadena.
			-- ------------------------------------------------------
			SET @Mes		  = (LEFT(DATENAME(MONTH, GETDATE()), 1))
			SET @Año		  = (RIGHT(DATENAME(YEAR, GETDATE()), 1))
			SET @Bih_code_old = (@Mes + @Año + 'B' + '0000001')
			
			-- Actualiza el código de factura en formato cadena en el campo "Bih_code_old" en el registro que se acaba de insertar.
			UPDATE BillingHead 
			SET	   Bih_code_old = @Bih_code_old 
			WHERE  Bih_code = @CodigoFacturaGenerado
			-- ------------------------------------------------------

			-- SELECT @CodigoFacturaGenerado;			
		END			
		ELSE IF (@Cantidad <> 0) -- Si hay registros en la tabla "BillingHead"
		BEGIN		
			IF (@Bih_facNum = '-') -- Si el cierre es por fecha 
			BEGIN
				-- Si existen facturas del mismo caso que tienen la misma fecha de cierre 
				-- y que están activas (Bih_deleteStatus <> 'D')						  
				IF ((SELECT COUNT(*) 
				     FROM BillingHead 
				     WHERE Cis_code = @Cis_code	
					   AND Par_code = @Par_code 
					   AND Bih_closingDate = CONVERT(DATE, @Bih_closingDate, 101) 
					   AND Bih_deleteStatus <> 'D') = 0)
				BEGIN									
	      			INSERT INTO BillingHead(Cis_code , Bih_billPay, Bih_billDate                 , Bih_billTotal, Par_code , Use_code , Bih_closingDate                     , Bih_facNum)
					VALUES                 (@Cis_code, 0          , CONVERT(DATE, GETDATE(), 101), 0            , @Par_code, @Use_code, CONVERT(DATE, @Bih_closingDate, 101), '-'       )

					SET @CodigoFacturaGenerado = SCOPE_IDENTITY();
						
					-- Genera código de factura en formato cadena.
					-- ------------------------------------------------------
					SET @Mes		           = LEFT(DATENAME(MONTH, GETDATE()), 1)
					SET @Año		           = RIGHT(DATENAME(YEAR, GETDATE()), 1)
					SET @CodigoFacturaextraido = (SELECT TOP 1 Bih_code_old FROM BillingHead ORDER BY RIGHT(Bih_code_old, 7) DESC)
					SET @a                     = RIGHT(@CodigoFacturaextraido, 7)
					SET @x                     = STR(@a + 1)
					SET @Bih_code_old		   = @Mes + @Año + 'B' + RIGHT('00000000000' + LTRIM(STR(@x)), 7)
					
					-- Actualiza el código de factura en formato cadena en el campo "Bih_code_old" en el registro que se acaba de insertar.
					UPDATE BillingHead 
					SET	   Bih_code_old = @Bih_code_old 
					WHERE  Bih_code = @CodigoFacturaGenerado
					-- ------------------------------------------------------

					-- SELECT @CodigoFacturaGenerado;
				END									
			END
			ELSE			
			BEGIN
				IF ((SELECT COUNT(*) 
				     FROM BillingHead 
					 WHERE Cis_code = @Cis_code 
					   AND Par_code = @Par_code 
					   AND Bih_closingDate = CONVERT(DATE, @Bih_closingDate, 101)	
					   AND Bih_deleteStatus <> 'D' 
					   AND Bih_facNum = @Bih_facNum) = 0)
				BEGIN
					INSERT INTO BillingHead(Cis_code , Bih_billPay, Bih_billDate                 , Bih_billTotal, Par_code , Use_code , Bih_closingDate               , Bih_facNum )
					VALUES                 (@Cis_code, 0          , CONVERT(DATE, GETDATE(), 101), 0            , @Par_code, @Use_code, CONVERT(DATE, @Bih_closingDate, 101), @Bih_facNum)
				
					SET @CodigoFacturaGenerado = SCOPE_IDENTITY();

					-- Genera código de factura en formato cadena.
					-- ------------------------------------------------------
					set @Mes                   = LEFT(DATENAME(MONTH, GETDATE()), 1)
					set @Año                   = RIGHT(DATENAME(YEAR, GETDATE()), 1)
					set @CodigoFacturaextraido = (SELECT TOP 1 Bih_code_old FROM BillingHead ORDER BY right(Bih_code_old, 7) DESC) 
					set @a                     = RIGHT(@CodigoFacturaextraido, 7) 
					set @x                     = STR(@a + 1)         
					set @Bih_code_old          = @Mes + @Año + 'B' + RIGHT('00000000000' + LTRIM(STR(@x)), 7)

					-- Actualiza el código de factura en formato cadena en el campo "Bih_code_old" en el registro que se acaba de insertar.
					UPDATE BillingHead 
					SET	   Bih_code_old = @Bih_code_old 
					WHERE  Bih_code = @CodigoFacturaGenerado
					-- ------------------------------------------------------

					-- SELECT @CodigoFacturaGenerado;
				END
			END
		END

		-- select * from BillingHead order by Bih_code desc

--  	COMMIT TRANSACTION				
--  	END TRY
--  	BEGIN CATCH
--  		 SELECT ERROR_MESSAGE()
-- 		 
-- 		IF @@TRANCOUNT > 0
-- 			ROLLBACK	
--  	END CATCH				
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_SAVE_BILLING_HEAD','P') IS NOT NULL)
	DROP PROCEDURE SP_SAVE_BILLING_HEAD
GO
CREATE PROCEDURE SP_SAVE_BILLING_HEAD
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	10/14/2016.
-- System			:	Billing.
-- Program			:	Monthly Closing.
-- Description		:	Register the head of the a invoice.
-- Change Log		:
--=============================================
(
	 @Cis_code			INT			 = 423				-- Código de caso.
	,@Par_code			INT			 = 1				-- Código de parametro (empresa "Omnimed Inc.") que es la clave primaria de la tabla "Parameter".
	,@Use_code			INT			 = 98				-- Código de usuario.
	,@Bih_closingDate	CHAR(10)	 = '10/25/2016'	-- Fecha de cierre.
	,@Bih_facNum		VARCHAR(10)	 = '1'	
) 
-- select * from BillingHead order by Bih_code desc
AS
BEGIN
	SET XACT_ABORT ON
	SET NOCOUNT ON
		
	DECLARE @CodigoFacturaGenerado INT		-- Código de factura que se genera después de la inserción.
	DECLARE @Bih_code_old		   CHAR(10)
	DECLARE	@Cantidad			   INT
	DECLARE	@Cantidad1			   INT
	DECLARE	@x					   INT
	DECLARE @a					   CHAR(10)
	DECLARE @Mes				   CHAR(1)
	DECLARE @Año				   CHAR(1)
	DECLARE @CodigoFacturaextraido CHAR(10)
	
-- 	BEGIN TRY
-- 	 	BEGIN TRANSACTION

		SET @Cantidad = (SELECT COUNT(*) FROM BillingHead)

		IF (@Cantidad = 0) -- Si no hay ningún registro en la tabla "BillingHead".
		BEGIN
			INSERT INTO BillingHead(cis_code , Bih_billPay, Bih_billDate                 , Bih_billTotal, Par_code , Use_code , Bih_closingDate                     , Bih_facNum)
			VALUES                 (@Cis_code, 0          , CONVERT(DATE, GETDATE(), 101), 0            , @Par_code, @Use_code, CONVERT(DATE, @Bih_closingDate, 101), '-'       )

			SET @CodigoFacturaGenerado = SCOPE_IDENTITY();

			-- Genera código de factura en formato cadena.
			-- ------------------------------------------------------
			SET @Mes		  = (LEFT(DATENAME(MONTH, GETDATE()), 1))
			SET @Año		  = (RIGHT(DATENAME(YEAR, GETDATE()), 1))
			SET @Bih_code_old = (@Mes + @Año + 'B' + '0000001')
			
			-- Actualiza el código de factura en formato cadena en el campo "Bih_code_old" en el registro que se acaba de insertar.
			UPDATE BillingHead 
			SET	   Bih_code_old = @Bih_code_old 
			WHERE  Bih_code = @CodigoFacturaGenerado
			-- ------------------------------------------------------

			SELECT @CodigoFacturaGenerado;			
		END			
		ELSE IF (@Cantidad <> 0) -- Si hay registros en la tabla "BillingHead"
		BEGIN		
			IF (@Bih_facNum = '-') -- Si el cierre es por fecha 
			BEGIN
				-- Si existen facturas del mismo caso que tienen la misma fecha de cierre 
				-- y que están activas (Bih_deleteStatus <> 'D')						  
				IF ((SELECT COUNT(*) 
				     FROM BillingHead 
				     WHERE Cis_code = @Cis_code	
					   AND Par_code = @Par_code 
					   AND Bih_closingDate = CONVERT(DATE, @Bih_closingDate, 101) 
					   AND Bih_deleteStatus <> 'D') = 0)
				BEGIN									
	      			INSERT INTO BillingHead(Cis_code , Bih_billPay, Bih_billDate                 , Bih_billTotal, Par_code , Use_code , Bih_closingDate                     , Bih_facNum)
					VALUES                 (@Cis_code, 0          , CONVERT(DATE, GETDATE(), 101), 0            , @Par_code, @Use_code, CONVERT(DATE, @Bih_closingDate, 101), '-'       )

					SET @CodigoFacturaGenerado = SCOPE_IDENTITY();
						
					-- Genera código de factura en formato cadena.
					-- ------------------------------------------------------
					SET @Mes		           = LEFT(DATENAME(MONTH, GETDATE()), 1)
					SET @Año		           = RIGHT(DATENAME(YEAR, GETDATE()), 1)
					SET @CodigoFacturaextraido = (SELECT TOP 1 bih_code FROM BillingHead ORDER BY RIGHT(bih_code, 7) DESC)
					SET @a                     = RIGHT(@CodigoFacturaextraido, 7)
					SET @x                     = STR(@a + 1)
					SET @Bih_code_old		   = @Mes + @Año + 'B' + RIGHT('00000000000' + LTRIM(STR(@x)), 7)
					
					-- Actualiza el código de factura en formato cadena en el campo "Bih_code_old" en el registro que se acaba de insertar.
					UPDATE BillingHead 
					SET	   Bih_code_old = @Bih_code_old 
					WHERE  Bih_code = @CodigoFacturaGenerado
					-- ------------------------------------------------------

					SELECT @CodigoFacturaGenerado;
				END									
			END
			ELSE			
			BEGIN
				IF ((SELECT COUNT(*) 
				     FROM BillingHead 
					 WHERE Cis_code = @Cis_code 
					   AND Par_code = @Par_code 
					   AND Bih_closingDate = CONVERT(DATE, @Bih_closingDate, 101)	
					   AND Bih_deleteStatus <> 'D' 
					   AND Bih_facNum = @Bih_facNum) = 0)
				BEGIN
					INSERT INTO BillingHead(Cis_code , Bih_billPay, Bih_billDate                 , Bih_billTotal, Par_code , Use_code , Bih_closingDate               , Bih_facNum )
					VALUES                 (@Cis_code, 0          , CONVERT(DATE, GETDATE(), 101), 0            , @Par_code, @Use_code, CONVERT(DATE, @Bih_closingDate, 101), @Bih_facNum)
				
					SET @CodigoFacturaGenerado = SCOPE_IDENTITY();

					-- Genera código de factura en formato cadena.
					-- ------------------------------------------------------
					set @Mes                   = LEFT(DATENAME(MONTH, GETDATE()), 1)
					set @Año                   = RIGHT(DATENAME(YEAR, GETDATE()), 1)
					set @CodigoFacturaextraido = (SELECT TOP 1 Bih_code FROM BillingHead ORDER BY right(Bih_code, 7) DESC) 
					set @a                     = RIGHT(@CodigoFacturaextraido, 7) 
					set @x                     = STR(@a + 1)         
					set @Bih_code_old          = @Mes + @Año + 'B' + RIGHT('00000000000' + LTRIM(STR(@x)), 7)

					-- Actualiza el código de factura en formato cadena en el campo "Bih_code_old" en el registro que se acaba de insertar.
					UPDATE BillingHead 
					SET	   Bih_code_old = @Bih_code_old 
					WHERE  Bih_code = @CodigoFacturaGenerado
					-- ------------------------------------------------------

					SELECT @CodigoFacturaGenerado;
				END
			END
		END
--  	COMMIT TRANSACTION				
--  	END TRY
--  	BEGIN CATCH
--  		 SELECT ERROR_MESSAGE()
-- 		 
-- 		IF @@TRANCOUNT > 0
-- 			ROLLBACK	
--  	END CATCH				
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_SAVE_BILLING_BODY','P') IS NOT NULL)
	DROP PROCEDURE SP_SAVE_BILLING_BODY
GO
CREATE PROCEDURE SP_SAVE_BILLING_BODY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	10/14/2016.
-- System			:	Billing.
-- Program			:	Monthly Closing.
-- Description		:	Register the body of the a invoice.
-- Change Log		:
--=============================================
(
	 @Bih_code			INT 
	,@Bib_servDate		CHAR(10)
	,@Code				CHAR(10)
	,@Act_code			INT
	,@Bib_hourMile		DECIMAL(10, 2)
	,@Bib_priceAct		DECIMAL(10, 2)
	,@Cis_code			INT
	,@ActivityType		CHAR(1)
	,@Bib_amoReim		DECIMAL(10, 2)
	,@Bib_createdUser	INT
	,@Dae_code			INT	
) 
AS
BEGIN
	-- DECLARE	@Counter INT

	BEGIN TRY
	 	BEGIN TRANSACTION
			
		-- SET @Counter = (SELECT COUNT(*) FROM BillingBody)
		 
		----------------------------------------------------------------------------------------------
		IF (@ActivityType = 'C')
		BEGIN
			SET @Bib_priceAct = (SELECT TOP 1 Cis_price
								 FROM CaseInformationSheetHead
								 WHERE Cis_code = @Cis_code)
		END
		----------------------------------------------------------------------------------------------

		-- select * from BillingBody order by Bib_code desc
		
		INSERT INTO BillingBody(Bih_code
								,Bib_servDate
								,[Bib_code?]		-- value "MMC"
								,Act_code
								,Bib_hourMile
								,Bib_priceAct
								,Bib_amoReim
								,Bib_createdUser
								,Dae_code)
		VALUES				   (@Bih_code
								,CONVERT(DATE, @Bib_servDate, 101)								
								,@Code				-- value "MMC"
								,@Act_code
								,@Bib_hourMile
								,@Bib_priceAct
								,@Bib_amoReim
								,@Bib_createdUser
								,@Dae_code)
		SELECT SCOPE_IDENTITY();

 		COMMIT TRANSACTION				
 	END TRY
 	BEGIN CATCH
 		 SELECT ERROR_MESSAGE()
		 
		IF @@TRANCOUNT > 0
			ROLLBACK	
 	END CATCH					
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_GET_FULL_AMOUNT_BILLING','P') IS NOT NULL)
	DROP PROCEDURE SP_GET_FULL_AMOUNT_BILLING
GO
CREATE PROCEDURE SP_GET_FULL_AMOUNT_BILLING
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	10/19/2016.
-- System			:	Billing.
-- Program			:	Monthly Closing.
-- Description		:	Get the full amount of billing.
-- Change Log		:
--=============================================
(
	@Bih_code INT = 17278
)
AS
BEGIN
	SELECT ISNULL(convert(decimal(15,8),  SUM(ROUND((ROUND(Bib_hourMile, 2) * ROUND(Bib_priceAct, 2)), 2))), 0) AS Total
		  ,ISNULL(SUM(ROUND(Bib_amoReim, 2)), 0) AS Amount  
	FROM BillingBody
	WHERE Bih_code = @Bih_code
	  AND Bib_deletingStatus = 0
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_UPDATE_TOTAL_BILLING_HEAD','P') IS NOT NULL)
	DROP PROCEDURE SP_UPDATE_TOTAL_BILLING_HEAD
GO
CREATE PROCEDURE SP_UPDATE_TOTAL_BILLING_HEAD
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	10/20/2016.
-- System			:	Billing.
-- Program			:	Monthly Closing.
-- Description		:	Update the field Bih_billTotal of tha table BillingHead.
-- Change Log		:
--=============================================
(
	@Bih_code	INT				= 1
   ,@Total		DECIMAL(15,8)	= 10
)
AS
BEGIN
	UPDATE BillingHead
	SET Bih_billTotal = CONVERT(decimal(15, 8), @Total)
	WHERE Bih_code = @Bih_code
END
GO
-- use Omnimed
-- go
-- sp_help billing_head
-- 
-- use OmnimedBD
-- go
-- sp_help billinghead
-- *******************************************************************************************************

IF (OBJECT_ID('SP_GENERATE_INVOICE','P') IS NOT NULL)
	DROP PROCEDURE SP_GENERATE_INVOICE
GO
CREATE PROCEDURE SP_GENERATE_INVOICE
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	10/20/2016.
-- System			:	Billing.
-- Program			:	Monthly Closing.
-- Description		:	Generates an invoice.
-- Change Log		:
--=============================================
(
	 @Cis_code			INT				= 1993
	,@ClosedDate		CHAR(10)		= '10/31/2016'
	,@NumFac			VARCHAR(10)		= '-'
)
AS
BEGIN
	DECLARE @Ins_name VARCHAR(100);
		
	-- BEGIN TRY
	 	-- BEGIN TRANSACTION

		-- Obtiene el código de aseguradora del caso consultado.
		SELECT @Ins_name = (SELECT Ins_name
						    FROM   Insurer
						    WHERE  Ins_code = CIS.Ins_code)
		FROM CaseInformationSheetHead AS CIS
		WHERE Cis_code = @Cis_code
			
		IF ( LTRIM(RTRIM(@Ins_name)) = 'AMTRUST C/O CARLISLE & ASSOC') -- Si la aseguradora es: "AMTRUST C/O CARLISLE & ASSOC" cuyo código original es: 'Fe16I00064'
		BEGIN
			IF(@NumFac = '-')
			BEGIN
				-- !IMPORTANTE
				-- ********************************************************************************************				
				-- ACTUALIZA EL ESTADO DE FACTURA EN LA TABLA DataEntry (EN EL CAMPO "Dae_invoiceStatus")
				UPDATE DataEntry
				SET  Dae_invoiceStatus = 1
					,Dae_closedDate = CONVERT(DATE ,@ClosedDate, 101)
					,Dae_parameterDate = CONVERT(DATE ,GETDATE(), 101)
				WHERE Cis_code = @Cis_code
				  AND Dae_facturable = 1 
				  AND CONVERT(DATE, Dae_date, 101) <= CONVERT(DATE, @ClosedDate, 101) 
				  AND Dae_closedDate IS NULL
				-- ********************************************************************************************

				DECLARE @Table TABLE
				(
					 id				INT IDENTITY
					,Dae_code		INT
					,Dae_date		DATE
					,Act_code		INT
					,Dae_hourAct	DECIMAL(10,2)
					,[Hour]			DECIMAL(10, 2)
					,Dae_milesAct	DECIMAL(10, 2)
					,Dae_comment	VARCHAR(8000)
					,Num			INT
					,Bandera		CHAR(1)
				)

				INSERT INTO @Table (Dae_code   , Dae_date   , Act_code   , Dae_hourAct   , [Hour]   , Dae_milesAct   , Dae_comment   , Num        , Bandera)
				SELECT			    C1.Dae_code, C1.Dae_date, C1.Act_code, C1.Dae_hourAct, c1.[Hour], c1.Dae_milesAct, C1.Dae_comment, null as num, 'T' as bandera
				FROM	(SELECT ROW_NUMBER() OVER(ORDER BY DAE.Dae_date ASC) AS [Row]
							   ,ACT.Aty_code
							   ,DAE.Dae_code
							   ,DAE.Dae_date
							   ,ACT.Act_code
							   ,DAE.Dae_hourAct
							   ,CASE WHEN ACT.Aty_code = 2 THEN 0 ELSE DAE.Dae_hourAct END AS [Hour]
							   ,DAE.Dae_milesAct
							   ,DAE.Dae_comment
						  FROM DataEntry AS DAE
							  ,Activity AS ACT
							  ,ActivityType AS ATY
						  WHERE Cis_code               = @Cis_code
							and DAE.Act_code           = ACT.Act_code
							and DAE.Dae_closedDate     IS NULL
							and DAE.Dae_invoiceStatus  = 0
							and DAE.Dae_parameterDate  is null
							and DAE.Dae_deletingStatus = 0
							and ACT.Aty_code           = ATY.Aty_code
							AND DAE.Dae_facturable     = 1) AS C1 
						INNER JOIN ActivityType AS ATY2		
						/*
						select * from Omnimed.dbo.Type_act
						select * from OmnimedBD.dbo.ActivityType
						*/
						ON C1.Aty_code = ATY2.Aty_code
						GROUP BY C1.[Row]
								,C1.Dae_code
								,C1.Dae_date
								,C1.Act_code
								,C1.Dae_hourAct
								,c1.Dae_milesAct
								,C1.Dae_comment
								,C1.Aty_code
								,c1.[Hour]
						--Order by C1.Row
						ORDER BY CONVERT(DATE, C1.Dae_date, 101) ASC
					            ,Dae_code ASC

				DECLARE @count    INT = (SELECT COUNT(*) FROM @Table)	
				DECLARE @next     INT = 1
				DECLARE @next2    INT = 1
				DECLARE @suma     DECIMAL(8,2)
				DECLARE @Dae_code VARCHAR(20)

				WHILE (@count > 0 AND @next <= @count)
				BEGIN
					SET @suma = (SELECT SUM([Hour]) 
								 FROM @Table 
								 where id <= @next 
								 AND Bandera = 'T')

					IF (@suma <=9)
					BEGIN 
						UPDATE @Table
						SET Num = @next2 
						WHERE id = @next
							
						SET @Dae_code = (SELECT Dae_code
										 FROM @Table
										 WHERE id = @next)

						--update DATA_ENTRY set num_fac=@next2 where cod_de=@cod_de
					END
					ELSE
					BEGIN 
						UPDATE @Table SET Bandera = 'F' WHERE id < @next

						SET  @next2 = @next2 + 1

						UPDATE @Table SET num = @next2 WHERE id = @next

						SET @Dae_code = (SELECT Dae_code FROM @Table WHERE id = @next)
						--update DATA_ENTRY set num_fac=@next2 where cod_de=@cod_de
					END 
					SET @next = @next + 1 
				END
	
				UPDATE DataEntry
				SET	   Dae_facNum = B.Num 
				FROM   DataEntry AS A
				INNER JOIN 	@Table AS B 
				ON (A.Dae_code = B.Dae_code)
			END
			ELSE
			BEGIN
				UPDATE DataEntry
				SET Dae_invoiceStatus = 1
				   ,Dae_closedDate    = CONVERT(DATE ,@ClosedDate, 101)
				   ,Dae_parameterDate = CONVERT(DATE ,GETDATE(), 101)
				WHERE Cis_code = @Cis_code
				  AND Dae_facturable = 1 
				  AND CONVERT(DATE ,Dae_date, 101) <= CONVERT(DATE, @ClosedDate, 101) 
				  AND Dae_closedDate IS NULL
				  AND Dae_facNum = CONVERT(INT, @NumFac)
			END		
		END 
		ELSE 
		BEGIN 
			UPDATE DataEntry
			SET Dae_invoiceStatus = 1
			   ,Dae_closedDate    = CONVERT(DATE ,@ClosedDate, 101)
			   ,Dae_parameterDate = CONVERT(DATE, GETDATE(), 101)
			WHERE Cis_code = @Cis_code
			  AND Dae_facturable = 1 
			  AND CONVERT(DATE, Dae_date, 101) <= CONVERT(DATE, @ClosedDate, 101) 
			  AND Dae_closedDate IS NULL
		END 

 		-- COMMIT TRANSACTION				
 	-- END TRY
 	-- BEGIN CATCH
 	-- 	 SELECT ERROR_MESSAGE()
	-- 	 
	-- 	IF @@TRANCOUNT > 0
	-- 		ROLLBACK	
 	-- END CATCH					
END 
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_VERIFY_ENTRIES_IN_CASE','P') IS NOT NULL)
	DROP PROCEDURE SP_VERIFY_ENTRIES_IN_CASE
GO
CREATE PROCEDURE SP_VERIFY_ENTRIES_IN_CASE
-- =============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	10/20/2016.
-- System			:	Billing.
-- Program			:	Monthly Closing.
-- Description		:	Verifiy the entries in a case.
-- Change Log		:
-- =============================================
(
	@Cis_code INT = 454
)
AS
BEGIN
	SELECT DAE.Dae_code
		  ,DAE.Dae_date
		  ,ACT.Act_code
		  ,DAE.Dae_hourAct
		  ,DAE.Dae_milesAct
		  ,DAE.Dae_comment
		  ,ATY.Aty_price
	FROM DataEntry AS DAE
	    ,Activity AS ACT
		,ActivityType AS ATY
	WHERE Cis_code           = @Cis_code
	  and DAe.Act_code       = ACT.Act_code
	  and ACT.Aty_code       = ATY.Aty_code
	  and DAE.Dae_closedDate IS NULL
	  and Dae_invoiceStatus  = 0
	  and Dae_parameterDate  IS NULL
	ORDER BY CONVERT(DATE, DAE.Dae_date, 101) ASC
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_BILLING_BY_CLOSING_DATE','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_BILLING_BY_CLOSING_DATE
GO
CREATE PROCEDURE SP_LIST_BILLING_BY_CLOSING_DATE
-- =============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	10/21/2016.
-- System			:	Billing.
-- Program			:	Monthly Closing.
-- Description		:	List the cases that have bills that have not yet been paid and have option to be reversed.
-- Change Log		:
-- =============================================
(
	@closing_date char(10) = '10/21/2016'
	-- @closing_date char(10) = '09/21/2016'
)
AS
BEGIN
	SELECT BIH.Bih_code
		  ,CIS.Cis_code
		  ,CIS.Cis_caseCode
		  ,PAT.Pat_firstName + ' ' + PAT.Pat_lastName AS Patient
		  ,PAT.Pat_socialSecurityNumberD
		  ,INS.Ins_name AS Insurer
		  ,CONVERT(DATE, CIS.Cis_accidentDate, 101) as AccidentalDate		  
		  ,BIH.Bih_billTotal
		  ,BIH.Bih_billPay
	FROM CaseInformationSheetHead AS CIS
		,Patient				  AS PAT
		,Insurer				  AS INS
		,BillingHead			  AS BIH
	WHERE CIS.Pat_code = PAT.Pat_code
	  AND CIS.Ins_code = INS.Ins_code
	  AND BIH.Cis_code = CIS.Cis_code	  
	  -- AND CONVERT(DATE, BIH.Bih_closingDate) = CONVERT(DATE, @closing_date)
	  AND BIH.Bih_closingDate = @closing_date
	  AND BIH.Bih_payStatus = 0 
	  AND BIH.Bih_deleteStatus = 'U'
	ORDER BY PAT.Pat_lastName
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_LAST_CLOSING_DATE','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_LAST_CLOSING_DATE
GO
CREATE PROCEDURE SP_LIST_LAST_CLOSING_DATE
-- =============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	10/21/2016.
-- System			:	Billing.
-- Program			:	Monthly Closing.
-- Description		:	List the last closing date for select in the moment of the reversion of closing date.
-- Change Log		:
-- =============================================
AS
BEGIN
	SELECT 
		   BIH.Bih_closingDate AS [FechaCierre]
		  -- ,BIH.Bih_billDate	   AS [FechaRegistroCierre]
		  ,CASE 
				WHEN (Use_code IS NULL) THEN 0
				ELSE Use_code
		   END AS [CodigoUsuario]
		  ,CASE 
				WHEN (Use_code IS NULL) THEN '' 
				ELSE (SELECT LTRIM(RTRIM(UPPER(Use_firstName))) + ' ' + LTRIM(RTRIM(UPPER(Use_lastName))) FROM [User] WHERE Use_code = BIH.Use_code)
		   END AS [Usuario]
	FROM BillingHead AS BIH	
	where Bih_deleteStatus <> 'D'
	GROUP BY BIH.Bih_closingDate
		    -- ,BIH.Bih_billDate
			,BIH.Use_code
			-- ,BIH.(SELECT LTRIM(RTRIM(UPPER(Use_firstName))) + ' ' + LTRIM(RTRIM(UPPER(Use_lastName))) FROM [User] WHERE Use_code = BIH.Use_code)
	ORDER BY -- BIH.Bih_billDate DESC		
		    BIH.Bih_closingDate DESC		
			-- select * from BillingHead order by Bih_code desc
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_UNDO_GENERATE_INVOICE','P') IS NOT NULL)
	DROP PROCEDURE SP_UNDO_GENERATE_INVOICE
GO
CREATE PROCEDURE SP_UNDO_GENERATE_INVOICE
-- =============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	10/24/2016.
-- System			:	Billing.
-- Program			:	Monthly Closing.
-- Description		:	Reverse an invoice generated.
-- Change Log		:
-- =============================================
(
	@CodigoFactura INT = 1
   ,@CodigoUsuario INT = 1
)
AS
BEGIN
	SET NOCOUNT ON	
	
	DECLARE @CodigoCaso		   INT
	DECLARE @CodigoAseguradora INT

	BEGIN TRY
	 	BEGIN TRANSACTION

			SELECT @CodigoCaso = Cis_code
			FROM BillingHead
			WHERE Bih_code = @CodigoFactura

			SELECT @CodigoAseguradora = Ins_code
			FROM CaseInformationSheetHead
			WHERE Cis_code = @CodigoCaso
			
			-- 1.- Eliminar logicamente los registro del BillingHead de esa factura				
			UPDATE BillingBody
			SET Bib_deletingStatus = 1,
				Bib_deletedUser = @CodigoUsuario
			WHERE RTRIM(LTRIM(Bih_code)) = RTRIM(LTRIM(@CodigoFactura))

			-- 2.- Eliminar logicamente la factura ---usuario -> quien elimino la factura, estate "D" -> delete ---
			UPDATE BillingHead
			SET Bih_loggedUserCode = @CodigoUsuario
			   ,Bih_deleteStatus   = 'D'
			WHERE RTRIM(LTRIM(Bih_code)) = RTRIM(LTRIM(@CodigoFactura))

			--3.- Resetear date_entries----
			UPDATE DataEntry
			SET Dae_invoiceStatus = 0
			   ,Dae_closedDate    = NULL
			   ,Dae_parameterDate = NULL
			FROM BillingBody
			WHERE DataEntry.Dae_code		   = BillingBody.Dae_code
			  AND BillingBody.Bih_code         = @CodigoFactura
			  AND DataEntry.Dae_deletingStatus = 0	

		    IF (@CodigoAseguradora = 27) -- Si la aseguradora es: "AMTRUST C/O CARLISLE & ASSOC" cuyo código original es: 'Fe16I00064'
			BEGIN
				DECLARE @table1 TABLE
				(
					id				INT IDENTITY,
					Dae_code		INT,
					Dae_date		DATE,
					Act_code		INT,
					Dae_hourAct		DECIMAL(10,2),
					[Hour]			DECIMAL(10,2),
					Dae_milesAct	DECIMAL(10,2),
					Dae_comment		VARCHAR(8000),
					Num				INT, 
					Bandera			CHAR(1)
				)

				INSERT INTO @table1(Dae_code
								   ,Dae_date  
								   ,Act_code  
								   ,Dae_hourAct
								   ,[Hour]
								   ,Dae_milesAct
								   ,Dae_comment
								   ,Num
								   ,Bandera)				
				SELECT		        C1.Dae_code
								   ,C1.Dae_date
								   ,C1.Act_code
								   ,C1.Dae_hourAct
								   ,C1.[Hour]
								   ,C1.Dae_milesAct
								   ,C1.Dae_comment
								   ,NULL AS Num
								   ,'T' AS Bandera
				FROM (SELECT ROW_NUMBER() OVER(ORDER BY Dae_date asc) AS Row
                            ,ACT.Aty_code
							,DAE.Dae_code
							,DAE.Dae_date
							,ACT.Act_code
							,DAE.Dae_hourAct
							,CASE WHEN ACT.Aty_code = 2 THEN 0 ELSE DAE.Dae_hourAct END AS [Hour]
							,DAE.Dae_milesAct
							,DAE.Dae_comment
					  FROM	DataEntry    AS [DAE]
					       ,Activity     AS [ACT]
						   ,ActivityType AS [ATY]
					  WHERE Cis_code               = @CodigoCaso
					    AND DAE.Act_code           = ACT.Act_code
						AND DAE.Dae_closedDate     = NULL						
						AND DAE.Dae_invoiceStatus  = 0
						AND DAE.Dae_parameterDate  = NULL
						AND DAE.Dae_deletingStatus = 0
						AND ACT.Aty_code           = ATY.Aty_code
						AND DAE.Dae_facturable     = 1) AS C1
				INNER JOIN ActivityType AS [ATY2]
				ON C1.Aty_code = [ATY2].Aty_code
				GROUP BY C1.Row
						,C1.Dae_code
						,C1.Dae_date
						,C1.Act_code
						,C1.Dae_hourAct
						,C1.Dae_milesAct
						,C1.Dae_comment
						,C1.Aty_code
						,C1.[Hour]
				ORDER BY CONVERT(DATE, Dae_date, 101) ASC
				        ,Dae_code ASC

				DECLARE @Contador INT = (SELECT COUNT(*) FROM @table1)
				DECLARE @Next     INT = 1
				DECLARE @Next2    INT = 1
				DECLARE @Suma     DECIMAL(10, 2)
				DECLARE @Dae_code INT

				WHILE (@Contador > 0 AND @Next <= @Contador)
				BEGIN
					SET @Suma = (SELECT SUM([Hour]) FROM @table1 WHERE id <= @Next AND Bandera = 'T')

					IF (@Suma <= 9)
					BEGIN
						UPDATE @table1 SET Num = @Next2 WHERE id = @Next	
					END
					ELSE
					BEGIN
						UPDATE @table1 SET Bandera = 'F' WHERE id < @Next

						SET @Next2 = @Next2 + 1

						UPDATE @table1 SET Num = @Next2 WHERE id = @Next
					END		
					
					SET @Next = @Next + 1
				END				

				UPDATE DataEntry 
				SET Dae_facNum = b.Num
				FROM 
						DataEntry AS a
				INNER JOIN
						@table1 AS b
				ON (a.Dae_code = b.Dae_code)

			END


		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		--SELECT ERROR_NUMBER() AS MedicalErrorCode, ERROR_MESSAGE() AS ErrorMessage;
		
		--IF @@TRANCOUNT>=1
		--	ROLLBACK TRANSACTION

	END CATCH
END
GO

-- ******************************************************************************************************************************************************************************

IF (OBJECT_ID('PruebaCierreMes','P') IS NOT NULL)
	DROP PROCEDURE PruebaCierreMes
GO
CREATE PROCEDURE PruebaCierreMes
-- =============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	10/24/2016.
-- System			:	Billing.
-- Program			:	Monthly Closing.
-- Description		:	Closes one or more invoices.
-- Change Log		:
-- =============================================
(
	 @FechaCierre		CHAR(10)		= '11/01/2016'		
	,@ListaCorrelativos	NVARCHAR(MAX) = '2'
	,@TipoCierre		INT = 1
	,@CodigoUsuario		INT = 98
)
AS
BEGIN
	-- set nocount on

	-- select top 50 Bih_code from BillingHead
	DECLARE @consulta		NVARCHAR(MAX);
	DECLARE @Correlativos	NVARCHAR(MAX); -- Variable que va a recibir la cadena convertida de la variable "@CodigosCasosFacNum" con tan sólo los códigos de los casos (sin los FacNum).
	DECLARE @contador		INT = 1; -- Variable que sirve para dejar la cadena de la variable "@CodigosCasosFacNum" sólo con los códigos de los casos (sin los FacNum).
	
	CREATE TABLE #CasosTemp1
	(
		Correlativo			INT 
	   ,CodigoCaso			INT				NULL
	   ,CodigoCasoAntiguo	CHAR(15)		NULL
	   ,Claim				VARCHAR(25)		NULL
	   ,Paciente			VARCHAR(200)	NULL	   
	   ,NumeroSeguroSocial	VARCHAR(20)		NULL
	   ,Aseguradora			VARCHAR(100)	NULL
	   ,FechaAccidente		VARCHAR(10)		NULL
	   ,Horas				VARCHAR(10)		NULL
	   ,UltimaFecha			VARCHAR(10)		NULL
	   ,FacNum				VARCHAR(8)		NULL
	   ,DefinicionPrecio	VARCHAR(15)		NULL
	)
	
	CREATE TABLE #CasosTemp2
	(
		Correlativo					INT 
	   ,CodigoCaso					INT				NULL
	   ,PrecioCaso					DECIMAL(10, 2)	NULL
	   ,CodigoCasoAntiguo			CHAR(15)		NULL
	   ,Claim						VARCHAR(25)		NULL
	   ,CodigoPaciente				INT				NULL
	   ,Paciente					VARCHAR(200)	NULL
	   ,ApellidoPaciente			VARCHAR(100)	NULL
	   ,NumeroSeguroSocial			VARCHAR(20)		NULL
	   ,Aseguradora					VARCHAR(100)	NULL
	   ,FechaAccidente				VARCHAR(10)		NULL
	   ,Horas						VARCHAR(10)		NULL
	   ,UltimaFecha					VARCHAR(10)		NULL
	   ,FacNum						VARCHAR(8)		NULL
	   ,Comentario					VARCHAR(MAX)	NULL
	   ,CantidadTotalEntradasCaso	INT				DEFAULT 0
	   ,CantidadEntradasCasoCerrar	INT				DEFAULT 0
	   ,CantidadEntradasRestantes	INT				DEFAULT 0
	   ,CodigoFacturaGenerada		INT				NULL
	   ,DefinicionPrecio			VARCHAR(15)		NULL
	);
	
	CREATE TABLE #EntradasAconvertir
	(
	    CodigoFactura				INT				NULL
	   ,FechaEntrada				DATE			NULL
	   ,[Bib_code?]					CHAR(10)		DEFAULT 'MMC'
	   ,CodigoActividad				INT				NULL
	   ,Horas						DECIMAL(10, 2)	NULL
	   ,Precio						DECIMAL(10, 2)	NULL
	   ,AmoReim						DECIMAL(10, 2)	NULL
	   ,comentario					VARCHAR(8000)	NULL
	   ,TipoActividad				CHAR(1)			NULL
	   ,UsuarioCreador				INT				NULL
	   ,CodigoEntrada				INT				NULL
	);

	CREATE TABLE #MontoTotalBilling
	(
		Total						DECIMAL(15, 8)	NULL			
	   ,Amount						DECIMAL(10, 2)	NULL
	)
	

	-- -------------------------------------------------------------------------------------------------
	-- Elimina las comillas simples de los lados de la cadena.
	SET @Correlativos = REPLACE(@ListaCorrelativos, '''', '');	

	-- Verifica el tipo de cierre (1: normal, 2: por hora, 3: por fecha)
	IF (@TipoCierre = 1)
	BEGIN
		INSERT #CasosTemp1 EXECUTE SP_LIST_GENERATED_INVOICE
		-- select 'aqui aqui'	
	END
	ELSE IF (@TipoCierre = 2)
	BEGIN
		-- select 'TipoCierre 2';
		INSERT #CasosTemp1 EXECUTE SP_LIST_GENERATED_INVOICE_HOUR_DATE @TipoCierre;		
	END
	ELSE IF (@TipoCierre = 3)
	BEGIN
		-- select 'TipoCierre 3';
		INSERT #CasosTemp1 EXECUTE SP_LIST_GENERATED_INVOICE_HOUR_DATE @TipoCierre;
	END
	-- -------------------------------------------------------------------------------------------------


	-- -------------------------------------------------------------------------------------------------
	-- Inserta en la tabla temporal los códigos de los casos	
	SET @consulta = N'SELECT *
					  FROM #CasosTemp1 AS CIS
					  WHERE Correlativo IN (' + @Correlativos + ')'	
	
	INSERT INTO #CasosTemp2 (Correlativo
							,CodigoCaso
							,CodigoCasoAntiguo
							,Claim
							,Paciente
							,NumeroSeguroSocial
							,Aseguradora
							,FechaAccidente
							,Horas
							,UltimaFecha
							,FacNum
							,DefinicionPrecio)
	EXECUTE SP_EXECUTESQL @consulta;
	-- -------------------------------------------------------------------------------------------------


	-- -------------------------------------------------------------------------------------------------
	-- Actualiza: Precios de casos | Nombre completo de paciente | Apellido de paciente  | Comentario | FacNum	
	UPDATE #CasosTemp2
		SET  PrecioCaso		  = cis.Cis_price																	
			,Paciente		  = (SELECT Pat_firstName + ' ' + Pat_lastName FROM Patient WHERE Pat_code = cis.Pat_code)
		    ,ApellidoPaciente = (SELECT Pat_lastName FROM Patient WHERE Pat_code = cis.Pat_code)
			,Comentario		  = (CASE WHEN cis.Cis_price = 0 THEN 'Unsuccessful:  Rate/Hr. is 0. Please change it in Case Info.' ELSE NULL END)	-- Actualiza el comentario del caso (si tiene precio 0 o no).
			,FacNum			  = (CASE WHEN FacNum = 0 THEN '-' ELSE FacNum END)
	FROM  #CasosTemp2 AS tp
		  ,CaseInformationSheetHead AS cis
	WHERE tp.codigocaso = cis.cis_code
	-- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



	-- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	-- Actualiza la cantidad total de entradas de cada caso.
	DECLARE @CodigoCaso INT
	DECLARE @PrecioCaso DECIMAL(10, 2)
	DECLARE @FacNum		VARCHAR(8)
	DECLARE @CantidadTotalEntradasCaso	INT = 0 -- Variable donde se almacena la cantidad total de entradas del caso.
	DECLARE @CantidadEntradasCasoCerrar INT = 0 -- Variable donde se almacena la cantidad de entradas del caso que se van a cerra.
	DECLARE @CodigoFacturaGenerada		INT 	
	
	DECLARE MiCursor CURSOR
	FOR SELECT CodigoCaso, PrecioCaso, FacNum FROM #CasosTemp2 -- order by Correlativo asc
	
	OPEN MiCursor
	
	FETCH NEXT FROM MiCursor INTO @CodigoCaso, @PrecioCaso, @FacNum	

	WHILE @@FETCH_STATUS = 0
	BEGIN		
		-- ----------------------------
		-- Incializa variables		
		SET @CodigoFacturaGenerada = 0;
		
		DELETE FROM #EntradasAconvertir
		DELETE FROM #MontoTotalBilling
		-- ----------------------------
		

		-- -------------------------------------------------------------------------------------------------
		-- Obtiene la cantidad total de entradas del caso,
		EXEC SP_COUNT_DATAENTRY @CantidadTotalEntradasCaso OUTPUT, @CodigoCaso 

		-- Obntiene la cantidad de entradas del caso que se van a cerrar
		SET @CantidadEntradasCasoCerrar = dbo.FN_COUNT_ENTRIES_OF_CASE (@CodigoCaso, @FechaCierre, @FacNum);
		-- -------------------------------------------------------------------------------------------------
		

		-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		/*
		Actualiza: - Cantidad total de entradas del caso 
				   - comentario si es que las entradas que se van a cerrar es cero (el comentario dirá que las fechas de las entradas son mayores a la fecha de cierre).
		*/
		UPDATE #CasosTemp2 
		SET     CantidadTotalEntradasCaso  = @CantidadTotalEntradasCaso		       
		       ,Comentario				   = (CASE 
												WHEN (@CantidadEntradasCasoCerrar = 0 and Comentario is null) 
													THEN 'Unsuccessful:  Not Valid Data entries for The Monthly Closing Date.' 
												ELSE 
													Comentario 
											  END)
		WHERE CodigoCaso = @CodigoCaso and FacNum = @FacNum
		-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


		-- select @PrecioCaso				   as PrecioCaso
		-- 	  ,@CantidadTotalEntradasCaso  as CantidadTotalEntradasCaso
		-- 	  ,@CantidadEntradasCasoCerrar as CantidadEntradasCasoCerrar
		-- return 

		-- PruebaCierreMes
		
		-- select 'antes'

		-- Registra cabecera de factura 		
		IF (@PrecioCaso <> 0 and @CantidadEntradasCasoCerrar <> 0)	
		BEGIN			
			-- select 'despues'
			-- return 

			-- PruebaCierreMes

			-- Ejecuta el procedimiento de registro de cabecera de factura.
			EXEC SP_SAVE_BILLING_HEAD_2 @CodigoFacturaGenerada OUTPUT, @CodigoCaso, 1, @CodigoUsuario, @FechaCierre, @FacNum
						
			-- Actualiza la tabla temporal "#CasosTemp2" con los códigos de facturas generadas.
			UPDATE #CasosTemp2 
			SET CodigoFacturaGenerada = @CodigoFacturaGenerada
			WHERE CodigoCaso = @CodigoCaso and FacNum = @FacNum
			

			-- Ahora con esos códigos se va a realizar el registro del detalle de factura.
			INSERT INTO #EntradasAconvertir (CodigoEntrada	
											,FechaEntrada	
											,CodigoActividad	
											,Horas			
											,Precio			
											,comentario		
											,TipoActividad)
			EXEC SP_CONVERT_ENTRIES_IN_INVOICE @CodigoCaso, @FechaCierre, @FacNum


			-- Actualiza el campo "CodigoFactura" de la tabla #EntradasAconvertir
			UPDATE #EntradasAconvertir SET CodigoFactura = @CodigoFacturaGenerada


			-- Inserta el detalle de factura en la tabla "BillingBody"	
			INSERT INTO BillingBody(Bih_code
									,Bib_servDate
									,Act_code
									,Bib_hourMile
									,Bib_priceAct
									,Bib_amoReim
									,Bib_createdUser
									,Dae_code)
							SELECT  CodigoFactura
							       ,FechaEntrada
								   ,CodigoActividad
								   ,Horas
								   ,(CASE WHEN TipoActividad = 'C' THEN (SELECT TOP 1 Cis_price FROM CaseInformationSheetHead WHERE Cis_code = @CodigoCaso) ELSE Precio END)
								   ,AmoReim
								   ,UsuarioCreador
								   ,CodigoEntrada
							FROM  #EntradasAconvertir
								
			-- Totalizar Factura
			-- ******************************************************************************************
			INSERT INTO #MontoTotalBilling(Total, Amount)
			EXEC SP_GET_FULL_AMOUNT_BILLING @CodigoFacturaGenerada

			-- select @total
			-- return 
			-- pruebacierremes


			-- Si recibe totales actualiza el total de la factura
			IF ((SELECT COUNT(*) FROM #MontoTotalBilling) <> 0)
			BEGIN 
				Declare @total DECIMAL(15, 8) = (SELECT CONVERT(DECIMAL(15,8), Total) FROM #MontoTotalBilling)
				-- select @total
				-- return 

				-- PruebaCierreMes
				EXEC SP_UPDATE_TOTAL_BILLING_HEAD @CodigoFacturaGenerada, @total
			END
			-- ******************************************************************************************


			EXEC SP_GENERATE_INVOICE @CodigoCaso, @FechaCierre, @FacNum
			
			UPDATE #CasosTemp2 
			SET		CantidadEntradasCasoCerrar = @CantidadEntradasCasoCerrar
				   ,CantidadEntradasRestantes = (CONVERT(INT, CantidadTotalEntradasCaso) - CONVERT(INT, CantidadEntradasCasoCerrar))
				   ,Comentario = 'Successful!.'
			WHERE CodigoCaso = @CodigoCaso and FacNum = @FacNum
		END 	


		FETCH NEXT FROM MiCursor INTO @CodigoCaso, @PrecioCaso, @FacNum
	END
	
	CLOSE MiCursor
	DEALLOCATE MiCursor
	
	SELECT 
			Correlativo					
		   ,CodigoCaso					
		   ,PrecioCaso					
		   ,Paciente					
		   ,FacNum						
		   ,CantidadTotalEntradasCaso	
		   ,CantidadEntradasCasoCerrar	
		   ,CantidadEntradasRestantes	
		   ,Comentario					
		   ,CodigoFacturaGenerada		
	FROM #CasosTemp2
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_SEARCH_CASE_BILLING','P') IS NOT NULL)
	DROP PROCEDURE SP_SEARCH_CASE_BILLING
GO
CREATE PROCEDURE SP_SEARCH_CASE_BILLING
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	11/14/2016.
-- System			:	Billing.
-- Program			:	Billing.
-- Description		:	Search a invoice by pay status (Paid or Unpaid), claim, patient lastname or insurer name.
-- Change Log		:
--=============================================
(
	 @Cis_caseCode		VARCHAR(25)		= ''
	,@Pat_lastName		VARCHAR(100)	= ''
	,@Ins_code			INT				= 50
	,@PayStatus			CHAR(1)			= 'U'		-- 0: Unpaid, 1: Paid.
	-- select Ins_code_old from OmnimedBD.dbo.Insurer where Ins_code = 59
)
AS
BEGIN
	IF (@PayStatus = 'U')
	BEGIN
		IF (@Cis_caseCode <> '' AND @Pat_lastName <> '')
		BEGIN
			SELECT [CIS].[Cis_code]
				  ,[CIS].[Cis_caseCode]
				  ,[PAT].[Pat_code]
				  ,[PAT].[Pat_firstName] + ' ' + [PAT].[Pat_lastName] AS [Patient]
				  ,[INS].[Ins_name] AS [Insurer]				  
				  ,(SELECT Bih_code FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code
				  ,(SELECT Bih_code_old FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code_old 
				  ,[BIH].[Bih_billDate]
				  ,[BIH].[Bih_closingDate]
				  ,CONVERT(DATE, CIS.Cis_accidentDate, 101) AS AccidentDate
			FROM [CaseInformationSheetHead] AS [CIS]
				,[Patient]				    AS [PAT]
				,[Insurer]				    AS [INS]
				,[BillingHead]			    AS [BIH]
			WHERE [CIS].[Pat_code]      = [PAT].Pat_code
			  AND [CIS].[Ins_code]      = [INS].Ins_code
			  AND [CIS].[Cis_code]      = [BIH].Cis_code
			  AND [CIS].[Cis_caseCode]  = @Cis_caseCode
			  AND [PAT].[Pat_lastName]  LIKE @Pat_lastName + '%' 
			  AND [BIH].[Bih_payStatus] = 0 
			  AND [BIH].[Bih_code] NOT IN (SELECT Bih_code FROM PayBody) 
			  AND [BIH].[Bih_deleteStatus] <> 'D'
			GROUP BY [CIS].[Cis_code]
					,[CIS].[Cis_caseCode]
					,[PAT].[Pat_code]
					,[PAT].[Pat_firstName]
					,[PAT].[Pat_lastName]
					,[INS].[Ins_name]
					,[BIH].[Bih_code]
					,[BIH].[Bih_billDate]
					,[BIH].[Bih_closingDate]
					,[CIS].[Cis_accidentDate]
			ORDER BY [PAT].[Pat_lastName]
					,[PAT].[Pat_firstName]
					,CONVERT(DATE, BIH.Bih_closingDate) ASC 
					,[INS].Ins_name
		END 

		IF (@Cis_caseCode <> '' AND @Ins_code <> '')
		BEGIN
			SELECT cis.cis_code
			      ,cis.Cis_caseCode
				  ,[PAT].[Pat_code]
			      ,pat.Pat_firstName + ' ' + pat.Pat_lastName AS Patient
			      ,ins.Ins_name AS Insurer
				  ,(SELECT Bih_code FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code
			      ,(SELECT Bih_code_old FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code_old
			      ,bih.Bih_billDate
			      ,bih.Bih_closingDate
			      ,CONVERT(DATE, cis.Cis_accidentDate,101) AS AccidentDate
			FROM CaseInformationSheetHead AS [CIS]
				,Patient				  AS [PAT]
				,Insurer				  AS [INS]
				,BillingHead			  AS [BIH]
			WHERE cis.Pat_code      = pat.Pat_code
			  AND cis.Ins_code      = ins.Ins_code
			  AND cis.Cis_code      = bih.Cis_code
			  AND cis.Cis_caseCode  = @Cis_caseCode
			  AND cis.Ins_code      = @Ins_code
			  AND bih.Bih_payStatus = 0 
			  AND bih.Bih_code NOT IN (SELECT Bih_code FROM PayBody) 
			  AND bih.Bih_deleteStatus <> 'D'
			GROUP BY cis.Cis_code
					,cis.Cis_caseCode
					,[PAT].[Pat_code]
					,pat.Pat_firstName
					,pat.Pat_lastName 
					,ins.Ins_name
					,bih.Bih_code
					,bih.Bih_billDate
					,bih.Bih_closingDate
					,cis.Cis_accidentDate
			ORDER BY pat.Pat_lastName
					,pat.Pat_firstName
					,CONVERT(DATE, bih.Bih_closingDate) ASC 
					,ins.Ins_name
		END

		IF (@Ins_code <> '' AND @Pat_lastName <> '')
		BEGIN
			SELECT cis.cis_code
			      ,cis.Cis_caseCode
				  ,[PAT].[Pat_code]
			      ,pat.Pat_firstName + ' ' + pat.Pat_lastName AS Patient
			      ,ins.Ins_name AS Insurer
				  ,(SELECT Bih_code FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code
			      ,(SELECT Bih_code_old FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code_old
			      ,bih.Bih_billDate
			      ,bih.Bih_closingDate
			      ,CONVERT(DATE, cis.Cis_accidentDate,101) AS AccidentDate
			FROM CaseInformationSheetHead AS [CIS]
				,Patient				  AS [PAT]
				,Insurer				  AS [INS]
				,BillingHead			  AS [BIH]
			WHERE   [CIS].Pat_code = [PAT].Pat_code
				AND [CIS].Ins_code = [INS].Ins_code
				AND [CIS].Cis_code = [BIH].Cis_code
				AND [CIS].Ins_code = @Ins_code
				AND [PAT].Pat_lastName LIKE @Pat_lastName + '%' AND [BIH].Bih_payStatus = 0 
				AND [BIH].Bih_code NOT IN (SELECT Bih_code FROM PayBody) 
				AND [BIH].Bih_deleteStatus <> 'D'
			GROUP BY [CIS].Cis_code
					,[CIS].Cis_caseCode
					,[PAT].[Pat_code]
					,[PAT].Pat_firstName
					,[PAT].Pat_lastName
					,[INS].Ins_name
					,[BIH].Bih_code
					,[BIH].Bih_billDate
					,[BIH].Bih_closingDate
					,[CIS].Cis_accidentDate
			ORDER BY Pat_lastName
					,Pat_firstName
					,CONVERT(DATE, BIH.Bih_closingDate) ASC 
					,[INS].Ins_name
		END 

		IF (@Ins_code <> '')
		BEGIN
			SELECT CIS.Cis_code
				  ,CIS.Cis_caseCode
				  ,[PAT].[Pat_code]
				  ,PAT.Pat_firstName + ' ' + pat.Pat_lastName AS Patient
				  ,INS.Ins_name AS Insurer
				  ,(SELECT Bih_code FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code
				  ,(SELECT Bih_code_old FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code_old
				  ,BIH.Bih_billDate
				  ,BIH.Bih_closingDate
				  ,CONVERT(DATE, CIS.Cis_accidentDate, 101) AS AccidentDate
			FROM CaseInformationSheetHead AS [CIS]
				,Patient				  AS [PAT]
				,Insurer				  AS [INS]
				,BillingHead			  AS [BIH]
			WHERE CIS.Pat_code      = PAT.Pat_code
			  AND CIS.Ins_code      = INS.Ins_code
			  AND CIS.Cis_code      = BIH.Cis_code
			  AND CIS.Ins_code      = @Ins_code
			  AND BIH.Bih_payStatus = 0 
			  AND BIH.Bih_code NOT IN (SELECT Bih_code FROM PayBody) 
			  AND BIH.Bih_deleteStatus <> 'D'
			GROUP BY CIS.Cis_code
					,CIS.Cis_caseCode
					,[PAT].[Pat_code]
					,PAT.Pat_firstName
					,PAT.Pat_lastName
					,INS.Ins_name
					,BIH.Bih_code
					,BIH.Bih_billDate
					,BIH.Bih_closingDate
					,CIS.Cis_accidentDate
			ORDER BY PAT.Pat_lastName
					,PAT.Pat_firstName
					,CONVERT(DATE, BIH.Bih_closingDate) ASC 
					,INS.Ins_name
		END   

		IF (@Pat_lastName <> '')
		BEGIN
			SELECT [CIS].cis_code
				  ,[CIS].Cis_caseCode
				  ,[PAT].[Pat_code]
				  ,[PAT].Pat_firstName + ' ' + pat.Pat_lastName AS Patient
				  ,[INS].Ins_name AS Insurer
				  ,(SELECT Bih_code FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code
				  ,(SELECT Bih_code_old FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code_old
				  ,[BIH].Bih_billDate
				  ,[BIH].Bih_closingDate
				  ,CONVERT(DATE, [CIS].Cis_accidentDate, 101) AS AccidentDate
			FROM CaseInformationSheetHead AS [CIS]
				,Patient				  AS [PAT]
				,Insurer				  AS [INS]
				,BillingHead			  AS [BIH]
			WHERE cis.Pat_code = pat.Pat_code
			  AND cis.Ins_code = ins.Ins_code
			  AND cis.Cis_code = bih.Cis_code
			  AND pat.Pat_lastName LIKE @Pat_lastName + '%' AND bih.Bih_payStatus = 0 
			  AND Bih_code NOT IN (SELECT Bih_code FROM PayBody) 
			  AND bih.Bih_deleteStatus <> 'D'
			GROUP BY cis.Cis_code
					,cis.Cis_caseCode
					,[PAT].[Pat_code]
					,pat.Pat_firstName
					,pat.Pat_lastName
					,ins.Ins_name
					,bih.Bih_code
					,bih.Bih_billDate
					,bih.Bih_closingDate
					,cis.Cis_accidentDate
			ORDER BY pat.Pat_lastName
					,pat.Pat_firstName
					,CONVERT(DATE, bih.Bih_closingDate) ASC 
					,ins.Ins_name
		END 

		IF (@Cis_caseCode <> '')
		BEGIN
			SELECT [CIS].cis_code
				  ,[CIS].Cis_caseCode
				  ,[PAT].[Pat_code]
				  ,[PAT].Pat_firstName + ' ' + pat.Pat_lastName AS Patient
				  ,[INS].Ins_name AS Insurer
				  ,(SELECT Bih_code FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code
				  ,(SELECT Bih_code_old FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code_old
				  ,[BIH].Bih_billDate
				  ,[BIH].Bih_closingDate
				  ,CONVERT(DATE, [CIS].Cis_accidentDate, 101) AS AccidentDate
			FROM CaseInformationSheetHead AS [CIS]
				,Patient				  AS [PAT]
				,Insurer				  AS [INS]
				,BillingHead			  AS [BIH]
			WHERE [CIS].Pat_code  = pat.Pat_code 
			  AND [CIS].Ins_code = ins.Ins_code
			  AND [CIS].Cis_code  = bih.Cis_code
			  AND [CIS].Cis_caseCode  = @Cis_caseCode
			  AND [BIH].Bih_payStatus = 0 
			  AND [BIH].Bih_code NOT IN (SELECT Bih_code FROM PayBody) 
			  AND [BIH].Bih_deleteStatus <> 'D'
			GROUP BY [CIS].Cis_code
					,[CIS].Cis_caseCode
					,[PAT].[Pat_code]
					,[PAT].Pat_firstName
					,[PAT].Pat_lastName
					,[INS].Ins_name
					,[BIH].Bih_code
					,[BIH].Bih_billDate
					,[BIH].Bih_closingDate
					,[CIS].Cis_accidentDate
			ORDER BY [PAT].Pat_lastName
					,[PAT].Pat_firstName
					,CONVERT(DATE, bih.Bih_closingDate) ASC 
					,INS.Ins_name
		END
	END
	ELSE
	BEGIN
		IF (@Cis_caseCode <> '' AND @Pat_lastName <> '')
		BEGIN
			SELECT [CIS].cis_code
				  ,[CIS].Cis_caseCode
				  ,[PAT].[Pat_code]
				  ,[PAT].Pat_firstName + ' ' + pat.Pat_lastName AS Patient
				  ,[INS].Ins_name AS Insurer
				  ,(SELECT Bih_code FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code
				  ,(SELECT Bih_code_old FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code_old
				  ,[BIH].Bih_billDate
				  ,[BIH].Bih_closingDate
				  ,CONVERT(DATE, [CIS].Cis_accidentDate, 101) AS AccidentDate
			FROM CaseInformationSheetHead AS [CIS]
				,Patient				  AS [PAT]
				,Insurer				  AS [INS]
				,BillingHead			  AS [BIH]
			WHERE [CIS].Pat_code     = [PAT].Pat_code
			  AND [CIS].Ins_code     = [INS].Ins_code
			  AND [CIS].Cis_code     = [BIH].Cis_code
			  AND [CIS].Cis_caseCode = @Cis_caseCode
			  AND [PAT].Pat_lastName LIKE @Pat_lastName + '%' AND Bih_payStatus = 1 
			  AND [BIH].Bih_code IN (SELECT Bih_code FROM PayBody) 
			  AND [BIH].Bih_deleteStatus <> 'D'
			GROUP BY [CIS].Cis_code
					,[CIS].Cis_caseCode
					,[PAT].[Pat_code]
					,[PAT].Pat_firstName
					,[PAT].Pat_lastName 
					,[INS].Ins_name
					,[BIH].Bih_code
					,[BIH].Bih_billDate
					,[BIH].Bih_closingDate
					,[CIS].Cis_accidentDate
			ORDER BY [PAT].Pat_lastName
					,[PAT].Pat_firstName
					,CONVERT(DATE, [bih].Bih_closingDate) ASC 
					,[INS].Ins_name
		END 
	
		IF (@Cis_caseCode <> '' AND @Ins_code <> '')
		BEGIN
			SELECT [CIS].Cis_code
				  ,[CIS].Cis_caseCode
				  ,[PAT].[Pat_code]
				  ,[PAT].Pat_firstName + ' ' + PAT.Pat_lastName AS Patient
				  ,[INS].Ins_name AS Insurer
				  ,(SELECT Bih_code FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code
				  ,(SELECT Bih_code_old FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code_old
				  ,[BIH].Bih_billDate
				  ,[BIH].Bih_closingDate
				  ,CONVERT(DATE, cis.Cis_accidentDate,101) AS AccidentDate
			FROM CaseInformationSheetHead AS [CIS]
				,Patient				  AS [PAT]
				,Insurer				  AS [INS]
				,BillingHead			  AS [BIH]
			WHERE [CIS].Pat_code      = [PAT].Pat_code
			  AND [CIS].Ins_code      = [INS].Ins_code
			  AND [CIS].Cis_code      = [BIH].Cis_code
			  AND [CIS].Cis_caseCode  = @Cis_caseCode
			  AND [CIS].Ins_code      = @Ins_code
			  AND [BIH].Bih_payStatus = 1 
			  AND [BIH].Bih_code IN (SELECT Bih_code FROM PayBody) 
			  AND [BIH].Bih_deleteStatus <> 'D'
			GROUP BY [CIS].Cis_code
					,[CIS].Cis_caseCode
					,[PAT].[Pat_code]
					,[PAT].Pat_firstName
					,[PAT].Pat_lastName
					,[INS].Ins_name
					,[BIH].Bih_code
					,[BIH].Bih_billDate
					,[BIH].Bih_closingDate
					,[CIS].Cis_accidentDate
			ORDER BY [PAT].Pat_lastName
					,[PAT].Pat_firstName
					,CONVERT(DATE, bih.Bih_closingDate) ASC 
					,[INS].Ins_name
		END

		IF (@Ins_code <> '' AND @Pat_lastName <> '')
		BEGIN
			SELECT [CIS].Cis_code
				  ,[CIS].Cis_caseCode
				  ,[PAT].[Pat_code]
				  ,[PAT].Pat_firstName + ' ' + Pat_lastName AS Patient
				  ,[INS].Ins_name AS Insurer
				  ,(SELECT Bih_code FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code
				  ,(SELECT Bih_code_old FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code_old
				  ,[BIH].Bih_billDate
				  ,[BIH].Bih_closingDate
				  ,CONVERT(DATE, CIS.Cis_accidentDate,101) AS AccidentDate
			FROM CaseInformationSheetHead AS [CIS]
				,Patient				  AS [PAT]
				,Insurer				  AS [INS]
				,BillingHead			  AS [BIH]
			WHERE [CIS].Pat_code = pat.Pat_code
			  AND [CIS].Ins_code = ins.Ins_code
			  AND [CIS].Cis_code = bih.Cis_code
			  AND [CIS].Ins_code = @Ins_code
			  AND [PAT].Pat_lastName LIKE @Pat_lastName + '%' 
			  AND [BIH].Bih_payStatus = 1 
			  AND [BIH].Bih_code IN (SELECT Bih_code FROM PayBody) 
			  AND [BIH].Bih_deleteStatus <> 'D'			  
			GROUP BY [CIS].Cis_code
					,[CIS].Cis_caseCode
					,[PAT].[Pat_code]
					,[PAT].Pat_firstName
					,[PAT].Pat_lastName
					,[INS].Ins_name
					,[BIH].Bih_code
					,[BIH].Bih_billDate
					,[BIH].Bih_closingDate
					,[CIS].Cis_accidentDate
			ORDER BY [PAT].Pat_lastName
					,[PAT].Pat_firstName
					,CONVERT(DATE,bih.Bih_closingDate) ASC 
					,[INS].Ins_name
		END 

		IF (@Ins_code <> '')
		BEGIN
			SELECT [CIS].Cis_code
				  ,[CIS].Cis_caseCode
				  ,[PAT].[Pat_code]
				  ,[PAT].Pat_firstName + ' ' + [PAT].Pat_lastName AS Patient
				  ,[INS].Ins_name AS Insurer
				  ,(SELECT Bih_code FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code
				  ,(SELECT Bih_code_old FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code_old
				  ,[BIH].Bih_billDate
				  ,[BIH].Bih_closingDate
				  ,CONVERT(DATE, [CIS].Cis_accidentDate, 101) AS AccidentDate
			FROM CaseInformationSheetHead AS [CIS]
				,Patient				  AS [PAT]
				,Insurer				  AS [INS]
				,BillingHead			  AS [BIH]
			WHERE [CIS].Pat_code         = [PAT].Pat_code
			  AND [CIS].Ins_code         = [INS].Ins_code
			  AND [CIS].Cis_code         = [BIH].Cis_code
			  AND [CIS].Ins_code         = @Ins_code 
			  AND [BIH].Bih_payStatus    = 1 
			  AND [BIH].Bih_code         IN (SELECT Bih_code FROM PayBody) 
			  AND [BIH].Bih_deleteStatus <> 'D'
			GROUP BY [CIS].Cis_code
					,[CIS].Cis_caseCode
					,[PAT].[Pat_code]
					,[PAT].Pat_firstName
					,[PAT].Pat_lastName 
					,[INS].Ins_name
					,[BIH].Bih_code
					,[BIH].Bih_billDate
					,[BIH].Bih_closingDate
					,[CIS].Cis_accidentDate
			ORDER BY [PAT].Pat_lastName
					,[PAT].Pat_firstName
					,CONVERT(DATE, [BIH].Bih_closingDate) ASC 
					,[INS].Ins_name
		END 

		IF (@Pat_lastName <> '')
		BEGIN
			SELECT [CIS].Cis_code
				  ,[CIS].Cis_caseCode
				  ,[PAT].[Pat_code]
				  ,[PAT].Pat_firstName + ' ' + pat.Pat_lastName AS Patient
				  ,[INS].Ins_name AS Insurer
				  ,(SELECT Bih_code FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code
				  ,(SELECT Bih_code_old FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code_old
				  ,[BIH].Bih_billDate
				  ,[BIH].Bih_closingDate
				  ,CONVERT(DATE, [CIS].Cis_accidentDate, 101) AS AccidentDate
			FROM CaseInformationSheetHead AS [CIS]
				,Patient				  AS [PAT]
				,Insurer				  AS [INS]
				,BillingHead			  AS [BIH]
			WHERE cis.Pat_code = pat.Pat_code
 			  AND cis.Ins_code = ins.Ins_code
			  AND cis.Cis_code = bih.Cis_code
			  AND pat.Pat_lastName LIKE @Pat_lastName + '%' 
			  AND bih.Bih_payStatus = 1 
			  AND bih.Bih_code in (SELECT Bih_code FROM PayBody) 
			  AND bih.Bih_deleteStatus <> 'D'
			GROUP BY [CIS].Cis_code
					,[CIS].Cis_caseCode
					,[PAT].[Pat_code]
					,[PAT].Pat_firstName
					,[PAT].Pat_lastName 
					,[INS].Ins_name
					,[BIH].Bih_code
					,[BIH].Bih_billDate
					,[BIH].Bih_closingDate
					,[CIS].Cis_accidentDate
			ORDER BY [PAT].Pat_lastName
					,[PAT].Pat_firstName
					,CONVERT(DATE, [BIH].Bih_closingDate) ASC 
					,[INS].Ins_name
		END 
			
		IF (@Cis_caseCode <> '')
		BEGIN
			SELECT [CIS].Cis_code
				  ,[CIS].Cis_caseCode
				  ,[PAT].[Pat_code]
				  ,[PAT].Pat_firstName + ' ' + Pat_lastName AS Patient
				  ,[INS].Ins_name AS Insurer
				  ,(SELECT Bih_code FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code
				  ,(SELECT Bih_code_old FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code_old
				  ,[BIH].Bih_billDate
				  ,[BIH].Bih_closingDate
				  ,CONVERT(DATE, [CIS].Cis_accidentDate, 101) AS AccidentDate
			FROM CaseInformationSheetHead AS [CIS]
				,Patient				  AS [PAT]
				,Insurer				  AS [INS]
				,BillingHead			  AS [BIH]
			WHERE [CIS].Pat_code      = [PAT].Pat_code
			  AND [CIS].Ins_code      = [INS].Ins_code
			  AND [CIS].Cis_code      = [BIH].Cis_code
			  AND [CIS].Cis_caseCode  = @Cis_caseCode
			  AND [BIH].Bih_payStatus = 1  
			  AND [BIH].Bih_code IN (SELECT Bih_code FROM PayBody) 
			  AND [BIH].Bih_deleteStatus <> 'D'
			GROUP BY [CIS].Cis_code
					,[CIS].Cis_caseCode
					,[PAT].[Pat_code]
					,[PAT].Pat_firstName
					,[PAT].Pat_lastName
					,[INS].Ins_name
					,[BIH].Bih_code
					,[BIH].Bih_billDate
					,[BIH].Bih_closingDate
					,[CIS].Cis_accidentDate
			ORDER BY [PAT].Pat_lastName
					,[PAT].Pat_firstName
					,CONVERT(DATE, [BIH].Bih_closingDate) ASC 
					,[INS].Ins_name
		END
	END
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_SEARCH_CASE_BILLING_UNFILTERED','P') IS NOT NULL)
	DROP PROCEDURE SP_SEARCH_CASE_BILLING_UNFILTERED
GO
CREATE PROCEDURE SP_SEARCH_CASE_BILLING_UNFILTERED
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	11/14/2016.
-- System			:	Billing.
-- Program			:	Billing.
-- Description		:	Search a invoice by pay status (Paid or Unpaid), claim, patient lastname or insurer name.
-- Change Log		:
--=============================================
/*
(
	 @Cis_caseCode		VARCHAR(25)		= ''
	,@Pat_lastName		VARCHAR(100)	= ''
	,@Ins_code			INT				= 50
	,@PayStatus			CHAR(1)			= 'U'		-- 0: Unpaid, 1: Paid.
	-- select Ins_code_old from OmnimedBD.dbo.Insurer where Ins_code = 59
)
	*/
AS
BEGIN
	-- IF (@PayStatus = 'U')
	-- BEGIN
		-- IF (@Cis_caseCode <> '' AND @Pat_lastName <> '')
		-- BEGIN
			SELECT [CIS].[Cis_code]
				  ,[CIS].[Cis_caseCode]
				  ,[PAT].[Pat_code]
				  ,[PAT].[Pat_firstName] + ' ' + [PAT].[Pat_lastName] AS [Patient]
				  ,[PAT].[Pat_firstName] AS [Pat_firstName]
				  ,[PAT].[Pat_lastName]  AS [Pat_lastName]
				  ,[INS].[Ins_name] AS [Insurer]				  
				  ,(SELECT Bih_code FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code
				  ,(SELECT Bih_code_old FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code_old 
				  ,[BIH].[Bih_billDate]
				  --,[BIH].[Bih_closingDate]
				  ,CONVERT(VARCHAR(10),[BIH].[Bih_closingDate],101) AS Bih_closingDate 
				  --,CONVERT(DATE, CIS.Cis_accidentDate, 101) AS AccidentDate
				  ,CONVERT(VARCHAR(10),CIS.Cis_accidentDate,101) AS AccidentDate 

				  ,[BIH].[Bih_payStatus] AS [Bih_payStatus]
			FROM [CaseInformationSheetHead] AS [CIS]
				,[Patient]				    AS [PAT]
				,[Insurer]				    AS [INS]
				,[BillingHead]			    AS [BIH]
			WHERE [CIS].[Pat_code]      = [PAT].Pat_code
			  AND [CIS].[Ins_code]      = [INS].Ins_code
			  AND [CIS].[Cis_code]      = [BIH].Cis_code
			  -- AND [CIS].[Cis_caseCode]  = @Cis_caseCode
			  -- AND [PAT].[Pat_lastName]  LIKE @Pat_lastName + '%' 
			  -- AND [BIH].[Bih_payStatus] = 0
			  -- AND [BIH].[Bih_code] NOT IN (SELECT Bih_code FROM PayBody) 
			  AND [BIH].[Bih_deleteStatus] <> 'D'
			GROUP BY [CIS].[Cis_code]
					,[CIS].[Cis_caseCode]
					,[PAT].[Pat_code]
					,[PAT].[Pat_firstName]
					,[PAT].[Pat_lastName]
					,[INS].[Ins_name]
					,[BIH].[Bih_code]
					,[BIH].[Bih_billDate]
					,[BIH].[Bih_closingDate]
					,[CIS].[Cis_accidentDate]
					,[BIH].[Bih_payStatus]
			ORDER BY [PAT].[Pat_lastName]
					,[PAT].[Pat_firstName]
					,CONVERT(DATE, BIH.Bih_closingDate) ASC 
					,[INS].Ins_name
		-- END 

		RETURN
		/*
		IF (@Cis_caseCode <> '' AND @Ins_code <> '')
		BEGIN
			SELECT cis.cis_code
			      ,cis.Cis_caseCode
				  ,[PAT].[Pat_code]
			      ,pat.Pat_firstName + ' ' + pat.Pat_lastName AS Patient
			      ,ins.Ins_name AS Insurer
				  ,(SELECT Bih_code FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code
			      ,(SELECT Bih_code_old FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code_old
			      ,bih.Bih_billDate
			      ,bih.Bih_closingDate
			      ,CONVERT(DATE, cis.Cis_accidentDate,101) AS AccidentDate
			FROM CaseInformationSheetHead AS [CIS]
				,Patient				  AS [PAT]
				,Insurer				  AS [INS]
				,BillingHead			  AS [BIH]
			WHERE cis.Pat_code      = pat.Pat_code
			  AND cis.Ins_code      = ins.Ins_code
			  AND cis.Cis_code      = bih.Cis_code
			  AND cis.Cis_caseCode  = @Cis_caseCode
			  AND cis.Ins_code      = @Ins_code
			  AND bih.Bih_payStatus = 0 
			  AND bih.Bih_code NOT IN (SELECT Bih_code FROM PayBody) 
			  AND bih.Bih_deleteStatus <> 'D'
			GROUP BY cis.Cis_code
					,cis.Cis_caseCode
					,[PAT].[Pat_code]
					,pat.Pat_firstName
					,pat.Pat_lastName 
					,ins.Ins_name
					,bih.Bih_code
					,bih.Bih_billDate
					,bih.Bih_closingDate
					,cis.Cis_accidentDate
			ORDER BY pat.Pat_lastName
					,pat.Pat_firstName
					,CONVERT(DATE, bih.Bih_closingDate) ASC 
					,ins.Ins_name
		END

		IF (@Ins_code <> '' AND @Pat_lastName <> '')
		BEGIN
			SELECT cis.cis_code
			      ,cis.Cis_caseCode
				  ,[PAT].[Pat_code]
			      ,pat.Pat_firstName + ' ' + pat.Pat_lastName AS Patient
			      ,ins.Ins_name AS Insurer
				  ,(SELECT Bih_code FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code
			      ,(SELECT Bih_code_old FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code_old
			      ,bih.Bih_billDate
			      ,bih.Bih_closingDate
			      ,CONVERT(DATE, cis.Cis_accidentDate,101) AS AccidentDate
			FROM CaseInformationSheetHead AS [CIS]
				,Patient				  AS [PAT]
				,Insurer				  AS [INS]
				,BillingHead			  AS [BIH]
			WHERE   [CIS].Pat_code = [PAT].Pat_code
				AND [CIS].Ins_code = [INS].Ins_code
				AND [CIS].Cis_code = [BIH].Cis_code
				AND [CIS].Ins_code = @Ins_code
				AND [PAT].Pat_lastName LIKE @Pat_lastName + '%' AND [BIH].Bih_payStatus = 0 
				AND [BIH].Bih_code NOT IN (SELECT Bih_code FROM PayBody) 
				AND [BIH].Bih_deleteStatus <> 'D'
			GROUP BY [CIS].Cis_code
					,[CIS].Cis_caseCode
					,[PAT].[Pat_code]
					,[PAT].Pat_firstName
					,[PAT].Pat_lastName
					,[INS].Ins_name
					,[BIH].Bih_code
					,[BIH].Bih_billDate
					,[BIH].Bih_closingDate
					,[CIS].Cis_accidentDate
			ORDER BY Pat_lastName
					,Pat_firstName
					,CONVERT(DATE, BIH.Bih_closingDate) ASC 
					,[INS].Ins_name
		END 

		IF (@Ins_code <> '')
		BEGIN
			SELECT CIS.Cis_code
				  ,CIS.Cis_caseCode
				  ,[PAT].[Pat_code]
				  ,PAT.Pat_firstName + ' ' + pat.Pat_lastName AS Patient
				  ,INS.Ins_name AS Insurer
				  ,(SELECT Bih_code FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code
				  ,(SELECT Bih_code_old FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code_old
				  ,BIH.Bih_billDate
				  ,BIH.Bih_closingDate
				  ,CONVERT(DATE, CIS.Cis_accidentDate, 101) AS AccidentDate
			FROM CaseInformationSheetHead AS [CIS]
				,Patient				  AS [PAT]
				,Insurer				  AS [INS]
				,BillingHead			  AS [BIH]
			WHERE CIS.Pat_code      = PAT.Pat_code
			  AND CIS.Ins_code      = INS.Ins_code
			  AND CIS.Cis_code      = BIH.Cis_code
			  AND CIS.Ins_code      = @Ins_code
			  AND BIH.Bih_payStatus = 0 
			  AND BIH.Bih_code NOT IN (SELECT Bih_code FROM PayBody) 
			  AND BIH.Bih_deleteStatus <> 'D'
			GROUP BY CIS.Cis_code
					,CIS.Cis_caseCode
					,[PAT].[Pat_code]
					,PAT.Pat_firstName
					,PAT.Pat_lastName
					,INS.Ins_name
					,BIH.Bih_code
					,BIH.Bih_billDate
					,BIH.Bih_closingDate
					,CIS.Cis_accidentDate
			ORDER BY PAT.Pat_lastName
					,PAT.Pat_firstName
					,CONVERT(DATE, BIH.Bih_closingDate) ASC 
					,INS.Ins_name
		END   

		IF (@Pat_lastName <> '')
		BEGIN
			SELECT [CIS].cis_code
				  ,[CIS].Cis_caseCode
				  ,[PAT].[Pat_code]
				  ,[PAT].Pat_firstName + ' ' + pat.Pat_lastName AS Patient
				  ,[INS].Ins_name AS Insurer
				  ,(SELECT Bih_code FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code
				  ,(SELECT Bih_code_old FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code_old
				  ,[BIH].Bih_billDate
				  ,[BIH].Bih_closingDate
				  ,CONVERT(DATE, [CIS].Cis_accidentDate, 101) AS AccidentDate
			FROM CaseInformationSheetHead AS [CIS]
				,Patient				  AS [PAT]
				,Insurer				  AS [INS]
				,BillingHead			  AS [BIH]
			WHERE cis.Pat_code = pat.Pat_code
			  AND cis.Ins_code = ins.Ins_code
			  AND cis.Cis_code = bih.Cis_code
			  AND pat.Pat_lastName LIKE @Pat_lastName + '%' AND bih.Bih_payStatus = 0 
			  AND Bih_code NOT IN (SELECT Bih_code FROM PayBody) 
			  AND bih.Bih_deleteStatus <> 'D'
			GROUP BY cis.Cis_code
					,cis.Cis_caseCode
					,[PAT].[Pat_code]
					,pat.Pat_firstName
					,pat.Pat_lastName
					,ins.Ins_name
					,bih.Bih_code
					,bih.Bih_billDate
					,bih.Bih_closingDate
					,cis.Cis_accidentDate
			ORDER BY pat.Pat_lastName
					,pat.Pat_firstName
					,CONVERT(DATE, bih.Bih_closingDate) ASC 
					,ins.Ins_name
		END 

		IF (@Cis_caseCode <> '')
		BEGIN
			SELECT [CIS].cis_code
				  ,[CIS].Cis_caseCode
				  ,[PAT].[Pat_code]
				  ,[PAT].Pat_firstName + ' ' + pat.Pat_lastName AS Patient
				  ,[INS].Ins_name AS Insurer
				  ,(SELECT Bih_code FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code
				  ,(SELECT Bih_code_old FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code_old
				  ,[BIH].Bih_billDate
				  ,[BIH].Bih_closingDate
				  ,CONVERT(DATE, [CIS].Cis_accidentDate, 101) AS AccidentDate
			FROM CaseInformationSheetHead AS [CIS]
				,Patient				  AS [PAT]
				,Insurer				  AS [INS]
				,BillingHead			  AS [BIH]
			WHERE [CIS].Pat_code  = pat.Pat_code 
			  AND [CIS].Ins_code = ins.Ins_code
			  AND [CIS].Cis_code  = bih.Cis_code
			  AND [CIS].Cis_caseCode  = @Cis_caseCode
			  AND [BIH].Bih_payStatus = 0 
			  AND [BIH].Bih_code NOT IN (SELECT Bih_code FROM PayBody) 
			  AND [BIH].Bih_deleteStatus <> 'D'
			GROUP BY [CIS].Cis_code
					,[CIS].Cis_caseCode
					,[PAT].[Pat_code]
					,[PAT].Pat_firstName
					,[PAT].Pat_lastName
					,[INS].Ins_name
					,[BIH].Bih_code
					,[BIH].Bih_billDate
					,[BIH].Bih_closingDate
					,[CIS].Cis_accidentDate
			ORDER BY [PAT].Pat_lastName
					,[PAT].Pat_firstName
					,CONVERT(DATE, bih.Bih_closingDate) ASC 
					,INS.Ins_name
		END
	END
	ELSE
	BEGIN
		IF (@Cis_caseCode <> '' AND @Pat_lastName <> '')
		BEGIN
			SELECT [CIS].cis_code
				  ,[CIS].Cis_caseCode
				  ,[PAT].[Pat_code]
				  ,[PAT].Pat_firstName + ' ' + pat.Pat_lastName AS Patient
				  ,[INS].Ins_name AS Insurer
				  ,(SELECT Bih_code FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code
				  ,(SELECT Bih_code_old FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code_old
				  ,[BIH].Bih_billDate
				  ,[BIH].Bih_closingDate
				  ,CONVERT(DATE, [CIS].Cis_accidentDate, 101) AS AccidentDate
			FROM CaseInformationSheetHead AS [CIS]
				,Patient				  AS [PAT]
				,Insurer				  AS [INS]
				,BillingHead			  AS [BIH]
			WHERE [CIS].Pat_code     = [PAT].Pat_code
			  AND [CIS].Ins_code     = [INS].Ins_code
			  AND [CIS].Cis_code     = [BIH].Cis_code
			  AND [CIS].Cis_caseCode = @Cis_caseCode
			  AND [PAT].Pat_lastName LIKE @Pat_lastName + '%' AND Bih_payStatus = 1 
			  AND [BIH].Bih_code IN (SELECT Bih_code FROM PayBody) 
			  AND [BIH].Bih_deleteStatus <> 'D'
			GROUP BY [CIS].Cis_code
					,[CIS].Cis_caseCode
					,[PAT].[Pat_code]
					,[PAT].Pat_firstName
					,[PAT].Pat_lastName 
					,[INS].Ins_name
					,[BIH].Bih_code
					,[BIH].Bih_billDate
					,[BIH].Bih_closingDate
					,[CIS].Cis_accidentDate
			ORDER BY [PAT].Pat_lastName
					,[PAT].Pat_firstName
					,CONVERT(DATE, [bih].Bih_closingDate) ASC 
					,[INS].Ins_name
		END 
	
		IF (@Cis_caseCode <> '' AND @Ins_code <> '')
		BEGIN
			SELECT [CIS].Cis_code
				  ,[CIS].Cis_caseCode
				  ,[PAT].[Pat_code]
				  ,[PAT].Pat_firstName + ' ' + PAT.Pat_lastName AS Patient
				  ,[INS].Ins_name AS Insurer
				  ,(SELECT Bih_code FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code
				  ,(SELECT Bih_code_old FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code_old
				  ,[BIH].Bih_billDate
				  ,[BIH].Bih_closingDate
				  ,CONVERT(DATE, cis.Cis_accidentDate,101) AS AccidentDate
			FROM CaseInformationSheetHead AS [CIS]
				,Patient				  AS [PAT]
				,Insurer				  AS [INS]
				,BillingHead			  AS [BIH]
			WHERE [CIS].Pat_code      = [PAT].Pat_code
			  AND [CIS].Ins_code      = [INS].Ins_code
			  AND [CIS].Cis_code      = [BIH].Cis_code
			  AND [CIS].Cis_caseCode  = @Cis_caseCode
			  AND [CIS].Ins_code      = @Ins_code
			  AND [BIH].Bih_payStatus = 1 
			  AND [BIH].Bih_code IN (SELECT Bih_code FROM PayBody) 
			  AND [BIH].Bih_deleteStatus <> 'D'
			GROUP BY [CIS].Cis_code
					,[CIS].Cis_caseCode
					,[PAT].[Pat_code]
					,[PAT].Pat_firstName
					,[PAT].Pat_lastName
					,[INS].Ins_name
					,[BIH].Bih_code
					,[BIH].Bih_billDate
					,[BIH].Bih_closingDate
					,[CIS].Cis_accidentDate
			ORDER BY [PAT].Pat_lastName
					,[PAT].Pat_firstName
					,CONVERT(DATE, bih.Bih_closingDate) ASC 
					,[INS].Ins_name
		END

		IF (@Ins_code <> '' AND @Pat_lastName <> '')
		BEGIN
			SELECT [CIS].Cis_code
				  ,[CIS].Cis_caseCode
				  ,[PAT].[Pat_code]
				  ,[PAT].Pat_firstName + ' ' + Pat_lastName AS Patient
				  ,[INS].Ins_name AS Insurer
				  ,(SELECT Bih_code FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code
				  ,(SELECT Bih_code_old FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code_old
				  ,[BIH].Bih_billDate
				  ,[BIH].Bih_closingDate
				  ,CONVERT(DATE, CIS.Cis_accidentDate,101) AS AccidentDate
			FROM CaseInformationSheetHead AS [CIS]
				,Patient				  AS [PAT]
				,Insurer				  AS [INS]
				,BillingHead			  AS [BIH]
			WHERE [CIS].Pat_code = pat.Pat_code
			  AND [CIS].Ins_code = ins.Ins_code
			  AND [CIS].Cis_code = bih.Cis_code
			  AND [CIS].Ins_code = @Ins_code
			  AND [PAT].Pat_lastName LIKE @Pat_lastName + '%' 
			  AND [BIH].Bih_payStatus = 1 
			  AND [BIH].Bih_code IN (SELECT Bih_code FROM PayBody) 
			  AND [BIH].Bih_deleteStatus <> 'D'			  
			GROUP BY [CIS].Cis_code
					,[CIS].Cis_caseCode
					,[PAT].[Pat_code]
					,[PAT].Pat_firstName
					,[PAT].Pat_lastName
					,[INS].Ins_name
					,[BIH].Bih_code
					,[BIH].Bih_billDate
					,[BIH].Bih_closingDate
					,[CIS].Cis_accidentDate
			ORDER BY [PAT].Pat_lastName
					,[PAT].Pat_firstName
					,CONVERT(DATE,bih.Bih_closingDate) ASC 
					,[INS].Ins_name
		END 

		IF (@Ins_code <> '')
		BEGIN
			SELECT [CIS].Cis_code
				  ,[CIS].Cis_caseCode
				  ,[PAT].[Pat_code]
				  ,[PAT].Pat_firstName + ' ' + [PAT].Pat_lastName AS Patient
				  ,[INS].Ins_name AS Insurer
				  ,(SELECT Bih_code FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code
				  ,(SELECT Bih_code_old FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code_old
				  ,[BIH].Bih_billDate
				  ,[BIH].Bih_closingDate
				  ,CONVERT(DATE, [CIS].Cis_accidentDate, 101) AS AccidentDate
			FROM CaseInformationSheetHead AS [CIS]
				,Patient				  AS [PAT]
				,Insurer				  AS [INS]
				,BillingHead			  AS [BIH]
			WHERE [CIS].Pat_code         = [PAT].Pat_code
			  AND [CIS].Ins_code         = [INS].Ins_code
			  AND [CIS].Cis_code         = [BIH].Cis_code
			  AND [CIS].Ins_code         = @Ins_code 
			  AND [BIH].Bih_payStatus    = 1 
			  AND [BIH].Bih_code         IN (SELECT Bih_code FROM PayBody) 
			  AND [BIH].Bih_deleteStatus <> 'D'
			GROUP BY [CIS].Cis_code
					,[CIS].Cis_caseCode
					,[PAT].[Pat_code]
					,[PAT].Pat_firstName
					,[PAT].Pat_lastName 
					,[INS].Ins_name
					,[BIH].Bih_code
					,[BIH].Bih_billDate
					,[BIH].Bih_closingDate
					,[CIS].Cis_accidentDate
			ORDER BY [PAT].Pat_lastName
					,[PAT].Pat_firstName
					,CONVERT(DATE, [BIH].Bih_closingDate) ASC 
					,[INS].Ins_name
		END 

		IF (@Pat_lastName <> '')
		BEGIN
			SELECT [CIS].Cis_code
				  ,[CIS].Cis_caseCode
				  ,[PAT].[Pat_code]
				  ,[PAT].Pat_firstName + ' ' + pat.Pat_lastName AS Patient
				  ,[INS].Ins_name AS Insurer
				  ,(SELECT Bih_code FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code
				  ,(SELECT Bih_code_old FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code_old
				  ,[BIH].Bih_billDate
				  ,[BIH].Bih_closingDate
				  ,CONVERT(DATE, [CIS].Cis_accidentDate, 101) AS AccidentDate
			FROM CaseInformationSheetHead AS [CIS]
				,Patient				  AS [PAT]
				,Insurer				  AS [INS]
				,BillingHead			  AS [BIH]
			WHERE cis.Pat_code = pat.Pat_code
 			  AND cis.Ins_code = ins.Ins_code
			  AND cis.Cis_code = bih.Cis_code
			  AND pat.Pat_lastName LIKE @Pat_lastName + '%' 
			  AND bih.Bih_payStatus = 1 
			  AND bih.Bih_code in (SELECT Bih_code FROM PayBody) 
			  AND bih.Bih_deleteStatus <> 'D'
			GROUP BY [CIS].Cis_code
					,[CIS].Cis_caseCode
					,[PAT].[Pat_code]
					,[PAT].Pat_firstName
					,[PAT].Pat_lastName 
					,[INS].Ins_name
					,[BIH].Bih_code
					,[BIH].Bih_billDate
					,[BIH].Bih_closingDate
					,[CIS].Cis_accidentDate
			ORDER BY [PAT].Pat_lastName
					,[PAT].Pat_firstName
					,CONVERT(DATE, [BIH].Bih_closingDate) ASC 
					,[INS].Ins_name
		END 
			
		IF (@Cis_caseCode <> '')
		BEGIN
			SELECT [CIS].Cis_code
				  ,[CIS].Cis_caseCode
				  ,[PAT].[Pat_code]
				  ,[PAT].Pat_firstName + ' ' + Pat_lastName AS Patient
				  ,[INS].Ins_name AS Insurer
				  ,(SELECT Bih_code FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code
				  ,(SELECT Bih_code_old FROM BillingHead WHERE Bih_code = [BIH].[Bih_code]) AS Bih_code_old
				  ,[BIH].Bih_billDate
				  ,[BIH].Bih_closingDate
				  ,CONVERT(DATE, [CIS].Cis_accidentDate, 101) AS AccidentDate
			FROM CaseInformationSheetHead AS [CIS]
				,Patient				  AS [PAT]
				,Insurer				  AS [INS]
				,BillingHead			  AS [BIH]
			WHERE [CIS].Pat_code      = [PAT].Pat_code
			  AND [CIS].Ins_code      = [INS].Ins_code
			  AND [CIS].Cis_code      = [BIH].Cis_code
			  AND [CIS].Cis_caseCode  = @Cis_caseCode
			  AND [BIH].Bih_payStatus = 1  
			  AND [BIH].Bih_code IN (SELECT Bih_code FROM PayBody) 
			  AND [BIH].Bih_deleteStatus <> 'D'
			GROUP BY [CIS].Cis_code
					,[CIS].Cis_caseCode
					,[PAT].[Pat_code]
					,[PAT].Pat_firstName
					,[PAT].Pat_lastName
					,[INS].Ins_name
					,[BIH].Bih_code
					,[BIH].Bih_billDate
					,[BIH].Bih_closingDate
					,[CIS].Cis_accidentDate
			ORDER BY [PAT].Pat_lastName
					,[PAT].Pat_firstName
					,CONVERT(DATE, [BIH].Bih_closingDate) ASC 
					,[INS].Ins_name
		END		
	END
	*/
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_EXTRA_PRICE_CIS_BY_ACTIVITY','P') IS NOT NULL)
	DROP PROCEDURE SP_EXTRA_PRICE_CIS_BY_ACTIVITY
GO
CREATE PROCEDURE SP_EXTRA_PRICE_CIS_BY_ACTIVITY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil
-- creation date	:	11/18/2016.
-- System			:	Billing.
-- Program			:	Billing.
-- Description		:	Obtains the price corresponding to an activity according to its type.
-- Change Log		:
--=============================================
(
	@Cis_code	INT = 914
   ,@Act_code	INT	= 6
)
AS
BEGIN
	DECLARE @Aty_price CHAR(1)

	SELECT @Aty_price = ATY.Aty_price 
	FROM  Activity     AS ACT
		 ,ActivityType AS ATY
	WHERE ACT.Aty_code = ATY.Aty_code
	  AND ACT.Act_code = @Act_code
	
	-----------------------------------------------------------------------------
	IF (@Aty_price = 'C')
	BEGIN
		SELECT CONVERT(DECIMAL(10, 2), Cis_price) FROM CaseInformationSheetHead WHERE Cis_code = @Cis_code
	END
	-----------------------------------------------------------------------------
	IF (@Aty_price = 'I')
	BEGIN
		SELECT CONVERT(DECIMAL(10, 2), 0)
	END
	-----------------------------------------------------------------------------
	IF (@Aty_price = 'D')
	BEGIN
		SELECT Act_price FROM Activity WHERE Act_code = @Act_code
	END
	-----------------------------------------------------------------------------
END
GO
-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_SPECIALTY_FOR_DROPDOWNLIST','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_SPECIALTY_FOR_DROPDOWNLIST
GO
CREATE PROCEDURE SP_LIST_SPECIALTY_FOR_DROPDOWNLIST
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Ray Diaz
-- creation date	:	mm/dd/yyyy.
-- System			:	Billing.
-- Program			:	.
-- Description		:	.
-- Change Log		:
--=============================================
AS
BEGIN
	SELECT   Spe_code
		   , Spe_name
		   , CASE 
				WHEN LTRIM(RTRIM(Spe_type)) = 'M' then 'Medical'
				WHEN LTRIM(RTRIM(Spe_type)) = 'A' then 'Attorney'
			 END AS Spe_type
	FROM  Specialty 
	WHERE Spe_name IS NOT NULL
	ORDER BY Spe_name ASC 
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_CITY_STATE','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_CITY_STATE
GO
CREATE PROCEDURE SP_LIST_CITY_STATE
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Ray Diaz
-- creation date	:	09/28/2016.
-- System			:	Billing.
-- Program			:	STATES - City.
-- Description		:	Get all cities and States.
-- Change Log		:
--=============================================
AS
BEGIN
	SELECT  isnull([Sta_code],0) AS code
			   ,[Sta_name] as nombre
			   ,[Sta_abbreviation] as abreviatura
			   ,'E' as tipo
		FROM [State] 	 

	UNION

		SELECT 0 as code, [Cit_name] as nombre, null as abreviatura, 'C' AS tipo
		FROM [City]
	ORDER BY tipo, nombre
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_INITIALDATA_FOR_CASE_INFO','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_INITIALDATA_FOR_CASE_INFO
GO
CREATE PROCEDURE SP_LIST_INITIALDATA_FOR_CASE_INFO
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Ray Diaz
-- creation date	:	mm/dd/yyyy.
-- System			:	Billing.
-- Program			:	.
-- Description		:	.
-- Change Log		:
--=============================================
AS
BEGIN
	SELECT  [USR].[Use_code] AS [Codigo]
		   ,UPPER([USR].[Use_firstName]) + ' ' + UPPER([USR].[Use_lastName]) AS [NombreCompleto]
		   ,NULL AS Direccion
		   ,'SUPERVISOR' as tipo
		FROM	[User] AS [USR]
			   ,(SELECT	[UIR].[UserId]
			  		   ,[ROL].[RoleId]
			  		   ,[ROL].[RoleName]
				  FROM	[aspnet_Roles]						AS	[ROL]
			  		   ,[aspnet_UsersInRoles]				AS	[UIR]
				  WHERE	[ROL].RoleId	= [UIR].[RoleId]		AND
			  			[ROL].RoleName	= 'Supervisor') AS t2
		WHERE [USR].[UserId] = t2.[UserId] AND
			  [USR].[Use_status] = 1
	---------------------------------------------------------------------------------------------
	UNION
	---------------------------------------------------------------------------------------------
	SELECT [Pro_code] AS [Codigo]
		  ,[Pro_firstName] + ' ' + [Pro_lastName] AS [NombreCompleto]
		  ,NULL AS Direccion
		  ,'PROVIDER' as tipo
	FROM [Provider]
	WHERE [Pro_firstName] NOT LIKE '%-----%'	AND 
		  [Pro_lastName]  NOT LIKE '%-----%'	AND 
		  LTRIM(RTRIM([Pro_firstName])) <> ''	AND 
		  LTRIM(RTRIM([Pro_lastName]))  <> ''	AND
		  [Pro_status] = 1					
	---------------------------------------------------------------------------------------------
	UNION
	---------------------------------------------------------------------------------------------
	SELECT [Pat_code] AS [Codigo]
		  ,[Pat_firstName] + ' ' + [Pat_lastName] AS [NombreCompleto]
		  ,NULL AS Direccion
		  ,'PATIENT' as tipo
	FROM [Patient]
	WHERE [Pat_status] = 1 AND
		  LTRIM(RTRIM([Pat_firstName])) <> '' AND 
		  LTRIM(RTRIM([Pat_lastName])) <> '' 
	---------------------------------------------------------------------------------------------
	UNION
	---------------------------------------------------------------------------------------------
	SELECT [Ins_code] AS [Codigo]
		  ,[Ins_name] AS [NombreCompleto]
		  ,NULL AS Direccion
		  ,'INSURER' as tipo
	FROM [Insurer]
	WHERE [Ins_name]  NOT LIKE '%-----%'	AND 
		  LTRIM(RTRIM([Ins_name])) <> ''	AND
		  [Ins_status] = 1 
	---------------------------------------------------------------------------------------------
	UNION
	---------------------------------------------------------------------------------------------
	SELECT [Att_code] AS [Codigo]
			  ,[Att_firstName] + ' ' + [Att_lastName] AS [NombreCompleto]
			  ,NULL AS Direccion
			  ,'ATTORNEY' as tipo
		FROM [Attorney]
		WHERE     [Att_status] = 1
			  AND LTRIM(RTRIM([Att_firstName])) <> '' 
			  AND LTRIM(RTRIM([Att_lastName])) <> '' 
	---------------------------------------------------------------------------------------------
	UNION
	---------------------------------------------------------------------------------------------
	SELECT [Med_code] AS [Codigo]
		  ,[Med_firstName] + ' ' + [Med_lastName] AS [NombreCompleto]
		  ,UPPER([Med_address]) + ', ' + UPPER([Med_city]) + ', ' + UPPER([Med_office]) + ', ' AS Direccion
		  ,'MEDICAL' as tipo
	FROM [Medical]
	WHERE     [Med_status] = 1 AND
		      LTRIM(RTRIM([Med_firstName])) <> '' 
		  AND LTRIM(RTRIM([Med_lastName])) <> ''
	---------------------------------------------------------------------------------------------
	UNION
	---------------------------------------------------------------------------------------------
	SELECT [Adj_code] AS [Codigo]
		  ,[Adj_firstName] + ' ' + [Adj_lastName] AS [NombreCompleto]
		  ,NULL AS Direccion
		  ,'ADJUSTER' as tipo
	FROM [Adjuster]
	WHERE [Adj_firstName] NOT LIKE '%-----%'	AND 
		  [Adj_lastName]  NOT LIKE '%-----%'	AND 
		  LTRIM(RTRIM([Adj_firstName])) <> ''	AND 
		  LTRIM(RTRIM([Adj_lastName]))  <> ''	AND
		  [Adj_status] = 1					
	ORDER BY TIPO, NombreCompleto
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_SAVE_UPDATE_BILLING','P') IS NOT NULL)
	DROP PROCEDURE SP_SAVE_UPDATE_BILLING
GO
CREATE PROCEDURE SP_SAVE_UPDATE_BILLING
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil.
-- creation date	:	11/22/2016.
-- System			:	Billing.
-- Program			:	Billing.
-- Description		:	Update the detail of a invoice.
-- Change Log		:
--=============================================
(
	@InvoiceDetail XML 
)
AS
BEGIN
	DECLARE @hDoc		INT
	DECLARE @Bih_code	INT
	DECLARE @SumaTotal	DECIMAL(10, 2)
	DECLARE @SumaAmount DECIMAL(10, 2)

	EXEC SP_XML_PREPAREDOCUMENT @hDoc OUTPUT, @InvoiceDetail

	CREATE TABLE #Montos
	(
		 Total	DECIMAL(10, 2)		NULL
		,Amount	DECIMAL(10, 2)		NULL
	)
	-- select * from BillingBody where [Bib_code?] = null
	CREATE TABLE #DetalleFactura
	(
		NumeroCorrelativoDetalle	INT 
	   ,Bib_code					INT					NULL
	   ,Bih_code					INT					NULL
	   ,Bib_servDate				DATE				NULL
	   ,[Bib_code_u]				CHAR(10)			NULL
	   ,Act_code					INT					NULL
	   ,Bib_hourMile				DECIMAL(10, 2)		NULL
	   ,Bib_priceAct				DECIMAL(10, 2)		NULL
	   ,Bib_amoReim					DECIMAL(10, 2)		NULL
	   ,Bib_createdUser				INT					NULL
	)
	
	BEGIN TRY
		BEGIN TRANSACTION

			-- Inserta la data del detalle de factura (XML) en la tabla temporal "@DetalleFactura"
			INSERT INTO #DetalleFactura(NumeroCorrelativoDetalle
									   ,Bih_code
									   ,Bib_code
									   ,Bib_servDate
									   -- ,[Bib_code_u]
									   ,Act_code
									   ,Bib_hourMile
									   ,Bib_priceAct
									   ,Bib_amoReim
									   ,Bib_createdUser)
			SELECT NumeroCorrelativoDetalle
				  ,Bih_code
				  ,Bib_code	      
				  ,case 
						when Bib_servDate = '' then null 
						else Bib_servDate
					end 
				  -- ,Bib_code_u
				  ,Act_code
				  ,Bib_hourMile
				  ,Bib_priceAct
				  ,Bib_amoReim
				  ,Bib_createdUser
			FROM OPENXML(@hDoc, N'/ArrayOfPDetalleFactura_RegistraActualiza/PDetalleFactura_RegistraActualiza', 6)
			WITH   (NumeroCorrelativoDetalle INT
				   ,Bih_code		INT		   
				   ,Bib_code		INT	       
				   ,Bib_servDate	VARCHAR(10)
				   -- ,Bib_code_u  	CHAR(10)
				   ,Act_code		INT
				   ,Bib_hourMile	DECIMAL(10, 2)
				   ,Bib_priceAct	DECIMAL(10, 2)
				   ,Bib_amoReim		DECIMAL(10, 2)
				   ,Bib_createdUser	INT) AS TablaTemporal			


			-- select * from #DetalleFactura
			-- return 

			-- Actualiza la tabla "BillingBody" con los datos de la tabla temporal "@DetalleFactura"
			UPDATE BillingBody
			SET [Bib_code?]    = [DEF].[Bib_code_u]
			   ,[Bib_servDate] = [DEF].[Bib_servDate]
			   ,[Act_code]	   = [DEF].[Act_code]
			   ,[Bib_hourMile] = [DEF].[Bib_hourMile]
			   ,[Bib_priceAct] = [DEF].[Bib_priceAct]
			   ,[Bib_amoReim]  = [DEF].[Bib_amoReim]
			FROM	   BillingBody     AS [BIB]
					  ,#DetalleFactura AS [DEF]
			WHERE      [BIB].Bib_code = [DEF].Bib_code
	
			SET @Bih_code = (SELECT TOP 1 Bih_code FROM #DetalleFactura)
			-- select @Bih_code
			-- return 

			-- Inserta la tabla "BillingBody" con los datos de la tabla temporal "@DetalleFactura"
			INSERT INTO BillingBody(Bih_code
								   ,Bib_servDate
								   ,[Bib_code?]
								   ,Act_code
								   ,Bib_hourMile
								   ,Bib_priceAct
								   ,Bib_amoReim
								   ,Bib_createdUser)
							 SELECT Bih_code
								   ,Bib_servDate
								   ,Bib_code_u
								   ,Act_code
								   ,Bib_hourMile
								   ,Bib_priceAct
								   ,Bib_amoReim
								   ,Bib_createdUser
			FROM #DetalleFactura
			WHERE Bib_code = 0  -- Verifica que no tenga código de detalle de factura, es decir que sean detalles nuevos.
			  AND Act_code <> 0 -- Verifica que sólo va a registrar a quellos detalles donde se hayan seleccionado una actividad.


			-- Se guardan las sumas
			SET @SumaTotal  = (SELECT ISNULL(SUM(ROUND((ROUND(Bib_hourMile,2) * ROUND(Bib_priceAct,2)),2)), 0)
							   FROM   BillingBody
							   WHERE  Bih_code           = @Bih_code
								 AND  Bib_deletingStatus = 0)
	
			SET @SumaAmount = (SELECT ISNULL((SUM(ROUND(Bib_amoReim,2))), 0)
							   FROM   BillingBody
							   WHERE  Bih_code = @Bih_code
								 AND  Bib_deletingStatus = 0)
	
			-- Se actualiza la tabla "BillingHead"
			UPDATE BillingHead
			SET    Bih_billTotal = @SumaTotal
			WHERE  Bih_code      = @Bih_code


			SELECT @SumaTotal AS Total, @SumaAmount AS Amount 
	
			/*
			-- ----------------------------------------------------------------------------------------
			select NumeroCorrelativoDetalle
				  ,Bih_code
				  ,Bib_code
				  ,Bib_servDate
				  ,Act_code
				  ,Bib_hourMile
				  ,Bib_priceAct 
				  ,Bib_amoReim
			from #DetalleFactura
			-- ----------------------------------------------------------------------------------------
			select  ROW_NUMBER() OVER(order by Bib_code asc) AS NumeroCorrelativoDetalle
				   ,Bih_code
				   ,Bib_code
				   ,Bib_servDate
				   ,Act_code
				   ,Bib_hourMile
				   ,Bib_priceAct
				   ,Bib_amoReim
			from BillingBody 
			where Bib_code in 
			(97726,97727,97728,97729,97730,97731,97732,97733,97734,97735,97736,97737,97738,97739,97740,
			97741,97742,97743,97744,97745,97746,97747,97748,97749,97750,97751,97752,97753,97754,580133)
			-- ----------------------------------------------------------------------------------------
			return 
			*/

			-- select * from BillingBody where Bih_code = 2832
			SELECT	CONVERT(DATE, Bib_servDate, 101) AS Bib_servDate
				   ,Bib_code
				   ,bib.Act_code
				   ,ACT.Act_description
				   ,BIB.Bib_hourMile
				   ,BIB.Bib_priceAct
				   ,(BIB.Bib_hourMile * BIB.Bib_priceAct)
				   ,CONVERT(CHAR(10), '')
				   ,CONVERT(CHAR(1000), ACT.Act_description) AS Act_description
				   ,CONVERT(CHAR(134), '')
			FROM	[BillingBody] AS [BIB]
				   ,[Activity]    AS [ACT]
			WHERE   [BIB].Act_code       = ACT.Act_code
    			AND [BIB].Bih_code       = @Bih_code
				AND [BIB].Bib_deletingStatus = 0		
			ORDER BY CONVERT(DATE, BIB.Bib_servDate) ASC
					,Bib_code				         ASC			

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT >= 1
			ROLLBACK TRANSACTION
	END CATCH			
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_INSURER_FOR_PAYMENT','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_INSURER_FOR_PAYMENT
GO
CREATE PROCEDURE SP_LIST_INSURER_FOR_PAYMENT
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil.
-- creation date	:	12/06/2016.
-- System			:	Billing.
-- Program			:	Receive Payment.
-- Description		:	List the insurers.
-- Change Log		:
--=============================================
AS
BEGIN
	SET NOCOUNT ON

	SELECT Ins_code, Ins_name
	FROM Insurer
	WHERE Ins_name LIKE '%-----%'
	
	UNION
	
	SELECT INS.Ins_code
		  ,UPPER(INS.Ins_name) AS Ins_name
	FROM   Insurer                  AS INS
		  ,CaseInformationSheetHead AS CIS
	WHERE  CIS.Ins_code = INS.Ins_code
	  AND  CIS.Cis_code IN (SELECT Cis_code 
					        FROM   BillingHead
					        WHERE  Bih_billPay      <> Bih_billTotal
						       AND Bih_deleteStatus <> 'D')	
	GROUP BY INS.Ins_code
	        ,INS.Ins_name
	
	ORDER BY Ins_name ASC
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_INSURER_FOR_REMOVE_PAYMENT','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_INSURER_FOR_REMOVE_PAYMENT
GO
CREATE PROCEDURE SP_LIST_INSURER_FOR_REMOVE_PAYMENT
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil.
-- creation date	:	12/23/2016.
-- System			:	Billing.
-- Program			:	Receive Payment.
-- Description		:	List the insurers for remove payments.
-- Change Log		:
--=============================================
AS
BEGIN
	SET NOCOUNT ON

	select [INS].[Ins_code]
		  ,[INS].[Ins_name]
	FROM [PayBody]	                AS [PAB]
		,[BillingHead]              AS [BIH]
		,[CaseInformationSheetHead] AS [CIS]
		,[Insurer]				    AS [INS]
	WHERE [PAB].[Bih_code] = [BIH].[Bih_code]
	  AND [BIH].[Cis_code] = [CIS].[Cis_code]
	  AND [CIS].[Ins_code] = [INS].[Ins_code]
	GROUP BY [INS].Ins_code
			,[INS].Ins_name 
	ORDER BY [INS].Ins_name
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_INSURER_FOR_PAYMENT_PROCESS','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_INSURER_FOR_PAYMENT_PROCESS
GO
CREATE PROCEDURE SP_LIST_INSURER_FOR_PAYMENT_PROCESS
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil.
-- creation date	:	2/27/2017.
-- System			:	Billing.
-- Program			:	Receive Payment.
-- Description		:	List all the insurers.
-- Change Log		:
--=============================================
AS
BEGIN
	SET NOCOUNT ON

	SELECT [Ins_code]
		  ,[Ins_name]
		  ,[Ins_status]
	FROM [Insurer] 
	WHERE [Ins_name] NOT LIKE '%-----%' AND 
		  [Ins_status] = 1
	ORDER BY [Ins_name] ASC
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_BILLING_DEBIT','P') IS NOT NULL)
	DROP PROCEDURE SP_BILLING_DEBIT
GO
CREATE PROCEDURE SP_BILLING_DEBIT
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil.
-- creation date	:	12/07/2016.
-- System			:	Billing.
-- Program			:	Receive Payment.
-- Description		:	Get the total debit of a insurer.
-- Change Log		:
--=============================================
(
	@Ins_code INT = 3
)
AS
BEGIN
	SELECT SUM([BIH].[Bih_billTotal] - [BIH].[Bih_billPay]) AS Deuda
	FROM   [BillingHead] AS [BIH]
		  ,[CaseInformationSheetHead] AS [CIS]
		  ,[Insurer] AS [INS]
	WHERE [CIS].[Ins_code]         =  [INS].[Ins_code]
	  and [CIS].[Cis_code]         =  [BIH].[Cis_code]
	  and [CIS].[Ins_code]         =  @Ins_code
	  and [BIH].[Bih_deleteStatus] <> 'D'
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_SEARCH_BILLING_FOR_PAYMENT','P') IS NOT NULL)
	DROP PROCEDURE SP_SEARCH_BILLING_FOR_PAYMENT
GO
CREATE PROCEDURE SP_SEARCH_BILLING_FOR_PAYMENT
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil.
-- creation date	:	12/07/2016.
-- System			:	Billing.
-- Program			:	Receive Payment.
-- Description		:	List the invoices of a insurer.
-- Change Log		:
--=============================================
(
	@Ins_code INT = 1
)
AS
BEGIN
UPDATE Insurer
	SET    Ins_availability = 1
	WHERE  Ins_code = @Ins_code

	SELECT [BIH].[Bih_code]
	      ,[BIH].[Bih_code_old]
	      ,[BIH].[Cis_code]
		  ,[CIS].[Cis_caseCode]
		  ,UPPER([PAT].Pat_firstName) + ' ' + UPPER([PAT].Pat_lastName)  AS Patient 
		  ,[PAT].[Pat_socialSecurityNumberD]
		  ,UPPER([INS].[Ins_name]) AS Insurer
		  ,[BIH].[Bih_billTotal] AS Total 
		  ,([BIH].[Bih_billTotal] - [BIH].Bih_billPay) AS Balance
		  ,CONVERT(CHAR(10), [CIS].[Cis_accidentDate], 101) AS AccidentDate
		  ,CONVERT(CHAR(10), [BIH].[Bih_closingDate], 101) AS ClosingDate
		  ,CASE
				WHEN ([BIH].[Bih_billTotal] > ([BIH].[Bih_billTotal] - [BIH].Bih_billPay)) THEN 'PP' -- Parcialmente pagado.
				ELSE 'NP' -- No pagado
		   END AS PaidLevel
		  ,UPPER([PAT].Pat_lastName) AS PatientLastName 
	FROM  [BillingHead]				 AS [BIH]
		 ,[CaseInformationSheetHead] AS [CIS]
		 ,[Patient]  			     AS [PAT]
		 ,[Insurer]				     AS [INS]
	WHERE [CIS].[Pat_code]         =  [PAT].[Pat_code]
	  AND [CIS].[Ins_code]         =  [INS].[Ins_code]
	  AND [CIS].[Cis_code]         =  [BIH].[Cis_code]
	  AND [CIS].[Ins_code]         =  @Ins_code
	  AND [BIH].[Bih_billPay]      <> [BIH].[Bih_billTotal]
	  AND [BIH].[Bih_payStatus]    =  0 
	  AND [BIH].[Bih_deleteStatus] <> 'D'
	ORDER BY [PAT].[Pat_lastName]
		    ,[PAT].[Pat_firstName]
			,CONVERT(SMALLDATETIME, [BIH].[Bih_closingDate]) ASC 
			,[INS].[Ins_name]		
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_PAYMENTS_TO_BE_REMOVED','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_PAYMENTS_TO_BE_REMOVED
GO
CREATE PROCEDURE SP_LIST_PAYMENTS_TO_BE_REMOVED
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil.
-- creation date	:	12/23/2016.
-- System			:	Billing.
-- Program			:	Receive Payment.
-- Description		:	Lists the payments to be removed.
-- Change Log		:
--=============================================
(	
	@Ins_code	INT         = 1 -- 'ABERCROMBIE, SIMMONS & GILLETTE OF FL, INC.' => Ins_code: 1
   ,@Pah_number VARCHAR(30) = ''
)
AS
BEGIN
	
	-- Si se ingresa sólo el código de la aseguradora.
	IF (@Ins_code <> 0 AND @Pah_number = '')
	BEGIN
		SELECT
			  -------------------------------------------------------------------------------------- 
			  [PAH].[Pah_code]														AS [PayCode]
			  --------------------------------------------------------------------------------------
			  ,(FORMAT(MONTH([PAH].[Pah_payDate]), '00') + '/' + 
				FORMAT(DAY([PAH].[Pah_payDate]), '00') + '/' + 
				CONVERT(CHAR(4), YEAR([PAH].[Pah_payDate])))						AS [PayDate]
			  --------------------------------------------------------------------------------------
			  ,[PAH].[Pah_amount]													AS [PayAmount]
			  --------------------------------------------------------------------------------------
			  ,UPPER(LTRIM(RTRIM([PAT].[Pty_description])))							AS [PayType]
			  --------------------------------------------------------------------------------------
			  ,LTRIM(RTRIM([PAH].[Pah_number]))										AS [CheckNumber]
			  --------------------------------------------------------------------------------------
			  ,CASE 
					WHEN (SELECT COUNT(*) 
						  FROM PayBody 
						  WHERE Pah_code = [PAH].[Pah_code]) = 1 
					THEN MAX([BIH].Bih_code_old)
					WHEN (SELECT COUNT(*) 
						  FROM PayBody 
						  WHERE Pah_code = [PAH].[Pah_code]) > 1 
					THEN ''
			   END		
			   																		AS [OldPayCode]
		      --------------------------------------------------------------------------------------
		FROM   [PayHead]                  AS [PAH]
			  ,[PayBody]                  AS [PAB]
			  ,[BillingHead]              AS [BIH]
			  ,[CaseInformationSheetHead] AS [CIS]
			  ,[Insurer]                  AS [INS]
			  ,[PayType]				  AS [PAT]
		WHERE [PAT].[Pty_code] = [PAH].[Pty_code]
		  AND [PAH].[Pah_code] = [PAB].[Pah_code]
		  AND [PAB].[Bih_code] = [BIH].[Bih_code]
		  AND [BIH].[Cis_code] = [CIS].[Cis_code]
		  AND [CIS].[Ins_code] = [INS].[Ins_code]
		  AND [INS].[Ins_code] = @Ins_code
		GROUP by [PAH].[Pah_code]
				,[PAH].[Pah_payDate]
				,[PAH].[Pah_amount]
				,[PAT].[Pty_description]
				,[PAH].[Pah_number]
		ORDER BY CONVERT(SMALLDATETIME, PAH.Pah_payDate) DESC
	END

	-- ***********************************************************************************************

	-- Si se ingresa sólo el número de cheque.	
	IF (@Ins_code = 0 AND @Pah_number <> '')
	BEGIN
		SELECT
			  -------------------------------------------------------------------------------------- 
			  [PAH].[Pah_code]														AS [PayCode]
			  --------------------------------------------------------------------------------------
			  ,(FORMAT(MONTH([PAH].[Pah_payDate]), '00') + '/' + 
				FORMAT(DAY([PAH].[Pah_payDate]), '00') + '/' + 
				CONVERT(CHAR(4), YEAR([PAH].[Pah_payDate])))						AS [PayDate]
			  --------------------------------------------------------------------------------------
			  ,[PAH].[Pah_amount]													AS [PayAmount]
			  --------------------------------------------------------------------------------------
			  ,UPPER(LTRIM(RTRIM([PAT].[Pty_description])))							AS [PayType]
			  --------------------------------------------------------------------------------------
			  ,LTRIM(RTRIM([PAH].[Pah_number]))										AS [CheckNumber]
			  --------------------------------------------------------------------------------------
			  ,CASE 
					WHEN (SELECT COUNT(*) 
						  FROM PayBody 
						  WHERE Pah_code = [PAH].[Pah_code]) = 1 
					THEN MAX([BIH].Bih_code_old)
					WHEN (SELECT COUNT(*) 
						  FROM PayBody 
						  WHERE Pah_code = [PAH].[Pah_code]) > 1 
					THEN ''
			   END		
			   																		AS [OldPayCode]
		      --------------------------------------------------------------------------------------
		FROM   [PayHead]                  AS [PAH]
			  ,[PayBody]                  AS [PAB]
			  ,[BillingHead]              AS [BIH]
			  ,[CaseInformationSheetHead] AS [CIS]
			  ,[Insurer]                  AS [INS]
			  ,[PayType]				  AS [PAT]
		WHERE [PAT].[Pty_code] = [PAH].[Pty_code]
		  AND [PAH].[Pah_code] = [PAB].[Pah_code]
		  AND [PAB].[Bih_code] = [BIH].[Bih_code]
		  AND [BIH].[Cis_code] = [CIS].[Cis_code]
		  AND [CIS].[Ins_code] = [INS].[Ins_code]
		  AND [PAH].[Pah_number] = @Pah_number
		GROUP by [PAH].[Pah_code]
				,[PAH].[Pah_payDate]
				,[PAH].[Pah_amount]
				,[PAT].[Pty_description]
				,[PAH].[Pah_number]
		ORDER BY CONVERT(SMALLDATETIME, PAH.Pah_payDate) DESC
	END

	-- ***********************************************************************************************

	-- Si se ingresan código de la aseguradora y número de cheque.
	IF (@Ins_code <> 0 AND @Pah_number <> '')
	BEGIN
		SELECT
			  -------------------------------------------------------------------------------------- 
			  [PAH].[Pah_code]														AS [PayCode]
			  --------------------------------------------------------------------------------------
			  ,(FORMAT(MONTH([PAH].[Pah_payDate]), '00') + '/' + 
				FORMAT(DAY([PAH].[Pah_payDate]), '00') + '/' + 
				CONVERT(CHAR(4), YEAR([PAH].[Pah_payDate])))						AS [PayDate]
			  --------------------------------------------------------------------------------------
			  ,[PAH].[Pah_amount]													AS [PayAmount]
			  --------------------------------------------------------------------------------------
			  ,UPPER(LTRIM(RTRIM([PAT].[Pty_description])))							AS [PayType]
			  --------------------------------------------------------------------------------------
			  ,LTRIM(RTRIM([PAH].[Pah_number]))										AS [CheckNumber]
			  --------------------------------------------------------------------------------------
			  ,CASE 
					WHEN (SELECT COUNT(*) 
						  FROM PayBody 
						  WHERE Pah_code = [PAH].[Pah_code]) = 1 
					THEN MAX([BIH].Bih_code_old)
					WHEN (SELECT COUNT(*) 
						  FROM PayBody 
						  WHERE Pah_code = [PAH].[Pah_code]) > 1 
					THEN ''
			   END		
			   																		AS [OldPayCode]
		      --------------------------------------------------------------------------------------
		FROM   [PayHead]                  AS [PAH]
			  ,[PayBody]                  AS [PAB]
			  ,[BillingHead]              AS [BIH]
			  ,[CaseInformationSheetHead] AS [CIS]
			  ,[Insurer]                  AS [INS]
			  ,[PayType]				  AS [PAT]
		WHERE [PAT].[Pty_code] = [PAH].[Pty_code]
		  AND [PAH].[Pah_code] = [PAB].[Pah_code]
		  AND [PAB].[Bih_code] = [BIH].[Bih_code]
		  AND [BIH].[Cis_code] = [CIS].[Cis_code]
		  AND [CIS].[Ins_code] = [INS].[Ins_code]
	      AND [INS].[Ins_code] = @Ins_code
		  AND [PAH].[Pah_number] = @Pah_number
		GROUP by [PAH].[Pah_code]
				,[PAH].[Pah_payDate]
				,[PAH].[Pah_amount]
				,[PAT].[Pty_description]
				,[PAH].[Pah_number]
		ORDER BY CONVERT(SMALLDATETIME, PAH.Pah_payDate) DESC
	END
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('REMOVE_PAYMENT','P') IS NOT NULL)
	DROP PROCEDURE REMOVE_PAYMENT
GO
CREATE PROCEDURE REMOVE_PAYMENT
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil.
-- creation date	:	12/23/2016.
-- System			:	Billing.
-- Program			:	Receive Payment.
-- Description		:	.
-- Change Log		:
--=============================================
(
	@Pah_code INT = 4290
)
AS
	SELECT Pah_code
	      ,Bih_code
		  ,Pab_amount
	FROM   PayBody
	WHERE  Pah_code = @Pah_code
GO

-- *******************************************************************************************************

IF (OBJECT_ID('DELETE_UPDATE_BILLING_HEAD','P') IS NOT NULL)
	DROP PROCEDURE DELETE_UPDATE_BILLING_HEAD
GO
CREATE PROCEDURE DELETE_UPDATE_BILLING_HEAD
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil.
-- creation date	:	12/23/2016.
-- System			:	Billing.
-- Program			:	Receive Payment.
-- Description		:	.
-- Change Log		:
--=============================================
(
-- 	@Bih_code	    INT				= 1907
--    ,@SubtractAmount DECIMAL(10, 2)	= 100
	@Facturas	TEXT = ''	-- Facturas cuyos pagos se van a revertir.
)
AS
BEGIN
	-- SET NOCOUNT ON;
	DECLARE @hDoc						INT

	CREATE TABLE #Facturas
	(
		CodigoFactura	INT				NULL
	   ,Monto			DECIMAL(10, 2)	NULL			
	)

	BEGIN TRY
		BEGIN TRANSACTION
			-- -----------------------------------------------------------------------------------------
			-- Obtiene el XML
			EXEC SP_XML_PREPAREDOCUMENT @hDoc OUTPUT, @Facturas
			-- -----------------------------------------------------------------------------------------
			-- Inserta el XML en la tabla temporal de facturas cuyos pagos se van a revertir.
			INSERT INTO #Facturas(CodigoFactura
								 ,Monto)
			SELECT CodigoFactura
				  ,Monto
			FROM OPENXML(@hDoc, N'/ArrayOfFacturaParaRevertirPago/FacturaParaRevertirPago', 2)
			WITH (CodigoFactura	INT
				 ,Monto			DECIMAL(10, 2)) AS TablaTemporal

			EXEC SP_XML_REMOVEDOCUMENT @hDoc
			-- -----------------------------------------------------------------------------------------
			UPDATE BillingHead 
			SET    Bih_billPay = (Bih_billPay - [TMP].[Monto])
			FROM   BillingHead AS [BIH]
				  ,#Facturas   AS [TMP]
			WHERE [BIH].Bih_code = [TMP].CodigoFactura 

			-- Actualización del estado de la factura (original)
			-- UPDATE BillingHead
			-- SET    Bih_payStatus = 0
			-- WHERE  Bih_billPay   = 0

			-- Actualización del estado de la factura (según Gabo)
			UPDATE BillingHead
			SET    Bih_payStatus = 0
			WHERE  Bih_billPay   <> Bih_billTotal
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT >= 1
			ROLLBACK TRANSACTION
	END CATCH
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('CLEAR_ELIMINATION_PAY_BODY_HEAD','P') IS NOT NULL)
	DROP PROCEDURE CLEAR_ELIMINATION_PAY_BODY_HEAD
GO
CREATE PROCEDURE CLEAR_ELIMINATION_PAY_BODY_HEAD
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil.
-- creation date	:	12/23/2016.
-- System			:	Billing.
-- Program			:	Receive Payment.
-- Description		:	.
-- Change Log		:
--=============================================
(
	@Pah_code INT = 1907
)
AS
BEGIN
	DELETE FROM PayBody WHERE Pah_code = @Pah_code
	DELETE FROM PayHead WHERE Pah_code = @Pah_code
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_SEARCH_BILLING_FOR_PAYMENT_BY_DATE_RANGE','P') IS NOT NULL)
	DROP PROCEDURE SP_SEARCH_BILLING_FOR_PAYMENT_BY_DATE_RANGE
GO
CREATE PROCEDURE SP_SEARCH_BILLING_FOR_PAYMENT_BY_DATE_RANGE
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil.
-- creation date	:	12/20/2016.
-- System			:	Billing.
-- Program			:	Receive Payment.
-- Description		:	List the invoices of a insurer filtered by date range.
-- Change Log		:
--=============================================
(
	@Ins_code			INT		 = 1
   ,@closingDateLess	CHAR(10) = '03/15/2016'
   ,@closingDateHigher	CHAR(10) = '04/15/2016'
)
AS 
BEGIN
	SELECT [BIH].[Bih_code]
	      ,[BIH].[Bih_code_old]
	      ,[BIH].[Cis_code]
		  ,[CIS].[Cis_caseCode]
		  ,UPPER([PAT].Pat_firstName) + ' ' + UPPER([PAT].Pat_lastName) AS Patient
		  ,[PAT].[Pat_socialSecurityNumberD]
		  ,UPPER([INS].[Ins_name]) AS Insurer
		  ,[BIH].[Bih_billTotal] AS Total 
		  ,([BIH].[Bih_billTotal] - [BIH].Bih_billPay) AS Balance
		  ,CONVERT(CHAR(10), [CIS].[Cis_accidentDate], 101) AS AccidentDate
		  ,CONVERT(CHAR(10), [BIH].[Bih_closingDate], 101) AS ClosingDate
		  ,CASE
				WHEN ([BIH].[Bih_billTotal] > ([BIH].[Bih_billTotal] - [BIH].Bih_billPay)) THEN 'PP'
				ELSE 'NP'
		   END AS PaidLevel
	FROM  [BillingHead]				 AS [BIH]
		 ,[CaseInformationSheetHead] AS [CIS]
		 ,[Patient]  			     AS [PAT]
		 ,[Insurer]				     AS [INS]
	WHERE [CIS].[Pat_code]         =  [PAT].[Pat_code]
	  AND [CIS].[Ins_code]         =  [INS].[Ins_code]
	  AND [CIS].[Cis_code]         =  [BIH].[Cis_code]
	  AND [CIS].[Ins_code]         =  @Ins_code
	  AND [BIH].[Bih_billPay]      <> [BIH].[Bih_billTotal]
	  AND [BIH].[Bih_payStatus]    =  0 
	  AND [BIH].[Bih_deleteStatus] <> 'D'
	  AND ([BIH].[Bih_closingDate] >= CONVERT(DATE, @closingDateLess, 101))
	  AND ([BIH].[Bih_closingDate] <= CONVERT(DATE, @closingDateHigher, 101))
	ORDER BY [PAT].[Pat_lastName]
		    ,[PAT].[Pat_firstName]
			,CONVERT(SMALLDATETIME, [BIH].[Bih_closingDate]) ASC 
			,[INS].[Ins_name]		
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_GET_COUNT_BILLING_FOR_PAYMENT','P') IS NOT NULL)
	DROP PROCEDURE SP_GET_COUNT_BILLING_FOR_PAYMENT
GO
CREATE PROCEDURE SP_GET_COUNT_BILLING_FOR_PAYMENT
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil.
-- creation date	:	12/14/2016.
-- System			:	Billing.
-- Program			:	Receive Payment.
-- Description		:	Gets the amount of invoices to be paid.
-- Change Log		:
--=============================================
(
-- select ins_name from Insurer where Ins_code = 8
-- 1, 3, 6, 8, 11, 13, 15, 17, 19, 23, 26, 42, 45, 47, 49, 50, 51, 52, 53, 55, 56, 57, 59
-- select Ins_code, Ins_name from Insurer where Ins_name like 'abercrombie%' 
	@Ins_code INT = 1
)
AS
BEGIN
	SELECT COUNT(*) AS CantidadFacturas
	FROM  [BillingHead]				 AS [BIH]
		 ,[CaseInformationSheetHead] AS [CIS]
		 ,[Patient]  			     AS [PAT]
		 ,[Insurer]				     AS [INS]
	WHERE [CIS].[Pat_code]         =  [PAT].[Pat_code]
	  and [CIS].[Ins_code]         =  [INS].[Ins_code]
	  and [CIS].[Cis_code]         =  [BIH].[Cis_code]
	  and [CIS].[Ins_code]         =  @Ins_code
	  and [BIH].[Bih_billPay]      <> [BIH].[Bih_billTotal]
	  and [BIH].[Bih_payStatus]    =  0 
	  AND [BIH].[Bih_deleteStatus] <> 'D'
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_PAY_TYPE','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_PAY_TYPE
GO
CREATE PROCEDURE SP_LIST_PAY_TYPE
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil.
-- creation date	:	12/07/2016.
-- System			:	Billing.
-- Program			:	Receive Payment.
-- Description		:	List payment types.
-- Change Log		:
--=============================================
AS
BEGIN
	SELECT Pty_code
		  ,Pty_description
		  ,Pty_Status
	FROM   PayType
	WHERE  Pty_Status = 1
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_SAVE_PAY_HEAD','P') IS NOT NULL)
	DROP PROCEDURE SP_SAVE_PAY_HEAD
GO
CREATE PROCEDURE SP_SAVE_PAY_HEAD
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil.
-- creation date	:	12/09/2016.
-- System			:	Billing.
-- Program			:	Receive Payment.
-- Description		:	Registeres the header of a pay.
-- Change Log		:
--=============================================
(
	@Pah_amount		DECIMAL(10, 2)	= 31908.33
   ,@Pah_payDate	CHAR(10)		= '12/15/2016'
   ,@Pty_code		INT				= 1
   ,@Pah_number		VARCHAR(30)		= '123456789'
   ,@Use_code		INT				= 98
)
AS
BEGIN
	INSERT INTO PayHead(Pah_payDate, Pah_amount, Pty_code, Pah_number, Use_code)
	VALUES             (@Pah_payDate, @Pah_amount, @Pty_code, @Pah_number, @Use_code)
		

	SELECT SCOPE_IDENTITY();
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_SAVE_PAY_BODY','P') IS NOT NULL)
	DROP PROCEDURE SP_SAVE_PAY_BODY
GO
CREATE PROCEDURE SP_SAVE_PAY_BODY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil.
-- creation date	:	12/09/2016.
-- System			:	Billing.
-- Program			:	Receive Payment.
-- Description		:	Registeres the body of a pay.
-- Change Log		:
--=============================================
(
	@Pah_code	INT
   ,@Bih_code	INT
   ,@Pab_amount	DECIMAL(10, 2)
)
AS
BEGIN
-- select * from Paybody 
-- select Pah_code, count(*) from Paybody group by Pah_code order by count(*) asc
	INSERT INTO PayBody(Pah_code , Bih_code , Pab_amount)
	VALUES             (@Pah_code, @Bih_code, @Pab_amount)
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_UPDATE_BILLING_HEAD_PAY','P') IS NOT NULL)
	DROP PROCEDURE SP_UPDATE_BILLING_HEAD_PAY
GO
CREATE PROCEDURE SP_UPDATE_BILLING_HEAD_PAY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil.
-- creation date	:	12/13/2016.
-- System			:	Billing.
-- Program			:	Receive Payment.
-- Description		:	Update the payment amount of a invoice.
-- Change Log		:
--=============================================
(
	@Bih_code	INT
   ,@Amount		DECIMAL(10, 2)
)
AS
BEGIN
	DECLARE @BillPay	DECIMAL(10, 2)
	DECLARE @PayTotal	DECIMAL(10, 2)
	DECLARE @BillTotal		DECIMAL(10, 2)

	-- Obtiene lo que se ha pagado de la factura hasta el momento.
	SET @BillPay = (SELECT Bih_billPay   FROM BillingHead WHERE Bih_code = @Bih_code)

	-- Obtiene el total de la factura que se debe pagar.
	SET @BillTotal   = (SELECT Bih_billTotal FROM BillingHead WHERE Bih_code = @Bih_code)

	-- Calcula el monto total que se va a pagar por esta vez.
	SET @PayTotal = (@BillPay + @Amount)

	-- Actualiza el monto de lo que se está pagando por esta vez.
	UPDATE BillingHead
	SET	   Bih_billPay = @PayTotal
	WHERE  Bih_code	   = @Bih_code

	-- Compara lo que se está pagando por esta vez (@PayTotal) 
	-- con el total que se debe pagar por la factura (@BillTotal)
	-- y si coinciden cambia el estado de la factura (campo "Bih_payStatus") a 1
	-- indicando que ya se pagó.
	IF (@PayTotal = @BillTotal)
	BEGIN
		UPDATE BillingHead
		SET Bih_payStatus = 1
		WHERE  Bih_code	   = @Bih_code
	END
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_SAVE_PAY','P') IS NOT NULL)
	DROP PROCEDURE SP_SAVE_PAY
GO
CREATE PROCEDURE SP_SAVE_PAY
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil.
-- creation date	:	12/17/2016.
-- System			:	Billing.
-- Program			:	Receive Payment.
-- Description		:	Save the total payment that is received from an insurer.
-- Change Log		:
--=============================================
(
    @TipoPago				CHAR(1)			= 'M'
   ,@Monto					DECIMAL(10, 2)	= 10
   ,@FechaPago				CHAR(10)		= '2/22/2017'
   ,@FormaPago				INT				= 1
   ,@NumeroTransaccion		VARCHAR(30)		= 'awsxcderfvbgtyhnmjuuik'
   ,@CodigoUsuario			INT				= 98	
   ,@FacturasPorPagarXML	TEXT			= '<ArrayOfFacturaPorPagar><FacturaPorPagar><CodigoNuevoFactura>14348</CodigoNuevoFactura><Pago>10</Pago></FacturaPorPagar><FacturaPorPagar><CodigoNuevoFactura>14348</CodigoNuevoFactura><Pago>10</Pago></FacturaPorPagar></ArrayOfFacturaPorPagar>'
)
AS
BEGIN
	DECLARE @hDoc						INT
	DECLARE @CodigoPagoRegistrado	INT
	DECLARE @BillPay					DECIMAL(10, 2)

	CREATE TABLE #DetalleFactura
	(
	    CodigoPago		INT				NULL
	   ,CodigoFactura	INT				NULL
	   ,Pago			DECIMAL(10, 2)	NULL
	)

	-- Tabla temporal que recibirá los pagos en el caso que tipo de pago sea multicheque, cada 
	-- fila de esta tabla correspondrá a un pago de una sóla factura con su correspondiente número de cheque.
	CREATE TABLE #Pagos
	(
	    CodigoFactura   INT			    NULL
	   ,FechaPago		DATE			NULL
	   ,Monto			DECIMAL(10, 2)  NULL	   
	   ,NumeroCheque	VARCHAR(30)		NULL
	   ,CodigoUsuario	INT				NULL
	)

	BEGIN TRY
		BEGIN TRANSACTION	

			-- Si el tipo de pago es normal.
			IF (@TipoPago = 'N')
			BEGIN
				-- select 'normal'
				-- return 

				-- Inserta la cabecera del pago obteniendo el código correspondiente
				INSERT INTO PayHead(Pah_payDate, Pah_amount, Pty_code  , Pah_number        , Use_code)
				VALUES             (@FechaPago , @Monto    , @FormaPago, @NumeroTransaccion, @CodigoUsuario)
			
				SET @CodigoPagoRegistrado = SCOPE_IDENTITY();
				-- -----------------------------------------------------------------------------------------
				-- Obtiene el XML
				EXEC SP_XML_PREPAREDOCUMENT @hDoc OUTPUT, @FacturasPorPagarXML
				-- -----------------------------------------------------------------------------------------
				-- Inserta el XML en la tabla temporal de cuerpo de factura que se va a pagar.
				INSERT INTO #DetalleFactura(CodigoPago
										   ,CodigoFactura
										   ,Pago)
				SELECT @CodigoPagoRegistrado
					  ,CodigoNuevoFactura
					  ,Pago
				FROM OPENXML(@hDoc, N'/ArrayOfFacturaPorPagar/FacturaPorPagar', 2)
				WITH (CodigoNuevoFactura	INT
					 ,Pago					DECIMAL(10, 2)) AS TablaTemporal

				EXEC SP_XML_REMOVEDOCUMENT @hDoc
				-- -----------------------------------------------------------------------------------------
			
				-- Inserta en la tabla "PayBody" el contenido de la tabla temporal
				INSERT INTO PayBody(Pah_code 
								   ,Bih_code 
								   ,Pab_amount)
				SELECT CodigoPago
					  ,CodigoFactura
					  ,Pago
				FROM #DetalleFactura
				WHERE Pago <> 0

				-- Actualiza el monto que se ha pagado para cada factura.
				UPDATE BillingHead	   
				SET Bih_billPay   =  (Bih_billPay + [TMP].[Pago])
				   ,Bih_payStatus = (CASE
										-- Si el Monto total que se ha actualizado en la factura es igual al total que se debe 
										-- pagar actualiza el estado a 1, que quiere decir que la factura se ha pagado totalmente.
										WHEN ((Bih_billPay + [TMP].[Pago]) = Bih_billTotal) THEN 1 
										ELSE 0
									 END)
				FROM  BillingHead	  AS [BIH]
					 ,#DetalleFactura AS [TMP]
				WHERE [BIH].[Bih_code] = [TMP].[CodigoFactura]		
				-- -----------------------------------------------------------------------------------------
			END


			-- Si el tipo de pago es multicheque.
			IF (@TipoPago = 'M')
			BEGIN
				-- select 'multicheque'
				-- return 

				-- Obtiene el XML de los pagos de cheques independientes (multicheques)
				EXEC SP_XML_PREPAREDOCUMENT @hDoc OUTPUT, @FacturasPorPagarXML
				-- -----------------------------------------------------------------------------------------
				-- Inserta el XML en la tabla temporal de pagos "#Pagos".
				INSERT INTO #Pagos(CodigoFactura
								  ,FechaPago
								  ,Monto
								  ,NumeroCheque
								  ,CodigoUsuario)
				SELECT CodigoNuevoFactura
				      ,@FechaPago
					  ,Pago
					  ,NumeroCheque
					  ,@CodigoUsuario
				FROM OPENXML(@hDoc, N'/ArrayOfFacturaPorPagar/FacturaPorPagar', 3)
				WITH (CodigoNuevoFactura INT
				     ,Pago			     DECIMAL(10, 2)
					 ,NumeroCheque	     VARCHAR(30)) AS TablaTemporal

				
				-- Las cuatro variables declarasas a continuación, servirán para insertar un pago por cada factura
				-- en la tabla "PayHead".
				DECLARE @CodigoFactura		  INT
				DECLARE @FechaPagoFactura	  DATE
				DECLARE @MontoFactura	      DECIMAL(10, 2)
				DECLARE @NumeroChequeFactura  VARCHAR(30)
				DECLARE @CodigoUsuarioFactura int

				DECLARE MiCursor CURSOR
				FOR SELECT CodigoFactura, FechaPago, Monto, NumeroCheque, CodigoUsuario FROM #Pagos
	
				OPEN MiCursor
	
				FETCH NEXT FROM MiCursor INTO @CodigoFactura, @FechaPagoFactura, @MontoFactura, @NumeroChequeFactura, @CodigoUsuarioFactura

				WHILE @@FETCH_STATUS = 0
				BEGIN							
					-- Esta inserción que se hace en la tabla "PayHead" corresponde a una pago que contiene sólo una factura.
					INSERT INTO PayHead(Pah_payDate      , Pah_amount   , Pah_number          , Use_code)
					VALUES             (@FechaPagoFactura, @MontoFactura, @NumeroChequeFactura, @CodigoUsuarioFactura)

					-- Obtiene el código del pago recién insertado (pago que corresponde a una sóla factura).
					SET @CodigoPagoRegistrado = SCOPE_IDENTITY();

					-- Finalmente en la tabla "PayBody" se inserta un sólo registro que corresponde a la factura del pago que se acaba de hacer.
					INSERT INTO PayBody(Pah_code             , Bih_code      , Pab_amount)
					VALUES             (@CodigoPagoRegistrado, @CodigoFactura, @MontoFactura)

					FETCH NEXT FROM MiCursor INTO @CodigoFactura, @FechaPagoFactura, @MontoFactura, @NumeroChequeFactura, @CodigoUsuarioFactura
				END
	
				CLOSE MiCursor
				DEALLOCATE MiCursor
			END				

			-- Actualiza el monto que se ha pagado para cada factura.
			UPDATE BillingHead	   
			SET Bih_billPay   =  (Bih_billPay + [TMP].[Monto])
				,Bih_payStatus = (CASE
									-- Si el Monto total que se ha actualizado en la factura es igual al total que se debe 
									-- pagar actualiza el estado a 1, que quiere decir que la factura se ha pagado totalmente.
									WHEN ((Bih_billPay + [TMP].[Monto]) = Bih_billTotal) THEN 1 
									ELSE 0
									END)
			FROM  BillingHead	  AS [BIH]
				 ,#Pagos          AS [TMP]
			WHERE [BIH].[Bih_code] = [TMP].[CodigoFactura]	

			-- -----------------------------------------------------------------------------------------

			SELECT 0 AS PayErrorCode, '' AS ErrorMessage;
		COMMIT TRANSACTION				
	END TRY
	BEGIN CATCH	
		SELECT ERROR_NUMBER() AS PayErrorCode, ERROR_MESSAGE() AS ErrorMessage;
	
		IF @@TRANCOUNT >= 1
			ROLLBACK TRANSACTION
	END CATCH
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_MENU_OPTIONS','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_MENU_OPTIONS
GO
CREATE PROCEDURE SP_LIST_MENU_OPTIONS
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil.
-- creation date	:	1/30/2017.
-- System			:	Billing.
-- Program			:	Billing.
-- Description		:	Get the menu options (master or process) available to a user.
-- Change Log		:
--=============================================
(	
	-- select Use_code from [User] where Use_userName = 'josevillalobos'	-- (Use_code: 98)	Administrator
	-- select Use_code from [User] where Use_userName = 'monica'			-- (Use_code: 115)	Regular User

	 @Use_code		  INT     = 98
	,@Opt_application CHAR(1) = 'B' -- B: Billing / C: Calendar
)
AS
BEGIN
	DECLARE @UserId UNIQUEIDENTIFIER
	DECLARE @RoleId UNIQUEIDENTIFIER

	BEGIN TRY

		-- Obtiene el [UserId] según el @Use_code
		SELECT @UserId = [USE].[UserId] 
		FROM             [OmnimedBD].[DBO].[User] AS [USE] 
		WHERE            [USE].[Use_code] = @Use_code

		SET @RoleId = (SELECT TOP 1 [ROL].[RoleId]
					   FROM         [OmnimedBD].[DBO].[aspnet_Roles]        AS [ROL]
								   ,[OmnimedBD].[DBO].[aspnet_UsersInRoles] AS [UIR]
					   WHERE        [ROL].[RoleId] = [UIR].[RoleId]
								AND [UIR].[UserId] = @UserId
								AND [ROL].Vigencia = 1
					   ORDER by     [ROL].[Orden])		

		DECLARE @RoleID_BM UNIQUEIDENTIFIER -- RoleID de BillingManager

		SET @RoleID_BM = (SELECT TOP 1 [ROL].[RoleId]
					   FROM         [OmnimedBD].[DBO].[aspnet_Roles]        AS [ROL]
								   ,[OmnimedBD].[DBO].[aspnet_UsersInRoles] AS [UIR]
					   WHERE        [ROL].[RoleId] = [UIR].[RoleId]
								AND [UIR].[UserId] = @UserId
								AND [ROL].Vigencia = 1
								and [ROL].RoleName = 'Billing Manager'
					   ORDER by     [ROL].[Orden])		

		SELECT [OPT].[Opt_id]			
		FROM   [OmnimedBD].[DBO].[Option]     AS [OPT]
		      ,[OmnimedBD].[DBO].[RoleOption] AS [ROP]
		WHERE  [OPT].[Opt_code]   = [ROP].[Opt_code]
		   AND [ROP].[RoleId]     = @RoleId
		   AND [OPT].[Opt_status] = 1
		UNION ALL		
		SELECT [OPT].[Opt_id]			
		FROM   [OmnimedBD].[DBO].[Option]     AS [OPT]
		      ,[OmnimedBD].[DBO].[RoleOption] AS [ROP]
		WHERE  [OPT].[Opt_code]   = [ROP].[Opt_code]
		   AND [ROP].[RoleId]     = @RoleID_BM
		   AND [OPT].[Opt_status] = 1
		
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION 
	END CATCH
END
GO

-- *******************************************************************************************************

 /*
IF (OBJECT_ID('SP_LIST_MENU_OPTIONS','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_MENU_OPTIONS
GO
CREATE PROCEDURE SP_LIST_MENU_OPTIONS
(
	@Use_code INT            = 8,
	@Opt_application char(1) = 'B' -- B: Billing   / C: Calendar
)
AS
-- Empresa			: ITUsaServices.
-- Autor			: Ray Diaz.
-- Fecha de creación: 12/19/2016.
-- Sistema			: Billing.
-- Programa			: Billing.
-- Descripción		: Lista opciones de menu por usuario logueado .
BEGIN
	DECLARE @UserId UNIQUEIDENTIFIER

	SET @UserId = (SELECT [USE].[UserId] 
				   FROM   [User] AS [USE] 
				   WHERE  [USE].[Use_code] = @Use_code)

	DECLARE @RoleId UNIQUEIDENTIFIER
	
	-- Obtener el rol con mayores permisos (Por si el usuario tiene mas de un rol)
	
	SET @RoleId = (SELECT TOP 1 [ROL].[RoleId]
				   FROM         [aspnet_UsersInRoles] AS [UIR]
							    INNER JOIN
							    [aspnet_Roles] AS [ROL] 
							 ON [ROL].[RoleId] = [UIR].[RoleId]
				   WHERE        [UIR].[UserId] = @UserId
				            AND [ROL].Vigencia = 1 
				   ORDER by [ROL].[Orden])

	SELECT [Opt_code]
		  ,[Opt_name]
		  ,[Opt_id]
		  ,[Opt_url]
		  ,[Opt_application]
		  ,[RoleId] 
	FROM   [Option]
	WHERE  [Opt_status] = 1 
	   AND [RoleId]     = @RoleId
END
GO

---------------------- select * from [Option] 
---------------------- select * from aspnet_roles where  roleid in ('91F1130B-B567-4240-BC1B-4CACA7FE53A3', 'E891172F-61B1-42D8-9621-589C6E661A99')

-- // MENU VERTICAL
INSERT INTO [OmnimedBD].[dbo].[Option] ([Opt_name],[Opt_id],[Opt_url],[Opt_status],[Opt_application],[RoleId])
VALUES ('Register Pacients', 'MenuPaciente', '#',1,'B', '91F1130B-B567-4240-BC1B-4CACA7FE53A3')
GO
-- select * from [Option]
INSERT INTO [OmnimedBD].[dbo].[Option] ([Opt_name],[Opt_id],[Opt_url],[Opt_status],[Opt_application],[RoleId])
VALUES ('Register Doctors and Facilities', 'MenuDoctor', '#',1,'B', '91F1130B-B567-4240-BC1B-4CACA7FE53A3')
GO

INSERT INTO [OmnimedBD].[dbo].[Option] ([Opt_name],[Opt_id],[Opt_url],[Opt_status],[Opt_application],[RoleId])
VALUES ('Register Insurers', 'MenuAseguradora', '#',1,'B', '91F1130B-B567-4240-BC1B-4CACA7FE53A3')
GO

INSERT INTO [OmnimedBD].[dbo].[Option] ([Opt_name],[Opt_id],[Opt_url],[Opt_status],[Opt_application],[RoleId])
VALUES ('Register Attorneys', 'MenuAbogado', '#',1,'B', '91F1130B-B567-4240-BC1B-4CACA7FE53A3')
GO

INSERT INTO [OmnimedBD].[dbo].[Option] ([Opt_name],[Opt_id],[Opt_url],[Opt_status],[Opt_application],[RoleId])
VALUES ('Register Adjusters', 'MenuAdjuster', '#',1,'B', '91F1130B-B567-4240-BC1B-4CACA7FE53A3')
GO

INSERT INTO [OmnimedBD].[dbo].[Option] ([Opt_name],[Opt_id],[Opt_url],[Opt_status],[Opt_application],[RoleId])
VALUES ('Register Providers', 'MenuProveedor', '#',1,'B', '91F1130B-B567-4240-BC1B-4CACA7FE53A3')
GO

INSERT INTO [OmnimedBD].[dbo].[Option] ([Opt_name],[Opt_id],[Opt_url],[Opt_status],[Opt_application],[RoleId])
VALUES ('Register Activities', 'MenuActividad', '#',1,'B', '91F1130B-B567-4240-BC1B-4CACA7FE53A3')
GO

INSERT INTO [OmnimedBD].[dbo].[Option] ([Opt_name],[Opt_id],[Opt_url],[Opt_status],[Opt_application],[RoleId])
VALUES ('Register Speciality', 'MenuEspecialidad', '#',1,'B', '91F1130B-B567-4240-BC1B-4CACA7FE53A3')
GO



-- MENU HORIZONTAL
INSERT INTO [OmnimedBD].[dbo].[Option] ([Opt_name],[Opt_id],[Opt_url],[Opt_status],[Opt_application],[RoleId])
VALUES ('Case Information Sheet', 'MenuCaso', '#',1,'B', '91F1130B-B567-4240-BC1B-4CACA7FE53A3')
GO

INSERT INTO [OmnimedBD].[dbo].[Option] ([Opt_name],[Opt_id],[Opt_url],[Opt_status],[Opt_application],[RoleId])
VALUES ('Data Entry', 'MenuData', '#',1,'B', '91F1130B-B567-4240-BC1B-4CACA7FE53A3')
GO

INSERT INTO [OmnimedBD].[dbo].[Option] ([Opt_name],[Opt_id],[Opt_url],[Opt_status],[Opt_application],[RoleId])
VALUES ('Monthly Closing', 'MenuClosing', '#',1,'B', '91F1130B-B567-4240-BC1B-4CACA7FE53A3')
GO

INSERT INTO [OmnimedBD].[dbo].[Option] ([Opt_name],[Opt_id],[Opt_url],[Opt_status],[Opt_application],[RoleId])
VALUES ('Billing', 'MenuBilling', '#',1,'B', '91F1130B-B567-4240-BC1B-4CACA7FE53A3')
GO

INSERT INTO [OmnimedBD].[dbo].[Option] ([Opt_name],[Opt_id],[Opt_url],[Opt_status],[Opt_application],[RoleId])
VALUES ('Receive Payments', 'MenuPayment', '#',1,'B', '91F1130B-B567-4240-BC1B-4CACA7FE53A3')
GO

INSERT INTO [OmnimedBD].[dbo].[Option] ([Opt_name],[Opt_id],[Opt_url],[Opt_status],[Opt_application],[RoleId])
VALUES ('Reports', 'MenuReports', '#',1,'B', '91F1130B-B567-4240-BC1B-4CACA7FE53A3')
GO

INSERT INTO [dbo].[Option] ([Opt_name],[Opt_id],[Opt_url],[Opt_status],[Opt_application],[RoleId])
VALUES ('Configuration', 'MenuConfiguracion', '#',1,'B', '91F1130B-B567-4240-BC1B-4CACA7FE53A3')
GO

INSERT INTO [OmnimedBD].[dbo].[Option] ([Opt_name],[Opt_id],[Opt_url],[Opt_status],[Opt_application],[RoleId])
VALUES ('Exit', 'exit', '#',1,'B', '91F1130B-B567-4240-BC1B-4CACA7FE53A3')
GO

INSERT INTO [dbo].[Option] ([Opt_name],[Opt_id],[Opt_url],[Opt_status],[Opt_application],[RoleId])
VALUES ('Register Pacients', 'MenuPaciente', '#',1,'B', 'E891172F-61B1-42D8-9621-589C6E661A99')
GO

INSERT INTO [dbo].[Option] ([Opt_name],[Opt_id],[Opt_url],[Opt_status],[Opt_application],[RoleId])
VALUES ('Register Doctors and Facilities', 'MenuDoctor', '#',1,'B', 'E891172F-61B1-42D8-9621-589C6E661A99')
GO

INSERT INTO [dbo].[Option] ([Opt_name],[Opt_id],[Opt_url],[Opt_status],[Opt_application],[RoleId])
VALUES ('Register Insurers', 'MenuAseguradora', '#',1,'B', 'E891172F-61B1-42D8-9621-589C6E661A99')
GO

INSERT INTO [dbo].[Option] ([Opt_name],[Opt_id],[Opt_url],[Opt_status],[Opt_application],[RoleId])
VALUES ('Register Attorneys', 'MenuAbogado', '#',1,'B', 'E891172F-61B1-42D8-9621-589C6E661A99')
GO



-- MENU HORIZONTAL
INSERT INTO [dbo].[Option] ([Opt_name],[Opt_id],[Opt_url],[Opt_status],[Opt_application],[RoleId])
VALUES ('Case Information Sheet', 'CaseInformation', '#',1,'B', 'E891172F-61B1-42D8-9621-589C6E661A99')
GO

INSERT INTO [dbo].[Option] ([Opt_name],[Opt_id],[Opt_url],[Opt_status],[Opt_application],[RoleId])
VALUES ('Data Entry', 'DataEntry', '#',1,'B', 'E891172F-61B1-42D8-9621-589C6E661A99')
GO

INSERT INTO [dbo].[Option] ([Opt_name],[Opt_id],[Opt_url],[Opt_status],[Opt_application],[RoleId])
VALUES ('Exit', 'exit', '#',1,'B', 'E891172F-61B1-42D8-9621-589C6E661A99')
GO
*/

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_OPTION','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_OPTION
GO
CREATE PROCEDURE SP_LIST_OPTION
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	12/30/2016.
-- system			:	Billing.
-- Program			:	Configuration.
-- Description		:	Get all options.
-- change log		:
--=============================================
AS
BEGIN
	SET NOCOUNT ON

	SELECT   [Opt_code]
		    ,[Opt_name]
	FROM     [OmnimedBD].[DBO].[Option]
	ORDER BY [Opt_code] ASC	
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_MODIFY_ROLE_PERMISSION','P') IS NOT NULL)
	DROP PROCEDURE SP_MODIFY_ROLE_PERMISSION
GO
CREATE PROCEDURE SP_MODIFY_ROLE_PERMISSION
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	1/2/2016.
-- system			:	Billing.
-- Program			:	Configuration.
-- Description		:	Assign a permission to a role.
-- change log		:
--=============================================
(
	-- select * from RoleOption
	@CodigoRol		VARCHAR(MAX)	= ''
   ,@CodigoOpcion	INT				= 10
)
AS
BEGIN
	SET NOCOUNT ON
	
	BEGIN TRY
		BEGIN TRANSACTION
		    -- First check that there is no current role and permission in the table "RoleOption".
			-- Comprueba que no exista el rol y permiso actuales en la tabla "RoleOption".
			IF ((SELECT COUNT(*)
				 FROM   RoleOption
				 WHERE  CONVERT(VARCHAR(MAX), RoleId) = @CodigoRol
				   AND  Opt_code = @CodigoOpcion) = 0)
			BEGIN
				-- If the current role or option does not exist in the table "RoleOption", assigns the permission to this role.
				-- Si no existe el rol ni la opción actual en la tabla "RoleOption", asigna el permiso a este rol.
				INSERT INTO RoleOption(RoleId, Opt_code)
				VALUES		          (@CodigoRol, @CodigoOpcion)
			END
			ELSE
			BEGIN
				DELETE FROM RoleOption 
				WHERE  CONVERT(VARCHAR(MAX), RoleId) = @CodigoRol
 				   AND Opt_code = @CodigoOpcion
			END
			
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		-- SELECT ERROR_NUMBER() AS MedicalErrorCode, ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT>=1
			ROLLBACK TRANSACTION
	END CATCH
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_GET_PERMITS_BY_ROLE','P') IS NOT NULL)
	DROP PROCEDURE SP_GET_PERMITS_BY_ROLE
GO
CREATE PROCEDURE SP_GET_PERMITS_BY_ROLE
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	1/2/2016.
-- system			:	Billing.
-- Program			:	Configuration.
-- Description		:	Get the permits of a specific role.
-- change log		:
--=============================================
(
	@CodigoRol		VARCHAR(MAX)	= 'E891172F-61B1-42D8-9621-589C6E661A99'
)
AS
BEGIN
	SELECT Opt_code
	FROM   RoleOption	
	WHERE  CONVERT(VARCHAR(MAX), RoleId) = @CodigoRol
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_PATIENT_AUDIT','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_PATIENT_AUDIT
GO
CREATE PROCEDURE SP_LIST_PATIENT_AUDIT
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	1/25/2017.
-- System			:	Billing.
-- Program			:	Data Audit.
-- Description		:	List the detail of patient audit.
-- Change Log		:
--=============================================
(
	@Pat_code INT = 2885
)
AS
BEGIN
	SET NOCOUNT ON

	-- Variables
	DECLARE @codigoPaciente		  INT	       -- Variable de cursor (MiCursor1), donde se obtiene el código del paciente "Pat_code" de la tabla "Patient_Audit".
		   ,@columnasActualizadas VARCHAR(MAX) -- Variable de cursor (MiCursor1), donde se obtienen las columnas que fueron actualizadas del campo "UpdateColumns" de la tabla "Patient_Audit".
		   ,@fechaAuditoria		  DATETIME	   -- Variable de cursor (MiCursor1), donde se obtiene la fecha de auditoría del campo "AuditDateTime" de la tabla "Patient_Audit".
		   ,@usuarioOperador	  INT		   -- Variable de cursor (MiCursor1), donde se obtiene el valor del campo "Pat_operatprUser" de la tabla "Patient_Audit".
		   ,@NuevoPaciente		  INT		   -- Variable que sirve para saber si del paciente que se está evaluando (@Pat_code) hay una auditoría de registro, se utiliza de la línea 50 a la 53.
		   ,@campo				  VARCHAR(MAX) -- Variable de cursor (MiCursor2), donde se obtiene el valor del campo "campo" de la tabla "#TablaAuditoria" del cual se va a obtener el antiguo y el nuevo valor de la tabla "Patient_Audit".
		   ,@fechaAuditoria2	  DATETIME	   -- Variable de cursor (MiCursor2), donde se obtiene el valor del campo "fechaAuditoria" de la tabla "#TablaAuditoria".

	-- Tabla que devolverá el detalle de una auditoría según el paciente que se elija.
	CREATE TABLE [#TablaAuditoria]
	(
		 [codigoPaciente]  INT			NULL
		,[campo]		   VARCHAR(MAX)	NULL
		,[antiguoValor]	   VARCHAR(MAX)	NULL
		,[nuevoValor]	   VARCHAR(MAX)	NULL
		,[tipoOperacion]   VARCHAR(MAX) NULL
		,[fechaAuditoria]  DATETIME		NULL
		,[usuarioOperador] VARCHAR(MAX) NULL		
	)
	
	BEGIN TRY
		-- BEGIN TRANSACTION
			-- Verifica que para este paciente exista una fila en la tabla [Patient_Audit] con la columna [UpdateColumns] vacía,
			-- si existe quiere decir que es un paciente que se ha registrado.
			SELECT @NuevoPaciente  = COUNT(*) 
			FROM   [Patient_Audit] 
			WHERE  [UpdateColumns] = ''
			  AND  [Pat_code]      = @Pat_code

			-- Verifica si se ha registrado un nuevo paciente analizando la variable @NuevoPaciente
			IF (@NuevoPaciente = 1)
			BEGIN
				-- Inserta en la tabla #TablaAuditoria la inserción
				INSERT INTO [#TablaAuditoria]([codigoPaciente]
										     ,[campo]
										     ,[antiguoValor]
										     ,[nuevoValor]
										     ,[tipoOperacion]
										     ,[fechaAuditoria]
										     ,[usuarioOperador])
									   VALUES(@Pat_code
										     ,'ROW'
										     ,'-'
										     ,'-'
										     ,'REGISTERED'
										     ,(SELECT [AuditDateTime]	 
											   FROM   [Patient_Audit] 
											   WHERE  [Pat_code]       = @Pat_code 
											     AND  [AuditDataState] = 'New' 
												 AND  [UpdateColumns]  = '')
										     ,(SELECT (SELECT UPPER(Use_firstName) + ' ' + UPPER(Use_lastName) 
													   FROM [User] 
													   WHERE Use_code = [Pat_operatorUser]) 
											   FROM  [Patient_Audit] 
											   WHERE [Pat_code]       = @Pat_code 
											    AND  [AuditDataState] = 'New' 
												AND  [UpdateColumns]  = ''))
			END

			-- --------------------------------------------------------------------------------------------------

			-- Cursor para insertar en la tabla "#TablaAuditoria" los campos "codigoPaciente", "campo" y "fechaAuditoria".			
			DECLARE  [MiCursor1] CURSOR
			FOR 
			SELECT   [UpdateColumns]
				    ,[Pat_code]
				    ,[AuditDateTime]
				    ,[Pat_operatorUser]
			FROM     [Patient_Audit]
			WHERE    [Pat_code]       = @Pat_code
			AND      [AuditDataState] = 'New'
			ORDER BY [AuditDateTime] DESC

			OPEN     [MiCursor1]

			FETCH NEXT FROM [MiCursor1] INTO @columnasActualizadas, @codigoPaciente, @fechaAuditoria, @usuarioOperador

			WHILE @@FETCH_STATUS = 0
			BEGIN
				INSERT INTO [#TablaAuditoria]([codigoPaciente]
										     ,[campo]
										     ,[fechaAuditoria]
										     ,[usuarioOperador])
									   SELECT @codigoPaciente 
										     ,[Item]
										     ,@fechaAuditoria											 
										     ,(SELECT UPPER(Use_firstName) + ' ' + UPPER(Use_lastName) FROM [User] WHERE Use_code = @usuarioOperador)
									   FROM   [DBO].[FN_SPLIT_STRINGS_BY_CHARACTER](@columnasActualizadas, '-')
									   WHERE  [Item] <> ''	
		
				FETCH NEXT FROM [MiCursor1] INTO @columnasActualizadas, @codigoPaciente, @fechaAuditoria, @usuarioOperador
			END

			CLOSE      [MiCursor1]
			DEALLOCATE [MiCursor1]

			-- --------------------------------------------------------------------------------------------------

			-- Cursor para actualizar en la tabla "#TablaAuditoria" los campos "antiguoValor", "nuevoValor" y "tipoOperacion".
			DECLARE  [MiCursor2] CURSOR
			FOR 
			SELECT   [campo]
					,[fechaAuditoria]
			FROM     [#TablaAuditoria]
			WHERE    [campo] <> 'ROW'
			ORDER BY [fechaAuditoria] DESC
	
			OPEN     [MiCursor2]

			FETCH NEXT FROM [MiCursor2] INTO @campo, @fechaAuditoria2

			WHILE @@FETCH_STATUS = 0
			BEGIN
				DECLARE @consultaAntiguoValor NVARCHAR(MAX)
					   ,@consultaNuevoValor   NVARCHAR(MAX)
					   ,@definicionParametro  NVARCHAR(MAX)
					   ,@antiguoValor         VARCHAR(MAX)
					   ,@nuevoValor           VARCHAR(MAX)

				SET     @consultaAntiguoValor = N'SELECT @valorRetornado  = ' + @campo + 
				                                ' FROM  [Patient_Audit]' + 
												' WHERE [AuditDataState]  = ''Old''' +
												' AND   [AuditDateTime]   = ''' + CONVERT(VARCHAR(23), @fechaAuditoria2, 121) + ''''

				SET     @consultaNuevoValor   = N'SELECT @valorRetornado  = ' + @campo + 
					                            ' FROM  [Patient_Audit]' + 
												' WHERE [AuditDataState]  = ''New''' + 
												' AND   [AuditDateTime]   = ''' + CONVERT(VARCHAR(23), @fechaAuditoria2, 121) + ''''
					    
				SET     @definicionParametro  = N'@valorRetornado VARCHAR(MAX) OUTPUT'
				EXEC    SP_EXECUTESQL @consultaAntiguoValor, @definicionParametro, @valorRetornado = @antiguoValor OUTPUT		 
				EXEC    SP_EXECUTESQL @consultaNuevoValor  , @definicionParametro, @valorRetornado = @nuevoValor   OUTPUT		 

				UPDATE  [#TablaAuditoria]
				SET     [antiguoValor]   = 
							CASE 
								WHEN ([campo] = 'Pat_status' AND @antiguoValor = 0) THEN 'INACTIVE'
								WHEN ([campo] = 'Pat_status' AND @antiguoValor = 1) THEN 'ACTIVE'
								WHEN ([campo] = 'Pat_birthday')                     THEN CONVERT(VARCHAR(10), CONVERT(DATE, @antiguoValor, 101), 101)
								ELSE @antiguoValor								
							END
					   ,[nuevoValor]     = 
							CASE 
								WHEN ([campo] = 'Pat_status' AND @nuevoValor = 0) THEN 'INACTIVE'
								WHEN ([campo] = 'Pat_status' AND @nuevoValor = 1) THEN 'ACTIVE'
								WHEN ([campo] = 'Pat_birthday')                   THEN CONVERT(VARCHAR(10), CONVERT(DATE, @antiguoValor, 101), 101)
								ELSE @nuevoValor
							END					   					   
					   ,[tipoOperacion]  = 
							CASE
								WHEN ([campo] = 'Pat_status' AND @nuevoValor = 0) THEN 'DELETED'
								ELSE 'UPDATED'
							END					   
				WHERE   [campo]          = @campo
				  AND   [fechaAuditoria] = @fechaAuditoria2

				FETCH NEXT FROM [MiCursor2] INTO @campo, @fechaAuditoria2		
			END
	
			CLOSE      [MiCursor2]
			DEALLOCATE [MiCursor2]
			
			-- --------------------------------------------------------------------------------------------------

			SELECT   codigoPaciente
				    ,(CASE campo
					    WHEN 'ROW'			             THEN 'ROW'
						WHEN 'Pat_firstName'             THEN 'First Name'
						WHEN 'Pat_lastName'              THEN 'Last Name'
						WHEN 'Pat_birthday'              THEN 'Birthday'
						WHEN 'Pat_socialSecurityNumberD' THEN 'SSNumber'
						WHEN 'Pat_address'               THEN 'Street'
						WHEN 'Pat_state'                 THEN 'State'
						WHEN 'Pat_city'                  THEN 'City'
						WHEN 'Pat_zipCode'               THEN 'Zip Code'
						WHEN 'Pat_zipCodeExt'            THEN 'Zip Code Ext'
						WHEN 'Pat_phone'                 THEN 'Phone'
						WHEN 'Pat_fax'                   THEN 'Alternative Phone'
						WHEN 'Pat_sex'                   THEN 'Sex'
						WHEN 'Pat_status'                THEN 'Status'
					  END) AS campo
					,antiguoValor
					,nuevoValor
					,tipoOperacion
					,fechaAuditoria
					,usuarioOperador
			FROM     [#TablaAuditoria]
			WHERE    [campo] NOT LIKE '%_operatorUser'
			ORDER BY [fechaAuditoria] DESC	

		-- COMMIT TRANSACTION				
	END TRY
	BEGIN CATCH
		-- SELECT ERROR_NUMBER() AS [PatientErrorCode], ERROR_MESSAGE() AS [ErrorMessage];

		IF @@TRANCOUNT >= 1
			ROLLBACK TRANSACTION
	END CATCH
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_MEDICAL_AUDIT','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_MEDICAL_AUDIT
GO
CREATE PROCEDURE SP_LIST_MEDICAL_AUDIT
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	1/26/2017.
-- System			:	Billing.
-- Program			:	Data Audit.
-- Description		:	List the detail of medical audit.
-- Change Log		:
--=============================================
(
	@Med_code INT = 2530
)
AS
BEGIN
	SET NOCOUNT ON

	-- Variables
	DECLARE @codigoMedico		  INT	       -- Variable de cursor (MiCursor1), donde se obtiene el código del médico "Med_code" de la tabla "Medical_Audit".
		   ,@columnasActualizadas VARCHAR(MAX) -- Variable de cursor (MiCursor1), donde se obtienen las columnas que fueron actualizadas del campo "UpdateColumns" de la tabla "Medical_Audit".
		   ,@fechaAuditoria		  DATETIME	   -- Variable de cursor (MiCursor1), donde se obtiene la fecha de auditoría del campo "AuditDateTime" de la tabla "Medical_Audit".
		   ,@usuarioOperador	  INT		   -- Variable de cursor (MiCursor1), donde se obtiene el valor del campo "Med_operatprUser" de la tabla "Medical_Audit".
		   ,@NuevoMedico		  INT		   -- Variable que sirve para saber si del médico que se está evaluando (@Med_code) hay una auditoría de registro, se utiliza de la línea 50 a la 53.
		   ,@campo				  VARCHAR(MAX) -- Variable de cursor (MiCursor2), donde se obtiene el valor del campo "campo" de la tabla "#TablaAuditoria" del cual se va a obtener el antiguo y el nuevo valor de la tabla "Medical_Audit".
		   ,@fechaAuditoria2	  DATETIME	   -- Variable de cursor (MiCursor2), donde se obtiene el valor del campo "fechaAuditoria" de la tabla "#TablaAuditoria".

	-- Tabla que devolverá el detalle de una auditoría según el médico que se elija.
	CREATE TABLE [#TablaAuditoria]
	(
	     [codigoMedico]	   INT			NULL
		,[campo]		   VARCHAR(MAX)	NULL
		,[antiguoValor]	   VARCHAR(MAX)	NULL
		,[nuevoValor]	   VARCHAR(MAX)	NULL
		,[tipoOperacion]   VARCHAR(MAX) NULL
		,[fechaAuditoria]  DATETIME		NULL
		,[usuarioOperador] VARCHAR(MAX) NULL
	)

	BEGIN TRY
		BEGIN TRANSACTION
			-- Verifica que para este médico exista una fila en la tabla [Medical_Audit] con la columna [UpdateColumns] vacía,
			-- si existe quiere decir que es un médico que se ha registrado.
			SELECT @NuevoMedico    = COUNT(*) 
			FROM   [Medical_Audit] 
			WHERE  [UpdateColumns] = ''
			  AND  [Med_code]      = @Med_code

			-- Verifica si se ha registrado un nuevo médico analizando la variable @NuevoMedico
			IF (@NuevoMedico = 1)
			BEGIN
				-- Inserta en la tabla #TablaAuditoria la inserción
				INSERT INTO [#TablaAuditoria]([codigoMedico]
										     ,[campo]
										     ,[antiguoValor]
										     ,[nuevoValor]
										     ,[tipoOperacion]
										     ,[fechaAuditoria]
										     ,[usuarioOperador])
									   VALUES(@Med_code
										     ,'ROW'
										     ,'-'
										     ,'-'
										     ,'REGISTERED'
										     ,(SELECT [AuditDateTime]    
											   FROM   [Medical_Audit] 
											   WHERE  [Med_code]       = @Med_code 
											     AND  [AuditDataState] = 'New' 
												 AND  [UpdateColumns]  = '')
										     ,(SELECT (SELECT UPPER(Use_firstName) + ' ' + UPPER(Use_lastName) 
													   FROM [User] 
													   WHERE Use_code = [Med_operatorUser]) 
											   FROM  [Medical_Audit] 
											   WHERE [Med_code]       = @Med_code 
											    AND  [AuditDataState] = 'New' 
											    AND  [UpdateColumns]  = ''))
			END

			-- --------------------------------------------------------------------------------------------------

			-- Cursor para insertar en la tabla "#TablaAuditoria" los campos "codigoMedico", "campo" y "fechaAuditoria".
			DECLARE  [MiCursor1] CURSOR 
			FOR 
			SELECT   [UpdateColumns]
				    ,[Med_code]
				    ,[AuditDateTime]
				    ,[Med_operatorUser]
			FROM     [Medical_Audit] 
			WHERE    [Med_code]       = @Med_code
			 AND     [AuditDataState] = 'New'
			ORDER BY [AuditDateTime] DESC

			OPEN     [MiCursor1]

			FETCH NEXT FROM [MiCursor1] INTO @columnasActualizadas, @codigoMedico, @fechaAuditoria, @usuarioOperador

			WHILE @@FETCH_STATUS = 0
			BEGIN
				INSERT INTO [#TablaAuditoria]([codigoMedico]
										     ,[campo]
										     ,[fechaAuditoria]
										     ,[usuarioOperador])
									   SELECT @codigoMedico
										     ,[Item]
										     ,@fechaAuditoria
										     ,(SELECT UPPER(Use_firstName) + ' ' + UPPER(Use_lastName) FROM [User] WHERE Use_code = @usuarioOperador)
									   FROM   [DBO].[FN_SPLIT_STRINGS_BY_CHARACTER](@columnasActualizadas, '-')
									   WHERE  [Item] <> ''	
		
				FETCH NEXT FROM [MiCursor1] INTO @columnasActualizadas, @codigoMedico, @fechaAuditoria, @usuarioOperador
			END

			CLOSE      [MiCursor1]
			DEALLOCATE [MiCursor1]

			-- --------------------------------------------------------------------------------------------------

			-- Cursor para actualizar en la tabla "#TablaAuditoria" los campos "antiguoValor", "nuevoValor" y "tipoOperacion".
			DECLARE  [MiCursor2] CURSOR 
			FOR 
			SELECT   [campo]
					,[fechaAuditoria]
			FROM     [#TablaAuditoria]
			WHERE    [campo] <> 'ROW'
			ORDER BY [fechaAuditoria] DESC
	
			OPEN	 [MiCursor2]

			FETCH NEXT FROM [MiCursor2] INTO @campo, @fechaAuditoria2

			WHILE @@FETCH_STATUS = 0
			BEGIN
				DECLARE @consultaAntiguoValor NVARCHAR(MAX)
					   ,@consultaNuevoValor   NVARCHAR(MAX)
					   ,@definicionParametro  NVARCHAR(MAX)
					   ,@antiguoValor         VARCHAR(MAX)
					   ,@nuevoValor           VARCHAR(MAX)
		
				SET     @consultaAntiguoValor = N'SELECT @valorRetornado  = ' + @campo + 
				                                ' FROM   [Medical_Audit]' + 
												' WHERE  [AuditDataState] = ''Old''' +
												' AND    [AuditDateTime]  = ''' + CONVERT(VARCHAR(23), @fechaAuditoria2, 121) + ''''

				SET     @consultaNuevoValor   = N'SELECT @valorRetornado  = ' + @campo + 
					                            ' FROM   [Medical_Audit]' + 
												' WHERE  [AuditDataState] = ''New''' + 
												' AND    [AuditDateTime]  = ''' + CONVERT(VARCHAR(23), @fechaAuditoria2, 121) + ''''

				SET @definicionParametro = N'@valorRetornado VARCHAR(MAX) OUTPUT'
				EXEC SP_EXECUTESQL @consultaAntiguoValor, @definicionParametro, @valorRetornado = @antiguoValor OUTPUT		 
				EXEC SP_EXECUTESQL @consultaNuevoValor  , @definicionParametro, @valorRetornado = @nuevoValor	OUTPUT		 

				UPDATE [#TablaAuditoria]
				SET    [antiguoValor]   = 
							CASE 													
								WHEN ([campo] = 'Med_status' AND @antiguoValor = 0) THEN 'INACTIVE'
								WHEN ([campo] = 'Med_status' AND @antiguoValor = 1) THEN 'ACTIVE'								
								WHEN ([campo] = 'Spe_code') THEN (SELECT 
																		CASE Spe_name
																			WHEN ('---------------') THEN 'NONE'
																			ELSE Spe_name
																		END 
																  FROM Specialty 
																  WHERE Spe_code = @antiguoValor)		
								ELSE @antiguoValor								
							END
					  ,[nuevoValor]     = 
							CASE 
								WHEN ([campo] = 'Med_status' AND @nuevoValor = 0) THEN 'INACTIVE'
								WHEN ([campo] = 'Med_status' AND @nuevoValor = 1) THEN 'ACTIVE'								
								WHEN ([campo] = 'Spe_code') THEN (SELECT 
																		CASE Spe_name
																			WHEN ('---------------') THEN 'NONE'
																			ELSE Spe_name
																		END 
																  FROM Specialty 
																  WHERE Spe_code = @nuevoValor)		
								ELSE @nuevoValor
							END					   					   
					  ,[tipoOperacion]  = 							
							CASE
								WHEN ([campo] = 'Med_status' AND @nuevoValor = 0) THEN 'DELETED'
								ELSE 'UPDATED'
							END					   
				WHERE  [campo]          = @campo
				  AND  [fechaAuditoria] = @fechaAuditoria2

				FETCH NEXT FROM [MiCursor2] INTO @campo, @fechaAuditoria2		
			END
	
			CLOSE      [MiCursor2]
			DEALLOCATE [MiCursor2]

			-- --------------------------------------------------------------------------------------------------

			SELECT   codigoMedico
				    ,(CASE campo
					    WHEN 'ROW'			             THEN 'ROW'
						WHEN 'Med_firstName'             THEN 'First Name'
						WHEN 'Med_lastName'              THEN 'Last Name'
						WHEN 'Med_address'               THEN 'Street'
						WHEN 'Med_state'                 THEN 'State'
						WHEN 'Med_city'                  THEN 'City'
						WHEN 'Med_zipCode'               THEN 'Zip Code'
						WHEN 'Med_zipCodeExt'            THEN 'Zip Code Ext'
						WHEN 'Med_phone'                 THEN 'Phone'
						WHEN 'Med_phoneExt'              THEN 'Phone Ext'						
						WHEN 'Med_alternatePhone'		 THEN 'Alternative Phone'
						WHEN 'Med_fax'                   THEN 'Fax'						
						WHEN 'Spe_code'					 THEN 'Specialty'
						WHEN 'Med_office'                THEN 'Office'
						WHEN 'Med_status'                THEN 'Status'
					  END) AS campo
					,antiguoValor
					,nuevoValor
					,tipoOperacion
					,fechaAuditoria
					,usuarioOperador
			FROM     [#TablaAuditoria]
			WHERE    [campo] NOT LIKE '%_operatorUser'
			ORDER BY [fechaAuditoria] DESC	

		COMMIT TRANSACTION				
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS [MedicalErrorCode], ERROR_MESSAGE() AS [ErrorMessage];

		IF @@TRANCOUNT >= 1
			ROLLBACK TRANSACTION
	END CATCH
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_INSURER_AUDIT','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_INSURER_AUDIT
GO
CREATE PROCEDURE SP_LIST_INSURER_AUDIT
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	1/26/2017.
-- System			:	Billing.
-- Program			:	Data Audit.
-- Description		:	List the detail of insurer audit.
-- Change Log		:
--=============================================
(
	@Ins_code INT = 1
)
AS
BEGIN
	SET NOCOUNT ON

	-- Variables
	DECLARE @codigoAseguradora	  INT	       -- Variable de cursor (MiCursor1), donde se obtiene el código de la aseguradora "Ins_code" de la tabla "Insurer_Audit".
		   ,@columnasActualizadas VARCHAR(MAX) -- Variable de cursor (MiCursor1), donde se obtienen las columnas que fueron actualizadas del campo "UpdateColumns" de la tabla "Insurer_Audit".
		   ,@fechaAuditoria		  DATETIME	   -- Variable de cursor (MiCursor1), donde se obtiene la fecha de auditoría del campo "AuditDateTime" de la tabla "Insurer_Audit".
		   ,@usuarioOperador	  INT		   -- Variable de cursor (MiCursor1), donde se obtiene el valor del campo "Ins_operatorUser" de la tabla "Insurer_Audit".
		   ,@NuevaAseguradora	  INT		   -- Variable que sirve para saber si de la aseguradora que se está evaluando (@Ins_code) hay una auditoría de registro, se utiliza de la línea 50 a la 53.
		   ,@campo				  VARCHAR(MAX) -- Variable de cursor (MiCursor2), donde se obtiene el valor del campo "campo" de la tabla "#TablaAuditoria" del cual se va a obtener el antiguo y el nuevo valor de la tabla "Insurer_Audit".
		   ,@fechaAuditoria2	  DATETIME	   -- Variable de cursor (MiCursor2), donde se obtiene el valor del campo "fechaAuditoria" de la tabla "#TablaAuditoria".


	-- Tabla que devolverá el detalle de una auditoría según la aseguradora que se elija.
	CREATE TABLE [#TablaAuditoria]
	(
	     [codigoAseguradora] INT		  NULL
		,[campo]			 VARCHAR(MAX) NULL
		,[antiguoValor]		 VARCHAR(MAX) NULL
		,[nuevoValor]		 VARCHAR(MAX) NULL
		,[tipoOperacion]     VARCHAR(MAX) NULL
		,[fechaAuditoria]	 DATETIME	  NULL
		,[usuarioOperador]	 VARCHAR(MAX) NULL
	)

	BEGIN TRY
		BEGIN TRANSACTION

			-- Verifica que para esta aseguradora exista una fila en la tabla [Insurer_Audit] con la columna [UpdateColumns] vacía,
			-- si existe quiere decir que es una aseguradora que se ha registrado.
			SELECT @NuevaAseguradora  = COUNT(*) 			
			FROM   [Insurer_Audit] 
			WHERE  [UpdateColumns]    = ''
			  AND  [Ins_code]         = @Ins_code

			-- Verifica si se ha registrado una nueva aseguradora analizando la variable @NuevaAseguradora
			IF (@NuevaAseguradora = 1)
			BEGIN
				-- Inserta en la tabla #TablaAuditoria la inserción
				INSERT INTO [#TablaAuditoria]([codigoAseguradora]
										     ,[campo]
										     ,[antiguoValor]
										     ,[nuevoValor]
										     ,[tipoOperacion]
										     ,[fechaAuditoria]
										     ,[usuarioOperador])
									   VALUES(@Ins_code
										     ,'ROW'
										     ,'-'
										     ,'-'
										     ,'REGISTERED'
											 ,(SELECT [AuditDateTime]	 FROM [Insurer_Audit] WHERE [Ins_code] = @Ins_code AND [AuditDataState] = 'New' AND [UpdateColumns] = '')
											 ,(SELECT (SELECT UPPER(Use_firstName) + ' ' + UPPER(Use_lastName) FROM [User] WHERE Use_code = [Ins_operatorUser]) FROM [Insurer_Audit] WHERE [Ins_code] = @Ins_code AND [AuditDataState] = 'New' AND [UpdateColumns] = ''))
			END

			-- --------------------------------------------------------------------------------------------------

			-- Cursor para insertar en la tabla "#TablaAuditoria" los campos "codigoAseguradora", "campo" y "fechaAuditoria".
			DECLARE  [MiCursor1] CURSOR 
			FOR 
			SELECT   [UpdateColumns]
				    ,[Ins_code]
				    ,[AuditDateTime]
				    ,[Ins_operatorUser]
			FROM     [Insurer_Audit] 
			WHERE    [Ins_code]       = @Ins_code
			AND      [AuditDataState] = 'New'
			ORDER BY [AuditDateTime] DESC

			OPEN	 [MiCursor1]

			FETCH NEXT FROM [MiCursor1] INTO @columnasActualizadas, @codigoAseguradora, @fechaAuditoria, @usuarioOperador

			WHILE @@FETCH_STATUS = 0
			BEGIN
				INSERT INTO [#TablaAuditoria]([codigoAseguradora]
										     ,[campo]
										     ,[fechaAuditoria]
										     ,[usuarioOperador])
									   SELECT @codigoAseguradora
										     ,[Item]
										     ,@fechaAuditoria	
										     ,(SELECT UPPER(Use_firstName) + ' ' + UPPER(Use_lastName) FROM [User] WHERE Use_code = @usuarioOperador)
									   FROM   [DBO].[FN_SPLIT_STRINGS_BY_CHARACTER](@columnasActualizadas, '-')
									   WHERE  [Item] <> ''	
		
				FETCH NEXT FROM [MiCursor1] INTO @columnasActualizadas, @codigoAseguradora, @fechaAuditoria, @usuarioOperador
			END

			CLOSE	   [MiCursor1]
			DEALLOCATE [MiCursor1]	

			-- --------------------------------------------------------------------------------------------------

			-- Cursor para actualizar en la tabla "#TablaAuditoria" los campos "antiguoValor", "nuevoValor" y "tipoOperacion".
			DECLARE  [MiCursor2] CURSOR
			FOR 
			SELECT   [campo]
					,[fechaAuditoria]
			FROM     [#TablaAuditoria]
			WHERE    [campo] <> 'ROW'
			ORDER BY [fechaAuditoria] DESC
	
			OPEN     [MiCursor2]

			FETCH NEXT FROM [MiCursor2] INTO @campo, @fechaAuditoria2

			WHILE @@FETCH_STATUS = 0
			BEGIN
				DECLARE @consultaAntiguoValor NVARCHAR(MAX)
					   ,@consultaNuevoValor   NVARCHAR(MAX)
					   ,@definicionParametro  NVARCHAR(MAX)
					   ,@antiguoValor         VARCHAR(MAX)
					   ,@nuevoValor           VARCHAR(MAX)
		
				SET     @consultaAntiguoValor = N'SELECT @valorRetornado  = ' + @campo + 
				                                ' FROM   [Insurer_Audit]' + 
												' WHERE  [AuditDataState] = ''Old''' +
												' AND    [AuditDateTime]  = ''' + CONVERT(VARCHAR(23), @fechaAuditoria2, 121) + ''''

				SET     @consultaNuevoValor   = N'SELECT @valorRetornado  = ' + @campo + 
					                            ' FROM   [Insurer_Audit]' + 
												' WHERE  [AuditDataState] = ''New''' + 
												' AND    [AuditDateTime]  = ''' + CONVERT(VARCHAR(23), @fechaAuditoria2, 121) + ''''

				SET @definicionParametro = N'@valorRetornado VARCHAR(MAX) OUTPUT'
				EXEC SP_EXECUTESQL @consultaAntiguoValor, @definicionParametro, @valorRetornado = @antiguoValor OUTPUT		 
				EXEC SP_EXECUTESQL @consultaNuevoValor  , @definicionParametro, @valorRetornado = @nuevoValor	OUTPUT		 

				UPDATE [#TablaAuditoria]
				SET    [antiguoValor]   = 
							CASE 
								WHEN ([campo] = 'Ins_status' AND @antiguoValor = 0) THEN 'INACTIVE'
								WHEN ([campo] = 'Ins_status' AND @antiguoValor = 1) THEN 'ACTIVE'								
								ELSE @antiguoValor								
							END
					  ,[nuevoValor]     = 
							CASE 
								WHEN ([campo] = 'Ins_status' AND @nuevoValor = 0) THEN 'INACTIVE'
								WHEN ([campo] = 'Ins_status' AND @nuevoValor = 1) THEN 'ACTIVE'
								ELSE @nuevoValor
							END
					  ,[tipoOperacion]  = 
							CASE
								WHEN ([campo] = 'Ins_status' AND @nuevoValor = 0) THEN 'DELETED'
								ELSE 'UPDATED'
							END					   
				WHERE  [campo]          = @campo
				  AND  [fechaAuditoria] = @fechaAuditoria2

				FETCH NEXT FROM [MiCursor2] INTO @campo, @fechaAuditoria2		
			END
	
			CLOSE	   [MiCursor2]
			DEALLOCATE [MiCursor2]

			-- --------------------------------------------------------------------------------------------------

			SELECT   codigoAseguradora
				    ,(CASE campo
					    WHEN 'ROW'			    THEN 'ROW'						
						WHEN 'Ins_name'			THEN 'Name'
						WHEN 'Ins_phone'		THEN 'Phone'
						WHEN 'Ins_phoneExt'		THEN 'Ext'
						WHEN 'Ins_fax'			THEN 'Fax'
						WHEN 'Ins_address'		THEN 'Street'
						WHEN 'Ins_state'		THEN 'State'
						WHEN 'Ins_city'			THEN 'Sity'
						WHEN 'Ins_zipCode'		THEN 'Zip Code'
						WHEN 'Ins_zipExt'		THEN 'Zip Code Ext'
						WHEN 'Ins_scTpaCode'	THEN 'SC/TPA'
						WHEN 'Ins_feinSc'		THEN 'Fein Sc'
						WHEN 'Ins_carrierCode'	THEN 'Carrier'
						WHEN 'Ins_feinCc'		THEN 'Fein CC'
						WHEN 'Ins_status'		THEN 'Status'			
					  END) AS campo
					,antiguoValor
					,nuevoValor
					,tipoOperacion
					,fechaAuditoria
					,usuarioOperador
			FROM     [#TablaAuditoria]
			WHERE    [campo] NOT LIKE '%_operatorUser'
			ORDER BY [fechaAuditoria] DESC	

		COMMIT TRANSACTION				
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS [InsurerErrorCode], ERROR_MESSAGE() AS [ErrorMessage];

		IF @@TRANCOUNT >= 1
			ROLLBACK TRANSACTION
	END CATCH
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_ATTORNEY_AUDIT','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_ATTORNEY_AUDIT
GO
CREATE PROCEDURE SP_LIST_ATTORNEY_AUDIT
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	1/26/2017.
-- System			:	Billing.
-- Program			:	Data Audit.
-- Description		:	List the detail of attorney audit.
-- Change Log		:
--=============================================
(
	@Att_code INT = 521
)
AS
BEGIN
	SET NOCOUNT ON

	-- Variables
	DECLARE @codigoAbogado		  INT	       -- Variable de cursor (MiCursor1), donde se obtiene el código del abogado "Att_code" de la tabla "Attorney_Audit".
		   ,@columnasActualizadas VARCHAR(MAX) -- Variable de cursor (MiCursor1), donde se obtienen las columnas que fueron actualizadas del campo "UpdateColumns" de la tabla "Attorney_Audit".
		   ,@fechaAuditoria		  DATETIME	   -- Variable de cursor (MiCursor1), donde se obtiene la fecha de auditoría del campo "AuditDateTime" de la tabla "Attorney_Audit".
		   ,@usuarioOperador	  INT		   -- Variable de cursor (MiCursor1), donde se obtiene el valor del campo "Att_operatprUser" de la tabla "Attorney_Audit".
		   ,@NuevoAbogado		  INT		   -- Variable que sirve para saber si del abogado que se está evaluando (@Att_code) hay una auditoría de registro, se utiliza de la línea 50 a la 53.
		   ,@campo				  VARCHAR(MAX) -- Variable de cursor (MiCursor2), donde se obtiene el valor del campo "campo" de la tabla "#TablaAuditoria" del cual se va a obtener el antiguo y el nuevo valor de la tabla "Attorney_Audit".
		   ,@fechaAuditoria2	  DATETIME	   -- Variable de cursor (MiCursor2), donde se obtiene el valor del campo "fechaAuditoria" de la tabla "#TablaAuditoria".

	-- Tabla que devolverá el detalle de una auditoría según el abogado que se elija.
	CREATE TABLE [#TablaAuditoria]
	(
	     [codigoAbogado]   INT			NULL
		,[campo]		   VARCHAR(MAX)	NULL
		,[antiguoValor]	   VARCHAR(MAX)	NULL
		,[nuevoValor]	   VARCHAR(MAX)	NULL
		,[tipoOperacion]   VARCHAR(MAX) NULL
		,[fechaAuditoria]  DATETIME		NULL
		,[usuarioOperador] VARCHAR(MAX) NULL
	)

	BEGIN TRY
		-- BEGIN TRANSACTION

			-- Verifica que para este abogado exista una fila en la tabla [Attorney_Audit] con la columna [UpdateColumns] vacía,
			-- si existe quiere decir que es un abogado que se ha registrado.
			SELECT @NuevoAbogado  = COUNT(*) 
			FROM   [Attorney_Audit] 
			WHERE  [UpdateColumns] = ''
			   AND [Att_code]      = @Att_code
			
			-- Verifica si se ha registrado un nuevo abogado analizando la variable @NuevoAbogado
			IF (@NuevoAbogado = 1)
			BEGIN
				-- Inserta en la tabla #TablaAuditoria la inserción
				INSERT INTO [#TablaAuditoria]([codigoAbogado]
										     ,[campo]
										     ,[antiguoValor]
										     ,[nuevoValor]
										     ,[tipoOperacion]
										     ,[fechaAuditoria]
										     ,[usuarioOperador])
									   VALUES(@Att_code
										     ,'ROW'
										     ,'-'
										     ,'-'
										     ,'REGISTERED'
										     ,(SELECT [AuditDateTime]    FROM [Attorney_Audit] WHERE [Att_code] = @Att_code AND [AuditDataState] = 'New' AND [UpdateColumns] = '')
										     ,(SELECT (SELECT UPPER(Use_firstName) + ' ' + UPPER(Use_lastName) FROM [User] WHERE Use_code = [Att_operatorUser]) FROM [Attorney_Audit] WHERE [Att_code] = @Att_code AND [AuditDataState] = 'New' AND [UpdateColumns] = ''))
			END

			-- --------------------------------------------------------------------------------------------------

			-- Cursor para insertar en la tabla "#TablaAuditoria" los campos "codigoAbogado", "campo" y "fechaAuditoria".
			DECLARE  [MiCursor1] CURSOR 
			FOR 
			SELECT   [UpdateColumns]
				    ,[Att_code]
				    ,[AuditDateTime]
				    ,[Att_operatorUser]
			FROM     [Attorney_Audit] 
			WHERE    [Att_code]       = @Att_code
			AND      [AuditDataState] = 'New'
			ORDER BY [AuditDateTime] DESC

			OPEN     [MiCursor1]

			FETCH NEXT FROM [MiCursor1] INTO @columnasActualizadas, @codigoAbogado, @fechaAuditoria, @usuarioOperador

			WHILE @@FETCH_STATUS = 0
			BEGIN
				INSERT INTO [#TablaAuditoria]([codigoAbogado]
										     ,[campo]
										     ,[fechaAuditoria]
										     ,[usuarioOperador])
									   SELECT @codigoAbogado
										     ,[Item]
										     ,@fechaAuditoria								   
										     ,(SELECT UPPER(Use_firstName) + ' ' + UPPER(Use_lastName) FROM [User] WHERE Use_code = @usuarioOperador)
									   FROM   [DBO].[FN_SPLIT_STRINGS_BY_CHARACTER](@columnasActualizadas, '-')
									   WHERE  [Item] <> ''	
		
				FETCH NEXT FROM [MiCursor1] INTO @columnasActualizadas, @codigoAbogado, @fechaAuditoria, @usuarioOperador
			END

			CLOSE      [MiCursor1]
			DEALLOCATE [MiCursor1]

			-- --------------------------------------------------------------------------------------------------

			-- Cursor para actualizar en la tabla "#TablaAuditoria" los campos "antiguoValor", "nuevoValor" y "tipoOperacion".
			DECLARE  [MiCursor2] CURSOR 
			FOR 
			SELECT   [campo]
			  	    ,[fechaAuditoria]
			FROM     [#TablaAuditoria]
			WHERE    [campo] <> 'ROW'
		    ORDER BY [fechaAuditoria] DESC
	
			OPEN     [MiCursor2]

			FETCH NEXT FROM [MiCursor2] INTO @campo, @fechaAuditoria2

			WHILE @@FETCH_STATUS = 0
			BEGIN
				DECLARE @consultaAntiguoValor NVARCHAR(MAX)
					   ,@consultaNuevoValor   NVARCHAR(MAX)
					   ,@definicionParametro  NVARCHAR(MAX)
					   ,@antiguoValor         VARCHAR(MAX)
					   ,@nuevoValor           VARCHAR(MAX)
		
				SET     @consultaAntiguoValor = N'SELECT @valorRetornado  = ' + @campo + 
				                                ' FROM   [Attorney_Audit]' + 
												' WHERE  [AuditDataState] = ''Old''' +
												' AND    [AuditDateTime]  = ''' + CONVERT(VARCHAR(23), @fechaAuditoria2, 121) + ''''

				SET     @consultaNuevoValor   = N'SELECT @valorRetornado  = ' + @campo + 
					                            ' FROM   [Attorney_Audit]' + 
												' WHERE  [AuditDataState] = ''New''' + 
												' AND    [AuditDateTime]  = ''' + CONVERT(VARCHAR(23), @fechaAuditoria2, 121) + ''''

				SET @definicionParametro = N'@valorRetornado VARCHAR(MAX) OUTPUT'
				EXEC SP_EXECUTESQL @consultaAntiguoValor, @definicionParametro, @valorRetornado = @antiguoValor OUTPUT		 
				EXEC SP_EXECUTESQL @consultaNuevoValor  , @definicionParametro, @valorRetornado = @nuevoValor	OUTPUT		 
				
				UPDATE [#TablaAuditoria]
				SET    [antiguoValor]   =
							CASE 
								WHEN ([campo] = 'Att_status' AND @antiguoValor = 0) THEN 'INACTIVE'
								WHEN ([campo] = 'Att_status' AND @antiguoValor = 1) THEN 'ACTIVE'								
								WHEN ([campo] = 'Spe_code') THEN (SELECT 
																		CASE Spe_name
																			WHEN ('---------------') THEN 'NONE'
																			ELSE Spe_name
																		END 
																  FROM Specialty 
																  WHERE Spe_code = @antiguoValor)								
								ELSE @antiguoValor								
							END							
					  ,[nuevoValor]     = 
							CASE 
								WHEN ([campo] = 'Att_status' AND @nuevoValor = 0) THEN 'INACTIVE'
								WHEN ([campo] = 'Att_status' AND @nuevoValor = 1) THEN 'ACTIVE'
								WHEN ([campo] = 'Spe_code') THEN (SELECT 
																		CASE Spe_name
																			WHEN ('---------------') THEN 'NONE'
																			ELSE Spe_name
																		END 
																  FROM Specialty 
																  WHERE Spe_code = @nuevoValor)
								ELSE @nuevoValor
							END					
					  ,[tipoOperacion]  = 
							CASE
								WHEN ([campo] = 'Att_status' AND @nuevoValor = 0) THEN 'DELETED'
								ELSE 'UPDATED'
							END					   
				WHERE  [campo]          = @campo
				AND    [fechaAuditoria] = @fechaAuditoria2

				FETCH NEXT FROM [MiCursor2] INTO @campo, @fechaAuditoria2		
			END
	
			CLOSE      [MiCursor2]
			DEALLOCATE [MiCursor2]

			-- --------------------------------------------------------------------------------------------------

			SELECT   codigoAbogado
				    ,(CASE campo
					    WHEN 'ROW'			    THEN 'ROW'
						WHEN 'Att_firstName'    THEN 'First Name'
						WHEN 'Att_lastName'     THEN 'Last Name'
						WHEN 'Att_address'      THEN 'Street'
						WHEN 'Att_state'    	THEN 'State'
						WHEN 'Att_city'         THEN 'City'
						WHEN 'Att_zipCode'      THEN 'Zip Code'
						WHEN 'Att_zipCodeExt'   THEN 'Ext'
						WHEN 'Att_phone'        THEN 'Phone'
						WHEN 'Att_fax'          THEN 'Fax'
						WHEN 'Att_assistant'    THEN 'Assistant'
						WHEN 'Spe_code'         THEN 'Specialty'
						WHEN 'Att_status'       THEN 'Status'
					  END) AS campo
					,antiguoValor
					,nuevoValor
					,tipoOperacion
					,fechaAuditoria
					,usuarioOperador
			FROM     [#TablaAuditoria]
			WHERE    [campo] NOT LIKE '%_operatorUser'
			ORDER BY [fechaAuditoria] DESC	

		-- COMMIT TRANSACTION				
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS [AttorneyErrorCode], ERROR_MESSAGE() AS [ErrorMessage];

		IF @@TRANCOUNT >= 1
			ROLLBACK TRANSACTION
	END CATCH
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_ADJUSTER_AUDIT','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_ADJUSTER_AUDIT
GO
CREATE PROCEDURE SP_LIST_ADJUSTER_AUDIT
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	1/26/2017.
-- System			:	Billing.
-- Program			:	Data Audit.
-- Description		:	List the detail of adjuster audit.
-- Change Log		:
--=============================================
(
	@Adj_code INT = 304
)
AS
BEGIN
	SET NOCOUNT ON

	-- Variables
	DECLARE @codigoAjustador	  INT	       -- Variable de cursor (MiCursor1), donde se obtiene el código del ajustador "Adj_code" de la tabla "Adjuster_Audit".
		   ,@columnasActualizadas VARCHAR(MAX) -- Variable de cursor (MiCursor1), donde se obtienen las columnas que fueron actualizadas del campo "UpdateColumns" de la tabla "Adjuster_Audit".
		   ,@fechaAuditoria		  DATETIME	   -- Variable de cursor (MiCursor1), donde se obtiene la fecha de auditoría del campo "AuditDateTime" de la tabla "Adjuster_Audit".
		   ,@usuarioOperador	  INT		   -- Variable de cursor (MiCursor1), donde se obtiene el valor del campo "Adj_operatprUser" de la tabla "Adjuster_Audit".
		   ,@NuevoAjustador		  INT		   -- Variable que sirve para saber si del ajustador que se está evaluando (@Adj_code) hay una auditoría de registro, se utiliza de la línea 50 a la 53.
		   ,@campo				  VARCHAR(MAX) -- Variable de cursor (MiCursor2), donde se obtiene el valor del campo "campo" de la tabla "#TablaAuditoria" del cual se va a obtener el antiguo y el nuevo valor de la tabla "Adjuster_Audit".
		   ,@fechaAuditoria2	  DATETIME	   -- Variable de cursor (MiCursor2), donde se obtiene el valor del campo "fechaAuditoria" de la tabla "#TablaAuditoria".

	-- Tabla que devolverá el detalle de una auditoría según el ajustador que se elija.
	CREATE TABLE [#TablaAuditoria]
	(
	     [codigoAjustador]	INT			 NULL
		,[campo]			VARCHAR(MAX) NULL
		,[antiguoValor]		VARCHAR(MAX) NULL
		,[nuevoValor]		VARCHAR(MAX) NULL
		,[tipoOperacion]    VARCHAR(MAX) NULL
		,[fechaAuditoria]	DATETIME	 NULL
		,[usuarioOperador]	VARCHAR(MAX) NULL
	)

	BEGIN TRY
		BEGIN TRANSACTION

			-- Verifica que para este ajustador exista una fila en la tabla [Adjuster_Audit] con la columna [UpdateColumns] vacía,
			-- si existe quiere decir que es un ajustador que se ha registrado.
			SELECT @NuevoAjustador = COUNT(*) 
			FROM   [Adjuster_Audit] 
			WHERE  [UpdateColumns]  = ''
			AND    [Adj_code]       = @Adj_code

			-- Verifica si se ha registrado un nuevo ajustador analizando la variable @NuevoAjustador
			IF (@NuevoAjustador = 1)
			BEGIN
				-- Inserta en la tabla #TablaAuditoria la inserción
				INSERT INTO [#TablaAuditoria]([codigoAjustador]
										     ,[campo]
										     ,[antiguoValor]
										     ,[nuevoValor]
										     ,[tipoOperacion]
										     ,[fechaAuditoria]
										     ,[usuarioOperador])
									   VALUES(@Adj_code
										     ,'ROW'
										     ,'-'
										     ,'-'
										     ,'REGISTERED'
										     ,(SELECT [AuditDateTime]    FROM [Adjuster_Audit] WHERE [Adj_code] = @Adj_code AND [AuditDataState] = 'New' AND [UpdateColumns] = '')
										     ,(SELECT (SELECT UPPER(Use_firstName) + ' ' + UPPER(Use_lastName) FROM [User] WHERE Use_code = [Adj_operatorUser]) FROM [Adjuster_Audit] WHERE [Adj_code] = @Adj_code AND [AuditDataState] = 'New' AND [UpdateColumns] = ''))
			END

			-- --------------------------------------------------------------------------------------------------

			-- Cursor para insertar en la tabla "#TablaAuditoria" los campos "codigoAjustador", "campo" y "fechaAuditoria".
			DECLARE  [MiCursor1] CURSOR 
			FOR 
			SELECT   [UpdateColumns]
				    ,[Adj_code]
				    ,[AuditDateTime]
				    ,[Adj_operatorUser]
			FROM     [Adjuster_Audit] 
			WHERE    [Adj_code]       = @Adj_code
			     AND [AuditDataState] = 'New'
			ORDER BY [AuditDateTime] DESC

			OPEN     [MiCursor1]

			FETCH NEXT FROM [MiCursor1] INTO @columnasActualizadas, @codigoAjustador, @fechaAuditoria, @usuarioOperador

			WHILE @@FETCH_STATUS = 0
			BEGIN
				INSERT INTO [#TablaAuditoria]([codigoAjustador]
										     ,[campo]
										     ,[fechaAuditoria]
										     ,[usuarioOperador])
									   SELECT @codigoAjustador
										     ,[Item]
										     ,@fechaAuditoria
										     ,(SELECT UPPER(Use_firstName) + ' ' + UPPER(Use_lastName) FROM [User] WHERE Use_code = @usuarioOperador)
									   FROM   [DBO].[FN_SPLIT_STRINGS_BY_CHARACTER](@columnasActualizadas, '-')
									   WHERE  [Item] <> ''	
		
				FETCH NEXT FROM [MiCursor1] INTO @columnasActualizadas, @codigoAjustador, @fechaAuditoria, @usuarioOperador
			END

			CLOSE      [MiCursor1]
			DEALLOCATE [MiCursor1]

			-- --------------------------------------------------------------------------------------------------

			-- Cursor para actualizar en la tabla "#TablaAuditoria" los campos "antiguoValor", "nuevoValor" y "tipoOperacion".
			DECLARE  [MiCursor2] CURSOR 
			FOR 
			SELECT   [campo]
					,[fechaAuditoria]
			FROM     [#TablaAuditoria]
			WHERE    [campo] <> 'ROW'
			ORDER BY [fechaAuditoria] DESC
	
			OPEN     [MiCursor2]

			FETCH NEXT FROM [MiCursor2] INTO @campo, @fechaAuditoria2

			WHILE @@FETCH_STATUS = 0
			BEGIN
				DECLARE @consultaAntiguoValor NVARCHAR(MAX)
					   ,@consultaNuevoValor   NVARCHAR(MAX)
					   ,@definicionParametro  NVARCHAR(MAX)
					   ,@antiguoValor         VARCHAR(MAX)
					   ,@nuevoValor           VARCHAR(MAX)
		
				SET     @consultaAntiguoValor = N'SELECT @valorRetornado  = ' + @campo + 
				                                ' FROM   [Adjuster_Audit]' + 
												' WHERE  [AuditDataState] = ''Old''' +
												' AND    [AuditDateTime]  = ''' + CONVERT(VARCHAR(23), @fechaAuditoria2, 121) + ''''

				SET     @consultaNuevoValor   = N'SELECT @valorRetornado  = ' + @campo + 
					                            ' FROM   [Adjuster_Audit]' + 
												' WHERE  [AuditDataState] = ''New''' + 
												' AND    [AuditDateTime]  = ''' + CONVERT(VARCHAR(23), @fechaAuditoria2, 121) + ''''

				SET @definicionParametro = N'@valorRetornado VARCHAR(MAX) OUTPUT'
				EXEC SP_EXECUTESQL @consultaAntiguoValor, @definicionParametro, @valorRetornado = @antiguoValor OUTPUT		 
				EXEC SP_EXECUTESQL @consultaNuevoValor  , @definicionParametro, @valorRetornado = @nuevoValor	OUTPUT		 

				UPDATE [#TablaAuditoria]
				SET    [antiguoValor]    = 
							CASE 
								WHEN ([campo] = 'Adj_status' AND @antiguoValor = 0) THEN 'INACTIVE'
								WHEN ([campo] = 'Adj_status' AND @antiguoValor = 1) THEN 'ACTIVE'
								ELSE @antiguoValor								
							END
					  ,[nuevoValor]      = 
							CASE 
								WHEN ([campo] = 'Adj_status' AND @nuevoValor = 0) THEN 'INACTIVE'
								WHEN ([campo] = 'Adj_status' AND @nuevoValor = 1) THEN 'ACTIVE'
								ELSE @nuevoValor
							END					   					   
					  ,[tipoOperacion]   = 
							CASE
								WHEN ([campo] = 'Adj_status' AND @nuevoValor = 0) THEN 'DELETED'
								ELSE 'UPDATED'
							END					   
				WHERE  [campo]           = @campo
				  AND  [fechaAuditoria]  = @fechaAuditoria2

				FETCH NEXT FROM [MiCursor2] INTO @campo, @fechaAuditoria2		
			END
	
			CLOSE      [MiCursor2]
			DEALLOCATE [MiCursor2]

			-- --------------------------------------------------------------------------------------------------

			SELECT   codigoAjustador
				    ,(CASE campo
					    WHEN 'ROW'			 THEN 'ROW'
						WHEN 'Adj_firstName' THEN 'First Name'
						WHEN 'Adj_lastName'  THEN 'Last Name'
						WHEN 'Adj_phone'     THEN 'Telephone'
						WHEN 'Adj_phoneExt'  THEN 'Phone Ext'
						WHEN 'Adj_status'    THEN 'Status'
					  END) AS campo
					,antiguoValor
					,nuevoValor
					,tipoOperacion
					,fechaAuditoria
					,usuarioOperador
			FROM     [#TablaAuditoria]
			WHERE    [campo] NOT LIKE '%_operatorUser'
			ORDER BY [fechaAuditoria] DESC	

		COMMIT TRANSACTION				
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS [AdjusterErrorCode], ERROR_MESSAGE() AS [ErrorMessage];

		IF @@TRANCOUNT >= 1
			ROLLBACK TRANSACTION
	END CATCH
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_PROVIDER_AUDIT','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_PROVIDER_AUDIT
GO
CREATE PROCEDURE SP_LIST_PROVIDER_AUDIT
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	1/26/2017.
-- System			:	Billing.
-- Program			:	Data Audit.
-- Description		:	List the detail of provider audit.
-- Change Log		:
--=============================================
(
	@Pro_code INT = 53
)
AS
BEGIN
	SET NOCOUNT ON

	-- Variables
	DECLARE @codigoProveedor	  INT	       -- Variable de cursor (MiCursor1), donde se obtiene el código del proveedor "Pro_code" de la tabla "Provider_Audit".
		   ,@columnasActualizadas VARCHAR(MAX) -- Variable de cursor (MiCursor1), donde se obtienen las columnas que fueron actualizadas del campo "UpdateColumns" de la tabla "Provider_Audit".
		   ,@fechaAuditoria		  DATETIME	   -- Variable de cursor (MiCursor1), donde se obtiene la fecha de auditoría del campo "AuditDateTime" de la tabla "Provider_Audit".
		   ,@usuarioOperador	  INT		   -- Variable de cursor (MiCursor1), donde se obtiene el valor del campo "Pro_operatprUser" de la tabla "Provider_Audit".
		   ,@NuevoProveedor		  INT		   -- Variable que sirve para saber si del proveedor que se está evaluando (@Pro_code) hay una auditoría de registro, se utiliza de la línea 50 a la 53.
		   ,@campo				  VARCHAR(MAX) -- Variable de cursor (MiCursor2), donde se obtiene el valor del campo "campo" de la tabla "#TablaAuditoria" del cual se va a obtener el antiguo y el nuevo valor de la tabla "Provider_Audit".
		   ,@fechaAuditoria2	  DATETIME	   -- Variable de cursor (MiCursor2), donde se obtiene el valor del campo "fechaAuditoria" de la tabla "#TablaAuditoria".

	-- Tabla que devolverá el detalle de una auditoría según el proveedor que se elija.
	CREATE TABLE [#TablaAuditoria]
	(
	     [codigoProveedor] INT			NULL
		,[campo]		   VARCHAR(MAX)	NULL
		,[antiguoValor]	   VARCHAR(MAX)	NULL
		,[nuevoValor]	   VARCHAR(MAX)	NULL
		,[tipoOperacion]   VARCHAR(MAX) NULL
		,[fechaAuditoria]  DATETIME		NULL
		,[usuarioOperador] VARCHAR(MAX) NULL
	)

	BEGIN TRY
		BEGIN TRANSACTION

			-- Verifica que para este proveedor exista una fila en la tabla [Provider_Audit] con la columna [UpdateColumns] vacía,
			-- si existe quiere decir que es un proveedor que se ha registrado.
			SELECT @NuevoProveedor = COUNT(*) 
			FROM   [Provider_Audit] 
			WHERE  [UpdateColumns]  = ''
			AND    [Pro_code]       = @Pro_code

			-- Verifica si se ha registrado un nuevo proveedor analizando la variable @NuevoProveedor
			IF (@NuevoProveedor = 1)
			BEGIN
				-- Inserta en la tabla #TablaAuditoria la inserción
				INSERT INTO [#TablaAuditoria]([codigoProveedor]
										     ,[campo]
										     ,[antiguoValor]
										     ,[nuevoValor]
										     ,[tipoOperacion]
										     ,[fechaAuditoria]
										     ,[usuarioOperador])
									   VALUES(@Pro_code
										     ,'ROW'
										     ,'-'
										     ,'-'
										     ,'REGISTERED'
										     ,(SELECT [AuditDateTime]    FROM [Provider_Audit] WHERE [Pro_code] = @Pro_code AND [AuditDataState] = 'New' AND [UpdateColumns] = '')
										     ,(SELECT (SELECT UPPER(Use_firstName) + ' ' + UPPER(Use_lastName) FROM [User] WHERE Use_code = [Pro_operatorUser]) FROM [Provider_Audit] WHERE [Pro_code] = @Pro_code AND [AuditDataState] = 'New' AND [UpdateColumns] = ''))
			END

			-- --------------------------------------------------------------------------------------------------

			-- Cursor para insertar en la tabla "#TablaAuditoria" los campos "codigoProveedor", "campo" y "fechaAuditoria".
			DECLARE  [MiCursor1] CURSOR 
			FOR 
			SELECT   [UpdateColumns]
				    ,[Pro_code]
				    ,[AuditDateTime]
				    ,[Pro_operatorUser]
			    FROM [Provider_Audit] 
			   WHERE [Pro_code]       = @Pro_code
			     AND [AuditDataState] = 'New'
			ORDER BY [AuditDateTime] DESC

			OPEN     [MiCursor1]

			FETCH NEXT FROM [MiCursor1] INTO @columnasActualizadas, @codigoProveedor, @fechaAuditoria, @usuarioOperador

			WHILE @@FETCH_STATUS = 0
			BEGIN
				INSERT INTO [#TablaAuditoria]([codigoProveedor]
										     ,[campo]
										     ,[fechaAuditoria]
										     ,[usuarioOperador])
									   SELECT @codigoProveedor
										     ,[Item]
										     ,@fechaAuditoria								   
										     ,(SELECT UPPER(Use_firstName) + ' ' + UPPER(Use_lastName) FROM [User] WHERE Use_code = @usuarioOperador)
									   FROM   [DBO].[FN_SPLIT_STRINGS_BY_CHARACTER](@columnasActualizadas, '-')
									   WHERE  [Item] <> ''	
		
				FETCH NEXT FROM [MiCursor1] INTO @columnasActualizadas, @codigoProveedor, @fechaAuditoria, @usuarioOperador
			END

			CLOSE	   [MiCursor1]
			DEALLOCATE [MiCursor1]	

			-- --------------------------------------------------------------------------------------------------

			-- Cursor para actualizar en la tabla "#TablaAuditoria" los campos "antiguoValor", "nuevoValor" y "tipoOperacion".
			DECLARE  [MiCursor2] CURSOR 
			FOR 
			SELECT   [campo]
					,[fechaAuditoria]
			FROM     [#TablaAuditoria]
			WHERE    [campo] <> 'ROW'
			ORDER BY [fechaAuditoria] DESC
	
			OPEN	 [MiCursor2]

			FETCH NEXT FROM [MiCursor2] INTO @campo, @fechaAuditoria2

			WHILE @@FETCH_STATUS = 0
			BEGIN
				DECLARE @consultaAntiguoValor NVARCHAR(MAX)
					   ,@consultaNuevoValor   NVARCHAR(MAX)
					   ,@definicionParametro  NVARCHAR(MAX)
					   ,@antiguoValor         VARCHAR(MAX)
					   ,@nuevoValor           VARCHAR(MAX)
		
				SET     @consultaAntiguoValor = N'SELECT @valorRetornado  = ' + @campo + 
				                                ' FROM   [Provider_Audit]' + 
												' WHERE  [AuditDataState] = ''Old''' +
												' AND    [AuditDateTime]  = ''' + CONVERT(VARCHAR(23), @fechaAuditoria2, 121) + ''''

				SET     @consultaNuevoValor   = N'SELECT @valorRetornado  = ' + @campo + 
					                            ' FROM   [Provider_Audit]' + 
												' WHERE  [AuditDataState] = ''New''' + 
												' AND    [AuditDateTime]  = ''' + CONVERT(VARCHAR(23), @fechaAuditoria2, 121) + ''''

				SET @definicionParametro = N'@valorRetornado VARCHAR(MAX) OUTPUT'
				EXEC SP_EXECUTESQL @consultaAntiguoValor, @definicionParametro, @valorRetornado = @antiguoValor OUTPUT		 
				EXEC SP_EXECUTESQL @consultaNuevoValor  , @definicionParametro, @valorRetornado = @nuevoValor	OUTPUT		 

				UPDATE [#TablaAuditoria]
				SET    [antiguoValor]   = 
							CASE 
								WHEN ([campo] = 'Pro_status' AND @antiguoValor = 0) THEN 'INACTIVE'
								WHEN ([campo] = 'Pro_status' AND @antiguoValor = 1) THEN 'ACTIVE'
								ELSE @antiguoValor								
							END
					  ,[nuevoValor]     = 
							CASE 
								WHEN ([campo] = 'Pro_status' AND @nuevoValor = 0) THEN 'INACTIVE'
								WHEN ([campo] = 'Pro_status' AND @nuevoValor = 1) THEN 'ACTIVE'								
								ELSE @nuevoValor
							END					   					   
					  ,[tipoOperacion]  = 
							CASE
								WHEN ([campo] = 'Pro_status' AND @nuevoValor = 0) THEN 'DELETED'
								ELSE 'UPDATED'
							END					   
				WHERE  [campo]          = @campo
				  AND  [fechaAuditoria] = @fechaAuditoria2

				FETCH NEXT FROM [MiCursor2] INTO @campo, @fechaAuditoria2		
			END
	
			CLOSE	   [MiCursor2]
			DEALLOCATE [MiCursor2]

			-- --------------------------------------------------------------------------------------------------

			SELECT   codigoProveedor
				    ,(CASE campo
					    WHEN 'ROW'			 THEN 'ROW'
						WHEN 'Pro_firstName' THEN 'First Name'
						WHEN 'Pro_lastName'  THEN 'Last Name'
						WHEN 'Pro_number'    THEN 'Id Number'
						WHEN 'Pro_status'    THEN 'Status'
					  END) AS campo
					,antiguoValor
					,nuevoValor
					,tipoOperacion
					,fechaAuditoria
					,usuarioOperador
			FROM     [#TablaAuditoria]
			WHERE    [campo] NOT LIKE '%_operatorUser'
			ORDER BY [fechaAuditoria] DESC	

		COMMIT TRANSACTION				
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS [ProviderErrorCode], ERROR_MESSAGE() AS [ErrorMessage];

		IF @@TRANCOUNT >= 1
			ROLLBACK TRANSACTION
	END CATCH
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_ACTIVITY_AUDIT','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_ACTIVITY_AUDIT
GO
CREATE PROCEDURE SP_LIST_ACTIVITY_AUDIT
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	1/26/2017.
-- System			:	Billing.
-- Program			:	Data Audit.
-- Description		:	List the detail of activity audit.
-- Change Log		:
--=============================================
(
	@Act_code INT = 55
)
AS
BEGIN
	SET NOCOUNT ON

	-- Variables
	DECLARE @codigoActividad	  INT	       -- Variable de cursor (MiCursor1), donde se obtiene el código de la actividad "Act_code" de la tabla "Activity_Audit".
		   ,@columnasActualizadas VARCHAR(MAX) -- Variable de cursor (MiCursor1), donde se obtienen las columnas que fueron actualizadas del campo "UpdateColumns" de la tabla "Activity_Audit".
		   ,@fechaAuditoria		  DATETIME	   -- Variable de cursor (MiCursor1), donde se obtiene la fecha de auditoría del campo "AuditDateTime" de la tabla "Activity_Audit".
		   ,@usuarioOperador	  INT		   -- Variable de cursor (MiCursor1), donde se obtiene el valor del campo "Act_operatprUser" de la tabla "Activity_Audit".
		   ,@NuevaActividad		  INT		   -- Variable que sirve para saber si de la actividad que se está evaluando (@Act_code) hay una auditoría de registro, se utiliza de la línea 50 a la 53.
		   ,@campo				  VARCHAR(MAX) -- Variable de cursor (MiCursor2), donde se obtiene el valor del campo "campo" de la tabla "#TablaAuditoria" del cual se va a obtener el antiguo y el nuevo valor de la tabla "Activity_Audit".
		   ,@fechaAuditoria2	  DATETIME	   -- Variable de cursor (MiCursor2), donde se obtiene el valor del campo "fechaAuditoria" de la tabla "#TablaAuditoria".

	-- Tabla que devolverá el detalle de una auditoría según la actividad que se elija.
	CREATE TABLE [#TablaAuditoria]
	(
	     [codigoActividad]	INT			 NULL
		,[campo]			VARCHAR(MAX) NULL
		,[antiguoValor]		VARCHAR(MAX) NULL
		,[nuevoValor]		VARCHAR(MAX) NULL
		,[tipoOperacion]    VARCHAR(MAX) NULL
		,[fechaAuditoria]	DATETIME	 NULL
		,[usuarioOperador]	VARCHAR(MAX) NULL
	)

	BEGIN TRY
		BEGIN TRANSACTION

			-- Verifica que para esta actividad exista una fila en la tabla [Activity_Audit] con la columna [UpdateColumns] vacía,
			-- si existe quiere decir que es una actividad que se ha registrado.
			SELECT @NuevaActividad = COUNT(*) 
			FROM   [Activity_Audit] 
			WHERE  [UpdateColumns]  = ''
			AND    [Act_code]       = @Act_code

			-- Verifica si se ha registrado una nueva actividad analizando la variable @NuevaActividad
			IF (@NuevaActividad = 1)
			BEGIN
				-- Inserta en la tabla #TablaAuditoria la inserción
				INSERT INTO [#TablaAuditoria]([codigoActividad]
										     ,[campo]
										     ,[antiguoValor]
										     ,[nuevoValor]
										     ,[tipoOperacion]
										     ,[fechaAuditoria]
										     ,[usuarioOperador])
									   VALUES(@Act_code
										     ,'ROW'
										     ,'-'
										     ,'-'
										     ,'REGISTERED'
										     ,(SELECT [AuditDateTime]    FROM [Activity_Audit] WHERE [Act_code] = @Act_code AND [AuditDataState] = 'New' AND [UpdateColumns] = '')
										     ,(SELECT (SELECT UPPER(Use_firstName) + ' ' + UPPER(Use_lastName) FROM [User] WHERE Use_code = [Act_operatorUser]) FROM [Activity_Audit] WHERE [Act_code] = @Act_code AND [AuditDataState] = 'New' AND [UpdateColumns] = ''))
			END

			-- --------------------------------------------------------------------------------------------------

			-- Cursor para insertar en la tabla "#TablaAuditoria" los campos "codigoActividad", "campo" y "fechaAuditoria".
			DECLARE  [MiCursor1] CURSOR 
			FOR 
			SELECT   [UpdateColumns]
				    ,[Act_code]
				    ,[AuditDateTime]
				    ,[Act_operatorUser]
			    FROM [Activity_Audit] 
			   WHERE [Act_code]       = @Act_code
			     AND [AuditDataState] = 'New'
			ORDER BY [AuditDateTime] DESC

			OPEN     [MiCursor1]

			FETCH NEXT FROM [MiCursor1] INTO @columnasActualizadas, @codigoActividad, @fechaAuditoria, @usuarioOperador

			WHILE @@FETCH_STATUS = 0
			BEGIN
				INSERT INTO [#TablaAuditoria]([codigoActividad]
										     ,[campo]
										     ,[fechaAuditoria]
										     ,[usuarioOperador])
									   SELECT @codigoActividad
										     ,[Item]
										     ,@fechaAuditoria
										     ,(SELECT UPPER(Use_firstName) + ' ' + UPPER(Use_lastName) FROM [User] WHERE Use_code = @usuarioOperador)
									   FROM   [DBO].[FN_SPLIT_STRINGS_BY_CHARACTER](@columnasActualizadas, '-')
									   WHERE  [Item] <> ''	
		
				FETCH NEXT FROM [MiCursor1] INTO @columnasActualizadas, @codigoActividad, @fechaAuditoria, @usuarioOperador
			END

			CLOSE	   [MiCursor1]
			DEALLOCATE [MiCursor1]	

			-- --------------------------------------------------------------------------------------------------

			-- Cursor para actualizar en la tabla "#TablaAuditoria" los campos "antiguoValor", "nuevoValor" y "tipoOperacion".
			DECLARE  [MiCursor2] CURSOR
			FOR 
			SELECT   [campo]
					,[fechaAuditoria]
			FROM     [#TablaAuditoria]		
			WHERE    [campo] <> 'ROW'
			ORDER BY [fechaAuditoria] DESC
	
			OPEN	 [MiCursor2]

			FETCH NEXT FROM [MiCursor2] INTO @campo, @fechaAuditoria2

			WHILE @@FETCH_STATUS = 0
			BEGIN
				DECLARE @consultaAntiguoValor NVARCHAR(MAX)
					   ,@consultaNuevoValor   NVARCHAR(MAX)
					   ,@definicionParametro  NVARCHAR(MAX)
					   ,@antiguoValor         VARCHAR(MAX)
					   ,@nuevoValor           VARCHAR(MAX)
		
				SET     @consultaAntiguoValor = N'SELECT @valorRetornado  = ' + @campo + 
				                                ' FROM   [Activity_Audit]' + 
												' WHERE  [AuditDataState] = ''Old''' +
												' AND    [AuditDateTime]  = ''' + CONVERT(VARCHAR(23), @fechaAuditoria2, 121) + ''''

				SET     @consultaNuevoValor   = N'SELECT @valorRetornado  = ' + @campo + 
					                            ' FROM   [Activity_Audit]' + 
												' WHERE  [AuditDataState] = ''New''' + 
												' AND    [AuditDateTime]  = ''' + CONVERT(VARCHAR(23), @fechaAuditoria2, 121) + ''''

				SET @definicionParametro = N'@valorRetornado VARCHAR(MAX) OUTPUT'
				EXEC SP_EXECUTESQL @consultaAntiguoValor, @definicionParametro, @valorRetornado = @antiguoValor OUTPUT		 
				EXEC SP_EXECUTESQL @consultaNuevoValor  , @definicionParametro, @valorRetornado = @nuevoValor	OUTPUT		 
				
				UPDATE [#TablaAuditoria]				
				SET    [antiguoValor]   = 
							CASE 							
								WHEN ([campo] = 'Act_status' AND @antiguoValor = 0) THEN 'INACTIVE'
								WHEN ([campo] = 'Act_status' AND @antiguoValor = 1) THEN 'ACTIVE'								
								WHEN ([campo] = 'Aty_code') THEN (SELECT 
																		CASE Aty_description
																			WHEN ('---------------') THEN 'NONE'
																			ELSE Aty_description
																		END 
																  FROM ActivityType
																  WHERE Aty_code = @antiguoValor)								
								ELSE @antiguoValor								
							END
					  ,[nuevoValor]     = 
							CASE 
								WHEN ([campo] = 'Act_status' AND @nuevoValor = 0) THEN 'INACTIVE'
								WHEN ([campo] = 'Act_status' AND @nuevoValor = 1) THEN 'ACTIVE'								
								WHEN ([campo] = 'Aty_code') THEN (SELECT 
																		CASE Aty_description
																			WHEN ('---------------') THEN 'NONE'
																			ELSE Aty_description
																		END 
																  FROM ActivityType
																  WHERE Aty_code = @nuevoValor)								
								ELSE @nuevoValor
							END					   					   
					  ,[tipoOperacion]  = 
							CASE
								WHEN ([campo] = 'Act_status' AND @nuevoValor = 0) THEN 'DELETED'
								ELSE 'UPDATED'
							END					   
				WHERE  [campo]          = @campo
				  AND  [fechaAuditoria] = @fechaAuditoria2

				FETCH NEXT FROM [MiCursor2] INTO @campo, @fechaAuditoria2		
			END
	
			CLOSE	   [MiCursor2]
			DEALLOCATE [MiCursor2]

			-- --------------------------------------------------------------------------------------------------

			SELECT   codigoActividad			
				    ,(CASE campo
					    WHEN 'ROW'			    THEN 'ROW'
						WHEN 'Act_description'  THEN 'Description'
						WHEN 'Aty_code'         THEN 'Type'
						WHEN 'Act_status'       THEN 'Status'
					  END) AS campo
					,antiguoValor
					,nuevoValor
					,tipoOperacion
					,fechaAuditoria
					,usuarioOperador
			FROM     [#TablaAuditoria]
			WHERE    [campo] NOT LIKE '%_operatorUser'
			ORDER BY [fechaAuditoria] DESC	


		COMMIT TRANSACTION				
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS [ActivityErrorCode], ERROR_MESSAGE() AS [ErrorMessage];

		IF @@TRANCOUNT >= 1
			ROLLBACK TRANSACTION
	END CATCH
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_SPECIALTY_AUDIT','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_SPECIALTY_AUDIT
GO
CREATE PROCEDURE SP_LIST_SPECIALTY_AUDIT
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	1/26/2017.
-- System			:	Billing.
-- Program			:	Data Audit.
-- Description		:	List the detail of specialty audit.
-- Change Log		:
--=============================================
(
	@Spe_code INT = 55
)
AS
BEGIN
	SET NOCOUNT ON

	-- Variables
	DECLARE @codigoEspecialidad	  INT	       -- Variable de cursor (MiCursor1), donde se obtiene el código de la especialidad "Spe_code" de la tabla "Specialty_Audit".
		   ,@columnasActualizadas VARCHAR(MAX) -- Variable de cursor (MiCursor1), donde se obtienen las columnas que fueron actualizadas del campo "UpdateColumns" de la tabla "Specialty_Audit".
		   ,@fechaAuditoria		  DATETIME	   -- Variable de cursor (MiCursor1), donde se obtiene la fecha de auditoría del campo "AuditDateTime" de la tabla "Specialty_Audit".
		   ,@usuarioOperador	  INT		   -- Variable de cursor (MiCursor1), donde se obtiene el valor del campo "Spe_operatprUser" de la tabla "Specialty_Audit".
		   ,@NuevaEspecialidad	  INT		   -- Variable que sirve para saber si de la especialidad que se está evaluando (@Spe_code) hay una auditoría de registro, se utiliza de la línea 50 a la 53.
		   ,@campo				  VARCHAR(MAX) -- Variable de cursor (MiCursor2), donde se obtiene el valor del campo "campo" de la tabla "#TablaAuditoria" del cual se va a obtener el antiguo y el nuevo valor de la tabla "Specialty_Audit".
		   ,@fechaAuditoria2	  DATETIME	   -- Variable de cursor (MiCursor2), donde se obtiene el valor del campo "fechaAuditoria" de la tabla "#TablaAuditoria".

	-- Tabla que devolverá el detalle de una auditoría según la especialidad que se elija.
	CREATE TABLE [#TablaAuditoria]
	(
	     [codigoEspecialidad] INT		   NULL
		,[campo]			  VARCHAR(MAX) NULL
		,[antiguoValor]		  VARCHAR(MAX) NULL
		,[nuevoValor]		  VARCHAR(MAX) NULL		
		,[tipoOperacion]	  VARCHAR(MAX) NULL
		,[fechaAuditoria]	  DATETIME	   NULL
		,[usuarioOperador]	  VARCHAR(MAX) NULL
	)

	BEGIN TRY
		BEGIN TRANSACTION

			-- Verifica que para esta especialidad exista una fila en la tabla [Specialty_Audit] con la columna [UpdateColumns] vacía,
			-- si existe quiere decir que es una especialidad que se ha registrado.
			SELECT @NuevaEspecialidad = COUNT(*) 
			FROM   [Specialty_Audit] 
			WHERE  [UpdateColumns]     = ''
			   AND [Spe_code]          = @Spe_code

			-- Verifica si se ha registrado una nueva especialidad analizando la variable @NuevaEspecialidad
			IF (@NuevaEspecialidad = 1)
			BEGIN
				-- Inserta en la tabla #TablaAuditoria la inserción
				INSERT INTO [#TablaAuditoria]([codigoEspecialidad]
										     ,[campo]
										     ,[antiguoValor]
										     ,[nuevoValor]
										     ,[tipoOperacion]
										     ,[fechaAuditoria]
										     ,[usuarioOperador])
									   VALUES(@Spe_code
										     ,'ROW'
										     ,'-'
										     ,'-'
										     ,'REGISTERED'
										     ,(SELECT [AuditDateTime]    
											   FROM   [Specialty_Audit] 
											   WHERE  [Spe_code] = @Spe_code 
											     AND  [AuditDataState] = 'New' 
												 AND  [UpdateColumns] = '')
										     ,(SELECT (SELECT UPPER(Use_firstName) + ' ' + UPPER(Use_lastName) 
													   FROM   [User] 
													   WHERE  [Use_code] = [Spe_operatorUser]) 
											   FROM   [Specialty_Audit] 
											   WHERE  [Spe_code]       = @Spe_code 
											     AND  [AuditDataState] = 'New' 
												 AND  [UpdateColumns]  = ''))
			END

			-- --------------------------------------------------------------------------------------------------

			-- Cursor para insertar en la tabla "#TablaAuditoria" los campos "codigoEspecialidad", "campo" y "fechaAuditoria".
			DECLARE  [MiCursor1] CURSOR
			FOR 
			  SELECT [UpdateColumns]
				    ,[Spe_code]
				    ,[AuditDateTime]
				    ,[Spe_operatorUser]
			    FROM [Specialty_Audit] 
			   WHERE [Spe_code]       = @Spe_code
			     AND [AuditDataState] = 'New'
			ORDER BY [AuditDateTime] DESC

			OPEN	 [MiCursor1]

			FETCH NEXT FROM [MiCursor1] INTO @columnasActualizadas, @codigoEspecialidad, @fechaAuditoria, @usuarioOperador

			WHILE @@FETCH_STATUS = 0
			BEGIN
				INSERT INTO [#TablaAuditoria]([codigoEspecialidad]
										     ,[campo]
										     ,[fechaAuditoria]
										     ,[usuarioOperador])					   
									   SELECT @codigoEspecialidad
										     ,[Item]
										     ,@fechaAuditoria
										     ,(SELECT UPPER(Use_firstName) + ' ' + UPPER(Use_lastName) FROM [User] WHERE Use_code = @usuarioOperador)
									   FROM   [DBO].[FN_SPLIT_STRINGS_BY_CHARACTER](@columnasActualizadas, '-')
									   WHERE  [Item] <> ''	
		
				FETCH NEXT FROM [MiCursor1] INTO @columnasActualizadas, @codigoEspecialidad, @fechaAuditoria, @usuarioOperador
			END

			CLOSE      [MiCursor1]
			DEALLOCATE [MiCursor1]				

			-- --------------------------------------------------------------------------------------------------

			-- Cursor para actualizar en la tabla "#TablaAuditoria" los campos "antiguoValor", "nuevoValor" y "tipoOperacion".
			DECLARE  [MiCursor2] CURSOR 
			FOR 
			SELECT   [campo]
					,[fechaAuditoria]
			FROM     [#TablaAuditoria]		
			WHERE    [campo] <> 'ROW'
			ORDER BY [fechaAuditoria] DESC
	
			OPEN     [MiCursor2]

			FETCH NEXT FROM [MiCursor2] INTO @campo, @fechaAuditoria2

			WHILE @@FETCH_STATUS = 0
			BEGIN
				DECLARE @consultaAntiguoValor NVARCHAR(MAX)
					   ,@consultaNuevoValor   NVARCHAR(MAX)
					   ,@definicionParametro  NVARCHAR(MAX)
					   ,@antiguoValor         VARCHAR(MAX)
					   ,@nuevoValor           VARCHAR(MAX)
		
				SET     @consultaAntiguoValor = N'SELECT @valorRetornado  = ' + @campo + 
				                                 ' FROM  [Specialty_Audit]' + 
												 ' WHERE [AuditDataState] = ''Old''' +
												 ' AND   [AuditDateTime]  = ''' + CONVERT(VARCHAR(23), @fechaAuditoria2, 121) + ''''

				SET     @consultaNuevoValor   = N'SELECT @valorRetornado  = ' + @campo + 
					                             ' FROM  [Specialty_Audit]' + 
												 ' WHERE [AuditDataState] = ''New''' + 
												 ' AND   [AuditDateTime]  = ''' + CONVERT(VARCHAR(23), @fechaAuditoria2, 121) + ''''

				SET @definicionParametro = N'@valorRetornado VARCHAR(MAX) OUTPUT'
				EXEC SP_EXECUTESQL @consultaAntiguoValor, @definicionParametro, @valorRetornado = @antiguoValor OUTPUT		 
				EXEC SP_EXECUTESQL @consultaNuevoValor  , @definicionParametro, @valorRetornado = @nuevoValor	OUTPUT		 

				UPDATE [#TablaAuditoria]
				   SET [antiguoValor]   = 
							CASE 
								WHEN ([campo] = 'Spe_status' AND @antiguoValor = 0) THEN 'INACTIVE'
								WHEN ([campo] = 'Spe_status' AND @antiguoValor = 1) THEN 'ACTIVE'																
								WHEN ([campo] = 'Spe_type' AND @antiguoValor = 'A') THEN 'ATTORNEY'
								WHEN ([campo] = 'Spe_type' AND @antiguoValor = 'M') THEN 'MEDICAL'
								ELSE @antiguoValor								
							END
					  ,[nuevoValor]     = 
							CASE 
								WHEN ([campo] = 'Spe_status' AND @nuevoValor = 0) THEN 'INACTIVE'
								WHEN ([campo] = 'Spe_status' AND @nuevoValor = 1) THEN 'ACTIVE'	
								WHEN ([campo] = 'Spe_type' AND @nuevoValor = 'A') THEN 'ATTORNEY'
								WHEN ([campo] = 'Spe_type' AND @nuevoValor = 'M') THEN 'MEDICAL'															
								ELSE @nuevoValor
							END					   					  
					  ,[tipoOperacion]  = 
							CASE
								WHEN ([campo] = 'Spe_status' AND @nuevoValor = 0) THEN 'DELETED'
								ELSE 'UPDATED'
							END					   
				WHERE  [campo]          = @campo
				  AND  [fechaAuditoria] = @fechaAuditoria2

				FETCH NEXT FROM [MiCursor2] INTO @campo, @fechaAuditoria2		
			END
	
			CLOSE      [MiCursor2]
			DEALLOCATE [MiCursor2]

			-- --------------------------------------------------------------------------------------------------
	
			SELECT   codigoEspecialidad
				    ,(CASE campo
					    WHEN 'ROW'			THEN 'ROW'
						WHEN 'Spe_name'     THEN 'Specialty'
						WHEN 'Spe_type'     THEN 'Type'
						WHEN 'Spe_status'   THEN 'Status'
					  END) AS campo
					,antiguoValor
					,nuevoValor
					,tipoOperacion
					,fechaAuditoria
					,usuarioOperador
			FROM     [#TablaAuditoria]
			WHERE    [campo] NOT LIKE '%_operatorUser'
			ORDER BY [fechaAuditoria] DESC	

		COMMIT TRANSACTION				
	END TRY
	BEGIN CATCH
		SELECT ERROR_NUMBER() AS [SpecialtyErrorCode], ERROR_MESSAGE() AS [ErrorMessage];

		IF @@TRANCOUNT >= 1
			ROLLBACK TRANSACTION
	END CATCH
END
GO

-- *******************************************************************************************************

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF (OBJECT_ID('SP_BUSCA_TIPO_PAGO','P') IS NOT NULL)
	DROP PROCEDURE SP_BUSCA_TIPO_PAGO
GO
CREATE PROCEDURE SP_BUSCA_TIPO_PAGO
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	2/3/2017.
-- System			:	Billing.
-- Program			:	Payment.
-- Description		:	find the match of a pay type.
-- Change Log		:
--=============================================
(
	@dato varchar(100) = 'XXXXXX'
)
AS
BEGIN
	SELECT top 1 Pty_description FROM PayType WHERE Pty_description = @dato
END
GO


-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_PAYMENTS_BY_FILTERS','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_PAYMENTS_BY_FILTERS
GO
CREATE PROCEDURE SP_LIST_PAYMENTS_BY_FILTERS
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	2/23/2017.
-- System			:	Billing.
-- Program			:	Payment.
-- Description		:	Get the payments according to different filters.
-- Change Log		:
--=============================================
(
     @Ins_code     INT         = 0 -- NORMANDY INSURANCE COMPANY
    ,@Pat_code     INT         = 0 -- 951 -- 951: JOSE ACOSTA / 1656: HENRY ADRIANZA
	,@Pah_number   VARCHAR(30) = '' -- '0io023opool045l' -- '0io023opool045l' / '78237vcbnbvnvbncv'
	,@Cis_caseCode VARCHAR(25) = '' -- '16FL0003121' -- '16FL0003121' / 'None Given'
	,@Bih_code_old CHAR(10)    = '' -- 'J7B0018032' -- 'J7B0018032' / 'A6B0015969'
)
AS
BEGIN
	SET NOCOUNT ON
	
	-- COMBINACIONES DE 1 (5 combinaciones)

	-- Aseguradora       (SI)
	-- Paciente	         (NO)
	-- Número de cheque  (NO)
	-- Claim             (NO)
	-- Número de factura (NO)

	IF (    @Ins_code     <> 0 
	    AND @Pat_code     =  0 
	    AND @Pah_number   =  '' 
	    AND @Cis_caseCode =  '' 
	    AND @Bih_code_old =  '')
	BEGIN
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]				
		WHERE    [CIS].[Ins_code]     = @Ins_code
		  -- AND [CIS].[Pat_code]     = @Pat_code
		  -- AND [PAH].[Pah_number]   = @Pah_number
		  -- AND [CIS].[Cis_caseCode] = @Cis_caseCode
	  	  -- AND [BIH].[Bih_code_old] = @Bih_code_old		 

		     AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]
	END
	
	-- Aseguradora       (NO)
	-- Paciente	         (SI)
	-- Número de cheque  (NO)
	-- Claim             (NO)
	-- Número de factura (NO)

	IF (    @Ins_code     =  0 
	    AND @Pat_code     <> 0 
	    AND @Pah_number   =  '' 
	    AND @Cis_caseCode =  '' 
	    AND @Bih_code_old =  '')
	BEGIN
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE -- [CIS].[Ins_code]     = @Ins_code
		         [CIS].[Pat_code]     = @Pat_code
		  -- AND [PAH].[Pah_number]   = @Pah_number
		  -- AND [CIS].[Cis_caseCode] = @Cis_caseCode
		  -- AND [BIH].[Bih_code_old] = @Bih_code_old		 

		     AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]				
	END

	-- Aseguradora       (NO)
	-- Paciente	         (NO)
	-- Número de cheque  (SI)
	-- Claim             (NO)
	-- Número de factura (NO)

	IF (    @Ins_code     =  0 
	    AND @Pat_code     =  0 
	    AND @Pah_number   <> '' 
	    AND @Cis_caseCode =  '' 
	    AND @Bih_code_old =  '')
	BEGIN
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE -- [CIS].[Ins_code]     = @Ins_code
		  -- AND [CIS].[Pat_code]     = @Pat_code
			     [PAH].[Pah_number]   = @Pah_number
		  -- AND [CIS].[Cis_caseCode] = @Cis_caseCode
		  -- AND [BIH].[Bih_code_old] = @Bih_code_old		 

		     AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END

	-- Aseguradora       (NO)
	-- Paciente	         (NO)
	-- Número de cheque  (NO)
	-- Claim             (SI)
	-- Número de factura (NO)

	IF (    @Ins_code     =  0 
	    AND @Pat_code     =  0 
	    AND @Pah_number   =  '' 
	    AND @Cis_caseCode <> '' 
	    AND @Bih_code_old =  '')
	BEGIN
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE -- [CIS].[Ins_code]     = @Ins_code
		  -- AND [CIS].[Pat_code]     = @Pat_code
	      -- AND [PAH].[Pah_number]   = @Pah_number
		         [CIS].[Cis_caseCode] = @Cis_caseCode
	      -- AND [BIH].[Bih_code_old] = @Bih_code_old		 

		     AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END

	-- Aseguradora       (NO)
	-- Paciente	         (NO)
	-- Número de cheque  (NO)
	-- Claim             (NO)
	-- Número de factura (SI)

	IF (    @Ins_code     =  0 
	    AND @Pat_code     =  0 
		AND @Pah_number   =  '' 
		AND @Cis_caseCode =  '' 
		AND @Bih_code_old <> '')
	BEGIN
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE -- [CIS].[Ins_code]        = @Ins_code
		  -- AND [CIS].[Pat_code]     = @Pat_code
		  -- AND [PAH].[Pah_number]   = @Pah_number
		  -- AND [CIS].[Cis_caseCode] = @Cis_caseCode
			     [BIH].[Bih_code_old] = @Bih_code_old		 

		     AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END
	
	-- ********************************************************************************************

	-- COMBINACIONES DE 2 (10 combinaciones)

	-- Aseguradora       (SI)
	-- Paciente	         (SI)
	-- Número de cheque  (NO)
	-- Claim             (NO)
	-- Número de factura (NO)

	IF (    @Ins_code     <>  0 
	    AND @Pat_code     <>  0 
		AND @Pah_number   =  '' 
		AND @Cis_caseCode =  '' 
		AND @Bih_code_old = '')
	BEGIN
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE    [CIS].[Ins_code]        = @Ins_code
		     AND [CIS].[Pat_code]     = @Pat_code
	      -- AND [PAH].[Pah_number]   = @Pah_number
		  -- AND [CIS].[Cis_caseCode] = @Cis_caseCode
		  -- AND [BIH].[Bih_code_old] = @Bih_code_old		 

		     AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END

	-- Aseguradora       (SI)
	-- Paciente	         (NO)
	-- Número de cheque  (SI)
	-- Claim             (NO)
	-- Número de factura (NO)

	IF (    @Ins_code     <>  0 
	    AND @Pat_code     =   0 
		AND @Pah_number   <> '' 
		AND @Cis_caseCode =  '' 
		AND @Bih_code_old = '')
	BEGIN
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE    [CIS].[Ins_code]        = @Ins_code
		  -- AND [CIS].[Pat_code]     = @Pat_code
			 AND [PAH].[Pah_number]   = @Pah_number
		  -- AND [CIS].[Cis_caseCode] = @Cis_caseCode
		  -- AND [BIH].[Bih_code_old] = @Bih_code_old		 

		     AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END

	-- Aseguradora       (SI)
	-- Paciente	         (NO)
	-- Número de cheque  (NO)
	-- Claim             (SI)
	-- Número de factura (NO)

	IF (    @Ins_code     <> 0 
	    AND @Pat_code     =  0 
		AND @Pah_number   =  '' 
		AND @Cis_caseCode <> '' 
		AND @Bih_code_old =  '')
	BEGIN
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE    [CIS].[Ins_code]        = @Ins_code
		  -- AND [CIS].[Pat_code]     = @Pat_code
		  -- AND [PAH].[Pah_number]   = @Pah_number
		     AND [CIS].[Cis_caseCode] = @Cis_caseCode
		  -- AND [BIH].[Bih_code_old] = @Bih_code_old		 

		     AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END

	-- Aseguradora       (SI)
	-- Paciente	         (NO)
	-- Número de cheque  (NO)
	-- Claim             (NO)
	-- Número de factura (SI)

	IF (    @Ins_code     <> 0 
	    AND @Pat_code     =  0 
		AND @Pah_number   =  '' 
		AND @Cis_caseCode =  '' 
		AND @Bih_code_old <> '')
	BEGIN
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE    [CIS].[Ins_code]        = @Ins_code
		  -- AND [CIS].[Pat_code]     = @Pat_code
		  -- AND [PAH].[Pah_number]   = @Pah_number
		  -- AND [CIS].[Cis_caseCode] = @Cis_caseCode
			 AND [BIH].[Bih_code_old] = @Bih_code_old		 

		     AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END

	-- Aseguradora       (NO)
	-- Paciente	         (SI)
	-- Número de cheque  (SI)
	-- Claim             (NO)
	-- Número de factura (NO)

	IF (    @Ins_code     =  0 
	    AND @Pat_code     <> 0 
		AND @Pah_number   <> '' 
		AND @Cis_caseCode =  '' 
		AND @Bih_code_old = '')
	BEGIN
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE -- [CIS].[Ins_code]        = @Ins_code
		         [CIS].[Pat_code]     = @Pat_code
			 AND [PAH].[Pah_number]   = @Pah_number
		  -- AND [CIS].[Cis_caseCode] = @Cis_caseCode
		  -- AND [BIH].[Bih_code_old] = @Bih_code_old		 

		     AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END

	-- Aseguradora       (NO)
	-- Paciente	         (SI)
	-- Número de cheque  (NO)
	-- Claim             (SI)
	-- Número de factura (NO)

	IF (    @Ins_code     =  0 
	    AND @Pat_code     <> 0 
		AND @Pah_number   =  '' 
		AND @Cis_caseCode <> '' 
		AND @Bih_code_old =  '')
	BEGIN
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE -- [CIS].[Ins_code]        = @Ins_code
		         [CIS].[Pat_code]     = @Pat_code
		  -- AND [PAH].[Pah_number]   = @Pah_number
		     AND [CIS].[Cis_caseCode] = @Cis_caseCode
          -- AND [BIH].[Bih_code_old] = @Bih_code_old		 

		     AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END

	-- Aseguradora       (NO)
	-- Paciente	         (SI)
	-- Número de cheque  (NO)
	-- Claim             (NO)
	-- Número de factura (SI)

	IF (    @Ins_code     =  0 
	    AND @Pat_code     <> 0 
		AND @Pah_number   =  '' 
		AND @Cis_caseCode =  '' 
		AND @Bih_code_old <>  '')
	BEGIN
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE -- [CIS].[Ins_code]        = @Ins_code
		         [CIS].[Pat_code]     = @Pat_code
		  -- AND [PAH].[Pah_number]   = @Pah_number
		  -- AND [CIS].[Cis_caseCode] = @Cis_caseCode
			 AND [BIH].[Bih_code_old] = @Bih_code_old		 

		     AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END

	-- Aseguradora       (NO)
	-- Paciente	         (NO)
	-- Número de cheque  (SI)
	-- Claim             (SI)
	-- Número de factura (NO)

	IF (    @Ins_code     =  0 
	    AND @Pat_code     =  0 
		AND @Pah_number   <> '' 
		AND @Cis_caseCode <> '' 
		AND @Bih_code_old =  '')
	BEGIN
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE -- [CIS].[Ins_code]        = @Ins_code
		  -- AND [CIS].[Pat_code]     = @Pat_code
			     [PAH].[Pah_number]   = @Pah_number
		     AND [CIS].[Cis_caseCode] = @Cis_caseCode
		  -- AND [BIH].[Bih_code_old] = @Bih_code_old		 

		     AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END

	-- Aseguradora       (NO)
	-- Paciente	         (NO)
	-- Número de cheque  (SI)
	-- Claim             (NO)
	-- Número de factura (SI)

	IF (    @Ins_code     =  0 
	    AND @Pat_code     =  0 
		AND @Pah_number   <> '' 
		AND @Cis_caseCode = '' 
		AND @Bih_code_old <>  '')
	BEGIN
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE -- [CIS].[Ins_code]        = @Ins_code
		  -- AND [CIS].[Pat_code]     = @Pat_code
			     [PAH].[Pah_number]   = @Pah_number
		  -- AND [CIS].[Cis_caseCode] = @Cis_caseCode
			 AND [BIH].[Bih_code_old] = @Bih_code_old		 

		     AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END

	-- Aseguradora       (NO)
	-- Paciente	         (NO)
	-- Número de cheque  (NO)
	-- Claim             (SI)
	-- Número de factura (SI)

	IF (    @Ins_code     =  0 
	    AND @Pat_code     =  0 
		AND @Pah_number   =  '' 
		AND @Cis_caseCode <> '' 
		AND @Bih_code_old <> '')
	BEGIN
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE -- [CIS].[Ins_code]        = @Ins_code
		  -- AND [CIS].[Pat_code]     = @Pat_code
		  -- AND [PAH].[Pah_number]   = @Pah_number
		         [CIS].[Cis_caseCode] = @Cis_caseCode
			 AND [BIH].[Bih_code_old] = @Bih_code_old		 

		     AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END	
	
	-- ********************************************************************************************
	
	-- COMBINACIONES DE 3 (10 combinaciones)

	-- Aseguradora       (SI)
	-- Paciente	         (SI)
	-- Número de cheque  (SI)
	-- Claim             (NO)
	-- Número de factura (NO)

	IF (    @Ins_code     <> 0 
	    AND @Pat_code     <> 0 
		AND @Pah_number   <> '' 
		AND @Cis_caseCode =  '' 
		AND @Bih_code_old =  '')
	BEGIN
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE    [CIS].[Ins_code]        = @Ins_code
		     AND [CIS].[Pat_code]     = @Pat_code
			 AND [PAH].[Pah_number]   = @Pah_number
		  -- AND [CIS].[Cis_caseCode] = @Cis_caseCode
	      -- AND [BIH].[Bih_code_old] = @Bih_code_old		 

		     AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END	

	-- Aseguradora       (SI)
	-- Paciente	         (SI)
	-- Número de cheque  (NO)
	-- Claim             (SI)
	-- Número de factura (NO)

	IF (    @Ins_code     <> 0 
	    AND @Pat_code     <> 0 
		AND @Pah_number   = '' 
		AND @Cis_caseCode <>  '' 
		AND @Bih_code_old =  '')
	BEGIN
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE    [CIS].[Ins_code]        = @Ins_code
		     AND [CIS].[Pat_code]     = @Pat_code
	      -- AND [PAH].[Pah_number]   = @Pah_number
		     AND [CIS].[Cis_caseCode] = @Cis_caseCode
		  -- AND [BIH].[Bih_code_old] = @Bih_code_old		 

		     AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END	

	-- Aseguradora       (SI)
	-- Paciente	         (SI)
	-- Número de cheque  (NO)
	-- Claim             (NO)
	-- Número de factura (SI)

	IF (    @Ins_code     <> 0 
	    AND @Pat_code     <> 0 
		AND @Pah_number   =  '' 
		AND @Cis_caseCode =  '' 
		AND @Bih_code_old <> '')
	BEGIN
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE    [CIS].[Ins_code]        = @Ins_code
		     AND [CIS].[Pat_code]     = @Pat_code
		  -- AND [PAH].[Pah_number]   = @Pah_number
		  -- AND [CIS].[Cis_caseCode] = @Cis_caseCode
			 AND [BIH].[Bih_code_old] = @Bih_code_old		 

		     AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END	

	-- Aseguradora       (NO)
	-- Paciente	         (SI)
	-- Número de cheque  (SI)
	-- Claim             (SI)
	-- Número de factura (NO)

	IF (    @Ins_code     =  0 
	    AND @Pat_code     <> 0 
		AND @Pah_number   <> '' 
		AND @Cis_caseCode <> '' 
		AND @Bih_code_old =  '')
	BEGIN
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE -- [CIS].[Ins_code]        = @Ins_code
		         [CIS].[Pat_code]     = @Pat_code
			 AND [PAH].[Pah_number]   = @Pah_number
		     AND [CIS].[Cis_caseCode] = @Cis_caseCode
	      -- AND [BIH].[Bih_code_old] = @Bih_code_old		 

		     AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END	

	-- Aseguradora       (NO)
	-- Paciente	         (SI)
	-- Número de cheque  (SI)
	-- Claim             (NO)
	-- Número de factura (SI)

	IF (    @Ins_code     =  0 
	    AND @Pat_code     <> 0 
		AND @Pah_number   <> '' 
		AND @Cis_caseCode =  '' 
		AND @Bih_code_old <> '')
	BEGIN
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE -- [CIS].[Ins_code]        = @Ins_code
		         [CIS].[Pat_code]     = @Pat_code
			 AND [PAH].[Pah_number]   = @Pah_number
		  -- AND [CIS].[Cis_caseCode] = @Cis_caseCode
			 AND [BIH].[Bih_code_old] = @Bih_code_old		 

		     AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END	

	-- Aseguradora       (SI)
	-- Paciente	         (NO)
	-- Número de cheque  (NO)
	-- Claim             (SI)
	-- Número de factura (SI)

	IF (    @Ins_code     <> 0 
	    AND @Pat_code     =  0 
		AND @Pah_number   =  '' 
		AND @Cis_caseCode <> '' 
		AND @Bih_code_old <> '')
	BEGIN
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE    [CIS].[Ins_code]        = @Ins_code
		  -- AND [CIS].[Pat_code]     = @Pat_code
	      -- AND [PAH].[Pah_number]   = @Pah_number
		     AND [CIS].[Cis_caseCode] = @Cis_caseCode
			 AND [BIH].[Bih_code_old] = @Bih_code_old		 

		     AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END	

	-- Aseguradora       (SI)
	-- Paciente	         (NO)
	-- Número de cheque  (SI)
	-- Claim             (SI)
	-- Número de factura (NO)

	IF (    @Ins_code     <> 0 
	    AND @Pat_code     =  0 
		AND @Pah_number   <> '' 
		AND @Cis_caseCode <> '' 
		AND @Bih_code_old =  '')
	BEGIN
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE    [CIS].[Ins_code]        = @Ins_code
		  -- AND [CIS].[Pat_code]     = @Pat_code
			 AND [PAH].[Pah_number]   = @Pah_number
		     AND [CIS].[Cis_caseCode] = @Cis_caseCode
	      -- AND [BIH].[Bih_code_old] = @Bih_code_old		 

		     AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END	

	-- Aseguradora       (NO)
	-- Paciente	         (NO)
	-- Número de cheque  (SI)
	-- Claim             (SI)
	-- Número de factura (SI)

	IF (    @Ins_code     = 0 
	    AND @Pat_code     =  0 
		AND @Pah_number   <> '' 
		AND @Cis_caseCode <> '' 
		AND @Bih_code_old <>  '')
	BEGIN
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE -- [CIS].[Ins_code]        = @Ins_code
		  -- AND [CIS].[Pat_code]     = @Pat_code
			     [PAH].[Pah_number]   = @Pah_number
		     AND [CIS].[Cis_caseCode] = @Cis_caseCode
			 AND [BIH].[Bih_code_old] = @Bih_code_old		 

		     AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END	

	-- Aseguradora       (SI)
	-- Paciente	         (NO)
	-- Número de cheque  (SI)
	-- Claim             (NO)
	-- Número de factura (SI)

	IF (    @Ins_code     <> 0 
	    AND @Pat_code     =  0 
		AND @Pah_number   <> '' 
		AND @Cis_caseCode = '' 
		AND @Bih_code_old <>  '')
	BEGIN
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE    [CIS].[Ins_code]        = @Ins_code
		  -- AND [CIS].[Pat_code]     = @Pat_code
			 AND [PAH].[Pah_number]   = @Pah_number
		  -- AND [CIS].[Cis_caseCode] = @Cis_caseCode
			 AND [BIH].[Bih_code_old] = @Bih_code_old		 

		     AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END	

	-- Aseguradora       (NO)
	-- Paciente	         (SI)
	-- Número de cheque  (NO)
	-- Claim             (SI)
	-- Número de factura (SI)

	IF (    @Ins_code     = 0 
	    AND @Pat_code     <>  0 
		AND @Pah_number   = '' 
		AND @Cis_caseCode <> '' 
		AND @Bih_code_old <>  '')
	BEGIN
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE -- [CIS].[Ins_code]        = @Ins_code
		         [CIS].[Pat_code]     = @Pat_code
		  -- AND [PAH].[Pah_number]   = @Pah_number
		     AND [CIS].[Cis_caseCode] = @Cis_caseCode
			 AND [BIH].[Bih_code_old] = @Bih_code_old		 

		     AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END	

	-- ********************************************************************************************

	-- COMBINACIONES DE 4 (5 combinaciones)

	-- Aseguradora       (SI)
	-- Paciente	         (SI)
	-- Número de cheque  (SI)
	-- Claim             (SI)
	-- Número de factura (NO)

	IF (    @Ins_code     <> 0 
	    AND @Pat_code     <> 0 
	    AND @Pah_number   <> '' 
	    AND @Cis_caseCode <> '' 
	    AND @Bih_code_old =  '')		
	BEGIN		
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE    [CIS].[Ins_code]     = @Ins_code
		     AND [CIS].[Pat_code]     = @Pat_code
			 AND [PAH].[Pah_number]   = @Pah_number
		     AND [CIS].[Cis_caseCode] = @Cis_caseCode
		  -- AND [BIH].[Bih_code_old] = @Bih_code_old		 

			 AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END	

    -- Aseguradora       (SI)
	-- Paciente	         (SI)
	-- Número de cheque  (SI)
	-- Claim             (NO)
	-- Número de factura (SI)

	IF (    @Ins_code     <> 0 
	    AND @Pat_code     <> 0 
	    AND @Pah_number   <> '' 
	    AND @Cis_caseCode = '' 
	    AND @Bih_code_old <>  '')		
	BEGIN		
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE    [CIS].[Ins_code]     = @Ins_code
		     AND [CIS].[Pat_code]     = @Pat_code
			 AND [PAH].[Pah_number]   = @Pah_number
		  -- AND [CIS].[Cis_caseCode] = @Cis_caseCode
			 AND [BIH].[Bih_code_old] = @Bih_code_old		 

			 AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END	

    -- Aseguradora       (SI)
	-- Paciente	         (NO)
	-- Número de cheque  (SI)
	-- Claim             (SI)
	-- Número de factura (SI)

	IF (    @Ins_code     <> 0 
	    AND @Pat_code     = 0 
	    AND @Pah_number   <> '' 
	    AND @Cis_caseCode <> '' 
	    AND @Bih_code_old <>  '')		
	BEGIN		
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE    [CIS].[Ins_code]     = @Ins_code
		  -- AND [CIS].[Pat_code]     = @Pat_code
			 AND [PAH].[Pah_number]   = @Pah_number
		     AND [CIS].[Cis_caseCode] = @Cis_caseCode
			 AND [BIH].[Bih_code_old] = @Bih_code_old

			 AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END	

    -- Aseguradora       (NO)
	-- Paciente	         (SI)
	-- Número de cheque  (SI)
	-- Claim             (SI)
	-- Número de factura (SI)

	IF (    @Ins_code     =  0 
	    AND @Pat_code     <> 0 
	    AND @Pah_number   <> '' 
	    AND @Cis_caseCode <> '' 
	    AND @Bih_code_old <> '')		
	BEGIN		
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE -- [CIS].[Ins_code]     = @Ins_code
		         [CIS].[Pat_code]     = @Pat_code
			 AND [PAH].[Pah_number]   = @Pah_number
		     AND [CIS].[Cis_caseCode] = @Cis_caseCode
			 AND [BIH].[Bih_code_old] = @Bih_code_old

			 AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END	

    -- Aseguradora       (SI)
	-- Paciente	         (SI)
	-- Número de cheque  (NO)
	-- Claim             (SI)
	-- Número de factura (SI)

	IF (    @Ins_code     <> 0 
	    AND @Pat_code     <> 0 
	    AND @Pah_number   = '' 
	    AND @Cis_caseCode <> '' 
	    AND @Bih_code_old <>  '')		
	BEGIN		
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE    [CIS].[Ins_code]     = @Ins_code
		     AND [CIS].[Pat_code]     = @Pat_code
		  -- AND [PAH].[Pah_number]   = @Pah_number
		     AND [CIS].[Cis_caseCode] = @Cis_caseCode
			 AND [BIH].[Bih_code_old] = @Bih_code_old

			 AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END	

	-- ********************************************************************************************
	
	-- COMBINACIONES DE 5 (1 combinaciones)

    -- Aseguradora       (SI)
	-- Paciente	         (SI)
	-- Número de cheque  (SI)
	-- Claim             (SI)
	-- Número de factura (SI)

	IF (    @Ins_code     <> 0 
	    AND @Pat_code     <> 0 
	    AND @Pah_number   <> '' 
	    AND @Cis_caseCode <> '' 
	    AND @Bih_code_old <> '')		
	BEGIN		
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE    [CIS].[Ins_code]     = @Ins_code
		     AND [CIS].[Pat_code]     = @Pat_code
			 AND [PAH].[Pah_number]   = @Pah_number
		     AND [CIS].[Cis_caseCode] = @Cis_caseCode
			 AND [BIH].[Bih_code_old] = @Bih_code_old
		     
			 AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount]
  			    ,[PAH].[Pah_payDate]	
	END	

	-- ********************************************************************************************
	/*
	-- COMBINACIONES CON CHEQUE EN BLANCO.

    -- Aseguradora       (NO)
	-- Paciente	         (NO)
	-- Número de cheque  (Cheque en blanco)
	-- Claim             (NO)
	-- Número de factura (NO)

	IF (    @Ins_code     = 0 
	    AND @Pat_code     = 0 
	    AND @Pah_number   = '' 
	    AND @Cis_caseCode = '' 
	    AND @Bih_code_old = '')		
	BEGIN		
		SELECT   [PAH].[Pah_code]                           AS [PayCode]
			    ,[PAH].[Pah_number]                         AS [CheckNumber]
			    ,[PTY].[Pty_description]                    AS [PayType]
			    ,[PAH].[Pah_amount]                         AS [PayAmount]
			    ,CONVERT(VARCHAR, [PAH].[Pah_payDate], 101) AS [PayDate]				
		FROM     [CaseInformationSheetHead] AS [CIS]
			    ,[BillingHead]              AS [BIH]
			    ,[PayBody]                  AS [PAB]
			    ,[PayHead]                  AS [PAH]
			    ,[PayType]                  AS [PTY]								
		WHERE   --  [CIS].[Ins_code]     = @Ins_code
		     -- AND [CIS].[Pat_code]     = @Pat_code
			  [PAH].[Pah_number]  is   null			     
		     -- AND [CIS].[Cis_caseCode] = @Cis_caseCode
			 -- AND [BIH].[Bih_code_old] = @Bih_code_old		     
			 ------------  SP_LIST_PAYMENTS_BY_FILTERS
			 AND [CIS].[cis_code] = [BIH].[Cis_code]
		     AND [BIH].[Bih_code] = [PAB].[Bih_code]
		     AND [PAB].[Pah_code] = [PAH].[Pah_code]
		     AND [PAH].[Pty_code] = [PTY].[Pty_code]		
	    GROUP BY [PAH].[Pah_code]
  			    ,[PAH].[Pah_number]
  			    ,[PTY].[Pty_description]
  			    ,[PAH].[Pah_amount] 
  			    ,[PAH].[Pah_payDate]	
	END	
	*/
END
GO


 

/*
       (select Bih_code 
	    from BillingHead 
	    where Cis_code in (select Cis_code 
						    from CaseInformationSheetHead 
							where Ins_code = 7))
							*/
-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_DETAILT_PAYMENT','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_DETAILT_PAYMENT
GO
CREATE PROCEDURE SP_LIST_DETAILT_PAYMENT
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Gabriel Gil 
-- creation date	:	2/23/2017.
-- System			:	Billing.
-- Program			:	Payment.
-- Description		:	Get the detail of a payment by the payment code.
-- Change Log		:
--=============================================
(
	@Pah_code INT = 11118
)
AS
BEGIN
	SET NOCOUNT ON

	-- UPDATE Insurer
	-- SET    Ins_availability = 1
	-- WHERE  Ins_code = @Ins_code

	SELECT [BIH].[Bih_code]
	      ,[BIH].[Bih_code_old]
	      ,[BIH].[Cis_code]
		  ,[CIS].[Cis_caseCode]
		  ,UPPER([INS].[Ins_name]) AS Insurer
		  ,UPPER([PAT].Pat_firstName) + ' ' + UPPER([PAT].Pat_lastName) AS Patient		  
		  ,CONVERT(CHAR(10), [CIS].[Cis_accidentDate], 101) AS AccidentDate
		  ,CONVERT(CHAR(10), [BIH].[Bih_closingDate], 101) AS ClosingDate
		  ,[BIH].[Bih_billTotal] AS Total 
		  -- ,([BIH].[Bih_billTotal] - [BIH].Bih_billPay) AS Balance		  
		  ,pab.Pab_amount
		  
		  -- ,CASE
			 --	WHEN ([BIH].[Bih_billTotal] > ([BIH].[Bih_billTotal] - [BIH].Bih_billPay)) THEN 'PP' -- Parcialmente pagado.
			 --	ELSE 'NP' -- No pagado
		  --  END AS PaidLevel
	FROM  [PayBody]				     AS [PAB]
		 ,[BillingHead]				 AS [BIH]
		 ,[CaseInformationSheetHead] AS [CIS]
		 ,[Patient]  			     AS [PAT]
		 ,[Insurer]				     AS [INS]
	WHERE 
	      [CIS].[Pat_code]         =  [PAT].[Pat_code]
	  AND [CIS].[Ins_code]         =  [INS].[Ins_code]
	  AND [CIS].[Cis_code]         =  [BIH].[Cis_code]	  
	  AND [BIH].[Bih_code]         =  [PAB].[Bih_code]	  
	  AND [PAB].[Pah_code]         =  @Pah_code

	  -- AND [BIH].[Bih_billPay]      <> [BIH].[Bih_billTotal]
	  -- AND [BIH].[Bih_payStatus]    =  0 
	  AND [BIH].[Bih_deleteStatus] <> 'D'
	ORDER BY [PAT].[Pat_lastName]
		    ,[PAT].[Pat_firstName]
			,CONVERT(SMALLDATETIME, [BIH].[Bih_closingDate]) ASC 
			,[INS].[Ins_name]	
END
GO

-- *******************************************************************************************************
-- PROCEDIMIENTOS ALMACENADOS PARA REPORTES
-- *******************************************************************************************************

IF (OBJECT_ID('SP_REPORT_SEARCH_DATAENTRY_PATIENT','P') IS NOT NULL)
	DROP PROCEDURE SP_REPORT_SEARCH_DATAENTRY_PATIENT
GO
CREATE PROCEDURE [dbo].[SP_REPORT_SEARCH_DATAENTRY_PATIENT]
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Brenher Farroñan.
-- creation date	:	12/01/2016.
-- System			:	Billing.
-- Program			:	Reports.
-- Description		:	.
-- Change Log		:
--=============================================
(
	@patient VARCHAR(100) = 'roman'
)
AS
BEGIN
	SELECT	CIS.Cis_code
		   ,PAT.Pat_firstName
		   ,PAT.Pat_lastName
		   ,CONVERT(VARCHAR, DECRYPTBYKEY(PAT.Pat_socialSecurityNumber)) AS Pat_socialSecurityNumber
		   ,CONVERT(VARCHAR(10), CIS.Cis_accidentDate, 101)			    AS Cis_accidentDate
		   
		   ,CASE CIS.[Cis_status] 
				WHEN 1 THEN 'OPEN'
				WHEN 0 THEN 'CLOSED'
			END AS [Status]
			,(SELECT TOP 1 CONVERT(VARCHAR(10),Bih_closingDate,101) AS FechaUltimoCierre FROM BillingHead  WHERE Cis_code =CIS.Cis_code  AND Bih_deleteStatus <> 'D' ORDER BY Bih_closingDate DESC) as closingDate
	FROM Patient				  AS PAT
			INNER JOIN
		 CaseInformationSheetHead AS CIS
			ON PAT.Pat_code = CIS.Pat_code 
			INNER JOIN 
		 DataEntry	  AS DAE
			ON CIS.Cis_code = DAE.Cis_code 
			INNER JOIN	
		 BillingHead   AS BIH ON CIS.Cis_code = BIH.Cis_code 
	WHERE PAT.Pat_lastName LIKE @patient + '%' 
	  AND ISNULL(DAE.Dae_closedDate, '') <> ''
	  AND ISNULL(DAE.Dae_comment, '') <> ''
	GROUP BY CIS.Cis_code
			,PAT.Pat_firstName
			,PAT.Pat_lastName
			,PAT.Pat_socialSecurityNumber
			,CIS.Cis_accidentDate,
			CIS.[Cis_status]
	ORDER BY Pat_lastName ASC
		    ,CONVERT(VARCHAR(10), CIS.Cis_accidentDate, 101) ASC
END

go

-- *******************************************************************************************************

IF (OBJECT_ID('SP_REPORT_VIEW_DATAENTRY_PATIENT','P') IS NOT NULL)
	DROP PROCEDURE SP_REPORT_VIEW_DATAENTRY_PATIENT
GO
CREATE PROCEDURE SP_REPORT_VIEW_DATAENTRY_PATIENT
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Brenher Farroñan.
-- creation date	:	12/01/2016.
-- System			:	Billing.
-- Program			:	Reports.
-- Description		:	.
-- Change Log		:
--=============================================
(
	@Cis_code INT = 1778,
	@Bih_code INT = 0
)
AS
BEGIN
	--DECLARE @Bih_code INT
	DECLARE @closing  SMALLDATETIME

	if (@Bih_code = 0 ) 
	begin 
	       SET @Bih_code = (SELECT TOP 1 Bih_code 
					 FROM         BillingHead 
					 WHERE        Cis_code = @Cis_code 
					 ORDER BY CONVERT(SMALLDATETIME, Bih_closingDate) DESC)
	end 
	else 
	begin 
	    SET @Bih_code = (SELECT  Bih_code  FROM  BillingHead  WHERE Bih_code = @Bih_code )
	end 
	
	--SELECT  *  FROM    BillingHead  where cis_code = 1780


	SET @closing = (SELECT Bih_closingDate 
					FROM   BillingHead 
					WHERE  Bih_code = @Bih_code)

	SELECT DAE.Dae_code
		  ,PAT.Pat_firstName + ' ' + PAT.Pat_lastName AS Patient
		  ,CONVERT(VARCHAR, DECRYPTBYKEY(PAT.Pat_socialSecurityNumber)) AS Pat_socialSecurityNumber
		  ,CIS.Cis_accidentDate
		  -- ,Bih_code
		  ,CONVERT(VARCHAR(10), CONVERT(SMALLDATETIME, DAE.Dae_closedDate), 101) AS Dae_closedDate 
		  ,CONVERT(VARCHAR(10), CONVERT(SMALLDATETIME, DAE.Dae_date), 101) AS Dae_date
		  ,DAE.Dae_comment
	--FROM            DataEntry d,  CaseInformationSheetHead c, Patient p, BillingBody bb, BillingHead bh
	FROM	DataEntry AS DAE
				INNER JOIN 
			CaseInformationSheetHead AS CIS
				ON CIS.Cis_code = DAE.Cis_code
				INNER JOIN 
			Patient AS PAT
				ON PAT.Pat_code = CIS.Pat_code
				INNER JOIN 
			BillingHead AS BIH
				ON CIS.Cis_code = BIH.Cis_code
	WHERE DAE.Cis_code = @Cis_code 
	  AND BIH.Bih_code = @Bih_code 
	  AND ISNULL(Dae_comment, '') <> '' 
	  AND CONVERT(SMALLDATETIME, DAE.Dae_closedDate) = @closing 
	  AND DAE.Dae_deletingStatus = 0 
	  AND DAE.Dae_facturable = 1 
	  AND DAE.Dae_closedDate IS NOT NULL
	GROUP BY DAE.Dae_code
			,PAT.Pat_firstName
			,PAT.Pat_lastName
			,PAT.Pat_socialSecurityNumber
			,CIS.Cis_accidentDate
			,DAE.Dae_closedDate
			,DAE.Dae_date
			,DAE.Dae_comment
	ORDER BY CONVERT(SMALLDATETIME, DAE.Dae_date)
		    ,DAE.Dae_code
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_FIND_ADJ_REPORTS','P') IS NOT NULL)
	DROP PROCEDURE SP_FIND_ADJ_REPORTS
GO
CREATE PROCEDURE SP_FIND_ADJ_REPORTS
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Brenher Farroñan.
-- creation date	:	12/01/2016.
-- System			:	Billing.
-- Program			:	Reports.
-- Description		:	.
-- Change Log		:
--=============================================
(
	@name VARCHAR(100) = 'a'
)
AS
BEGIN
	SELECT ADJ.Adj_code
		  ,ADJ.Adj_firstName + ' ' + ADJ.Adj_lastName AS Adjuster
		  ,ADJ.Adj_firstName
		  ,ADJ.Adj_lastName
		  ,ADJ.Adj_address
		  ,ADJ.Adj_city
		  ,ADJ.Adj_state
		  ,ADJ.Adj_zipCode
		  ,ADJ.Adj_phone
		  ,ADJ.Adj_fax
		  ,ADJ.Adj_phoneExt
	FROM  Adjuster AS ADJ
			INNER JOIN
		  CaseInformationSheetHead AS CIS
			ON ADJ.Adj_code     =    CIS.Adj_code 
		   AND ADJ.Adj_lastName LIKE @name + '%'
	GROUP BY ADJ.Adj_code
			,ADJ.Adj_firstName + ' ' + ADJ.Adj_lastName
			,ADJ.Adj_firstName
			,ADJ.Adj_lastName
			,ADJ.Adj_address
			,ADJ.Adj_city
			,ADJ.Adj_state
			,ADJ.Adj_zipCode
			,ADJ.Adj_phone
			,ADJ.Adj_fax
			,ADJ.Adj_phoneExt
	ORDER BY ADJ.Adj_lastName
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('DATA_ENTRY_PER_USER','P') IS NOT NULL)
	DROP PROCEDURE DATA_ENTRY_PER_USER
GO
CREATE PROCEDURE DATA_ENTRY_PER_USER
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Brenher Farroñan.
-- creation date	:	12/01/2016.
-- System			:	Billing.
-- Program			:	Reports.
-- Description		:	.
-- Change Log		:
--=============================================
(
	@date1 SMALLDATETIME = '2016-11-15'
   ,@date2 SMALLDATETIME = '2016-11-18'
   ,@user  INT = 32
   ,@filtro INT = 0
)
AS
BEGIN
	SELECT DAE.Dae_code
			  ,DAE.Dae_date
			  ,ACT.Act_description
			  ,PAT.Pat_firstName+ ' ' + PAT.Pat_lastName AS 'Patient'
			  ,COUNT(DAE.Dae_code) AS Total
			  ,[USE].Use_firstName + ' ' + [USE].Use_lastName  AS 'UserN'
			  ,DAE.Dae_hourAct
			  ,case
				when (@filtro = 0) then (LEFT(DAE.Dae_comment,50) + '...')
				else DAE.Dae_comment
			  end as 'Comentary'
			  -- ,LEFT(DAE.Dae_comment,50) + '...' AS Comentary
			  -- 
			  -- ,DAE.Dae_comment AS Comentary

			  ,DAE.Dae_registerDate
	FROM  DataEntry AS DAE
			INNER JOIN
			[User] AS [USE]
			ON DAE.Use_code = [USE].Use_code 
			INNER JOIN
			CaseInformationSheetHead AS CIS
			ON DAE.Cis_code = CIS.Cis_code 
			INNER JOIN
			Patient AS PAT
			ON CIS.Pat_code = PAT.Pat_code 
			INNER JOIN
			Activity AS ACT
			ON DAE.Act_code = ACT.Act_code
	WHERE CONVERT(SMALLDATETIME, CONVERT(VARCHAR(10), DAE.Dae_registerDate,101)) >= @date1 
		AND CONVERT(SMALLDATETIME, CONVERT(VARCHAR(10), DAE.Dae_registerDate,101)) <= @date2 
		AND DAE.Use_code = @user
		and Dae_facturable = 1 and dae.Dae_deletingStatus = 0
	GROUP BY DAE.Dae_code
			,DAE.Dae_date
			,ACT.Act_description
			,PAT.Pat_firstName+ ' ' + PAT.Pat_lastName 
			,[USE].Use_firstName + ' ' + [USE].Use_lastName 
			,DAE.Dae_hourAct
			,DAE.Dae_comment
			,DAE.Dae_registerDate
	ORDER BY userN,PAT.Pat_firstName+ ' ' + PAT.Pat_lastName asc,DAE.Dae_date desc
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_LIST_COUNT_DATA_ENTRY_PER_USER','P') IS NOT NULL)
	DROP PROCEDURE SP_LIST_COUNT_DATA_ENTRY_PER_USER
GO
CREATE PROCEDURE SP_LIST_COUNT_DATA_ENTRY_PER_USER
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Brenher Farroñan.
-- creation date	:	12/23/2016.
-- System			:	Billing.
-- Program			:	Reports.
-- Description		:	List the count of entrie by user.
-- Change Log		:
--=============================================
(
	@date1 CHAR(10) = '2016-11-15'
   ,@date2 CHAR(10) = '2016-11-18'
)
AS
BEGIN
	SELECT COUNT([Dae_code]) AS [Total]
		  ,[DAE].[Use_code]
	FROM [DataEntry] AS [DAE]
	    ,[User]      AS [USR]
	WHERE [DAE].[Use_code] = [USR].[Use_code]
	  AND [DAE].[Dae_registerDate] >= CONVERT(SMALLDATETIME, @date1, 101)
	  AND [DAE].[Dae_registerDate] <= DATEADD(day, 1, cast(CONVERT(SMALLDATETIME, @date1, 101) as date)) --CONVERT(SMALLDATETIME, @date2, 101)
	  AND Dae_facturable = 1
	GROUP BY [DAE].[Use_code]
	ORDER BY [Total] DESC
END
go
-- *******************************************************************************************************

IF (OBJECT_ID('SP_CASE_INFORMATION_FOR_CLOSING_DATE','P') IS NOT NULL)
	DROP PROCEDURE SP_CASE_INFORMATION_FOR_CLOSING_DATE
GO
CREATE PROCEDURE SP_CASE_INFORMATION_FOR_CLOSING_DATE
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Brenher Farroñan.
-- creation date	:	12/01/2016.
-- System			:	Billing.
-- Program			:	Reports.
-- Description		:	.
-- Change Log		:
--=============================================
(
	@closing_date VARCHAR(10) = '2016-07-15'
)
AS
BEGIN
	SELECT INS.Ins_name
		  ,ADJ.Adj_firstName + ' ' + ADJ.Adj_lastName      AS ADJUSTER
		  ,PAT.Pat_firstName + ' ' + PAT.Pat_lastName	   AS Patient
		  ,CONVERT(varchar(10), CIS.Cis_accidentDate, 101) AS accident_date
		  ,CIS.Cis_code
		  ,CIS.Cis_status
	FROM   CaseInformationSheetHead AS CIS
				INNER JOIN
		   Patient AS PAT
				ON CIS.Pat_code = PAT.Pat_code 
				INNER JOIN
		   Insurer AS INS
				ON CIS.Ins_code = INS.Ins_code 
				INNER JOIN
		   Adjuster AS ADJ
				ON CIS.Adj_code = ADJ.Adj_code 
				INNER JOIN
		   DataEntry AS DAE
				ON CIS.Cis_code = DAE.Cis_code
	WHERE ISNULL(Dae_closedDate, '') <> '' 
      AND LEN(DAE.Dae_closedDate) >= 8 
	  AND CIS.Ins_code <>  27
	  AND CONVERT(VARCHAR(10), CONVERT(SMALLDATETIME, DAE.Dae_closedDate), 101) = CONVERT(VARCHAR(10), CONVERT(SMALLDATETIME, @closing_date), 101) 
	GROUP BY INS.Ins_name
		    ,ADJ.Adj_firstName
			,ADJ.Adj_lastName
			,PAT.Pat_firstName
			,PAT.Pat_lastName
			,CIS.Cis_accidentDate
			,CIS.Cis_code
			,CIS.Cis_status
	ORDER BY INS.Ins_name
			,ADJ.Adj_lastName
			,PAT.Pat_lastName
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_CASE_INFORMATION_FOR_CLOSING_DATE2','P') IS NOT NULL)
	DROP PROCEDURE SP_CASE_INFORMATION_FOR_CLOSING_DATE2
GO
CREATE PROCEDURE SP_CASE_INFORMATION_FOR_CLOSING_DATE2
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Brenher Farroñan.
-- creation date	:	12/01/2016.
-- System			:	Billing.
-- Program			:	Reports.
-- Description		:	.
-- Change Log		:
--=============================================
(
	@closing_date  VARCHAR(10) = '2016-07-15'
   ,@closing_date2 VARCHAR(10) = '2016-07-18'
)
AS
BEGIN
	SELECT iNS.Ins_name
		  ,ADJ.Adj_firstName + ' ' + ADJ.Adj_lastName AS ADJUSTER
		  ,PAT.Pat_firstName + ' ' + PAT.Pat_lastName AS Patient
		  ,CONVERT(VARCHAR(10), CIS.Cis_accidentDate, 101) AS accident_date
		  ,CIS.Cis_code
		  ,CIS.Cis_status
		  ,DAE.Dae_closedDate
	FROM   CaseInformationSheetHead AS CIS
				INNER JOIN
		   Patient AS PAT
				ON CIS.Pat_code = PAT.Pat_code 
				INNER JOIN
			Insurer AS INS
				ON CIS.Ins_code = iNS.Ins_code 
				INNER JOIN
			Adjuster ADJ
				ON CIS.Adj_code = ADJ.Adj_code 
				INNER JOIN
			DataEntry AS DAE
				ON CIS.Cis_code = DAE.Cis_code
	WHERE ISNULL(Dae_closedDate, '') <> '' 
	  AND LEN(DAE.Dae_closedDate) >= 8 
	  AND CAST(DAE.Dae_closedDate AS DATE) BETWEEN CAST(@closing_date AS DATE) 
	  AND CAST(@closing_date2 AS DATE)
	  AND CIS.Ins_code =  27
	GROUP BY INS.Ins_name
		    ,ADJ.Adj_firstName
			,ADJ.Adj_lastName
			,PAT.Pat_firstName
			,PAT.Pat_lastName
			,CIS.Cis_accidentDate
			,CIS.Cis_code
			,CIS.Cis_status
			,DAE.Dae_closedDate
	ORDER BY INS.Ins_name
		    ,ADJ.Adj_lastName
			,PAT.Pat_lastName
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_CASE_BY_INSURER','P') IS NOT NULL)
	DROP PROCEDURE SP_CASE_BY_INSURER
GO
CREATE PROCEDURE SP_CASE_BY_INSURER
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Brenher Farroñan.
-- creation date	:	12/01/2016.
-- System			:	Billing.
-- Program			:	Reports.
-- Description		:	.
-- Change Log		:
--=============================================
(
	@Ins_code INT = 26
)
AS
BEGIN
	SELECT CIS.Cis_code
		  ,CONVERT(CHAR(10), CIS.Cis_referralDate, 101) AS Cis_referralDate 
		  ,PAT.Pat_lastName as Patient_lastName
		  ,PAT.Pat_firstName + ' ' + PAT.Pat_lastName AS patient
		  ,INS.Ins_name
		  ,ADJ.Adj_firstName + ' ' + ADJ.Adj_lastName AS Adjuster
		  ,CONVERT(varCHAR(10), CIS.Cis_accidentDate, 101) AS Cis_accidentDate
		  ,[use].Use_firstName + ' ' + [USE].Use_lastName AS Supervisor
		  ,CONVERT(varCHAR(10), CIS.Cis_closedDate, 101) Cis_closedDate
		  ,PRO.Pro_firstName + ' ' + PRO.Pro_lastName AS Provider
		  ,CIS.Cis_caseCode
	FROM CaseInformationSheetHead AS CIS 
			INNER JOIN
		 Patient AS PAT 
			ON CIS.Pat_code = PAT.Pat_code 
			INNER JOIN
		 Insurer AS INS  
			ON CIS.Ins_code = INS.Ins_code 
			INNER JOIN
		 Adjuster AS ADJ 
			ON CIS.Adj_code = ADJ.Adj_code 
			INNER JOIN
		 Provider AS PRO 
			ON CIS.Pro_code = PRO.Pro_code 
			INNER JOIN
	     [User] AS [USE] 
			ON CIS.Use_Code = [USE].Use_code
	WHERE CIS.Cis_status = 1 
	  AND CIS.Ins_code = @Ins_code
	
	UNION

	SELECT CIS.Cis_code
		  ,CONVERT(CHAR(10), CIS.Cis_referralDate, 101) AS Cis_referralDate
		  ,PAT.Pat_lastName as Patient_lastName
		  ,PAT.Pat_firstName + ' ' + PAT.Pat_lastName AS patient
		  ,INS.Ins_name
		  ,ADJ.Adj_firstName + ' ' + ADJ.Adj_lastName AS dajuster
		  ,CONVERT(varCHAR(10), CIS.Cis_accidentDate, 101) AS Cis_accidentDate
		  ,[USE].Use_firstName + ' ' + [USE].Use_lastName AS supervisor
		  ,CONVERT(varCHAR(10), CIS.Cis_closedDate, 101) Cis_closedDate
		  ,PRO.Pro_firstName + ' ' + PRO.Pro_lastName AS provider
		  ,CIS.Cis_caseCode
	FROM CaseInformationSheetHead AS CIS 
			INNER JOIN
		 Patient PAT 
			ON CIS.Pat_code = PAT.Pat_code 
			INNER JOIN
	     Insurer AS INS 
			ON CIS.Ins_code = INS.Ins_code 
			INNER JOIN
		 Adjuster AS ADJ 
			ON CIS.Adj_code = ADJ.Adj_code 
			INNER JOIN
		 Provider AS PRO 
			ON CIS.Pro_code = PRO.Pro_code 
			INNER JOIN
		 [User] AS [USE]
			ON CIS.Use_Code = [USE].[Use_code]
	WHERE CIS.Cis_status     = 0 
	  AND CIS.Ins_code       = @Ins_code
	  AND CIS.Cis_closedDate IS NOT NULL 
	  AND CONVERT(SMALLDATETIME, CONVERT(VARCHAR(10), CIS.Cis_closedDate, 101), 101)
	  BETWEEN CONVERT(SMALLDATETIME, CONVERT(VARCHAR(10), DATEADD(mm, -3, GETDATE()), 101), 101)
	  AND CONVERT(SMALLDATETIME,CONVERT(VARCHAR(10),GETDATE(),101),101)
	ORDER BY Patient_lastName
	        ,Cis_referralDate	
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('PA_NEW_REFERRAL_BYSUPERVISOR','P') IS NOT NULL)
	DROP PROCEDURE PA_NEW_REFERRAL_BYSUPERVISOR
GO
CREATE PROCEDURE PA_NEW_REFERRAL_BYSUPERVISOR
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Brenher Farroñan.
-- creation date	:	12/01/2016.
-- System			:	Billing.
-- Program			:	Reports.
-- Description		:	.
-- Change Log		:
--=============================================
(
	@supervisor_user INT = 26
   ,@days            INT = 30
)
AS
BEGIN
	SET @days = @days * -1
	
	SELECT CIS.Cis_code
	      ,CONVERT(CHAR(10), CIS.Cis_referralDate, 101) AS Cis_referralDate
		  ,PAT.Pat_firstName + ' ' +  PAT.Pat_lastName AS patient
		  ,INS.Ins_name
		  ,ADJ.Adj_firstName + ' ' + ADJ.Adj_lastName AS adjuster
		  ,CONVERT(CHAR(10), CIS.Cis_accidentDate, 101) AS Cis_accidentDate
		  ,CIS.Cis_Injury
	FROM   CaseInformationSheetHead AS CIS
				INNER JOIN
		   Patient AS PAT
				ON CIS.Pat_code = PAT.Pat_code 
				INNER JOIN
		   Insurer AS INS
				ON CIS.Ins_code = INS.Ins_code 
				INNER JOIN
		   Adjuster AS ADJ
				ON CIS.Adj_code = ADJ.Adj_code
	WHERE  CIS.Cis_caseSupervisor = @supervisor_user 
	   AND CONVERT(CHAR(10), CIS.Cis_referralDate) 
	   BETWEEN CONVERT(SMALLDATETIME, (DATEADD(DAY, @days, GETDATE()))) 
	   AND CONVERT(SMALLDATETIME, GETDATE())
	ORDER BY CONVERT(CHAR(10), CIS.Cis_referralDate) DESC
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('PA_MONTHLY_BILLING_BY_INSURER','P') IS NOT NULL)
	DROP PROCEDURE PA_MONTHLY_BILLING_BY_INSURER
GO
CREATE PROCEDURE PA_MONTHLY_BILLING_BY_INSURER
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Brenher Farroñan.
-- creation date	:	12/01/2016.
-- System			:	Billing.
-- Program			:	Reports.
-- Description		:	.
-- Change Log		:
--=============================================
(
	@Ins_code INT
   ,@date_in  VARCHAR(10)
   ,@date_out VARCHAR(10)
)
AS
BEGIN
	SELECT PAT.Pat_lastName + ', ' + PAT.Pat_firstName AS Paciente
		  ,CIS.Cis_caseCode
		  ,CONVERT(VARCHAR(10), BIH.Bih_closingDate, 101) cierre
		  ,BIH.Bih_billTotal
		  ,BIH.Bih_billPay
		  ,CONVERT(VARCHAR(10), BIH.Bih_closingDate, 101) + '/ $' + CAST(BIH.Bih_billTotal AS VARCHAR(10)) AS [Description]
	FROM  BillingHead AS BIH
				INNER JOIN
		  CaseInformationSheetHead AS CIS
				ON BIH.Cis_code = CIS.Cis_code 
				INNER JOIN
	      Patient AS PAT
				ON CIS.Pat_code = PAT.Pat_code
	WHERE CONVERT(SMALLDATETIME, BIH.Bih_closingDate, 101) 
	      BETWEEN CONVERT(SMALLDATETIME, @date_in, 101) 
		  AND CONVERT(SMALLDATETIME, @date_out, 101) 
		  AND Ins_code = @Ins_code	
	ORDER BY pat.Pat_lastName + ', ' + pat.Pat_firstName
	        ,CONVERT(SMALLDATETIME, BIH.Bih_closingDate, 101)
END
GO


-- *******************************************************************************************************

IF (OBJECT_ID('SP_REPORTS_VIEW_CASES_FOR_ADJUSTER','P') IS NOT NULL)
	DROP PROCEDURE SP_REPORTS_VIEW_CASES_FOR_ADJUSTER
GO
CREATE PROCEDURE SP_REPORTS_VIEW_CASES_FOR_ADJUSTER
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Brenher Farroñan.
-- creation date	:	12/13/2016.
-- System			:	Billing.
-- Program			:	Reports.
-- Description		:	.
-- Change Log		:
--=============================================
(
	@Adj_code INT = 2
)
AS
BEGIN
	SELECT [PAT].[Pat_firstName] + ' ' + [PAT].[Pat_lastName] AS [Patient]
		  ,CONVERT(CHAR(10), [CIS].[Cis_accidentDate], 101) AS [AccidentDate]
		  ,[PAT].[Pat_socialSecurityNumberD]
		  ,[CIS].[Cis_caseCode]
		  ,[CIS].[Cis_status]
		  ,[INS].[Ins_name]
	FROM [CaseInformationSheetHead] AS [CIS]
		,[Patient] AS [PAT]
		,[Insurer] AS [INS]
	WHERE [CIS].[Pat_code] = [PAT].[Pat_code]
	  AND [CIS].[Ins_code] = [INS].[Ins_code]
	  AND [CIS].[Adj_code] = @Adj_code
	ORDER BY [CIS].[Cis_status]   desc
		    --,[PAT].[Pat_lastName]	
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_REPORT_OPEN_CASES_BY_INSURER','P') IS NOT NULL)
	DROP PROCEDURE SP_REPORT_OPEN_CASES_BY_INSURER
GO
CREATE PROCEDURE SP_REPORT_OPEN_CASES_BY_INSURER
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Brenher Farroñan.
-- creation date	:	12/13/2016.
-- System			:	Billing.
-- Program			:	Reports.
-- Description		:	.
-- Change Log		:
--=============================================
(
	@Ins_code INT
)
AS
BEGIN
	SELECT [CIS].[Cis_code]
		  ,CONVERT(CHAR(10), [CIS].[Cis_referralDate], 101)    AS ReferalDate
		  ,[PAT].[Pat_firstName] + ' ' + [PAT].[Pat_lastName]  AS Patient 
		  ,[INS].[Ins_name] 								   
		  ,[ADJ].Adj_firstName + ' ' + [ADJ].[Adj_lastName]  AS [Adjuster]
		  ,CONVERT(VARCHAR(10), [CIS].[Cis_accidentDate], 101) AS [AccidentDate]
	FROM [CaseInformationSheetHead] AS [CIS]
		,[Patient]  AS [PAT]
		,[Insurer]  AS [INS]
		,[Adjuster] AS [ADJ]
	WHERE [CIS].[Pat_code]   = [PAT].[Pat_code] 
	  AND [CIS].[Ins_code]   = [INS].[Ins_code] 
	  AND [CIS].[Adj_code]   = [ADJ].[Adj_code] 
	  AND [CIS].[Cis_status] = 1
	  AND [CIS].[Ins_code]   = @Ins_code
	ORDER BY [PAT].[Pat_lastName]
	        ,[PAT].[Pat_firstName] 
			,CONVERT(SMALLDATETIME, [CIS].[Cis_referralDate]) DESC
END
GO

-- *******************************************************************************************************
-- Procedimientos de Brenher para reportes

IF (OBJECT_ID('SP_OPEN_CASES_BY_REFERRAL_DATE','P') IS NOT NULL)
	DROP PROCEDURE SP_OPEN_CASES_BY_REFERRAL_DATE
GO
CREATE PROCEDURE SP_OPEN_CASES_BY_REFERRAL_DATE
AS
BEGIN
SELECT        c.Cis_code, convert(char(10),c.Cis_referralDate,101) as Cis_referralDate , p.Pat_firstName + ' ' + p.Pat_lastName as patient, i.Ins_name, 
              a.Adj_firstName + ' ' + a.Adj_lastName as adjuster, convert(varchar(10),c.Cis_accidentDate,101) as Cis_accidentDate, 
			  case convert(varchar(2),isnull(c.Cis_acuity,0),101) when '0' then '-' else convert(varchar(2),isnull(c.Cis_acuity,0),101) end as acuity  
			  
FROM            CaseInformationSheetHead c INNER JOIN
                         Patient p ON c.Pat_code = p.Pat_code INNER JOIN
                         Insurer i ON c.Ins_code = i.Ins_code INNER JOIN
                         Adjuster a ON c.Adj_code = a.Adj_code

WHERE		c.Cis_status = 1
ORDER BY p.Pat_lastName , p.Pat_firstName ,convert(smalldatetime,Cis_referralDate) desc
END
GO

--////////////////////////////////////// PHYSICAL_THERAPY_REPORTS

IF (OBJECT_ID('SP_PHYSICAL_THERAPY_REPORTS','P') IS NOT NULL)
	DROP PROCEDURE SP_PHYSICAL_THERAPY_REPORTS
GO
CREATE PROCEDURE SP_PHYSICAL_THERAPY_REPORTS
AS
BEGIN
	SELECT        c.Cis_code, convert(char(10),c.Cis_referralDate,101) as Cis_referralDate,
				  p.Pat_firstName + ' ' +  p.Pat_lastName patient, i.Ins_name, 
							 a.Adj_firstName + ' ' + a.Adj_lastName as adjuster, 
							 convert(varchar(10),c.Cis_accidentDate,101) as Cis_accidentDate, 
							 c.Cis_physicalTherapyCompany
	FROM            CaseInformationSheetHead c INNER JOIN
							 Patient p ON c.Pat_code = p.Pat_code INNER JOIN
							 Insurer i ON c.Ins_code = i.Ins_code INNER JOIN
							 Adjuster a ON c.Adj_code = a.Adj_code
	WHERE		  c.Cis_physicalTherapy = 1 

	ORDER BY Pat_lastName, Pat_firstName
END
GO

--////////////////////////////////////// ReportTranslation

IF (OBJECT_ID('SP_REPORT_TRANSLATION','P') IS NOT NULL)
	DROP PROCEDURE SP_REPORT_TRANSLATION
GO
CREATE PROCEDURE SP_REPORT_TRANSLATION
AS
BEGIN
SELECT        c.Cis_code, convert(char(10),c.Cis_referralDate,101) as Cis_referralDate,
			  p.Pat_firstName + ' ' +  p.Pat_lastName AS patient, i.Ins_name, 
                         a.Adj_firstName + ' ' + a.Adj_lastName as adjuster, 
						 convert(varchar(10),c.Cis_accidentDate,101) as Cis_accidentDate, 
						 c.Cis_translationCompany
FROM            CaseInformationSheetHead c INNER JOIN
                         Patient p ON c.Pat_code = p.Pat_code INNER JOIN
                         Insurer i ON c.Ins_code = i.Ins_code INNER JOIN
                         Adjuster a ON c.Adj_code = a.Adj_code
WHERE		  c.Cis_translation = 1 

ORDER BY Pat_lastName, Pat_firstName
END
GO

--////////////////////////////////////// ReportTransportation

IF (OBJECT_ID('SP_REPORT_TRANSPORTATION','P') IS NOT NULL)
	DROP PROCEDURE SP_REPORT_TRANSPORTATION
GO
CREATE PROCEDURE SP_REPORT_TRANSPORTATION
AS
BEGIN
SELECT        c.Cis_code, convert(char(10),c.Cis_referralDate,101) as Cis_referralDate,
			  p.Pat_firstName + ' ' +  p.Pat_lastName AS patient, i.Ins_name, 
                         a.Adj_firstName + ' ' + a.Adj_lastName as adjuster, 
						 convert(varchar(10),c.Cis_accidentDate,101) as Cis_accidentDate, 
						 c.Cis_transportationCompany
FROM            CaseInformationSheetHead c INNER JOIN
                         Patient p ON c.Pat_code = p.Pat_code INNER JOIN
                         Insurer i ON c.Ins_code = i.Ins_code INNER JOIN
                         Adjuster a ON c.Adj_code = a.Adj_code
WHERE		  c.Cis_transportation = 1 

ORDER BY Pat_lastName, Pat_firstName
END
GO

--////////////////////////////////////// ReportOpenCaseBySupervisor

IF (OBJECT_ID('SP_REPORT_OPEN_CASE_BY_SUPERVISOR','P') IS NOT NULL)
	DROP PROCEDURE SP_REPORT_OPEN_CASE_BY_SUPERVISOR
GO
CREATE PROCEDURE SP_REPORT_OPEN_CASE_BY_SUPERVISOR
(
	@supervisor int
)
AS
BEGIN
--declare @supervisor int = 26
SELECT        c.Cis_code, convert(char(10),c.Cis_referralDate,101) as Cis_referralDate,
			  p.Pat_firstName + ' ' +  p.Pat_lastName AS patient, i.Ins_name, 
                         a.Adj_firstName + ' ' + a.Adj_lastName as adjuster, 
						 convert(varchar(10),c.Cis_accidentDate,101) as Cis_accidentDate
FROM            CaseInformationSheetHead c INNER JOIN
                         Patient p ON c.Pat_code = p.Pat_code INNER JOIN
                         Insurer i ON c.Ins_code = i.Ins_code INNER JOIN
                         Adjuster a ON c.Adj_code = a.Adj_code
WHERE		  c.Cis_status = 1 and c.Cis_caseSupervisor = @supervisor

ORDER BY Pat_lastName, Pat_firstName, convert(smalldatetime,Cis_referralDate) desc
END
GO

--////////////////////////////////////// REPORT List of Presumption Case

IF (OBJECT_ID('SP_REPORT_LIST_OF_PRESUMPTIOM_CASE','P') IS NOT NULL)
	DROP PROCEDURE SP_REPORT_LIST_OF_PRESUMPTIOM_CASE
GO
CREATE PROCEDURE SP_REPORT_LIST_OF_PRESUMPTIOM_CASE
AS
BEGIN

SELECT        c.Cis_code, convert(char(10),c.Cis_referralDate,101) as Cis_referralDate , p.Pat_firstName + ' ' + p.Pat_lastName as patient, i.Ins_name, 
              a.Adj_firstName + ' ' + a.Adj_lastName as adjuster, convert(varchar(10),c.Cis_accidentDate,101) as Cis_accidentDate, 
			  case convert(varchar(2),isnull(c.Cis_acuity,0),101) when '0' then '-' else convert(varchar(2),isnull(c.Cis_acuity,0),101) end as acuity  
			  
FROM          CaseInformationSheetHead c INNER JOIN
                         Patient p ON c.Pat_code = p.Pat_code INNER JOIN
                         Insurer i ON c.Ins_code = i.Ins_code INNER JOIN
                         Adjuster a ON c.Adj_code = a.Adj_code

WHERE		c.Cis_status = 1 AND C.Cis_presumption = 1
ORDER BY p.Pat_lastName , p.Pat_firstName ,convert(smalldatetime,Cis_referralDate) desc
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('SP_REPORT_CASES_WITH_NO_ACTIVITY','P') IS NOT NULL)
	DROP PROCEDURE SP_REPORT_CASES_WITH_NO_ACTIVITY
GO
CREATE PROCEDURE SP_REPORT_CASES_WITH_NO_ACTIVITY 
--=============================================
-- Company			:	ITUsaServices.
-- Author			:	Brenher Farroñan.
-- creation date	:	5/26/2017.
-- System			:	Billing.
-- Program			:	Reports.
-- Description		:	.
-- Change Log		:
--=============================================
AS
BEGIN	 
	SELECT -- [CIS].[Cis_code]                                   AS [CaseCode]
		  [PAT].[Pat_firstName] + ' ' + [PAT].[Pat_lastName] AS [Patient]		  
		  ,CASE 
			WHEN DATEDIFF(dd, [CIS].[Cis_referralDate], SYSDATETIME()) <= 30 THEN 'YES'
			ELSE 'NO'
		   END AS [NewReferal]
		  ,[CIS].[Cis_accidentDate]							  AS [AccidentDate]
		  ,[INS].[Ins_name]									  AS [Insurer]
		  ,[CIS].[Cis_referralDate]							  AS [ReferralDate]	  	  
		  /*
		  ,(SELECT TOP 1 [DAE].[Dae_date]
			FROM	     [DataEntry] AS [DAE]
			WHERE        [DAE].[Cis_code]           = [CIS].[Cis_code]
			  AND        [DAE].[Dae_deletingStatus] = 0
			  AND        [DAE].[Dae_facturable]	    = 1
			  AND        [DAE].[Dae_closedDate]     IS NULL
			ORDER BY     [DAE].[Dae_date] DESC)				  AS [LastEntryDate]				
			*/
		  ,(SELECT DATEDIFF(dd, MAX([DAE].[Dae_date]), SYSDATETIME())
			FROM	     [DataEntry] AS [DAE]
			WHERE        [DAE].[Cis_code]           = [CIS].[Cis_code]
			  AND        [DAE].[Dae_deletingStatus] = 0
			  AND        [DAE].[Dae_facturable]	    = 1
			  AND        [DAE].[Dae_closedDate]     IS NULL)  AS [DaysSinceLastEntry]
		  ,(SELECT [Use_firstName] + ' ' + [Use_lastName]
			FROM   [User]
			WHERE  [Use_code] = [CIS].[Cis_caseSupervisor])	  AS [Supervisor]

	FROM   [CaseInformationSheetHead] AS [CIS]
		  ,[Patient]				  AS [PAT]
		  ,[Insurer]				  AS [INS]		  
	WHERE  [CIS].[Pat_code]   = [PAT].[Pat_code]
	   AND [CIS].[Ins_code]   = [INS].[Ins_code]	   
	   AND [CIS].[Cis_status] = 1				-- Valida sólo casos activos.
	   AND ((SELECT COUNT(*) 
		     FROM DataEntry AS [DAE]
			 WHERE [Cis_code] = [CIS].[Cis_code]
		    	                       AND [DAE].[Dae_closedDate]     IS NULL	-- Valida que las entradas aún no tengan fecha de cierre.
                                       AND [DAE].[Dae_parameterDate]  IS NULL	-- Valida que las entradas aún no tengan fecha de parámetro.
                                       AND [DAE].[Dae_deletingStatus] = 0		-- Valida que las entradas no hayan sido eliminadas.
                                       AND [DAE].[Dae_facturable]     = 1		-- Valida que las entradas sean facturables.
                                       AND [DAE].[Dae_invoiceStatus]  = 0) > 0)	-- Valida que la factura no haya sido cerrada (que esté abierta).
order by [PAT].[Pat_lastName] asc  
END
GO

-- *******************************************************************************************************
-- PROCEDIMIENTOS ALMACENADOS DEL SISTEMA
-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_RegisterSchemaVersion','P') IS NOT NULL)
	DROP PROCEDURE aspnet_RegisterSchemaVersion
GO
CREATE PROCEDURE aspnet_RegisterSchemaVersion
(
    @Feature                   nvarchar(128),
    @CompatibleSchemaVersion   nvarchar(128),
    @IsCurrentVersion          bit,
    @RemoveIncompatibleSchema  bit
)
AS
BEGIN
    IF( @RemoveIncompatibleSchema = 1 )
    BEGIN
        DELETE FROM aspnet_SchemaVersions WHERE Feature = LOWER( @Feature )
    END
    ELSE
    BEGIN
        IF( @IsCurrentVersion = 1 )
        BEGIN
            UPDATE aspnet_SchemaVersions
            SET IsCurrentVersion = 0
            WHERE Feature = LOWER( @Feature )
        END
    END

    INSERT  aspnet_SchemaVersions( Feature, CompatibleSchemaVersion, IsCurrentVersion )
    VALUES( LOWER( @Feature ), @CompatibleSchemaVersion, @IsCurrentVersion )
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_CheckSchemaVersion','P') IS NOT NULL)
    DROP PROCEDURE aspnet_CheckSchemaVersion
GO
CREATE PROCEDURE aspnet_CheckSchemaVersion
    @Feature                   nvarchar(128),
    @CompatibleSchemaVersion   nvarchar(128)
AS
BEGIN
    IF (EXISTS( SELECT  *
                FROM    aspnet_SchemaVersions
                WHERE   Feature = LOWER( @Feature ) AND
                        CompatibleSchemaVersion = @CompatibleSchemaVersion ))
        RETURN 0

    RETURN 1
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Applications_CreateApplication','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Applications_CreateApplication
GO
CREATE PROCEDURE aspnet_Applications_CreateApplication
    @ApplicationName      nvarchar(256),
    @ApplicationId        uniqueidentifier OUTPUT
AS
BEGIN
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName

    IF(@ApplicationId IS NULL)
    BEGIN
        DECLARE @TranStarted   bit
        SET @TranStarted = 0

        IF( @@TRANCOUNT = 0 )
        BEGIN
	        BEGIN TRANSACTION
	        SET @TranStarted = 1
        END
 
       ELSE
    	    SET @TranStarted = 0

        SELECT  @ApplicationId = ApplicationId
        FROM aspnet_Applications WITH (UPDLOCK, HOLDLOCK)
        WHERE LOWER(@ApplicationName) = LoweredApplicationName

        IF(@ApplicationId IS NULL)
    
    BEGIN
            SELECT  @ApplicationId = NEWID()
            INSERT  aspnet_Applications (ApplicationId, ApplicationName, LoweredApplicationName)
            VALUES  (@ApplicationId, @ApplicationName, LOWER(@ApplicationName))
        END


     
   IF( @TranStarted = 1 )
        BEGIN
            IF(@@ERROR = 0)
            BEGIN
	        SET @TranStarted = 0
	        COMMIT TRANSACTION
            END
            ELSE
            BEGIN
                SET @TranStarted = 0
                ROLLBACK TRANSACTION
            END
        END
    END
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_UnRegisterSchemaVersion','P') IS NOT NULL)
    DROP PROCEDURE aspnet_UnRegisterSchemaVersion
GO
CREATE PROCEDURE aspnet_UnRegisterSchemaVersion
    @Feature                   nvarchar(128),
    @CompatibleSchemaVersion   nvarchar(128)
AS
BEGIN
    DELETE FROM aspnet_SchemaVersions
        WHERE   Feature = LOWER(@Feature) AND @CompatibleSchemaVersion = CompatibleSchemaVersion
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Users_CreateUser','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Users_CreateUser
GO
CREATE PROCEDURE aspnet_Users_CreateUser
    @ApplicationId    uniqueidentifier,
    @UserName         nvarchar(256),
    @IsUserAnonymous  bit,
    @LastActivityDate DATETIME,
    @UserId           uniqueidentifier OUTPUT
AS
BEGIN
    IF( @UserId IS NULL )
        SELECT @UserId = NEWID()
    ELSE
    BEGIN
        IF( EXISTS( SELECT UserId FROM aspnet_Users
                    WHERE @UserId = UserId ) )
            RETURN -1
    END

    INSERT aspnet_Users (ApplicationId, UserId, UserName, LoweredUserName, IsAnonymous, LastActivityDate)
    VALUES (@ApplicationId, @UserId, @UserName, LOWER(@UserName), @IsUserAnonymous, @LastActivityDate)

    RETURN 0
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Users_DeleteUser','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Users_DeleteUser
GO
CREATE PROCEDURE aspnet_Users_DeleteUser
    @ApplicationName  nvarchar(256),
    @UserName         nvarchar(256),
    @TablesToDeleteFrom int,
    @NumTablesDeletedFrom int OUTPUT
AS
BEGIN
    DECLARE @UserId               uniqueidentifier
    SELECT  @UserId               = NULL
    SELECT  @NumTablesDeletedFrom = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
	SET @TranStarted = 0

 
   DECLARE @ErrorCode   int
    DECLARE @RowCount    int

    SET @ErrorCode = 0
    SET @RowCount  = 0

    SELECT  @UserId = u.UserId
    FROM    aspnet_Users u, aspnet_Applications a
    WHERE   u.LoweredUserName       = LOWER(@UserName)
      
  AND u.ApplicationId         = a.ApplicationId
        AND LOWER(@ApplicationName) = a.LoweredApplicationName

    IF (@UserId IS NULL)
    BEGIN
        GOTO Cleanup
    END

    -- Delete from Membership table if (@TablesToDeleteFrom & 1) is set
    IF ((@TablesToDeleteFrom & 1) <> 0 AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_MembershipUsers') AND (type = 'V'))))
    BEGIN
        DELETE FROM aspnet_Membership WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
               @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_UsersInRoles table if (@TablesToDeleteFrom & 2) is set
    IF ((@TablesToDeleteFrom & 2) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_UsersInRoles') AND (type = 'V'))) )
    BEGIN
        DELETE FROM aspnet_UsersInRoles WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_Profile table if (@TablesToDeleteFrom & 4) is set
    IF ((@TablesToDeleteFrom & 4) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_Profiles') AND (type = 'V'))) )
    BEGIN
        DELETE FROM aspnet_Profile WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_PersonalizationPerUser table if (@TablesToDeleteFrom & 8) is set
    IF ((@TablesToDeleteFrom & 8) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_WebPartState_User') AND (type = 'V'))) )
    BEGIN
        DELETE FROM aspnet_PersonalizationPerUser WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_Users table if (@TablesToDeleteFrom & 1,2,4 & 8) are all set
    IF ((@TablesToDeleteFrom & 1) <> 0 AND
        (@TablesToDeleteFrom & 2) <> 0 AND

        (@TablesToDeleteFrom & 4) <> 0 AND
        (@TablesToDeleteFrom & 8) <> 0 AND
        (EXISTS (SELECT UserId FROM aspnet_Users WHERE @UserId = UserId)))
    BEGIN
        DELETE FROM aspnet_Users WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    IF( @TranStarted = 1 )
    BEGIN
	    SET @TranStarted = 0
	    COMMIT TRANSACTION
    END

    RETURN 0

Cleanup:
    SET @NumTablesDeletedFrom = 0

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
	    ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_AnyDataInTables','P') IS NOT NULL)
    DROP PROCEDURE aspnet_AnyDataInTables
GO
CREATE PROCEDURE aspnet_AnyDataInTables
    @TablesToCheck int
AS
BEGIN
    -- Check Membership table if (@TablesToCheck & 1) is set
    IF ((@TablesToCheck & 1) <> 0 AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_MembershipUsers') AND (type = 'V'))))
    BEGIN
        IF (EXISTS(SELECT TOP 1 UserId FROM aspnet_Membership))
        BEGIN
            SELECT N'aspnet_Membership'
            RETURN
        END
    END

    -- Check aspnet_Roles table if (@TablesToCheck & 2) is set
    IF ((@TablesToCheck & 2) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_Roles') AND (type = 'V'))) )
    BEGIN
        IF (EXISTS(SELECT TOP 1 RoleId FROM aspnet_Roles))
        BEGIN
            SELECT N'aspnet_Roles'
            RETURN
        END
    END

    -- Check aspnet_Profile table if (@TablesToCheck & 4) is set
    IF ((@TablesToCheck & 4) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_Profiles') AND (type = 'V'))) )
    BEGIN
        IF (EXISTS(SELECT TOP 1 UserId FROM aspnet_Profile))
        BEGIN
            SELECT N'aspnet_Profile'
            RETURN
        END
    END

    -- Check aspnet_PersonalizationPerUser table if (@TablesToCheck & 8) is set

    IF ((@TablesToCheck & 8) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_WebPartState_User') AND (type = 'V'))) )
    BEGIN
        IF (EXISTS(SELECT TOP 1 UserId FROM aspnet_PersonalizationPerUser))
        BEGIN

            SELECT N'aspnet_PersonalizationPerUser'
            RETURN
        END
    END

    -- Check aspnet_PersonalizationPerUser table if (@TablesToCheck & 16) is set
    IF ((@TablesToCheck & 16) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'aspnet_WebEvent_LogEvent') AND (type = 'P'))) )
    BEGIN
        IF (EXISTS(SELECT TOP 1 * FROM aspnet_WebEvent_Events))
        BEGIN
            SELECT N'aspnet_WebEvent_Events'
            RETURN
        END
    END

    -- Check aspnet_Users table if (@TablesToCheck & 1,2,4 & 8) are all set
    IF ((@TablesToCheck & 1) <> 0 AND
        (@TablesToCheck & 2) <> 0 AND
        (@TablesToCheck & 4) <> 0 AND
        (@TablesToCheck & 8) <> 0 AND
        (@TablesToCheck & 32) <> 0 AND

        (@TablesToCheck & 128) <> 0 AND
        (@TablesToCheck & 256) <> 0 AND
        (@TablesToCheck & 512) <> 0 AND
        (@TablesToCheck & 1024) <> 0)
    BEGIN
        IF (EXISTS(SELECT TOP 1 UserId FROM aspnet_Users))
        BEGIN
         
   SELECT N'aspnet_Users'
            RETURN
        END
        IF (EXISTS(SELECT TOP 1 ApplicationId FROM aspnet_Applications))
        BEGIN
            SELECT N'aspnet_Applications'
            RETURN
        END
    END
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Membership_CreateUser','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Membership_CreateUser
GO
CREATE PROCEDURE aspnet_Membership_CreateUser
    @ApplicationName                        nvarchar(256),
    @UserName                               nvarchar(256),
    @Password                               nvarchar(128),
    @PasswordSalt           
                nvarchar(128),
    @Email                                  nvarchar(256),
    @PasswordQuestion                       nvarchar(256),
    @PasswordAnswer                         nvarchar(128),
    @IsApproved                             bit,
    @CurrentTimeUtc                         datetime,
    @CreateDate                             datetime = NULL,
    @UniqueEmail                            int      = 0,
    @PasswordFormat                         int      = 0,
    @UserId           
                      uniqueidentifier OUTPUT
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL

    DECLARE @NewUserId uniqueidentifier
    SELECT @NewUserId = NULL

    DECLARE @IsLockedOut bit
    SET @IsLockedOut = 0

    DECLARE @LastLockoutDate  datetime
    SET @LastLockoutDate = CONVERT( datetime, '17540101', 112 )

    DECLARE @FailedPasswordAttemptCount int
    SET @FailedPasswordAttemptCount = 0

    DECLARE @FailedPasswordAttemptWindowStart  datetime
    SET @FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 )

    DECLARE @FailedPasswordAnswerAttemptCount int
    SET @FailedPasswordAnswerAttemptCount = 0

    DECLARE @FailedPasswordAnswerAttemptWindowStart  datetime
    SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )

    DECLARE @NewUserCreated bit
    DECLARE @ReturnValue   int
    SET @ReturnValue = 0

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    EXEC aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    SET @CreateDate = @CurrentTimeUtc

    SELECT  @NewUserId = UserId FROM aspnet_Users WHERE LOWER(@UserName) = LoweredUserName AND @ApplicationId = ApplicationId
    IF ( @NewUserId IS NULL )
    BEGIN
        SET @NewUserId = @UserId
        EXEC @ReturnValue = aspnet_Users_CreateUser @ApplicationId, @UserName, 0, @CreateDate, @NewUserId OUTPUT
        SET @NewUserCreated = 1
    END
    ELSE
    BEGIN
        SET @NewUserCreated = 0
        IF( @NewUserId <> @UserId AND @UserId IS NOT NULL )
        BEGIN
            SET @ErrorCode = 6
            GOTO Cleanup
        END
    END

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

  
  IF( @ReturnValue = -1 )
    BEGIN
        SET @ErrorCode = 10
        GOTO Cleanup
    END

    IF ( EXISTS ( SELECT UserId
                  FROM   aspnet_Membership
                  WHERE  @NewUserId = UserId ) )
    BEGIN
        SET @ErrorCode = 6
        GOTO Cleanup
    END

    SET @UserId = @NewUserId

    IF (@UniqueEmail = 1)
    BEGIN
        IF (EXISTS (SELECT *
                    FROM  aspnet_Membership m WITH ( UPDLOCK, HOLDLOCK )
                    WHERE ApplicationId = @ApplicationId AND LoweredEmail = LOWER(@Email)))
        BEGIN
            SET @ErrorCode = 7
            GOTO Cleanup
        END
    END

    IF (@NewUserCreated = 0)
    BEGIN
        UPDATE aspnet_Users
        SET    LastActivityDate = @CreateDate
    
    WHERE  @UserId = UserId
        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END
    END

    INSERT INTO aspnet_Membership
                ( ApplicationId,
                  UserId,
           
       Password,
                  PasswordSalt,
                  Email,
                  LoweredEmail,
                  PasswordQuestion,
                  PasswordAnswer,
                  PasswordFormat,
                  IsApproved,
               
   IsLockedOut,
                  CreateDate,
                  LastLoginDate,
                  LastPasswordChangedDate,
                  LastLockoutDate,
                  FailedPasswordAttemptCount,
                  FailedPasswordAttemptWindowStart,

                  FailedPasswordAnswerAttemptCount,
                  FailedPasswordAnswerAttemptWindowStart )
         VALUES ( @ApplicationId,
                  @UserId,
                  @Password,
                  @PasswordSalt,
                  @Email,
                  LOWER(@Email),
                  @PasswordQuestion,
                  @PasswordAnswer,
                  @PasswordFormat,
                  @IsApproved,
                  @IsLockedOut,
                  @CreateDate,
                
  @CreateDate,
                  @CreateDate,
                  @LastLockoutDate,
                  @FailedPasswordAttemptCount,
                  @FailedPasswordAttemptWindowStart,
                  @FailedPasswordAnswerAttemptCount,
                  @FailedPasswordAnswerAttemptWindowStart )

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
	    SET @TranStarted = 0
	    COMMIT TRANSACTION
    END

    RETURN 0

Cleanup:

   
 IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Membership_GetUserByName','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Membership_GetUserByName
GO
CREATE PROCEDURE aspnet_Membership_GetUserByName
    @ApplicationName      nvarchar(256),
    @UserName             nvarchar(256),
    @CurrentTimeUtc       datetime,
    @UpdateLastActivity   bit = 0
AS
BEGIN
    DECLARE @UserId uniqueidentifier

   
 IF (@UpdateLastActivity = 1)
    BEGIN
        SELECT TOP 1 m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
                m.CreateDate, m.LastLoginDate, @CurrentTimeUtc, m.LastPasswordChangedDate,
                u.UserId, m.IsLockedOut,m.LastLockoutDate
        FROM    aspnet_Applications a, aspnet_Users u, aspnet_Membership m
        WHERE    LOWER(@ApplicationName) = a.LoweredApplicationName AND
                u.ApplicationId = a.ApplicationId    AND
                LOWER(@UserName) = u.LoweredUserName AND u.UserId = m.UserId

        IF (@@ROWCOUNT = 0) -- Username not found
            RETURN -1

        UPDATE   aspnet_Users
        SET      LastActivityDate = @CurrentTimeUtc
        WHERE    @UserId = UserId
    END
    ELSE
    BEGIN
        SELECT TOP 1 m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
                m.CreateDate, m.LastLoginDate, u.LastActivityDate, m.LastPasswordChangedDate,
                u.UserId, m.IsLockedOut,m.LastLockoutDate
        FROM    aspnet_Applications a, aspnet_Users u, aspnet_Membership m
        WHERE    LOWER(@ApplicationName) = a.LoweredApplicationName AND
                u.ApplicationId = a.ApplicationId    AND
                LOWER(@UserName) = u.LoweredUserName AND u.UserId = m.UserId

        IF (@@ROWCOUNT = 0) -- Username not found
            RETURN -1
    END

    RETURN 0
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Membership_GetUserByUserId','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Membership_GetUserByUserId
GO
CREATE PROCEDURE aspnet_Membership_GetUserByUserId
    @UserId               uniqueidentifier,
    @CurrentTimeUtc       datetime,
    @UpdateLastActivity   bit = 0
AS
BEGIN
    IF ( @UpdateLastActivity = 1 )
    BEGIN
        UPDATE   aspnet_Users
        SET      LastActivityDate = @CurrentTimeUtc
        FROM     aspnet_Users
        WHERE    @UserId = UserId

        IF ( @@ROWCOUNT = 0 ) -- User ID not found
            RETURN -1
    END

    SELECT  m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
            m.CreateDate, m.LastLoginDate, u.LastActivityDate,
            m.LastPasswordChangedDate, u.UserName, m.IsLockedOut,
            m.LastLockoutDate
    FROM    aspnet_Users u, aspnet_Membership m
    WHERE   @UserId = u.UserId AND u.UserId = m.UserId

    IF ( @@ROWCOUNT = 0 ) -- User ID not found
       RETURN -1

    RETURN 0
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Membership_GetUserByEmail','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Membership_GetUserByEmail
GO
CREATE PROCEDURE aspnet_Membership_GetUserByEmail
    @ApplicationName  nvarchar(256),
    @Email            nvarchar(256)
AS
BEGIN
    IF( @Email IS NULL )
        SELECT  u.UserName
        FROM    aspnet_Applications a, aspnet_Users u, 
aspnet_Membership m
        WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
                u.ApplicationId = a.ApplicationId    AND
                u.UserId = m.UserId AND
                m.LoweredEmail IS NULL
    ELSE
        SELECT  u.UserName
        FROM    aspnet_Applications a, aspnet_Users u, aspnet_Membership m
        WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
                u.ApplicationId = a.ApplicationId    AND
                u.UserId = m.UserId AND
                LOWER(@Email) = m.LoweredEmail

    IF (@@rowcount = 0)
        RETURN(1)
    RETURN(0)
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Membership_GetPasswordWithFormat','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Membership_GetPasswordWithFormat
GO
CREATE PROCEDURE aspnet_Membership_GetPasswordWithFormat
    @ApplicationName                nvarchar(256),
    @UserName                       nvarchar(256),
    @UpdateLastLoginActivityDate    bit,
    @CurrentTimeUtc                 datetime
AS
BEGIN
    DECLARE @IsLockedOut                        bit
    DECLARE @UserId                             uniqueidentifier
    DECLARE @Password                           nvarchar(128)
    DECLARE @PasswordSalt                       nvarchar(128)
    DECLARE
 @PasswordFormat                     int
    DECLARE @FailedPasswordAttemptCount         int
    DECLARE @FailedPasswordAnswerAttemptCount   int
    DECLARE @IsApproved                         bit
    DECLARE @LastActivityDate                   datetime
 
   DECLARE @LastLoginDate                      datetime

    SELECT  @UserId          = NULL

    SELECT  @UserId = u.UserId, @IsLockedOut = m.IsLockedOut, @Password=Password, @PasswordFormat=PasswordFormat,
            @PasswordSalt=PasswordSalt, @FailedPasswordAttemptCount=FailedPasswordAttemptCount,
		    @FailedPasswordAnswerAttemptCount=FailedPasswordAnswerAttemptCount, @IsApproved=IsApproved,
            @LastActivityDate = LastActivityDate, @LastLoginDate = LastLoginDate
    FROM    aspnet_Applications a, aspnet_Users u, aspnet_Membership m
    WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.ApplicationId = a.ApplicationId    AND
            u.UserId = m.UserId AND
            LOWER(@UserName) = u.LoweredUserName

    IF (@UserId IS NULL)
        RETURN 1

    IF (@IsLockedOut = 1)
        RETURN 99

    SELECT   @Password, @PasswordFormat, @PasswordSalt, @FailedPasswordAttemptCount,
             @FailedPasswordAnswerAttemptCount, @IsApproved, @LastLoginDate, @LastActivityDate

    IF (@UpdateLastLoginActivityDate = 1 AND @IsApproved = 1)
    BEGIN
        UPDATE  aspnet_Membership
        SET     LastLoginDate = @CurrentTimeUtc
        WHERE   UserId = @UserId

        UPDATE  aspnet_Users
        SET     LastActivityDate = @CurrentTimeUtc
        WHERE   @UserId = UserId
    END


    RETURN 0
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Membership_UpdateUserInfo','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Membership_UpdateUserInfo
GO
CREATE PROCEDURE aspnet_Membership_UpdateUserInfo
    @ApplicationName                nvarchar(256),
    @UserName                       nvarchar(256),
    @IsPasswordCorrect              bit,
    @UpdateLastLoginActivityDate    bit,
    @MaxInvalidPasswordAttempts     int,
    @PasswordAttemptWindow          int,
    @CurrentTimeUtc                 datetime,
    @LastLoginDate                  datetime,
    @LastActivityDate               datetime
AS
BEGIN
    DECLARE @UserId                         
        uniqueidentifier
    DECLARE @IsApproved                             bit
    DECLARE @IsLockedOut                            bit
    DECLARE @LastLockoutDate                        datetime
    DECLARE @FailedPasswordAttemptCount             int
 
   DECLARE @FailedPasswordAttemptWindowStart       datetime
    DECLARE @FailedPasswordAnswerAttemptCount       int
    DECLARE @FailedPasswordAnswerAttemptWindowStart datetime

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    SELECT  @UserId = u.UserId,
            @IsApproved = m.IsApproved,
            @IsLockedOut = m.IsLockedOut,
            @LastLockoutDate = m.LastLockoutDate,
            @FailedPasswordAttemptCount = m.FailedPasswordAttemptCount,
            @FailedPasswordAttemptWindowStart = m.FailedPasswordAttemptWindowStart,
            @FailedPasswordAnswerAttemptCount = m.FailedPasswordAnswerAttemptCount,
            @FailedPasswordAnswerAttemptWindowStart = m.FailedPasswordAnswerAttemptWindowStart
    FROM    aspnet_Applications a, aspnet_Users u, aspnet_Membership m WITH ( UPDLOCK )
  
  WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.ApplicationId = a.ApplicationId    AND
            u.UserId = m.UserId AND
            LOWER(@UserName) = u.LoweredUserName

    IF ( @@rowcount = 0 )
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    IF( @IsLockedOut = 1 )
    BEGIN
        GOTO Cleanup
    END

    IF( @IsPasswordCorrect = 0 )
    BEGIN
        IF( @CurrentTimeUtc > DATEADD( minute, @PasswordAttemptWindow, @FailedPasswordAttemptWindowStart ) )
        BEGIN
            SET @FailedPasswordAttemptWindowStart = @CurrentTimeUtc
            SET @FailedPasswordAttemptCount = 1
        END
        ELSE
        BEGIN
            SET @FailedPasswordAttemptWindowStart = @CurrentTimeUtc
            
SET @FailedPasswordAttemptCount = @FailedPasswordAttemptCount + 1
        END

        BEGIN
            IF( @FailedPasswordAttemptCount >= @MaxInvalidPasswordAttempts )
            BEGIN
                SET @IsLockedOut = 1
                SET @LastLockoutDate = @CurrentTimeUtc
            END
        END
    END
    ELSE
    BEGIN
        IF( @FailedPasswordAttemptCount > 0 OR @FailedPasswordAnswerAttemptCount > 0 )
        BEGIN
            SET @FailedPasswordAttemptCount = 0
            SET @FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            SET @FailedPasswordAnswerAttemptCount = 0
            SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            SET @LastLockoutDate = CONVERT( datetime, '17540101', 112 )
        END
    END

    IF( @UpdateLastLoginActivityDate = 1 )
    BEGIN
        UPDATE  aspnet_Users
        SET     LastActivityDate = @LastActivityDate
        WHERE   @UserId = UserId

        IF( @@ERROR <> 0 )
     
   BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END

        UPDATE  aspnet_Membership
        SET     LastLoginDate = @LastLoginDate
        WHERE   UserId = @UserId

        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END
    END


    UPDATE aspnet_Membership
    SET IsLockedOut = @IsLockedOut, LastLockoutDate = @LastLockoutDate,
  FailedPasswordAttemptCount = @FailedPasswordAttemptCount,
        FailedPasswordAttemptWindowStart = @FailedPasswordAttemptWindowStart,
        FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount,
        FailedPasswordAnswerAttemptWindowStart = @FailedPasswordAnswerAttemptWindowStart
    WHERE @UserId = UserId

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0
	COMMIT TRANSACTION
    END

    RETURN @ErrorCode

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Membership_GetPassword','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Membership_GetPassword
GO
CREATE PROCEDURE aspnet_Membership_GetPassword
    @ApplicationName                nvarchar(256),
    @UserName                       nvarchar(256),
    @MaxInvalidPasswordAttempts     int,
    @PasswordAttemptWindow          int,
    @CurrentTimeUtc 
                datetime,
    @PasswordAnswer                 nvarchar(128) = NULL
AS
BEGIN
    DECLARE @UserId                                 uniqueidentifier
    DECLARE @PasswordFormat                         int
    DECLARE @Password                 
              nvarchar(128)
    DECLARE @passAns                                nvarchar(128)
    DECLARE @IsLockedOut                            bit
    DECLARE @LastLockoutDate                        datetime
    DECLARE @FailedPasswordAttemptCount     
        int
    DECLARE @FailedPasswordAttemptWindowStart       datetime
    DECLARE @FailedPasswordAnswerAttemptCount       int
    DECLARE @FailedPasswordAnswerAttemptWindowStart datetime

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    SELECT  @UserId = u.UserId,
            @Password = m.Password,
          
  @passAns = m.PasswordAnswer,
            @PasswordFormat = m.PasswordFormat,
            @IsLockedOut = m.IsLockedOut,
            @LastLockoutDate = m.LastLockoutDate,
            @FailedPasswordAttemptCount = m.FailedPasswordAttemptCount,
            
@FailedPasswordAttemptWindowStart = m.FailedPasswordAttemptWindowStart,
            @FailedPasswordAnswerAttemptCount = m.FailedPasswordAnswerAttemptCount,
            @FailedPasswordAnswerAttemptWindowStart = m.FailedPasswordAnswerAttemptWindowStart
    
FROM    aspnet_Applications a, aspnet_Users u, aspnet_Membership m WITH ( UPDLOCK )
    WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.ApplicationId = a.ApplicationId    AND
            u.UserId = m.UserId AND
   
         LOWER(@UserName) = u.LoweredUserName

    IF ( @@rowcount = 0 )
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    IF( @IsLockedOut = 1 )
    BEGIN
        SET @ErrorCode = 99
        GOTO Cleanup
    END

    IF ( NOT( @PasswordAnswer IS NULL ) )
    BEGIN
        IF( ( @passAns IS NULL ) OR ( LOWER( @passAns ) <> LOWER( @PasswordAnswer ) ) )
        BEGIN
            IF( @CurrentTimeUtc > DATEADD( minute, @PasswordAttemptWindow, @FailedPasswordAnswerAttemptWindowStart ) )
  
          BEGIN
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
                SET @FailedPasswordAnswerAttemptCount = 1
            END
            ELSE
            BEGIN
                SET @FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount + 1
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
            END

            BEGIN
                IF( @FailedPasswordAnswerAttemptCount >= @MaxInvalidPasswordAttempts )
             
   BEGIN
                    SET @IsLockedOut = 1
                    SET @LastLockoutDate = @CurrentTimeUtc
                END
            END

            SET @ErrorCode = 3
        END
        ELSE
        BEGIN
            IF( @FailedPasswordAnswerAttemptCount > 0 )
            BEGIN
                SET @FailedPasswordAnswerAttemptCount = 0
                SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            END
        END

        UPDATE aspnet_Membership
        SET IsLockedOut = @IsLockedOut, LastLockoutDate = @LastLockoutDate,
            FailedPasswordAttemptCount = @FailedPasswordAttemptCount,
            FailedPasswordAttemptWindowStart = @FailedPasswordAttemptWindowStart,
            FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount,
            FailedPasswordAnswerAttemptWindowStart = @FailedPasswordAnswerAttemptWindowStart
        WHERE @UserId = UserId

        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1

            GOTO Cleanup
        END
    END

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0
	COMMIT TRANSACTION
    END

    IF( @ErrorCode = 0 )
        SELECT @Password, @PasswordFormat

    RETURN @ErrorCode

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Membership_SetPassword','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Membership_SetPassword
GO
CREATE PROCEDURE aspnet_Membership_SetPassword
    @ApplicationName  nvarchar(256),
    @UserName         nvarchar(256),
    @NewPassword      nvarchar(128),
    @PasswordSalt     nvarchar(128),
    @CurrentTimeUtc   datetime,
    @PasswordFormat   int = 0
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId
    FROM    aspnet_Users u, aspnet_Applications a, aspnet_Membership m
    WHERE   LoweredUserName = LOWER(@UserName) AND
           
 u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF (@UserId IS NULL)
        RETURN(1)

    UPDATE aspnet_Membership
    SET Password = @NewPassword, PasswordFormat = @PasswordFormat, PasswordSalt = @PasswordSalt,
        LastPasswordChangedDate = @CurrentTimeUtc
    WHERE @UserId = UserId
    RETURN(0)
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Membership_ResetPassword','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Membership_ResetPassword
GO
CREATE PROCEDURE aspnet_Membership_ResetPassword
    @ApplicationName             nvarchar(256),
    @UserName                    nvarchar(256),
    @NewPassword                 nvarchar(128),
    @MaxInvalidPasswordAttempts  int,
    @PasswordAttemptWindow       int,
    @PasswordSalt                nvarchar(128),
    @CurrentTimeUtc              datetime,
    @PasswordFormat              int = 0,
    @PasswordAnswer              nvarchar(128) = NULL
AS
BEGIN
    DECLARE @IsLockedOut                 
           bit
    DECLARE @LastLockoutDate                        datetime
    DECLARE @FailedPasswordAttemptCount             int
    DECLARE @FailedPasswordAttemptWindowStart       datetime
    DECLARE @FailedPasswordAnswerAttemptCount       int
    DECLARE @FailedPasswordAnswerAttemptWindowStart datetime

    DECLARE @UserId                                 uniqueidentifier
    SET     @UserId = NULL

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    SELECT  @UserId = u.UserId
    FROM    aspnet_Users u, aspnet_Applications a, aspnet_Membership m
  
  WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF ( @UserId IS NULL )
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    SELECT @IsLockedOut = IsLockedOut,
           @LastLockoutDate = LastLockoutDate,
           @FailedPasswordAttemptCount = FailedPasswordAttemptCount,
           @FailedPasswordAttemptWindowStart = FailedPasswordAttemptWindowStart,
           @FailedPasswordAnswerAttemptCount = FailedPasswordAnswerAttemptCount,
           @FailedPasswordAnswerAttemptWindowStart = FailedPasswordAnswerAttemptWindowStart
    FROM aspnet_Membership WITH ( UPDLOCK )
    WHERE @UserId = UserId

    IF( @IsLockedOut = 1 )
    BEGIN
        SET @ErrorCode = 99
        GOTO Cleanup
    END

    UPDATE aspnet_Membership
    SET    Password = @NewPassword,
           LastPasswordChangedDate = @CurrentTimeUtc,
           PasswordFormat = @PasswordFormat,
           PasswordSalt = @PasswordSalt
    WHERE  @UserId = UserId AND
           ( ( @PasswordAnswer IS NULL ) OR ( LOWER( PasswordAnswer ) = LOWER( @PasswordAnswer ) ) )

    IF ( @@ROWCOUNT = 0 )
        BEGIN
            IF( @CurrentTimeUtc > DATEADD( minute, @PasswordAttemptWindow, @FailedPasswordAnswerAttemptWindowStart ) )
            BEGIN
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
                SET @FailedPasswordAnswerAttemptCount = 1
 
           END
            ELSE
            BEGIN
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
                SET @FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount + 1
            END

            BEGIN
                IF( @FailedPasswordAnswerAttemptCount >= @MaxInvalidPasswordAttempts )
                BEGIN
                    SET @IsLockedOut = 1
                    SET @LastLockoutDate = @CurrentTimeUtc
                END
            END

       
     SET @ErrorCode = 3
        END
    ELSE
        BEGIN
            IF( @FailedPasswordAnswerAttemptCount > 0 )
            BEGIN
                SET @FailedPasswordAnswerAttemptCount = 0
                SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            END
        END

    IF( NOT ( @PasswordAnswer IS NULL ) )
    BEGIN
        UPDATE aspnet_Membership
        SET IsLockedOut = @IsLockedOut, LastLockoutDate = @LastLockoutDate,
            FailedPasswordAttemptCount = @FailedPasswordAttemptCount,
            FailedPasswordAttemptWindowStart = @FailedPasswordAttemptWindowStart,
            FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount,
            FailedPasswordAnswerAttemptWindowStart = @FailedPasswordAnswerAttemptWindowStart
        WHERE @UserId = UserId

        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END
    END

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0

	COMMIT TRANSACTION
    END

    RETURN @ErrorCode

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Membership_UnlockUser','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Membership_UnlockUser
GO
CREATE PROCEDURE aspnet_Membership_UnlockUser
    @ApplicationName                         nvarchar(256),
    @UserName                                nvarchar(256)
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId
    FROM    aspnet_Users u, aspnet_Applications a, aspnet_Membership m
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF ( @UserId IS NULL )
        RETURN 1

    UPDATE aspnet_Membership
    SET IsLockedOut = 0,
        FailedPasswordAttemptCount = 0,
        FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
        FailedPasswordAnswerAttemptCount = 0,
        FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
        LastLockoutDate = CONVERT( datetime, '17540101', 112 )
    WHERE @UserId = UserId

    RETURN 0
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Membership_UpdateUser','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Membership_UpdateUser
GO
CREATE PROCEDURE aspnet_Membership_UpdateUser
    @ApplicationName      nvarchar(256),
    @UserName             nvarchar(256),
    @Email                nvarchar(256),
    @Comment              ntext,
    @IsApproved           bit,
    @LastLoginDate        datetime,
    @LastActivityDate     datetime,
    @UniqueEmail          int,
    @CurrentTimeUtc       datetime
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId, @ApplicationId = a.ApplicationId
    FROM    aspnet_Users u, aspnet_Applications a, aspnet_Membership m
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF (@UserId IS NULL)
        RETURN(1)

    IF (@UniqueEmail = 1)
    BEGIN
        IF (EXISTS (SELECT *
                    FROM  aspnet_Membership WITH (UPDLOCK, HOLDLOCK)
                    WHERE ApplicationId = @ApplicationId  AND @UserId <> UserId AND LoweredEmail = LOWER(@Email)))
        BEGIN
            RETURN(7)
        END
    END

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
	SET @TranStarted = 0

    UPDATE aspnet_Users WITH (ROWLOCK)
    SET
         LastActivityDate = @LastActivityDate
    WHERE
       @UserId = UserId

    IF( @@ERROR <> 0 )
        GOTO Cleanup

    UPDATE aspnet_Membership WITH (ROWLOCK)
    SET
         Email            = @Email,
         LoweredEmail     = LOWER(@Email),
         Comment          = @Comment,
         IsApproved       = @IsApproved,
         LastLoginDate    = @LastLoginDate
    WHERE
       @UserId = UserId

    IF( @@ERROR <> 0 )
        GOTO Cleanup

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0
	COMMIT TRANSACTION
    END

    RETURN 0

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN

        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN -1
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Membership_ChangePasswordQuestionAndAnswer','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Membership_ChangePasswordQuestionAndAnswer
GO
CREATE PROCEDURE aspnet_Membership_ChangePasswordQuestionAndAnswer
    @ApplicationName       nvarchar(256),
    @UserName              nvarchar(256),
    @NewPasswordQuestion   nvarchar(256),
    @NewPasswordAnswer     nvarchar(128)
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId
    FROM    aspnet_Membership m, aspnet_Users u, aspnet_Applications a
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId
    IF (@UserId IS NULL)
    BEGIN
        RETURN(1)
    END

    UPDATE aspnet_Membership
    SET    PasswordQuestion = @NewPasswordQuestion, PasswordAnswer = @NewPasswordAnswer
    WHERE  UserId=@UserId
    RETURN(0)
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Membership_GetAllUsers','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Membership_GetAllUsers
GO
CREATE PROCEDURE aspnet_Membership_GetAllUsers
    @ApplicationName       nvarchar(256),
    @PageIndex             int,
    @PageSize              int
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  
@ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN 0


    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexId int IDENTITY (0, 1) NOT NULL,
        UserId uniqueidentifier
    )

    -- Insert into our temp table
    INSERT INTO #PageIndexForUsers (UserId)
    SELECT u.UserId
    FROM   aspnet_Membership m, aspnet_Users u
    WHERE  u.ApplicationId = @ApplicationId AND u.UserId = m.UserId
    ORDER BY u.UserName

    SELECT @TotalRecords = @@ROWCOUNT

    SELECT u.UserName, m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
            m.CreateDate,
            m.LastLoginDate,
            u.LastActivityDate,
            m.LastPasswordChangedDate,
            u.UserId, m.IsLockedOut,
            m.LastLockoutDate
    FROM   aspnet_Membership m, aspnet_Users u, #PageIndexForUsers p
    WHERE  u.UserId = p.UserId AND u.UserId = m.UserId AND
     
      p.IndexId >= @PageLowerBound AND p.IndexId <= @PageUpperBound
    ORDER BY u.UserName
    RETURN @TotalRecords
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Membership_GetNumberOfUsersOnline','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Membership_GetNumberOfUsersOnline
GO
CREATE PROCEDURE aspnet_Membership_GetNumberOfUsersOnline
    @ApplicationName            nvarchar(256),
    @MinutesSinceLastInActive   int,
    @CurrentTimeUtc             datetime
AS
BEGIN
    DECLARE @DateActive datetime
    SELECT  @DateActive = 
DATEADD(minute,  -(@MinutesSinceLastInActive), @CurrentTimeUtc)

    DECLARE @NumOnline int
    SELECT  @NumOnline = COUNT(*)
    FROM    aspnet_Users u(NOLOCK),
            aspnet_Applications a(NOLOCK),
            aspnet_Membership m(NOLOCK)
    WHERE   u.ApplicationId = a.ApplicationId                  AND
            LastActivityDate > @DateActive                     AND
            a.LoweredApplicationName = LOWER(@ApplicationName) AND
            u.UserId = m.UserId
    RETURN(@NumOnline)
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Membership_FindUsersByName','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Membership_FindUsersByName
GO
CREATE PROCEDURE aspnet_Membership_FindUsersByName
    @ApplicationName       nvarchar(256),
    @UserNameToMatch       nvarchar(256),
    @PageIndex             int,
    @PageSize              int
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier

    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN 0

    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexId int IDENTITY (0, 1) NOT NULL,
        UserId uniqueidentifier
    )

    -- Insert into our temp table
    INSERT INTO #PageIndexForUsers (UserId)
        SELECT u.UserId
        FROM   aspnet_Users u, aspnet_Membership m
        WHERE  u.ApplicationId = @ApplicationId AND m.UserId = u.UserId AND u.LoweredUserName LIKE LOWER(@UserNameToMatch)
        ORDER BY u.UserName


    SELECT  u.UserName, m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
    
        m.CreateDate,
            m.LastLoginDate,
            u.LastActivityDate,
            m.LastPasswordChangedDate,
            u.UserId, m.IsLockedOut,
            m.LastLockoutDate
    FROM   aspnet_Membership m, aspnet_Users u, #PageIndexForUsers p
    WHERE  u.UserId = p.UserId AND u.UserId = m.UserId AND
           p.IndexId >= @PageLowerBound AND p.IndexId <= @PageUpperBound
    ORDER BY u.UserName

    SELECT  @TotalRecords = COUNT(*)
    FROM    #PageIndexForUsers
    RETURN @TotalRecords
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Membership_FindUsersByEmail','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Membership_FindUsersByEmail
GO
CREATE PROCEDURE aspnet_Membership_FindUsersByEmail
    @ApplicationName       nvarchar(256),
    @EmailToMatch          nvarchar(256),
    @PageIndex             int,
    @PageSize              int
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier

    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN 0

    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexId int IDENTITY (0, 1) NOT NULL,
        UserId uniqueidentifier
    )

    -- Insert into our temp table
    IF( @EmailToMatch IS NULL )
        INSERT INTO #PageIndexForUsers (UserId)
            SELECT u.UserId
            FROM   aspnet_Users u, aspnet_Membership m
            WHERE  u.ApplicationId = @ApplicationId AND m.UserId = u.UserId AND m.Email IS NULL
            ORDER BY m.LoweredEmail
    ELSE
        INSERT INTO #PageIndexForUsers (UserId)
 
           SELECT u.UserId
            FROM   aspnet_Users u, aspnet_Membership m
            WHERE  u.ApplicationId = @ApplicationId AND m.UserId = u.UserId AND m.LoweredEmail LIKE LOWER(@EmailToMatch)
            ORDER BY m.LoweredEmail

    SELECT  u.UserName, m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
            m.CreateDate,
            m.LastLoginDate,
            u.LastActivityDate,
            m.LastPasswordChangedDate,
            u.UserId, m.IsLockedOut,
            m.LastLockoutDate
    FROM   aspnet_Membership m, aspnet_Users u, #PageIndexForUsers p
    WHERE  u.UserId = p.UserId AND u.UserId = m.UserId AND
           p.IndexId >= @PageLowerBound AND p.IndexId <= @PageUpperBound
    ORDER BY m.LoweredEmail

    SELECT  @TotalRecords = COUNT(*)
    FROM    #PageIndexForUsers
    RETURN @TotalRecords
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Profile_GetProperties','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Profile_GetProperties
GO
CREATE PROCEDURE aspnet_Profile_GetProperties
    @ApplicationName      nvarchar(256),
    @UserName             nvarchar(256),
    @CurrentTimeUtc       datetime
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL

    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN

    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL

    SELECT @UserId = UserId
    FROM   aspnet_Users
    WHERE  ApplicationId = @ApplicationId AND LoweredUserName = LOWER(@UserName)

    IF (@UserId IS NULL)
        RETURN
    SELECT TOP 1 PropertyNames, PropertyValuesString, PropertyValuesBinary
    FROM         aspnet_Profile
    WHERE        UserId = @UserId

    IF (@@ROWCOUNT > 0)
    BEGIN
        UPDATE aspnet_Users
        SET    LastActivityDate=@CurrentTimeUtc
        WHERE  UserId = @UserId
    END
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Profile_SetProperties','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Profile_SetProperties
GO
CREATE PROCEDURE aspnet_Profile_SetProperties
    @ApplicationName        nvarchar(256),
    @PropertyNames          ntext,
    @PropertyValuesString   ntext,
    @PropertyValuesBinary   image,
    @UserName               nvarchar(256),
    @IsUserAnonymous        bit,
    @CurrentTimeUtc         datetime
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0


    IF( @@TRANCOUNT = 0 )
    BEGIN
       BEGIN TRANSACTION
       SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    EXEC aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    DECLARE @UserId uniqueidentifier
    DECLARE @LastActivityDate datetime
    SELECT  @UserId = NULL
    SELECT  @LastActivityDate = @CurrentTimeUtc

    SELECT @UserId = UserId
    FROM   aspnet_Users
    WHERE  ApplicationId = @ApplicationId AND LoweredUserName = LOWER(@UserName)
    IF (@UserId IS NULL)
        EXEC aspnet_Users_CreateUser @ApplicationId, @UserName, @IsUserAnonymous, @LastActivityDate, @UserId OUTPUT

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    UPDATE aspnet_Users
    SET    LastActivityDate=@CurrentTimeUtc
    WHERE  UserId = @UserId

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF (EXISTS( SELECT *
               FROM   aspnet_Profile
               WHERE  UserId = @UserId))
        UPDATE aspnet_Profile
        SET    PropertyNames=@PropertyNames, PropertyValuesString = @PropertyValuesString,
       
        PropertyValuesBinary = @PropertyValuesBinary, LastUpdatedDate=@CurrentTimeUtc
        WHERE  UserId = @UserId
    ELSE
        INSERT INTO aspnet_Profile(UserId, PropertyNames, PropertyValuesString, PropertyValuesBinary, LastUpdatedDate)
     
        VALUES (@UserId, @PropertyNames, @PropertyValuesString, @PropertyValuesBinary, @CurrentTimeUtc)

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
    	SET @TranStarted = 0
    	COMMIT TRANSACTION
    END

    RETURN 0

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Profile_DeleteProfiles','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Profile_DeleteProfiles
GO
CREATE PROCEDURE aspnet_Profile_DeleteProfiles
    @ApplicationName        nvarchar(256),
    @UserNames              nvarchar(4000)
AS
BEGIN
    DECLARE @UserName     nvarchar(256)
    DECLARE @CurrentPos   int
    DECLARE @NextPos      int
    DECLARE @NumDeleted   int
    DECLARE @DeletedUser  int
    DECLARE @TranStarted  bit
    DECLARE @ErrorCode    int

    SET @ErrorCode = 0
    SET @CurrentPos = 1
    SET @NumDeleted = 0
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
        BEGIN TRANSACTION
        SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    WHILE (@CurrentPos <= LEN(@UserNames))
    BEGIN
        SELECT @NextPos = CHARINDEX(N',', @UserNames,  @CurrentPos)
        IF (@NextPos = 0 OR @NextPos IS NULL)
            SELECT @NextPos = LEN(@UserNames) + 1

        SELECT @UserName = SUBSTRING(@UserNames, @CurrentPos, @NextPos - @CurrentPos)
        SELECT @CurrentPos = @NextPos+1

        IF (LEN(@UserName) > 0)
        BEGIN
            SELECT @DeletedUser = 0
            EXEC aspnet_Users_DeleteUser @ApplicationName, @UserName, 4, @DeletedUser OUTPUT
            IF( @@ERROR <> 0 )
            BEGIN
                SET @ErrorCode = -1
                GOTO Cleanup
            END
            IF (@DeletedUser <> 0)
                SELECT @NumDeleted = @NumDeleted + 1
        END
    END
    SELECT @NumDeleted
    IF (@TranStarted = 1)
    BEGIN
    	SET @TranStarted = 0
    	COMMIT TRANSACTION
    END
    SET @TranStarted = 0

    RETURN 0

Cleanup:
  
  IF (@TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END
    RETURN @ErrorCode
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Profile_DeleteInactiveProfiles','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Profile_DeleteInactiveProfiles
GO
CREATE PROCEDURE aspnet_Profile_DeleteInactiveProfiles
    @ApplicationName        nvarchar(256) = '/',
    @ProfileAuthOptions     int,
    @InactiveSinceDate      datetime
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    
	SELECT  @ApplicationId = ApplicationId 
	FROM aspnet_Applications 
	WHERE LOWER(@ApplicationName) = LoweredApplicationName
    
	-- select * FROM aspnet_Applications 

	IF (@ApplicationId IS NULL)
    BEGIN
        SELECT  0
        RETURN
    END

    DELETE
    FROM    aspnet_Profile
 
   WHERE   UserId IN
            (   SELECT  UserId
                FROM    aspnet_Users u
                WHERE   ApplicationId = @ApplicationId
                        AND (LastActivityDate <= @InactiveSinceDate)
                        AND ((@ProfileAuthOptions = 2)
                          OR (@ProfileAuthOptions = 0 AND IsAnonymous = 1)
                          OR (@ProfileAuthOptions = 1 AND IsAnonymous = 0)
                            )
            )

  
  SELECT  @@ROWCOUNT
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Profile_GetNumberOfInactiveProfiles','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Profile_GetNumberOfInactiveProfiles
GO
CREATE PROCEDURE aspnet_Profile_GetNumberOfInactiveProfiles
    @ApplicationName        nvarchar(256),
    @ProfileAuthOptions     int,
    @InactiveSinceDate      datetime
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
    BEGIN
        SELECT 0
        RETURN
    END
	
    SELECT  COUNT(*)
    FROM    aspnet_Users u, aspnet_Profile p
    WHERE   ApplicationId = @ApplicationId
        AND u.UserId = p.UserId
        AND (LastActivityDate <= @InactiveSinceDate)
        AND (
                (@ProfileAuthOptions = 2)
                OR (@ProfileAuthOptions = 0 AND IsAnonymous = 1)
                OR (@ProfileAuthOptions = 1 AND IsAnonymous = 0)
            )
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Profile_GetProfiles','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Profile_GetProfiles
GO
CREATE PROCEDURE aspnet_Profile_GetProfiles
    @ApplicationName        nvarchar(256),
    @ProfileAuthOptions     int,
    @PageIndex              int,
    @PageSize               int,
    @UserNameToMatch        nvarchar(256) = NULL,
    @InactiveSinceDate      datetime      = NULL
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN

    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexId int IDENTITY (0, 1) NOT NULL,
        UserId uniqueidentifier
    )

    -- Insert into our temp table
    INSERT INTO #PageIndexForUsers (UserId)
        SELECT  u.UserId
        FROM    aspnet_Users u, aspnet_Profile p
        WHERE   ApplicationId = @ApplicationId
            AND u.UserId = p.UserId
            AND (@InactiveSinceDate IS NULL OR LastActivityDate <= @InactiveSinceDate)
            AND (     (@ProfileAuthOptions = 2)
                   OR (@ProfileAuthOptions = 0 AND IsAnonymous = 1)
                   OR (@ProfileAuthOptions = 1 AND IsAnonymous = 0)
                 )
            AND (@UserNameToMatch IS
 NULL OR LoweredUserName LIKE LOWER(@UserNameToMatch))
        ORDER BY UserName

    SELECT  u.UserName, u.IsAnonymous, u.LastActivityDate, p.LastUpdatedDate,
            DATALENGTH(p.PropertyNames) + DATALENGTH(p.PropertyValuesString) + DATALENGTH(p.PropertyValuesBinary)
    FROM    aspnet_Users u, aspnet_Profile p, #PageIndexForUsers i
    WHERE   u.UserId = p.UserId AND p.UserId = i.UserId AND i.IndexId >= @PageLowerBound AND i.IndexId <= @PageUpperBound

    SELECT COUNT(*)
    FROM   #PageIndexForUsers

    DROP TABLE #PageIndexForUsers
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_UsersInRoles_IsUserInRole','P') IS NOT NULL)
    DROP PROCEDURE aspnet_UsersInRoles_IsUserInRole
GO
CREATE PROCEDURE aspnet_UsersInRoles_IsUserInRole
    @ApplicationName  nvarchar(256),
    @UserName         nvarchar(256),
    @RoleName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
   
 SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(2)
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    DECLARE @RoleId uniqueidentifier
    SELECT  @RoleId = NULL

    SELECT  @UserId = UserId
    FROM    aspnet_Users
    WHERE   LoweredUserName = LOWER(@UserName) AND ApplicationId = @ApplicationId

    IF (@UserId IS NULL)
        RETURN(2)

    SELECT  @RoleId = RoleId
    FROM    aspnet_Roles
    WHERE   LoweredRoleName = LOWER(@RoleName) AND ApplicationId = @ApplicationId

    IF (@RoleId IS NULL)
        RETURN(3)

    IF (EXISTS( SELECT * FROM aspnet_UsersInRoles WHERE  UserId = @UserId AND RoleId = @RoleId))
        RETURN(1)
    ELSE
        RETURN(0)
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_UsersInRoles_GetRolesForUser','P') IS NOT NULL)
    DROP PROCEDURE aspnet_UsersInRoles_GetRolesForUser
GO
CREATE PROCEDURE aspnet_UsersInRoles_GetRolesForUser
    @ApplicationName  nvarchar(256) = '/'
    ,@UserName         nvarchar(256)  = 'carole'
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(1)
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL

    SELECT  @UserId = UserId
    FROM    aspnet_Users
    WHERE   LoweredUserName = LOWER(@UserName) AND ApplicationId = @ApplicationId

    IF (@UserId IS NULL)
        RETURN(1)

    SELECT r.RoleName
    FROM   aspnet_Roles r, aspnet_UsersInRoles ur
    WHERE  r.RoleId = ur.RoleId AND r.ApplicationId = @ApplicationId AND ur.UserId = @UserId
    ORDER BY r.RoleName
    RETURN (0)
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Roles_CreateRole','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Roles_CreateRole
GO
CREATE PROCEDURE aspnet_Roles_CreateRole
    @ApplicationName  nvarchar(256),
    @RoleName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
        BEGIN TRANSACTION
        SET @TranStarted = 1
    END
    ELSE
        SET @TranStarted = 0

    EXEC aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF (EXISTS(SELECT RoleId FROM aspnet_Roles WHERE LoweredRoleName = LOWER(@RoleName) AND ApplicationId = @ApplicationId))
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    INSERT INTO aspnet_Roles
                (ApplicationId, RoleName, LoweredRoleName)
         VALUES (@ApplicationId, @RoleName, LOWER(@RoleName))

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
        COMMIT TRANSACTION
    END

    RETURN(0)

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
 
       ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Roles_DeleteRole','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Roles_DeleteRole
GO
CREATE PROCEDURE aspnet_Roles_DeleteRole
    @ApplicationName            nvarchar(256),
    @RoleName                   nvarchar(256),
    @DeleteOnlyIfRoleIsEmpty    bit
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(1)

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
        BEGIN TRANSACTION
        SET @TranStarted = 1
    END
    ELSE
        SET @TranStarted = 0

    DECLARE @RoleId   uniqueidentifier
    SELECT  @RoleId = NULL
    SELECT  
@RoleId = RoleId FROM aspnet_Roles WHERE LoweredRoleName = LOWER(@RoleName) AND ApplicationId = @ApplicationId

    IF (@RoleId IS NULL)
    BEGIN
        SELECT @ErrorCode = 1
        GOTO Cleanup
    END
    IF (@DeleteOnlyIfRoleIsEmpty <> 0)
    BEGIN
        IF (EXISTS (SELECT RoleId FROM aspnet_UsersInRoles  WHERE @RoleId = RoleId))
        BEGIN
            SELECT @ErrorCode = 2
            GOTO Cleanup
        END
    END


    DELETE FROM aspnet_UsersInRoles  WHERE @RoleId = RoleId

  
  IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    DELETE FROM aspnet_Roles WHERE @RoleId = RoleId  AND ApplicationId = @ApplicationId

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO
 Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
        COMMIT TRANSACTION
    END

    RETURN(0)

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
        ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Roles_RoleExists','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Roles_RoleExists
GO
CREATE PROCEDURE aspnet_Roles_RoleExists
    @ApplicationName  nvarchar(256),
    @RoleName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(0)
    IF (EXISTS (SELECT RoleName FROM aspnet_Roles WHERE LOWER(@RoleName) = LoweredRoleName AND ApplicationId = @ApplicationId ))
        RETURN(1)
    ELSE
        RETURN(0)
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_UsersInRoles_AddUsersToRoles','P') IS NOT NULL)
    DROP PROCEDURE aspnet_UsersInRoles_AddUsersToRoles
GO
CREATE PROCEDURE aspnet_UsersInRoles_AddUsersToRoles
	@ApplicationName  nvarchar(256),
	@UserNames		  nvarchar(4000),
	@RoleNames		  nvarchar(4000),
	@CurrentTimeUtc   datetime
AS
BEGIN
	DECLARE @AppId uniqueidentifier
	SELECT  @AppId = NULL
	SELECT  @AppId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
	IF (@AppId IS NULL)
		RETURN(2)
	DECLARE @TranStarted   bit
	SET @TranStarted = 0

	IF( @@TRANCOUNT = 0 )
	BEGIN
		BEGIN TRANSACTION
		SET @TranStarted = 1
	END

	DECLARE @tbNames	table(Name nvarchar(256) NOT NULL PRIMARY KEY)
	DECLARE @tbRoles	table(RoleId uniqueidentifier NOT NULL PRIMARY KEY)
	DECLARE @tbUsers	table(UserId uniqueidentifier NOT NULL PRIMARY KEY)
	DECLARE @Num		int
	DECLARE @Pos		int

	DECLARE @NextPos	int
	DECLARE @Name		nvarchar(256)

	SET @Num = 0
	SET @Pos = 1
	WHILE(@Pos <= LEN(@RoleNames))
	BEGIN
		SELECT @NextPos = CHARINDEX(N',', @RoleNames,  @Pos)
		IF (@NextPos = 0 OR @NextPos IS NULL)
			SELECT @NextPos = LEN(@RoleNames) + 1

		SELECT @Name = RTRIM(LTRIM(SUBSTRING(@RoleNames, @Pos, @NextPos - @Pos)))
		SELECT @Pos = @NextPos+1

		INSERT INTO @tbNames VALUES (@Name)
		SET @Num = @Num + 1
	END

	INSERT INTO @tbRoles
	  SELECT RoleId
	  FROM   aspnet_Roles ar, @tbNames t
	  
WHERE  LOWER(t.Name) = ar.LoweredRoleName AND ar.ApplicationId = @AppId

	IF (@@ROWCOUNT <> @Num)
	BEGIN
		SELECT TOP 1 Name
		FROM   @tbNames
		WHERE  LOWER(Name) NOT IN (SELECT ar.LoweredRoleName FROM aspnet_Roles ar,  @tbRoles r WHERE r.RoleId = ar.RoleId)
		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(2)
	END

	DELETE FROM @tbNames WHERE 1=1
	SET @Num = 0
	SET @Pos = 1

	WHILE(@Pos <= LEN(@UserNames))
	BEGIN
		SELECT @NextPos = CHARINDEX(N',', @UserNames,  @Pos)
		IF (@NextPos = 0 OR @NextPos IS NULL)
			SELECT @NextPos = LEN(@UserNames) + 1
		SELECT @Name = RTRIM(LTRIM(SUBSTRING(@UserNames, @Pos, @NextPos - @Pos)))
		SELECT @Pos = @NextPos+1

		INSERT INTO @tbNames VALUES (@Name)
		SET @Num = @Num + 1
	END

	INSERT INTO @tbUsers
	  SELECT UserId
	  FROM   aspnet_Users ar, @tbNames t
	  WHERE  LOWER(t.Name) = ar.LoweredUserName AND ar.ApplicationId = @AppId

	IF (@@ROWCOUNT <> @Num)
	BEGIN
		DELETE FROM @tbNames
		WHERE LOWER(Name) IN (SELECT LoweredUserName FROM aspnet_Users au,  @tbUsers u WHERE au.UserId = u.UserId)

		INSERT aspnet_Users (ApplicationId, UserId, UserName, LoweredUserName, IsAnonymous, LastActivityDate)
		  SELECT @AppId, NEWID(), Name, LOWER(Name), 0, @CurrentTimeUtc
		  FROM   @tbNames

		INSERT INTO @tbUsers
		  SELECT  UserId
		  FROM	aspnet_Users au, @tbNames t
		  WHERE   LOWER(t.Name) = au.LoweredUserName AND au.ApplicationId = @AppId
	END

	IF (EXISTS (SELECT * FROM aspnet_UsersInRoles ur, @tbUsers tu, @tbRoles tr WHERE tu.UserId = ur.UserId AND tr.RoleId = ur.RoleId))
	BEGIN
		SELECT TOP 1 UserName, RoleName
		FROM		 aspnet_UsersInRoles ur, @tbUsers tu, @tbRoles tr, aspnet_Users u, aspnet_Roles r
		WHERE		u.UserId = tu.UserId AND r.RoleId = tr.RoleId AND tu.UserId = ur.UserId AND tr.RoleId = ur.RoleId

		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(3)
	END

	INSERT INTO aspnet_UsersInRoles (UserId, RoleId)
	SELECT UserId, RoleId
	FROM @tbUsers, @tbRoles

	IF( @TranStarted = 1 )
		COMMIT TRANSACTION
	RETURN(0)
END 
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_UsersInRoles_RemoveUsersFromRoles','P') IS NOT NULL)
    DROP PROCEDURE aspnet_UsersInRoles_RemoveUsersFromRoles
GO
CREATE PROCEDURE aspnet_UsersInRoles_RemoveUsersFromRoles
	@ApplicationName  nvarchar(256),
	@UserNames		  nvarchar(4000),
	@RoleNames		  nvarchar(4000)
AS
BEGIN
	DECLARE @AppId uniqueidentifier
	SELECT  @AppId = NULL
	SELECT  @AppId = ApplicationId 
FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
	IF (@AppId IS NULL)
		RETURN(2)


	DECLARE @TranStarted   bit
	SET @TranStarted = 0

	IF( @@TRANCOUNT = 0 )
	BEGIN
		BEGIN TRANSACTION
		SET @TranStarted = 1
	END

	DECLARE @tbNames  table(Name nvarchar(256) NOT NULL PRIMARY KEY)
	DECLARE @tbRoles  table(RoleId uniqueidentifier NOT NULL PRIMARY KEY)
	DECLARE @tbUsers  table(UserId uniqueidentifier NOT NULL PRIMARY KEY)
	DECLARE @Num	  int
	DECLARE @Pos	  int
	DECLARE @NextPos  int
	DECLARE @Name	  nvarchar(256)
	DECLARE @CountAll int
	DECLARE @CountU	  int
	DECLARE @CountR	  int


	SET @Num = 0
	SET @Pos = 1
	WHILE(@Pos <= LEN(@RoleNames))
	BEGIN
		SELECT @NextPos = CHARINDEX(N',', @RoleNames,  @Pos)
		IF (@NextPos = 0 OR @NextPos IS NULL)
			SELECT @NextPos = LEN(@RoleNames) + 1
		SELECT @Name = RTRIM(LTRIM(SUBSTRING(@RoleNames, @Pos, @NextPos - @Pos)))
		SELECT @Pos = @NextPos+1

		INSERT INTO @tbNames VALUES (@Name)
		SET @Num = @Num + 1
	END

	INSERT INTO @tbRoles
	  SELECT RoleId
	  FROM   aspnet_Roles ar, @tbNames t
	  WHERE  LOWER(t.Name) = ar.LoweredRoleName AND ar.ApplicationId = @AppId
	SELECT @CountR = @@ROWCOUNT

	IF (@CountR <> @Num)
	BEGIN
		SELECT TOP 1 N'', Name
		FROM   @tbNames
		WHERE  LOWER(Name) NOT IN (SELECT ar.LoweredRoleName FROM aspnet_Roles ar,  @tbRoles r WHERE r.RoleId = ar.RoleId)
		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(2)
	END


	DELETE FROM @tbNames WHERE 1=1
	SET @Num = 0
	SET @Pos = 1


	WHILE(@Pos <= LEN(@UserNames))
	BEGIN
		SELECT @NextPos = CHARINDEX(N',', @UserNames,  @Pos)
		IF (@NextPos = 0 OR @NextPos IS NULL)
			SELECT @NextPos = LEN(@UserNames) + 1
		SELECT @Name = RTRIM(LTRIM(SUBSTRING(@UserNames, @Pos, @NextPos - @Pos)))
		SELECT @Pos = @NextPos+1

		INSERT INTO @tbNames VALUES (@Name)
		SET @Num = @Num + 1
	END

	INSERT INTO @tbUsers
	  SELECT UserId
	  FROM   aspnet_Users ar, @tbNames t
	  WHERE  LOWER(t.Name) = ar.LoweredUserName AND ar.ApplicationId = @AppId

	SELECT @CountU = @@ROWCOUNT
	IF (@CountU <> @Num)
	BEGIN
		SELECT TOP 1 Name, N''
		FROM   @tbNames
		WHERE  LOWER(Name) NOT IN (SELECT au.LoweredUserName FROM aspnet_Users au,  @tbUsers u WHERE u.UserId = au.UserId)

		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(1)
	END

	SELECT  @CountAll = COUNT(*)
	FROM	aspnet_UsersInRoles ur, @tbUsers u, @tbRoles r
	WHERE   ur.UserId = u.UserId AND ur.RoleId = r.RoleId

	IF (@CountAll <> @CountU * @CountR)
	BEGIN
		SELECT TOP 1 UserName, RoleName
		FROM		 @tbUsers tu, @tbRoles tr, aspnet_Users u, aspnet_Roles r
		WHERE		 u.UserId = tu.UserId AND r.RoleId = tr.RoleId AND
					 tu.UserId NOT IN (SELECT ur.UserId FROM aspnet_UsersInRoles ur WHERE ur.RoleId = tr.RoleId) AND
					 tr.RoleId NOT IN (SELECT ur.RoleId FROM aspnet_UsersInRoles ur WHERE ur.UserId = tu.UserId)
		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(3)
	END

	DELETE FROM aspnet_UsersInRoles
	WHERE UserId IN (SELECT UserId FROM @tbUsers)
	  AND RoleId IN (SELECT RoleId FROM @tbRoles)
	IF( @TranStarted = 1 )
		COMMIT TRANSACTION
	RETURN(0)
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_UsersInRoles_GetUsersInRoles','P') IS NOT NULL)
    DROP PROCEDURE aspnet_UsersInRoles_GetUsersInRoles
GO
CREATE PROCEDURE aspnet_UsersInRoles_GetUsersInRoles
    @ApplicationName  nvarchar(256),
    @RoleName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(1)
     DECLARE @RoleId uniqueidentifier
     SELECT  @RoleId = NULL

     SELECT  @RoleId = RoleId
     FROM    aspnet_Roles
     WHERE   LOWER(@RoleName) = LoweredRoleName AND ApplicationId = @ApplicationId

     IF (@RoleId IS NULL)
         RETURN(1)

    SELECT u.UserName
    FROM   aspnet_Users u, aspnet_UsersInRoles ur
    WHERE  u.UserId = ur.UserId AND @RoleId = ur.RoleId AND u.ApplicationId = @ApplicationId
    ORDER BY u.UserName
    RETURN(0)
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_UsersInRoles_FindUsersInRole','P') IS NOT NULL)
    DROP PROCEDURE aspnet_UsersInRoles_FindUsersInRole
GO
CREATE PROCEDURE aspnet_UsersInRoles_FindUsersInRole
    @ApplicationName  nvarchar(256),
    @RoleName         nvarchar(256),
    @UserNameToMatch  nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL

    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(1)
     DECLARE @RoleId uniqueidentifier
     SELECT  @RoleId = NULL

     SELECT  @RoleId = RoleId
     FROM    aspnet_Roles
     WHERE   LOWER(@RoleName) = LoweredRoleName AND ApplicationId = @ApplicationId

     IF (@RoleId IS NULL)
         RETURN(1)

    SELECT u.UserName
    FROM   aspnet_Users u, aspnet_UsersInRoles ur

    WHERE  u.UserId = ur.UserId AND @RoleId = ur.RoleId AND u.ApplicationId = @ApplicationId AND LoweredUserName LIKE LOWER(@UserNameToMatch)
    ORDER BY u.UserName
    RETURN(0)
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Roles_GetAllRoles','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Roles_GetAllRoles 
GO
CREATE PROCEDURE aspnet_Roles_GetAllRoles 
(
    @ApplicationName           nvarchar(256))
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE
 LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN
    SELECT RoleName
    FROM   aspnet_Roles WHERE ApplicationId = @ApplicationId
    ORDER BY RoleName
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Personalization_GetApplicationId','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Personalization_GetApplicationId
GO
CREATE PROCEDURE aspnet_Personalization_GetApplicationId (
    @ApplicationName NVARCHAR(256),
    @ApplicationId UNIQUEIDENTIFIER OUT)
AS
BEGIN
    SELECT @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Paths_CreatePath','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Paths_CreatePath
GO
CREATE PROCEDURE aspnet_Paths_CreatePath
    @ApplicationId UNIQUEIDENTIFIER,
    @Path           NVARCHAR(256),
    @PathId         UNIQUEIDENTIFIER OUTPUT
AS
BEGIN
    BEGIN TRANSACTION
    IF (NOT EXISTS(SELECT * FROM aspnet_Paths WHERE LoweredPath = LOWER(@Path) AND ApplicationId = @ApplicationId))
    BEGIN
        INSERT aspnet_Paths (ApplicationId, Path, LoweredPath) VALUES (@ApplicationId, @Path, LOWER(@Path))
    END
    COMMIT TRANSACTION
    SELECT @PathId = PathId FROM aspnet_Paths WHERE LOWER(@Path) = LoweredPath AND ApplicationId = @ApplicationId
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_PersonalizationAllUsers_GetPageSettings','P') IS NOT NULL)
    DROP PROCEDURE aspnet_PersonalizationAllUsers_GetPageSettings
GO
CREATE PROCEDURE aspnet_PersonalizationAllUsers_GetPageSettings (
    @ApplicationName  NVARCHAR(256),
    @Path              NVARCHAR(256))
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL

    EXEC aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @PathId = u.PathId FROM aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        RETURN
    END

    SELECT p.PageSettings FROM aspnet_PersonalizationAllUsers p WHERE p.PathId = @PathId
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_PersonalizationAllUsers_ResetPageSettings','P') IS NOT NULL)
    DROP PROCEDURE aspnet_PersonalizationAllUsers_ResetPageSettings
GO
CREATE PROCEDURE aspnet_PersonalizationAllUsers_ResetPageSettings (
    @ApplicationName  NVARCHAR(256),
    @Path              NVARCHAR(256))
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL

    EXEC aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @PathId = u.PathId FROM aspnet_Paths u
 WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        RETURN
    END

    DELETE FROM aspnet_PersonalizationAllUsers WHERE PathId = @PathId
    RETURN 0
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_PersonalizationAllUsers_SetPageSettings','P') IS NOT NULL)
    DROP PROCEDURE aspnet_PersonalizationAllUsers_SetPageSettings
GO
CREATE PROCEDURE aspnet_PersonalizationAllUsers_SetPageSettings (
    @ApplicationName  NVARCHAR(256),
    @Path             NVARCHAR(256),
    @PageSettings     IMAGE,
    @CurrentTimeUtc   DATETIME)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL

    EXEC aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    SELECT @PathId = u.PathId FROM aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        EXEC aspnet_Paths_CreatePath @ApplicationId, @Path, @PathId OUTPUT
    END

    IF (EXISTS(SELECT PathId FROM aspnet_PersonalizationAllUsers
 WHERE PathId = @PathId))
        UPDATE aspnet_PersonalizationAllUsers SET PageSettings = @PageSettings, LastUpdatedDate = @CurrentTimeUtc WHERE PathId = @PathId
    ELSE
        INSERT INTO aspnet_PersonalizationAllUsers(PathId, PageSettings, LastUpdatedDate) VALUES (@PathId, @PageSettings, @CurrentTimeUtc)
    RETURN 0
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_PersonalizationPerUser_GetPageSettings','P') IS NOT NULL)
    DROP PROCEDURE aspnet_PersonalizationPerUser_GetPageSettings
GO
CREATE PROCEDURE aspnet_PersonalizationPerUser_GetPageSettings (
    @ApplicationName  NVARCHAR(256),
    @UserName         NVARCHAR(256),
    @Path             NVARCHAR(256),
    @CurrentTimeUtc   DATETIME)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER
    DECLARE @UserId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL
    SELECT @UserId = NULL

    EXEC aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @PathId = u.PathId FROM aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        RETURN
    
END

    SELECT @UserId = u.UserId FROM aspnet_Users u WHERE u.ApplicationId = @ApplicationId AND u.LoweredUserName = LOWER(@UserName)
    IF (@UserId IS NULL)
    BEGIN
        RETURN
    END

    UPDATE   aspnet_Users WITH (ROWLOCK)
    SET     LastActivityDate = @CurrentTimeUtc
    WHERE    UserId = @UserId
    IF (@@ROWCOUNT = 0) -- Username not found
        RETURN

    SELECT p.PageSettings FROM aspnet_PersonalizationPerUser p WHERE p.PathId = @PathId AND p.UserId = @UserId
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_PersonalizationPerUser_ResetPageSettings','P') IS NOT NULL)
    DROP PROCEDURE aspnet_PersonalizationPerUser_ResetPageSettings
GO
CREATE PROCEDURE aspnet_PersonalizationPerUser_ResetPageSettings (
    @ApplicationName  NVARCHAR(256),
    @UserName         NVARCHAR(256),
    @Path             NVARCHAR(256),
    @CurrentTimeUtc   DATETIME)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER
    DECLARE @UserId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL
    SELECT @UserId = NULL

    EXEC aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @PathId = u.PathId FROM aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        RETURN
  
  END

    SELECT @UserId = u.UserId FROM aspnet_Users u WHERE u.ApplicationId = @ApplicationId AND u.LoweredUserName = LOWER(@UserName)
    IF (@UserId IS NULL)
    BEGIN
        RETURN
    END

    UPDATE   aspnet_Users WITH (ROWLOCK)
    SET      LastActivityDate = @CurrentTimeUtc
    WHERE    UserId = @UserId
    IF (@@ROWCOUNT = 0) -- Username not found
        RETURN

    DELETE FROM aspnet_PersonalizationPerUser WHERE PathId = @PathId AND UserId = @UserId
    RETURN 0
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_PersonalizationPerUser_SetPageSettings','P') IS NOT NULL)
    DROP PROCEDURE aspnet_PersonalizationPerUser_SetPageSettings
GO
CREATE PROCEDURE aspnet_PersonalizationPerUser_SetPageSettings (
    @ApplicationName  NVARCHAR(256),
    @UserName         NVARCHAR(256),
    @Path             NVARCHAR(256),
    @PageSettings     IMAGE,
    @CurrentTimeUtc   DATETIME)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER
    DECLARE @UserId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL
    SELECT @UserId = NULL

    EXEC aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    SELECT @PathId = u.PathId FROM aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        EXEC aspnet_Paths_CreatePath @ApplicationId, @Path, @PathId OUTPUT
    END

    SELECT @UserId = u.UserId FROM aspnet_Users u WHERE u.ApplicationId = @ApplicationId AND u.LoweredUserName = LOWER(@UserName)
    IF (@UserId IS NULL)
    BEGIN
        EXEC aspnet_Users_CreateUser @ApplicationId, @UserName, 0, @CurrentTimeUtc, @UserId OUTPUT
    END

    UPDATE   aspnet_Users WITH (ROWLOCK)
    SET      LastActivityDate = @CurrentTimeUtc
    WHERE    UserId = @UserId
    IF (@@ROWCOUNT = 0) -- Username not found
        RETURN

    IF (EXISTS(SELECT PathId FROM aspnet_PersonalizationPerUser WHERE UserId = @UserId AND PathId = @PathId))
        UPDATE aspnet_PersonalizationPerUser SET PageSettings = @PageSettings, LastUpdatedDate = @CurrentTimeUtc WHERE UserId = @UserId AND PathId = @PathId
    ELSE
        INSERT INTO aspnet_PersonalizationPerUser(UserId, PathId, PageSettings, LastUpdatedDate) VALUES (@UserId, @PathId, @PageSettings, @CurrentTimeUtc)
    RETURN 0
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_PersonalizationAdministration_DeleteAllState','P') IS NOT NULL)
    DROP PROCEDURE aspnet_PersonalizationAdministration_DeleteAllState
GO
CREATE PROCEDURE aspnet_PersonalizationAdministration_DeleteAllState (
    @AllUsersScope bit,
    @ApplicationName NVARCHAR(256),
    @Count int OUT)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        SELECT @Count = 0
    ELSE
    BEGIN
        IF (@AllUsersScope = 1)
            DELETE FROM aspnet_PersonalizationAllUsers
            WHERE PathId IN
               (SELECT Paths.PathId
                FROM aspnet_Paths Paths
                WHERE Paths.ApplicationId = @ApplicationId)
        ELSE
            DELETE FROM aspnet_PersonalizationPerUser
            WHERE PathId IN
               (SELECT Paths.PathId
 
               FROM aspnet_Paths Paths
                WHERE Paths.ApplicationId = @ApplicationId)

        SELECT @Count = @@ROWCOUNT
    END
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_PersonalizationAdministration_ResetSharedState','P') IS NOT NULL)
    DROP PROCEDURE aspnet_PersonalizationAdministration_ResetSharedState
GO
CREATE PROCEDURE aspnet_PersonalizationAdministration_ResetSharedState (
    @Count int OUT,
    @ApplicationName NVARCHAR(256),
    @Path NVARCHAR(256))
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        SELECT @Count = 0
    ELSE
    BEGIN
        DELETE FROM aspnet_PersonalizationAllUsers
        WHERE PathId IN
            (SELECT AllUsers.PathId
             FROM aspnet_PersonalizationAllUsers AllUsers, aspnet_Paths Paths
             WHERE Paths.ApplicationId = @ApplicationId
                   AND AllUsers.PathId = Paths.PathId
                   AND Paths.LoweredPath = LOWER(@Path))

        SELECT @Count = @@ROWCOUNT
    END
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_PersonalizationAdministration_ResetUserState','P') IS NOT NULL)
    DROP PROCEDURE aspnet_PersonalizationAdministration_ResetUserState
GO
CREATE PROCEDURE aspnet_PersonalizationAdministration_ResetUserState (
    @Count                  int                 OUT,
    @ApplicationName        NVARCHAR(256),
    @InactiveSinceDate      DATETIME            = NULL,
    @UserName               NVARCHAR(256)       = NULL,
    @Path                   NVARCHAR(256)       = NULL)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        SELECT @Count = 0
    ELSE
    BEGIN
        DELETE FROM aspnet_PersonalizationPerUser
        WHERE Id IN (SELECT PerUser.Id
                     FROM aspnet_PersonalizationPerUser PerUser, aspnet_Users Users, aspnet_Paths Paths
                     WHERE Paths.ApplicationId = @ApplicationId
                           AND PerUser.UserId = Users.UserId
                           AND PerUser.PathId = Paths.PathId
                           AND (@InactiveSinceDate IS NULL OR Users.LastActivityDate <= @InactiveSinceDate)
                           AND (@UserName IS NULL OR Users.LoweredUserName = LOWER(@UserName))
                           AND (@Path IS NULL OR Paths.LoweredPath = LOWER(@Path)))

        SELECT @Count = @@ROWCOUNT
    END
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_PersonalizationAdministration_FindState','P') IS NOT NULL)
    DROP PROCEDURE aspnet_PersonalizationAdministration_FindState
GO
CREATE PROCEDURE aspnet_PersonalizationAdministration_FindState (
    @AllUsersScope bit,
    @ApplicationName NVARCHAR(256),
    @PageIndex              INT,
    @PageSize               INT,
    @Path NVARCHAR(256) = NULL,
    @UserName NVARCHAR(256) = NULL,
    @InactiveSinceDate DATETIME = NULL)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        RETURN

    -- Set the page bounds
    DECLARE @PageLowerBound INT
    DECLARE @PageUpperBound INT
    DECLARE @TotalRecords   INT
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table to store the selected results
    CREATE TABLE #PageIndex (
        IndexId int IDENTITY (0, 1) NOT NULL,
        ItemId UNIQUEIDENTIFIER
    )

    IF (@AllUsersScope = 1)
    BEGIN
        -- Insert into our temp table
        INSERT INTO #PageIndex (ItemId)
   
     SELECT Paths.PathId
        FROM aspnet_Paths Paths,
             ((SELECT Paths.PathId
               FROM aspnet_PersonalizationAllUsers AllUsers, aspnet_Paths Paths
               WHERE Paths.ApplicationId = @ApplicationId
            
          AND AllUsers.PathId = Paths.PathId
                      AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
              ) AS SharedDataPerPath
              FULL OUTER JOIN
              (SELECT DISTINCT Paths.PathId
               FROM aspnet_PersonalizationPerUser PerUser, aspnet_Paths Paths
               WHERE Paths.ApplicationId = @ApplicationId
                      AND PerUser.PathId = Paths.PathId
                      AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
              ) AS UserDataPerPath
              ON SharedDataPerPath.PathId = UserDataPerPath.PathId
             )
        WHERE Paths.PathId = SharedDataPerPath.PathId OR Paths.PathId = UserDataPerPath.PathId
        ORDER BY Paths.Path ASC

  
      SELECT @TotalRecords = @@ROWCOUNT

        SELECT Paths.Path,
               SharedDataPerPath.LastUpdatedDate,
               SharedDataPerPath.SharedDataLength,
               UserDataPerPath.UserDataLength,
               UserDataPerPath.UserCount
        FROM aspnet_Paths Paths,
             ((SELECT PageIndex.ItemId AS PathId,
                      AllUsers.LastUpdatedDate AS LastUpdatedDate,
                      DATALENGTH(AllUsers.PageSettings) AS SharedDataLength
               FROM aspnet_PersonalizationAllUsers AllUsers, #PageIndex PageIndex
               WHERE AllUsers.PathId = PageIndex.ItemId
                     AND PageIndex.IndexId >= @PageLowerBound AND PageIndex.IndexId <= @PageUpperBound
              ) AS SharedDataPerPath
              FULL OUTER JOIN
              (SELECT PageIndex.ItemId AS PathId,
                      SUM(DATALENGTH(PerUser.PageSettings)) AS UserDataLength,
                      COUNT(*) AS UserCount
               FROM aspnet_PersonalizationPerUser PerUser, #PageIndex PageIndex
               WHERE PerUser.PathId = PageIndex.ItemId
                     AND PageIndex.IndexId >= @PageLowerBound AND PageIndex.IndexId <= @PageUpperBound
               GROUP BY PageIndex.ItemId
              ) AS UserDataPerPath
              ON SharedDataPerPath.PathId = UserDataPerPath.PathId
             )
        WHERE Paths.PathId = SharedDataPerPath.PathId OR Paths.PathId = UserDataPerPath.PathId
        ORDER BY Paths.Path ASC
    END
    ELSE
    BEGIN
        
-- Insert into our temp table
        INSERT INTO #PageIndex (ItemId)
        SELECT PerUser.Id
        FROM aspnet_PersonalizationPerUser PerUser, aspnet_Users Users, aspnet_Paths Paths
        WHERE Paths.ApplicationId = @ApplicationId
     
         AND PerUser.UserId = Users.UserId
              AND PerUser.PathId = Paths.PathId
              AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
    AND (@UserName IS NULL OR Users.LoweredUserName LIKE LOWER(@UserName))
              AND (@InactiveSinceDate IS NULL OR Users.LastActivityDate <= @InactiveSinceDate)
        ORDER BY Paths.Path ASC, Users.UserName ASC

        SELECT @TotalRecords = @@ROWCOUNT

        SELECT Paths.Path, PerUser.LastUpdatedDate, DATALENGTH(PerUser.PageSettings), Users.UserName, Users.LastActivityDate
        FROM aspnet_PersonalizationPerUser PerUser, aspnet_Users Users, aspnet_Paths Paths, #PageIndex PageIndex
        WHERE PerUser.Id = PageIndex.ItemId
              AND PerUser.UserId = Users.UserId
              AND PerUser.PathId = Paths.PathId
              AND PageIndex.IndexId >= @PageLowerBound AND PageIndex.IndexId <= @PageUpperBound
        ORDER BY Paths.Path ASC, Users.UserName ASC
    END

    RETURN @TotalRecords
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_PersonalizationAdministration_GetCountOfState','P') IS NOT NULL)
    DROP PROCEDURE aspnet_PersonalizationAdministration_GetCountOfState
GO
CREATE PROCEDURE aspnet_PersonalizationAdministration_GetCountOfState (
    @Count int OUT,
    @AllUsersScope bit,
    @ApplicationName NVARCHAR(256),
    @Path NVARCHAR(256) = NULL,
    @UserName NVARCHAR(256) = NULL,
    @InactiveSinceDate DATETIME = NULL)
AS
BEGIN

    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        SELECT @Count = 0
    ELSE
        IF (@AllUsersScope = 1)

            SELECT @Count = COUNT(*)
            FROM aspnet_PersonalizationAllUsers AllUsers, aspnet_Paths Paths
            WHERE Paths.ApplicationId = @ApplicationId
                  AND AllUsers.PathId = Paths.PathId
                  AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
        ELSE
            SELECT @Count = COUNT(*)
            FROM aspnet_PersonalizationPerUser PerUser, aspnet_Users Users, aspnet_Paths Paths
            WHERE Paths.ApplicationId = @ApplicationId
                  AND PerUser.UserId = Users.UserId
                  AND PerUser.PathId = Paths.PathId
                  AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
                  AND (@UserName IS NULL OR Users.LoweredUserName
 LIKE LOWER(@UserName))
                  AND (@InactiveSinceDate IS NULL OR Users.LastActivityDate <= @InactiveSinceDate)
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_WebEvent_LogEvent','P') IS NOT NULL)
    DROP PROCEDURE aspnet_WebEvent_LogEvent
GO
CREATE PROCEDURE aspnet_WebEvent_LogEvent
        @EventId         char(32),
        @EventTimeUtc    datetime,
        @EventTime       datetime,
        @EventType       nvarchar(256),
        @EventSequence   decimal(19,0),
        @EventOccurrence decimal(19,0),
        @EventCode       int,
        @EventDetailCode int,
        @Message         nvarchar(1024),
        @ApplicationPath nvarchar(256),
        @ApplicationVirtualPath nvarchar(256),
        @MachineName    nvarchar(256),
        @RequestUrl      nvarchar(1024),
        @ExceptionType   nvarchar(256),
        @Details         ntext
AS
BEGIN
    INSERT
        aspnet_WebEvent_Events
        (
            EventId,
            EventTimeUtc,
            EventTime,
            EventType,
            EventSequence,
            EventOccurrence,
            EventCode,
            EventDetailCode,
            [Message],
            ApplicationPath,
            ApplicationVirtualPath,
            MachineName,
            RequestUrl,         
   ExceptionType,
            Details        )
    VALUES
    (      @EventId,
        @EventTimeUtc,
        @EventTime,
        @EventType,
        @EventSequence,
        @EventOccurrence,
        @EventCode,
        @EventDetailCode,
        @Message,
        @ApplicationPath,
        @ApplicationVirtualPath,
        @MachineName,
        @RequestUrl,
        @ExceptionType,
        @Details    )
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Setup_RestorePermissions','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Setup_RestorePermissions
GO
CREATE PROCEDURE aspnet_Setup_RestorePermissions
    @name   sysname
AS
BEGIN
    DECLARE @object sysname
    DECLARE @protectType char(10)
    DECLARE @action varchar(60)
    DECLARE @grantee sysname
    DECLARE @cmd nvarchar(500)
    DECLARE c1 cursor FORWARD_ONLY FOR   SELECT [Object], ProtectType, [Action], Grantee FROM #aspnet_Permissions where [Object] = @name

    OPEN c1

    FETCH c1 INTO @object, @protectType, @action, @grantee
    WHILE (@@fetch_status = 0)
    BEGIN
        SET @cmd = @protectType + ' ' + @action + ' on ' + @object + ' TO [' + @grantee + ']'
        EXEC (@cmd)
        FETCH c1 INTO @object, @protectType, @action, @grantee
    END

    CLOSE c1
    DEALLOCATE c1
END
GO

-- *******************************************************************************************************

IF (OBJECT_ID('aspnet_Setup_RemoveAllRoleMembers','P') IS NOT NULL)
    DROP PROCEDURE aspnet_Setup_RemoveAllRoleMembers
GO
CREATE PROCEDURE aspnet_Setup_RemoveAllRoleMembers
    @name   sysname
AS
BEGIN
    CREATE TABLE #aspnet_RoleMembers
    (
        Group_name      sysname,
        Group_id        smallint,
        Users_in_group  sysname,
        User_id         smallint
    )

    INSERT INTO #aspnet_RoleMembers
    EXEC sp_helpuser @name

    DECLARE @user_id smallint
    DECLARE @cmd nvarchar(500)
    DECLARE c1 cursor FORWARD_ONLY FOR
        SELECT User_id FROM #aspnet_RoleMembers

    OPEN c1

    FETCH c1 INTO @user_id
    WHILE (@@fetch_status = 0)
    BEGIN
        SET @cmd = 'EXEC sp_droprolemember ' + '''' + @name + ''', ''' + USER_NAME(@user_id) + ''''
        EXEC (@cmd)
        FETCH c1 INTO @user_id
    END

    CLOSE c1
    DEALLOCATE c1
END
GO

-- ***************************************************************************************************************
-- PROCEDIMIENTOS DE IVON
-- ***************************************************************************************************************

IF (OBJECT_ID(N'aspnet_Roles_CreateRole', N'P') IS NOT NULL)
	DROP procedure aspnet_Roles_CreateRole
GO
CREATE PROCEDURE aspnet_Roles_CreateRole
    @ApplicationName  nvarchar(256),
    @RoleName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
        BEGIN TRANSACTION
        SET @TranStarted = 1
    END
    ELSE
        SET @TranStarted = 0

    EXEC aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF (EXISTS(SELECT RoleId FROM aspnet_Roles WHERE LoweredRoleName = LOWER(@RoleName) AND ApplicationId = @ApplicationId))
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    INSERT INTO aspnet_Roles
                (ApplicationId, RoleName, LoweredRoleName)
         VALUES (@ApplicationId, @RoleName, LOWER(@RoleName))

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
        COMMIT TRANSACTION
    END

    RETURN(0)

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
 
       ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END


----
go


IF (OBJECT_ID(N'Fu_ObtenerDateTime', N'FN') IS NOT NULL)
	DROP Function Fu_ObtenerDateTime
GO
create Function Fu_ObtenerDateTime
(
	@fecha datetime
) returns varchar(30)
  /*
Autor: Alexander Quito
*/
as
  
begin 
 
declare @date varchar(10) = convert(varchar(10),@fecha,101)

declare @time varchar(20) = convert(varchar(20),@fecha,100)
set @time = (select da.item from dbo.fu_Split(@time,' ') da where da.id=4)

declare @variable varchar(30) = @date + ' ' + @time

return @variable
   
end


----
go


IF (OBJECT_ID(N'Fu_ObtenerDocuments', N'FN') IS NOT NULL)
	DROP Function Fu_ObtenerDocuments
GO
create Function Fu_ObtenerDocuments
(	
	@Eve_codigo int
	, @separador bit = 0
) returns varchar(max)
  /*
Autor: Alexander Quito
*/
as
  
begin 

--select dbo.Fu_ObtenerDocuments(13)

declare @tbDocument table(
	Id int identity(1,1),
	Tia_nombre varchar(800),
	Eta_archivosSubidos tinyint,
	Eta_numArchivos tinyint
)

insert into @tbDocument (Tia_nombre, Eta_archivosSubidos, Eta_numArchivos)
select ta.Tia_nombre, isnull(eta.Eta_archivosSubidos,0), isnull(eta.Eta_numArchivos,0)
from EventoTipoArchivo eta
join TipoArchivo ta on eta.Tia_codigo = ta.Tia_codigo
where eta.Eve_codigo = @Eve_codigo and eta.Eta_vigencia = 1
  
DECLARE @variable varchar(max)=''
declare @next int = 1, @registros int = (select count(*) from @tbDocument)
declare @salto char(2) = char(10) + char(13)

if (@separador = 1)
	set @salto = ', '
WHILE @registros >= @next
BEGIN
	declare @tia_nombre varchar(800), @Eta_archivosSubidos tinyint, @Eta_numArchivos tinyint

	select @tia_nombre = Tia_nombre, @Eta_archivosSubidos = Eta_archivosSubidos, @Eta_numArchivos = Eta_numArchivos from @tbDocument where Id = @next

	set @variable = @variable + (@tia_nombre + ' (' + cast(@Eta_archivosSubidos as varchar(3)) + ' of ' + cast(@Eta_numArchivos as varchar(3))) + ')' + @salto 
	set @next = @next +1
END

if len(@variable) > 0  and @separador = 1	
		set @variable = SUBSTRING(@variable,1,len(@variable)-1)

return @variable
   
end


----
go


IF (OBJECT_ID(N'Fu_ObtenerInfoBusy ', N'FN') IS NOT NULL)
	DROP Function Fu_ObtenerInfoBusy 
GO
create Function Fu_ObtenerInfoBusy 
(	
	@fechaInicio datetime
	, @fechaFin datetime
	, @Use_code int
	, @Eve_codigo int
) returns varchar(max)
  /*
Autor: Alexander Quito
*/
as
  
begin 

declare @tbRegistro table(
	Id int identity(1,1),
	Patient varchar(800),
	FechaInicio datetime,
	FechaFin datetime
)

insert into @tbRegistro (Patient, FechaInicio, FechaFin)
select distinct isnull((pa.Pat_firstName + ' ' + pa.Pat_lastName), te.Tie_nombre), cu.Cau_inicio, cu.Cau_fin
from CalendarioUsuario cu
join TipoEvento te on te.Tie_codigo = cu.Tie_codigo

left join Evento eve on cu.Eve_codigo = eve.Eve_codigo
left join CaseInformationSheetHead cas on cas.Cis_code = eve.Cis_code
left join PATIENT pa on pa.Pat_code = cas.Pat_code
where (@Eve_codigo=0 or isnull(cu.Eve_codigo,0) <> @Eve_codigo) and cu.Cau_vigencia = 1 and @Use_code=cu.Use_code and
	  (isnull(cu.Eve_codigo,0)=0 or (select count(*) from Evento ev where ev.Eve_codigo=cu.Eve_codigo and ev.Ese_codigo in (1,5))>0) and
	  ( (@fechaInicio between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or (@fechaFin between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or
		(dateadd(mi,1,cu.Cau_inicio) between @fechaInicio and @fechaFin)
	  )
  
DECLARE @variable varchar(max)=''
declare @next int = 1, @registros int = (select count(*) from @tbRegistro)

WHILE @registros >= @next
BEGIN
	declare @patient varchar(800), @fechaI varchar(20), @fechaF varchar(20)

	select @patient = Patient, @fechaI = convert(varchar(20), FechaInicio, 22), @fechaF = convert(varchar(20), FechaFin, 22) from @tbRegistro where Id = @next

	set @variable = @variable + (@patient + ', ' + @fechaI + ' - ' + @fechaF)  + '<br/>'
	set @next = @next +1
END

if len(@variable) > 0 set @variable = SUBSTRING(@variable,1,len(@variable)-5)

return @variable
   
end


----
go


IF (OBJECT_ID(N'Fu_ObtenerInicialesUsuario', N'FN') IS NOT NULL)
	DROP FUNCTION Fu_ObtenerInicialesUsuario
GO
create Function Fu_ObtenerInicialesUsuario
(
	@Dae_code int
	,@Use_code int 
) returns varchar(100)  
as
begin 
DECLARE @variable varchar(100)=''
DECLARE @commentary varchar(MAX)=''

set @commentary = (select Dae_comment from DataEntry where Dae_code = @Dae_code)

if (rtrim(ltrim(@commentary)) != '')
	set @variable = (select ' ' + upper(ltrim(rtrim(left(isnull(Use_firstName,' '),1))) + '' + ltrim(rtrim(left(isnull(Use_lastName,' '),1))))   from [User] where Use_code = @Use_code)
	--ltrim(rtrim(isnull(lastname,''))))
	

return @variable
end 




----
go


IF (OBJECT_ID(N'Fu_ObtenerLastCall', N'FN') IS NOT NULL)
	DROP Function Fu_ObtenerLastCall
GO
create Function Fu_ObtenerLastCall
(
	@Eve_codigo int
) returns varchar(max)  
as
begin 
     declare @fecha varchar(max)=''
	 set @fecha = ISNULL((select TOP 1 cast(Dae_date as VARCHAR(20)) from DataEntry 
	 where Eve_codigo =  @Eve_codigo 
	 AND Dae_deletingStatus = 0
	 and Dae_call=1 ORDER BY cast(Dae_date as date) DESC),'-')	 
		
	 RETURN @fecha
end
go

IF (OBJECT_ID(N'Fu_ObtenerMinutesFromTime', N'FN') IS NOT NULL)
	DROP Function Fu_ObtenerMinutesFromTime
GO
create Function Fu_ObtenerMinutesFromTime
(
	@time varchar(100)
) returns int
  /*
Autor: Alexander Quito
*/
as  
begin  
DECLARE @variable int = 0

declare @hour varchar(2) = (select ti.item from dbo.fu_Split(@time, ':') ti where ti.id = 1)
declare @minute varchar(2) = (select ti.item from dbo.fu_Split(@time, ':') ti where ti.id = 2)

set @variable = cast(@hour as int) * 60 + cast(@minute as int)

return @variable
   
end
go

IF (OBJECT_ID(N'Fu_ObtenerMotivosCambioEstado', N'FN') IS NOT NULL)
	DROP Function Fu_ObtenerMotivosCambioEstado
GO
Create Function Fu_ObtenerMotivosCambioEstado
(
	@Eve_codigo int
	,@separador bit = 0
) returns varchar(max)
  /*
Autor: Alexander Quito
*/
as
  
begin 

declare @tbDocument table(
	Id int identity(1,1),
	Mot_descripcion varchar(1000),
	Mot_fechaSistema date
)

insert into @tbDocument (Mot_descripcion,Mot_fechaSistema)
select isnull(convert(varchar(10), cast(Mot_fechaSistema as date), 101) + ': ' + mce.Mot_descripcion,''), Mot_fechaSistema
from MotivoCambioEstado mce
join EventoHistorial eh on eh.Mot_codigo=mce.Mot_codigo
where mce.Mot_vigencia=1 and eh.Eve_codigo=@Eve_codigo
union
select isnull(convert(varchar(10), cast(Mot_fechaSistema as date), 101) + ': ' + mce.Mot_descripcion,''), Mot_fechaSistema
from MotivoCambioEstado mce
join Evento e on e.Mot_codigo=mce.Mot_codigo
where mce.Mot_vigencia=1 and e.Eve_codigo=@Eve_codigo
order by Mot_fechaSistema desc
  
DECLARE @variable varchar(max)=''
declare @next int = 1, @registros int = (select count(*) from @tbDocument)
declare @salto char(2) = char(10) --+ char(13)

if (@separador = 1)
	set @salto = ', '

WHILE @registros >= @next
BEGIN
	declare @Mot_descripcion varchar(1000)
	select @Mot_descripcion = Mot_descripcion from @tbDocument where Id = @next

	if len(ltrim(rtrim(@Mot_descripcion)))>0 set @variable = @variable + @Mot_descripcion + @salto

	set @next = @next +1
END

if len(@variable) > 0  and @separador = 1	
	set @variable = SUBSTRING(@variable,1,len(@variable)-1)

return @variable
   
end
go

IF (OBJECT_ID(N'Fu_ObtenerRoles', N'FN') IS NOT NULL)
	DROP Function Fu_ObtenerRoles
GO
CREATE Function Fu_ObtenerRoles
(
	@UserId uniqueidentifier
)returns varchar(max)
  /*
Autor: Alexander Quito
*/
as  
begin 
  
DECLARE @RoleName varchar(100),@variable varchar(max)=''
DECLARE @cursor cursor

SET @cursor = CURSOR FOR
select distinct ar.RoleName from aspnet_Roles ar join aspnet_UsersInRoles aur on aur.RoleId = ar.RoleId where aur.UserId = @UserId

OPEN @cursor 
FETCH NEXT FROM @cursor 
INTO @RoleName

WHILE @@FETCH_STATUS = 0
BEGIN	 	
	set @variable=@variable + (@RoleName)  + ','	
	FETCH NEXT FROM @cursor INTO @RoleName
END

if len(@variable) > 0 set @variable = SUBSTRING(@variable,0,len(@variable))

return @variable
   
end
go

IF (OBJECT_ID(N'Fu_ObtenerUsersInCalendar', N'FN') IS NOT NULL)
	DROP Function Fu_ObtenerUsersInCalendar
GO
create Function Fu_ObtenerUsersInCalendar
(
	@Cau_codigo int
)returns varchar(max)
  /*
Autor: Alexander Quito
*/
as  
begin 
  
DECLARE @cod_user char(4),@variable varchar(max)=''
DECLARE @cursor cursor

SET @cursor = CURSOR FOR
select use_code from CalendarioAgenda where Cau_codigo = @Cau_codigo

OPEN @cursor 
FETCH NEXT FROM @cursor 
INTO @cod_user

WHILE @@FETCH_STATUS = 0
BEGIN	 	
	set @variable=@variable + (@cod_user)  + ','	
	FETCH NEXT FROM @cursor INTO @cod_user
END

if len(@variable) > 0 set @variable = SUBSTRING(@variable,0,len(@variable))

return @variable
   
end
go

IF (OBJECT_ID(N'Fu_ObtenerUsersInReminder', N'FN') IS NOT NULL)
	DROP Function Fu_ObtenerUsersInReminder
GO
CREATE Function Fu_ObtenerUsersInReminder 
(
	@Ret_codigo int
)returns varchar(max)
  /*
Autor: Alexander Quito
*/
as
  
begin 
  
DECLARE @cod_user char(4),@variable varchar(max)=''
DECLARE @cursor cursor

SET @cursor = CURSOR FOR
select Use_code from RecordatorioUsuario where Ret_codigo = @Ret_codigo

OPEN @cursor 
FETCH NEXT FROM @cursor 
INTO @cod_user

WHILE @@FETCH_STATUS = 0
BEGIN	 	
	set @variable=@variable + (@cod_user)  + ','	
	FETCH NEXT FROM @cursor INTO @cod_user
END

if len(@variable) > 0 set @variable = SUBSTRING(@variable,0,len(@variable))

return @variable
   
end
go

IF (OBJECT_ID(N'fu_replacecomillas', N'FN') IS NOT NULL)
	DROP Function fu_replacecomillas
GO
create Function fu_replacecomillas (@cadena VARCHAR(MAX)) returns VARCHAR(MAX)
as  
begin  
set @cadena = (select replace(@cadena,'"',''))
return @cadena   
end
go

IF (OBJECT_ID(N'fu_Split', N'TF') IS NOT NULL)
	DROP Function fu_Split
GO
CREATE FUNCTION fu_Split
(
	@sParametroList VARCHAR(MAX) -- Cadena de datos a separar
	,@cDelimitador VARCHAR(8000) = ',' -- Separador de Datos
) RETURNS @ListaTemporal TABLE (id int identity(1,1) not null primary key, item VARCHAR(MAX))
BEGIN
	DECLARE @sItem VARCHAR(8000)
	WHILE CHARINDEX(@cDelimitador,@sParametroList,0) <> 0
	BEGIN
		SELECT
		@sItem=RTRIM(LTRIM(
					SUBSTRING(@sParametroList, 1, CHARINDEX(@cDelimitador,@sParametroList,0)-1)
					)),
		@sParametroList=RTRIM(LTRIM(
					SUBSTRING(@sParametroList, CHARINDEX(@cDelimitador,@sParametroList,0)+LEN(@cDelimitador),LEN(@sParametroList))
					))

		IF LEN(@sItem) > 0	INSERT INTO @ListaTemporal SELECT @sItem
	END
	
	IF LEN(@sParametroList) > 0
		INSERT INTO @ListaTemporal SELECT @sParametroList -- Coloca luego del último elemento

	RETURN
END
go

IF (OBJECT_ID(N'Fu_ValidarEstadoCompletado', N'FN') IS NOT NULL)
	DROP Function Fu_ValidarEstadoCompletado
GO
create Function Fu_ValidarEstadoCompletado (@Eve_codigo int) returns bit
  /*
Autor: Manuel Garcia
*/
as  
begin 
declare @Cantidad int=0
declare @Completado bit=0
declare @eve_inicio datetime=(select eve_inicio from evento where eve_codigo=@Eve_codigo)  ---IVON TORRES

set @Cantidad = (select COUNT(*) from EventoTipoArchivo ETA where Eve_codigo=@Eve_codigo and Eta_vigencia = 1 and ETA.Eta_numArchivos>Eta_archivosSubidos)
if @Cantidad = 0 and exists(select ev.Eve_codigo from Evento ev where ev.Eve_codigo=@Eve_codigo and (ev.Eve_nov=0 or ev.Eve_codigoNov is not null)) 
and @eve_inicio < getdate() 	
--and (select Con_confirmMed from Confirmacion where con_codigo=(select Con_codigo from Evento where Eve_codigo=@Eve_codigo))=1 
--and (((select Con_confirmProv from Confirmacion where con_codigo=(select Con_codigo from Evento where Eve_codigo=@Eve_codigo)) =1) or (select Tie_needNurse from TipoEvento where Tie_codigo=(select Tie_codigo from Evento where Eve_codigo=@Eve_codigo))=0)

--and (select ese_codigo from evento where Eve_codigo=@Eve_codigo) = 1
	begin--El evento se encuentra con todos los requerimientos para cambiar a estado Completado
		Set @Completado=0
	end
else
	begin--El evento aun no se encuentra con todos los requerimientos para cambiar a estado Completado
		Set @Completado=1
	end

return @Completado
   
end
go

IF (OBJECT_ID(N'key_desencriptar', N'P') IS NOT NULL)
	DROP procedure key_desencriptar
GO
create procedure key_desencriptar
(
@cod_cis varchar(15)
)
as
declare @pin char(50) , @fecha char(10) , @add varchar(8) , @dia char(2) , @mes int , @año int 
set @mes = rtrim(ltrim(convert(varchar(2),datepart(month,GETDATE()))))
set @dia = left((datename(day,GETDATE())),2)
set @año = rtrim(ltrim(convert(varchar(4),datepart(year,GETDATE()))))
set @add = @mes + @dia + @año
set @pin = ABS(CAST(NEWID() as binary(10)) % 1000000000) + 1  /*+ upper(@add)*/
select @pin number
go

IF (OBJECT_ID(N'pa_ACTIVITIES', N'P') IS NOT NULL)
	DROP procedure pa_ACTIVITIES
GO
CREATE PROCEDURE pa_ACTIVITIES
             @cod_act    char(10)=Null,
             @description_act    varchar(255)=Null,
             @cod_type    char(2)=Null,
             @price_act    decimal(5)=Null

,@TipoConsulta tinyint
AS 
if @TipoConsulta=1 
Begin
             UPDATE dbo.[Activity]SET 
                          [Act_description]=@description_act,
                          [Aty_code]=@cod_type,
                          [Act_price]=@price_act
             WHERE  Act_code = @cod_act

End

--===========================================================================================
--==========PROCEDIMIENTO ACTIVITIESGetByAll ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=2
begin
select * from [Activity] where Act_code_old<>'13AC000045' ORDER BY Act_description
End

--===========================================================================================
--==========PROCEDIMIENTO ACTIVITIESGetByPrimaryKey ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=3
begin
Select * from [Activity]
WHERE  Act_code = @cod_act
End

--===========================================================================================
--==========PROCEDIMIENTO ACTIVITIESInsert ========================
--===========================================================================================
--===========================================================================================
--else if @TipoConsulta=4
--Begin
--             INSERT INTO [dbo].[Activity]
--             (
--                          [cod_act],
--                          [description_act],
--                          [cod_type],
--                          [price_act]

--             )
--             VALUES
--             (
--                          @cod_act,
--                          @description_act,
--                          @cod_type,
--                          @price_act

--             )
--             SET @cod_act= @@IDENTITY
--End

--===========================================================================================
--==========PROCEDIMIENTO ACTIVITIESDelete ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=5
begin
Delete from [Activity]
WHERE  Act_code = @cod_act
end

--===========================================================================================
else if @TipoConsulta=6
begin
Select * from [Activity]
where Act_description Like @description_act+ '%'
end

--===========================================================================================
--==========PROCEDIMIENTO ACTIVITIESGetcod_type ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=7
Begin
Select * from [Activity]
where Aty_code = @cod_type
end

--===========================================================================================
--===========================================================================================
--==========PROCEDIMIENTO ACTIVITIESDelete ========================
--===========================================================================================
--===========================================================================================
else
begin
Delete from [Activity]
end





----
go


--===========================================================================================
--==========PROCEDIMIENTO aspnet_RolesUpdate ========================
--===========================================================================================
--===========================================================================================
IF (OBJECT_ID(N'pa_aspnet_Roles', N'P') IS NOT NULL)
	DROP procedure pa_aspnet_Roles
GO
create PROCEDURE pa_aspnet_Roles
             @ApplicationId    uniqueidentifier=Null,
             @RoleId    uniqueidentifier=Null,
             @RoleName    nvarchar(512)=Null,
             @LoweredRoleName    nvarchar(512)=Null,
             @Description    nvarchar(512)=Null,
             @Vigencia    bit=Null

,@TipoConsulta tinyint
AS 
if @TipoConsulta=1 
Begin
	if (Select count(*) from aspnet_Roles A	where rtrim(ltrim(RoleName)) = rtrim(ltrim(@RoleName)) and RoleId<>@RoleId) = 0
	begin
            UPDATE dbo.[aspnet_Roles]
			SET
                [RoleName]=@RoleName,
                [LoweredRoleName]=@RoleName,
                [Description]=@Description,
                [Vigencia]=@Vigencia
            WHERE  RoleId = @RoleId
	end
End

--===========================================================================================
--==========PROCEDIMIENTO aspnet_RolesGetByAll ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=2
begin
	Select * from aspnet_Roles ar where ar.Vigencia = @Vigencia order by ar.Orden
End

--===========================================================================================
--==========PROCEDIMIENTO aspnet_RolesGetByPrimaryKey ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=3
begin
	Select * from aspnet_Roles
	WHERE  RoleId = @RoleId
End

--===========================================================================================
--==========PROCEDIMIENTO aspnet_RolesInsert ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=4
Begin
             INSERT INTO [dbo].[aspnet_Roles]
             (
                          [ApplicationId],
                          [RoleId],
                          [RoleName],
                          [LoweredRoleName],
                          [Description],
                          [Vigencia]

             )
             VALUES
             (
                          @ApplicationId,
                          @RoleId,
                          @RoleName,
                          @LoweredRoleName,
                          @Description,
                          @Vigencia

             )             
End

--===========================================================================================
--==========PROCEDIMIENTO aspnet_RolesDelete ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=5
begin
	update aspnet_Roles set Vigencia = 0 WHERE  RoleId = @RoleId
end
else if @TipoConsulta=6
begin
	
	Select A.*
	from aspnet_Roles A	
	where RoleName = @RoleName
	
end
go

IF (OBJECT_ID(N'pa_ATTORNEY', N'P') IS NOT NULL)
	DROP procedure pa_ATTORNEY
GO
create PROCEDURE pa_ATTORNEY
             @cis_code    int =Null

,@TipoConsulta tinyint
AS 
if @TipoConsulta=1 
Begin
            
	select dbo.fu_replacecomillas(at.Att_firstName)name_att, dbo.fu_replacecomillas(at.Att_lastName)last_att, dbo.fu_replacecomillas(at.Att_address)address_att,
	dbo.fu_replacecomillas(at.Att_city)city, dbo.fu_replacecomillas(at.Att_state)state, dbo.fu_replacecomillas(at.Att_zipCode)zipcode, dbo.fu_replacecomillas(at.Att_zipCodeExt)zip_ext,
	dbo.fu_replacecomillas(at.Att_phone)phone_att, dbo.fu_replacecomillas(at.Att_fax)fax_att, dbo.fu_replacecomillas(sp.Spe_name)name_spc, dbo.fu_replacecomillas(at.Att_assistant)assistant
	from ATTORNEY at
	join CaseInformationSheetBodyAtt ca on ca.Att_code=at.Att_code and ltrim(rtrim(ca.cis_code))=@cis_code
	join Specialty sp on sp.Spe_code=at.Spe_code

End


----
go


--===========================================================================================
--==========PROCEDIMIENTO CalendarioUsuarioUpdate ========================
--===========================================================================================
--===========================================================================================
IF (OBJECT_ID(N'pa_CalendarioUsuario', N'P') IS NOT NULL)
	DROP procedure pa_CalendarioUsuario
GO
create PROCEDURE pa_CalendarioUsuario
             @Cau_codigo    int=Null output,
			 @Result    int=Null output,
			 			 
             @use_code		int=Null,
			 @Cau_registeredUser	int=Null,

             @Cau_inicio    datetime=Null,
             @Cau_fin    datetime=Null,
             @Cau_descripcion    text=Null,
             @Cau_vigencia    bit=Null,
             @Cau_mostrarMV    bit=Null,
             @Eve_codigo    int=Null,
			 @Tie_codigo	tinyint=Null,
			 @SaveBusy	bit=Null,

			 @year int=null,
			 @month int=null,
			 @TipoBusq int=null,

			 @OnlyAgenda	bit=NULL,
			 @eventTypes	varchar(400)=Null,
			 @roles			varchar(400)=Null,
			 @usuarios		varchar(400)=Null,
			 @Cau_allday	bit=Null
,@TipoConsulta tinyint
AS 

declare @isSupervisor bit = 0
declare @workDayStart int, @workDayEnd int, @timeStart int, @timeEnd int

if @TipoConsulta=1 
Begin
	set @workDayStart = (select dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), cast(('2012-01-01 ' + con.Cof_valor) as datetime), 8)) from Configuracion con where con.Cof_identificador = 'dayStart')
	set @workDayEnd = (select dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), cast(('2012-01-01 ' + con.Cof_valor) as datetime), 8)) from Configuracion con where con.Cof_identificador = 'dayEnd')
			
	set @timeStart = dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), @Cau_inicio, 8))
	set @timeEnd = dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), @Cau_fin, 8))
	if @Cau_allday=1 or ( (@timeStart>=@workDayStart and @timeStart<=@workDayEnd) and (@timeEnd>=@workDayStart and @timeEnd<=@workDayEnd) )
	begin
		if exists(select us.use_code from [USER] us join aspnet_UsersInRoles aur on aur.UserId=us.UserId join aspnet_Roles ar on ar.RoleId=aur.RoleId where us.use_code=@use_code and ar.RoleName='Supervisor')
			set @isSupervisor = 1

		if  @SaveBusy = 1 or
			(select count(*) from CalendarioUsuario cu
			 join TipoEvento te on cu.Tie_codigo=te.Tie_codigo
			 where cu.Cau_vigencia = 1 and cu.Cau_codigo <> @Cau_codigo and cu.use_code=@use_code and
				(isnull(cu.Eve_codigo,0)=0 or exists(select ev.Eve_codigo from Evento ev where ev.Eve_codigo=cu.Eve_codigo and ev.Ese_codigo in (1,5))) and (@isSupervisor=0 or (@isSupervisor=1 and te.Tie_programable=0)) and
				( (@Cau_inicio between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or (@Cau_fin between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or
				  (dateadd(mi,1,cu.Cau_inicio) between @Cau_inicio and @Cau_fin)
				)
			) = 0
		begin
			if @Tie_codigo is null
				UPDATE dbo.[CalendarioUsuario]SET 
					[use_code]=@use_code,
					[Cau_inicio]=@Cau_inicio,
					[Cau_fin]=@Cau_fin,
					[Cau_descripcion]=@Cau_descripcion,
					[Cau_mostrarMV]=@Cau_mostrarMV
				WHERE Cau_codigo = @Cau_codigo
			else
				UPDATE dbo.[CalendarioUsuario]SET 
					[use_code]=@use_code,
					[Cau_inicio]=@Cau_inicio,
					[Cau_fin]=@Cau_fin,
					[Cau_descripcion]=@Cau_descripcion,
					[Cau_mostrarMV]=@Cau_mostrarMV,
					Tie_codigo=@Tie_codigo,
					Cau_allday = @Cau_allday
				WHERE Cau_codigo = @Cau_codigo

			delete from CalendarioAgenda WHERE Cau_codigo = @Cau_codigo

			insert into CalendarioAgenda (Cau_codigo, use_code)		
			select @Cau_codigo, us.item from dbo.fu_Split(@usuarios, ',') us where len(rtrim(ltrim(us.item)))>0
			
			set @Result = 1
		end
		else
			SET @Result = -1
	end
	else
		SET @Result = -2
End

--===========================================================================================
--==========PROCEDIMIENTO CalendarioUsuarioGetByAll ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=2
begin
	Select cal.*, te.Tie_nombre, usys.Use_color, dbo.Fu_ObtenerUsersInCalendar(cal.Cau_codigo) users,
		   (select top 1 us.Use_firstName + ' ' +us.Use_lastName from CalendarioAgenda ca join [USER] us on ca.use_code=us.use_code where ca.Cau_codigo=cal.Cau_codigo order by (case when ca.use_code=@use_code then 1 else 0 end) desc) Usuario
	from CalendarioUsuario cal
	join [USER] usys on cal.use_code = usys.use_code
	
	join TipoEvento te on te.Tie_codigo = cal.Tie_codigo
	where cal.Cau_vigencia = 1 and
		  (len(@roles)=0 or (select count(*) from [dbo].[fu_Split](@roles, ',') rol where rol.item in (select ar.RoleName from aspnet_Roles ar join aspnet_UsersInRoles aur on aur.RoleId = ar.RoleId where aur.UserId = usys.UserId)) > 0) and
		  (len(@eventTypes)=0 or cal.Tie_codigo in (select rtrim(ltrim(et.item)) from [dbo].[fu_Split](@eventTypes, ',') et)) and
	      (len(@usuarios)=0 or rtrim(ltrim(cal.use_code)) in (select rtrim(ltrim(usu.item)) from [dbo].[fu_Split](@usuarios, ',') usu))
End

--===========================================================================================
--==========PROCEDIMIENTO CalendarioUsuarioGetByPrimaryKey ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=3
begin
	Select ca.*,dateadd(mi,-1,ca.Cau_fin) as Cau_fin_resta, te.Tie_nombre,te.Tie_showOnExchange
	from CalendarioUsuario ca
	join TipoEvento te on ca.Tie_codigo = te.Tie_codigo
	WHERE ca.Cau_codigo = @Cau_codigo and Cau_vigencia = 1
End

--===========================================================================================
--==========PROCEDIMIENTO CalendarioUsuarioInsert ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=4
Begin
	set @workDayStart = (select dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), cast(('2012-01-01 ' + con.Cof_valor) as datetime), 8)) from Configuracion con where con.Cof_identificador = 'dayStart')
	set @workDayEnd = (select dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), cast(('2012-01-01 ' + con.Cof_valor) as datetime), 8)) from Configuracion con where con.Cof_identificador = 'dayEnd')
	
	set @timeStart = dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), @Cau_inicio, 8))
	set @timeEnd = dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), @Cau_fin, 8))
	if @Cau_allday=1 or ( (@timeStart>=@workDayStart and @timeStart<=@workDayEnd) and (@timeEnd>=@workDayStart and @timeEnd<=@workDayEnd) )
	begin	
		if exists(select us.use_code from [USER] us join aspnet_UsersInRoles aur on aur.UserId=us.UserId join aspnet_Roles ar on ar.RoleId=aur.RoleId where us.use_code=@use_code and ar.RoleName='Supervisor')
			set @isSupervisor = 1

		if  @SaveBusy = 1 or
			not exists(
			select cu.Cau_codigo from CalendarioUsuario cu
			join TipoEvento te on cu.Tie_codigo=te.Tie_codigo
			where cu.Cau_vigencia=1 and cu.use_code=@use_code and
				(isnull(cu.Eve_codigo,0)=0 or exists(select ev.Eve_codigo from Evento ev where ev.Eve_codigo=cu.Eve_codigo and ev.Ese_codigo in (1,5))) and (@isSupervisor=0 or (@isSupervisor=1 and te.Tie_programable=0)) and
				( (@Cau_inicio between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or (@Cau_fin between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or
				  (dateadd(mi,1,cu.Cau_inicio) between @Cau_inicio and @Cau_fin)
				)
			)
		begin		
			INSERT INTO [dbo].[CalendarioUsuario]
			(
				[use_code],
				Cau_registeredUser,
				[Cau_inicio],
				[Cau_fin],
				[Cau_descripcion],
				[Cau_vigencia],
				[Cau_mostrarMV],
				[Eve_codigo],
				Tie_codigo,
				Cau_allday
			)
			VALUES
			(
				@use_code,
				@Cau_registeredUser,
				@Cau_inicio,
				@Cau_fin,
				@Cau_descripcion,
				1,
				@Cau_mostrarMV,
				@Eve_codigo,
				@Tie_codigo,
				@Cau_allday
			)
			SET @Cau_codigo = @@IDENTITY

			insert into CalendarioAgenda (Cau_codigo, use_code)
			select @Cau_codigo, us.item from dbo.fu_Split(@usuarios, ',') us where len(rtrim(ltrim(us.item)))>0
		end
		else
			SET @Cau_codigo = 0
	end
	else
		SET @Cau_codigo = -2
End

--===========================================================================================
--==========PROCEDIMIENTO CalendarioUsuarioDelete ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=5
begin
	if (select Eve_codigo from CalendarioUsuario where Cau_codigo = @Cau_codigo) is null
	begin
		update CalendarioUsuario set Cau_vigencia = 0 WHERE Cau_codigo = @Cau_codigo
		set @Result = 1
	end
	else
	begin
		set @Result = 0
	end
end

--===========================================================================================
else if @TipoConsulta=6
begin
	Select * from CalendarioUsuario
	where use_code Like @use_code+ '%'
end

--===========================================================================================
--==========PROCEDIMIENTO CalendarioUsuarioGetcod_user ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=7
Begin
	Select * from CalendarioUsuario
	where use_code = @use_code and Cau_vigencia = 1
end

--===========================================================================================
--===========================================================================================
--==========PROCEDIMIENTO CalendarioUsuarioGetEve_codigo ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=8
Begin
	Select * from CalendarioUsuario
	where Eve_codigo = @Eve_codigo and Cau_vigencia = 1
end
else if @TipoConsulta=9
begin

	select cal.Cau_codigo, cal.Cau_inicio, cal.Cau_fin, dateadd(mi,-1,cal.Cau_fin) as Cau_fin_resta,cal.use_code, cal.Cau_descripcion, cal.Cau_mostrarMV, cal.Eve_codigo, cal.Tie_codigo, 
	       te.Tie_nombre, usys.Use_firstName + ' ' + usys.Use_lastName Usuario, usys.Use_color, dbo.Fu_ObtenerUsersInCalendar(cal.Cau_codigo) users
	from CalendarioUsuario cal
	join [USER] usys on cal.use_code = usys.use_code
	
	join TipoEvento te on te.Tie_codigo = cal.Tie_codigo
	where cal.Cau_vigencia = 1 and isnull(cal.Eve_codigo,0)=0 and
		  (len(@roles)=0 or (select count(*) from [dbo].[fu_Split](@roles, ',') rol where rol.item in (select ar.RoleName from aspnet_Roles ar join aspnet_UsersInRoles aur on aur.RoleId = ar.RoleId where aur.UserId = usys.UserId)) > 0) and
	      (len(@usuarios)=0 or rtrim(ltrim(cal.use_code)) in (select rtrim(ltrim(usu.item)) from [dbo].[fu_Split](@usuarios, ',') usu)) and
		  (len(@eventTypes)=0 or cal.Tie_codigo in (select rtrim(ltrim(et.item)) from [dbo].[fu_Split](@eventTypes, ',') et)) and
		  (@month=MONTH(cal.Cau_inicio) or @month=MONTH(cal.Cau_fin)) and (@year=year(cal.Cau_inicio) or @year=year(cal.Cau_fin)) and
		  (@use_code='' or @use_code in (select ca.use_code from CalendarioAgenda ca where ca.Cau_codigo=cal.Cau_codigo))
end
else if @TipoConsulta=10
begin
	
	if @TipoBusq = 1 -- solo agenda
	begin
		select distinct te.Tie_nombre patient, cu.Cau_codigo, cu.Cau_inicio, cu.Cau_fin, te.Tie_codigo, te.Tie_nombre, cu.use_code, cu.Eve_codigo
			   ,'Agenda' TipoDisp
		from CalendarioUsuario cu
		join TipoEvento te on te.Tie_codigo = cu.Tie_codigo
		where (@Eve_codigo=0 or isnull(cu.Eve_codigo,0) <> @Eve_codigo) and (@Cau_codigo=0 or cu.Cau_codigo<>@Cau_codigo) and
			   cu.Cau_vigencia = 1 and te.Tie_programable=0 and @use_code = cu.use_code and
				( (@Cau_inicio between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or (@Cau_fin between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or
				  (dateadd(mi,1,cu.Cau_inicio) between @Cau_inicio and @Cau_fin)
				)
	end
	else if @TipoBusq = 2 -- solo master viewer
	begin
		select distinct isnull((pa.pat_firstName + ' ' + pa.pat_lastName), te.Tie_nombre) patient, cu.Cau_codigo, cu.Cau_inicio, cu.Cau_fin, te.Tie_codigo, te.Tie_nombre, cu.use_code, cu.Eve_codigo
		       ,'MasterViewer' TipoDisp
		from CalendarioUsuario cu
		join TipoEvento te on te.Tie_codigo = cu.Tie_codigo
		left join Evento eve on cu.Eve_codigo = eve.Eve_codigo
		left join CaseInformationSheetHead cas on cas.cis_code = eve.cis_code
		left join PATIENT pa on pa.pat_code = cas.pat_code
		where (@Eve_codigo=0 or isnull(cu.Eve_codigo,0) <> @Eve_codigo) and (@Cau_codigo=0 or cu.Cau_codigo<>@Cau_codigo) and
			   cu.Cau_vigencia = 1 and (cu.Cau_mostrarMV=1 or isnull(cu.Eve_codigo,0)>0) and @use_code = cu.use_code and
			  (eve.Ese_codigo is null or eve.Ese_codigo in (1,4)) and
			  (   (@Cau_inicio between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or (@Cau_fin between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or
				  (dateadd(mi,1,cu.Cau_inicio) between @Cau_inicio and @Cau_fin)
			  )
	end
	else -- en agenda y masterviewer
	begin
		select distinct isnull((pa.pat_firstName + ' ' + pa.pat_lastName), te.Tie_nombre) patient, cu.Cau_codigo, cu.Cau_inicio, cu.Cau_fin, te.Tie_codigo, te.Tie_nombre, cu.use_code, cu.Eve_codigo
		       ,(case when (cu.Cau_mostrarMV=1 or isnull(cu.Eve_codigo,0)>0) then 'MasterViewer' else 'Agenda' end) TipoDisp
		from CalendarioUsuario cu
		join TipoEvento te on te.Tie_codigo = cu.Tie_codigo
		left join Evento eve on cu.Eve_codigo = eve.Eve_codigo
		left join CaseInformationSheetHead cas on cas.cis_code = eve.cis_code
		left join PATIENT pa on pa.pat_code = cas.pat_code
		where (@Eve_codigo=0 or isnull(cu.Eve_codigo,0) <> @Eve_codigo) and (@Cau_codigo=0 or cu.Cau_codigo<>@Cau_codigo) and 
			   cu.Cau_vigencia = 1 and @use_code = cu.use_code and
			  (eve.Ese_codigo is null or eve.Ese_codigo in (1,4)) and
		      (   (@Cau_inicio between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or (@Cau_fin between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or
				  (dateadd(mi,1,cu.Cau_inicio) between @Cau_inicio and @Cau_fin)
			  )
	end

end


else if @TipoConsulta=11
begin
	select cue.* from CalendarioUsuarioExchange cue inner join CalendarioUsuario cu on cu.Cau_codigo = cue.Cau_codigo
	WHERE cue.cau_codigo = @cau_codigo and cue.use_code = @use_code and Cau_vigencia = 1 and Caue_vigencia = 1

End


else if @TipoConsulta=12
begin
	Select cal.Cau_codigo, cal.Cau_descripcion, cal.Cau_inicio, cal.Cau_fin, te.Tie_nombre,
		   (select top 1 us.Use_firstName + ' ' +us.Use_lastName from  [USER] us where us.use_code = cal.use_code) Usuario
	from CalendarioUsuario cal
	join [USER] usys on cal.use_code = usys.use_code
	
	join TipoEvento te on te.Tie_codigo = cal.Tie_codigo
	where cal.Cau_vigencia = 1 and cau_codigo = @cau_codigo 
	/*and
		  (len(@roles)=0 or (select count(*) from [dbo].[fu_Split](@roles, ',') rol where rol.item in (select ar.RoleName from aspnet_Roles ar join aspnet_UsersInRoles aur on aur.RoleId = ar.RoleId where aur.UserId = usys.UserId)) > 0) and
		  (len(@eventTypes)=0 or cal.Tie_codigo in (select rtrim(ltrim(et.item)) from [dbo].[fu_Split](@eventTypes, ',') et)) and
	      (len(@usuarios)=0 or rtrim(ltrim(cal.use_code)) in (select rtrim(ltrim(usu.item)) from [dbo].[fu_Split](@usuarios, ',') usu))

		  */
End


else if @TipoConsulta=13
begin
	select cue.* from CalendarioUsuarioExchange cue inner join CalendarioUsuario cu on cu.Cau_codigo = cue.Cau_codigo	
	WHERE cue.cau_codigo = @cau_codigo and Cau_vigencia = 1 and Caue_vigencia = 1
End
go

IF (OBJECT_ID(N'pa_CalendarioUsuarioExchange', N'P') IS NOT NULL)
	DROP procedure pa_CalendarioUsuarioExchange
GO
create proc pa_CalendarioUsuarioExchange
(
	@Caue_codigo int = NULL,
	@Use_code int = NULL,
	@Cau_codigo int = NULL,
	@Caue_codExchange varchar(600) = NULL,
	@Caue_codExchangeSec varchar(600) = NULL,
	@tipoDelete int = NULL,
	@tipo VARCHAR(10) = NULL,
	@TipoConsulta tinyint
)
AS
BEGIN
	if @TipoConsulta = 1
	begin
		INSERT INTO [dbo].[CalendarioUsuarioExchange]
           ([Use_code]
           ,[Cau_codigo]
           ,[Caue_codExchange], Caue_codExchangeSec)
     VALUES
           (@Use_code,@Cau_codigo,@Caue_codExchange, @Caue_codExchangeSec)
	end
	if @TipoConsulta = 2
	begin
		select * from CalendarioUsuarioExchange where Caue_codigo = @Caue_codigo and Caue_vigencia = 1
	end
	if @TipoConsulta = 3
	begin
		if (@Use_code = '')
		BEGIN
			delete CalendarioUsuarioExchange 
			where Cau_codigo = @Cau_codigo
		END
		ELSE
		BEGIN
			delete CalendarioUsuarioExchange 
			where Cau_codigo = @Cau_codigo and Use_code = @Use_code
		END
		
	end

	if @TipoConsulta = 4
	begin
		/*select top 5 * from CalendarioUsuario where Cau_codigo = 40361 --order by 1 desc
		select * from CalendarioUsuarioExchange where Cau_codigo = 40361
		*/

		
		

		if (@tipoDelete = 1)
		begin
			if (@Use_code = '')
			BEGIN
				update CalendarioUsuarioExchange 
				set Caue_codExchange = null, Caue_vigencia = 0
				where Cau_codigo = @Cau_codigo and Caue_vigencia = 1
			END
			ELSE
			BEGIN
				update CalendarioUsuarioExchange 
				set Caue_codExchange = null, Caue_vigencia = 0
				where Cau_codigo = @Cau_codigo and Use_code = @Use_code and Caue_vigencia = 1
			END 
		end

		if (@tipoDelete = 2)
		begin
			if (@Use_code = '')
			BEGIN
				update CalendarioUsuarioExchange 
				set Caue_codExchangeSec = null, Caue_vigencia = 0
				where Cau_codigo = @Cau_codigo and Caue_vigencia = 1
			END
			ELSE
			BEGIN
				update CalendarioUsuarioExchange 
				set Caue_codExchangeSec = null, Caue_vigencia = 0
				where Cau_codigo = @Cau_codigo and Use_code = @Use_code and Caue_vigencia = 1
			END
		end
		if (@tipoDelete = 3)
		begin
			if (@Use_code = '')
			BEGIN
				update CalendarioUsuarioExchange 
				set Caue_codExchangeSec = null, Caue_codExchange = null, Caue_vigencia = 0
				where Cau_codigo = @Cau_codigo and Caue_vigencia = 1
			END
			ELSE
			BEGIN
				update CalendarioUsuarioExchange 
				set Caue_codExchangeSec = null, Caue_codExchange = null, Caue_vigencia = 0
				where Cau_codigo = @Cau_codigo and Use_code = @Use_code and Caue_vigencia = 1
			END
		end

		
	end
	if @TipoConsulta = 5
	begin
		
		if (@tipo = 'P')
		begin
			update CalendarioUsuarioExchange 
				set Caue_codExchange = @Caue_codExchange
			where Cau_codigo = @Cau_codigo and Use_code = @Use_code and Caue_vigencia = 1
		end

		if (@tipo = 'S')
		begin
			update CalendarioUsuarioExchange 
				set Caue_codExchangeSec = @Caue_codExchangeSec
			where Cau_codigo = @Cau_codigo and Use_code = @Use_code and Caue_vigencia = 1
		end

	END

	if @TipoConsulta = 6
	begin
		if (@Use_code = '')
		BEGIN
		IF(@tipo = 'P')
			update CalendarioUsuarioExchange 
			set Caue_codExchange = null, Caue_vigencia = 0
			where Cau_codigo = @Cau_codigo
		
		IF(@tipo = 'S')
			update CalendarioUsuarioExchange 
			set Caue_codExchangeSec = null, Caue_vigencia = 0
			where Cau_codigo = @Cau_codigo
		end
		ELSE
		BEGIN
			IF(@tipo = 'P')
				update CalendarioUsuarioExchange 
				set Caue_codExchange = null--, Caue_vigencia = 0
				where Cau_codigo = @Cau_codigo and Use_code = @Use_code
			IF(@tipo = 'S')
				update CalendarioUsuarioExchange 
				set Caue_codExchangeSec = null--, Caue_vigencia = 0
				where Cau_codigo = @Cau_codigo and Use_code = @Use_code
		END
	END

	if @TipoConsulta = 7
	BEGIN
		update CalendarioUsuarioExchange 
			set Caue_vigencia = 0
		where Cau_codigo = @Cau_codigo

		update CalendarioUsuario
			set Cau_vigencia = 0
		where Cau_codigo = @Cau_codigo

	END

	if @TipoConsulta = 8 -- para eliminar tarea
	BEGIN
		select cu.Cau_codigo, Caue_codigo, Caue_codExchange, Caue_codExchangeSec, cauex.Use_code 
		from CalendarioUsuario cu inner join CalendarioUsuarioExchange cauex on cauex.Cau_codigo = cu.Cau_codigo
		where Cau_vigencia = 0 and (isnull(Caue_codExchange,'') = '' OR isnull(Caue_codExchangeSec,'') = '')
		and Caue_vigencia = 1
	end

	if @TipoConsulta = 9 -- para insertar tarea
	BEGIN
		select cu.Cau_codigo, Caue_codigo, Caue_codExchange, Caue_codExchangeSec, cauex.Use_code, Caue_vigencia 
		from CalendarioUsuario cu inner join CalendarioUsuarioExchange cauex on cauex.Cau_codigo = cu.Cau_codigo
		where Cau_vigencia = 1 and (isnull(Caue_codExchange,'') = '' OR isnull(Caue_codExchangeSec,'') = '')
		and Caue_vigencia = 1
		and cast(Cau_inicio as date) >= cast('11/30/2015' as date)
	end
END
go

IF (OBJECT_ID(N'pa_Case_Information_Sheet_Head', N'P') IS NOT NULL)
	DROP procedure pa_Case_Information_Sheet_Head
GO
create PROCEDURE pa_Case_Information_Sheet_Head
             @cod_cis    char(15)=Null,
             @cod_ins    char(10)=Null,
             @cod_pat    char(10)=Null,
             @cod_adj    char(10)=Null,
             @cod_pro    char(10)=Null,
             @price    decimal(5)=Null,
             @accident_date    smalldatetime=Null,
             @case_cod    varchar(25)=Null,
             @date_referal    smalldatetime=Null,
             @status    char(1)=Null,
             @transportation    char(1)=Null,
             @comentario    varchar(255)=Null,
             @cod_user    char(4)=Null,
             @Injury    nvarchar(3000)=Null,
             @Ocupado    char(1)=Null,
             @usuario    char(4)=Null,
             @trasportation_company    varchar(150)=Null,
             @traslation    char(1)=Null,
             @traslation_company    varchar(150)=Null,
             @Physical_therapy    char(1)=Null,
             @Physical_therapy_company    varchar(150)=Null,
             @Permision_Contact    char(1)=Null,
             @Permision_Contact_company    varchar(150)=Null,
             @Longshore    char(1)=Null,
             @State_Company    char(1)=Null,
             @Other    char(1)=Null,
             @Other_text    varchar(150)=Null,
             @date_register    smalldatetime=Null,
             @cc1    varchar(250)=Null,
             @cc2    varchar(250)=Null,
             @supervisor_user    char(4)=Null,
             @presumption    bit=Null,
             @acuity    tinyint=Null,
             @date_closed    smalldatetime=Null,
			 @busqueda varchar(400) = null,
			 @filtro varchar(2) = null,

			 @patient varchar(200)=Null,
			 @nurses varchar(1000)=Null,
			 @supervisores varchar(1000)=Null,
			 @typeEvents varchar(1000)=Null,
			 @start date=Null,
			 @end date=Null,
			 @chkDoctor int=Null,
			 @chkNurse int=Null,
			 @phone varchar(100)=Null,
			 @items varchar(1000)=Null,
			 @estados varchar(1000)=Null,
			 @cis_code int=null

,@TipoConsulta tinyint
AS 
if @TipoConsulta=1 
Begin
             UPDATE dbo.[CASE_INFORMATION_SHEET_HEAD]SET 
                          [cod_ins]=@cod_ins,
                          [cod_pat]=@cod_pat,
                          [cod_adj]=@cod_adj,
                          [cod_pro]=@cod_pro,
                          [price]=@price,
                          [accident_date]=@accident_date,
                          [case_cod]=@case_cod,
                          [date_referal]=@date_referal,
                          [status]=@status,
                          [transportation]=@transportation,
                          [comentario]=@comentario,
                          [cod_user]=@cod_user,
                          [Injury]=@Injury,
                          [Ocupado]=@Ocupado,
                          [usuario]=@usuario,
                          [trasportation_company]=@trasportation_company,
                          [traslation]=@traslation,
                          [traslation_company]=@traslation_company,
                          [Physical_therapy]=@Physical_therapy,
                          [Physical_therapy_company]=@Physical_therapy_company,
                          [Permision_Contact]=@Permision_Contact,
                          [Permision_Contact_company]=@Permision_Contact_company,
                          [Longshore]=@Longshore,
                          [State_Company]=@State_Company,
                          [Other]=@Other,
                          [Other_text]=@Other_text,
                          [date_register]=@date_register,
                          [cc1]=@cc1,
                          [cc2]=@cc2,
                          [supervisor_user]=@supervisor_user,
                          [presumption]=@presumption,
                          [acuity]=@acuity,
                          [date_closed]=@date_closed
             WHERE  cod_cis = @cod_cis

End

--===========================================================================================
--==========PROCEDIMIENTO CASE_INFORMATION_SHEET_HEADGetByAll ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=2
begin
Select * from CASE_INFORMATION_SHEET_HEAD
End

--===========================================================================================
--==========PROCEDIMIENTO CASE_INFORMATION_SHEET_HEADGetByPrimaryKey ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=3
begin
Select * from CASE_INFORMATION_SHEET_HEAD
WHERE  cod_cis = @cod_cis
End

--===========================================================================================
--==========PROCEDIMIENTO CASE_INFORMATION_SHEET_HEADInsert ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=4
Begin
        INSERT INTO [dbo].[CASE_INFORMATION_SHEET_HEAD]
        (
            [cod_cis],
            [cod_ins],
            [cod_pat],
            [cod_adj],
            [cod_pro],
            [price],
            [accident_date],
            [case_cod],
            [date_referal],
            [status],
            [transportation],
            [comentario],
            [cod_user],
            [Injury],
            [Ocupado],
            [usuario],
            [trasportation_company],
            [traslation],
            [traslation_company],
            [Physical_therapy],
            [Physical_therapy_company],
            [Permision_Contact],
            [Permision_Contact_company],
            [Longshore],
            [State_Company],
            [Other],
            [Other_text],
            [date_register],
            [cc1],
            [cc2],
            [supervisor_user],
            [presumption],
            [acuity],
            [date_closed]
        )
        VALUES
        (
            @cod_cis,
            @cod_ins,
            @cod_pat,
            @cod_adj,
            @cod_pro,
            @price,
            @accident_date,
            @case_cod,
            @date_referal,
            @status,
            @transportation,
            @comentario,
            @cod_user,
            @Injury,
            @Ocupado,
            @usuario,
            @trasportation_company,
            @traslation,
            @traslation_company,
            @Physical_therapy,
            @Physical_therapy_company,
            @Permision_Contact,
            @Permision_Contact_company,
            @Longshore,
            @State_Company,
            @Other,
            @Other_text,
            @date_register,
            @cc1,
            @cc2,
            @supervisor_user,
            @presumption,
            @acuity,
            @date_closed
        )
        SET @cod_cis= @@IDENTITY
End

--===========================================================================================
--==========PROCEDIMIENTO CASE_INFORMATION_SHEET_HEADDelete ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=5
begin
Delete from CASE_INFORMATION_SHEET_HEAD
WHERE  cod_cis = @cod_cis
end

--===========================================================================================
else if @TipoConsulta=6
begin
	
	select c.cod_cis, c.case_cod, convert(char(10),accident_date,101) as accident_date, c.Longshore, c.State_Company, c.Other, c.Other_text
	from case_information_sheet_head c
	where c.cod_cis = @cod_cis

end

--===========================================================================================
--==========PROCEDIMIENTO CASE_INFORMATION_SHEET_HEADGetcod_ins ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=7
Begin
	Select * from CASE_INFORMATION_SHEET_HEAD
	where cod_ins = @cod_ins
end

--===========================================================================================
--===========================================================================================
--==========PROCEDIMIENTO CASE_INFORMATION_SHEET_HEADGetcod_pat ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=8
Begin
	Select * from CASE_INFORMATION_SHEET_HEAD
	where cod_pat = @cod_pat
end

--===========================================================================================
--===========================================================================================
--==========PROCEDIMIENTO CASE_INFORMATION_SHEET_HEADGetcod_adj ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=9
Begin
	
	select cis_code,Cis_caseCode,dbo.fu_replacecomillas(Pat_firstName) + ' ' + dbo.fu_replacecomillas(Pat_lastName) as patient,Ins_name,convert(char(10),c.Cis_accidentDate,101) as accident_date ,
	c.Cis_status , Use_firstName + ' ' + Use_lastName as supervisor, c.Cis_caseSupervisor
	from CaseInformationSheetHead c
	join Patient p on c.Pat_code=p.Pat_code and rtrim(ltrim(p.Pat_lastName)) like @patient + '%'
	left join [User] u on u.Use_code = c.Cis_caseSupervisor
	join Insurer i on c.Ins_code=i.Ins_code
	where c.Cis_actual = 1 and (len(@supervisores)=0 or rtrim(ltrim(c.Cis_caseSupervisor)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split](@supervisores, '*') su))	      
	order by p.Pat_lastName, c.Cis_accidentDate

end

--===========================================================================================
--===========================================================================================
--==========PROCEDIMIENTO CASE_INFORMATION_SHEET_HEADGetcod_pro ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=10
Begin
	Select * from CASE_INFORMATION_SHEET_HEAD
	where cod_pro = @cod_pro
end

--===========================================================================================
--===========================================================================================
--==========PROCEDIMIENTO CASE_INFORMATION_SHEET_HEADGetcod_user ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=11
Begin
	Select * from CASE_INFORMATION_SHEET_HEAD
	where cod_user = @cod_user
end
---busca un caso por el codigo del paciente
else if @TipoConsulta=12
Begin
		
	if (@filtro = 'P')
	BEGIN
		select cis_code_old cod_cis,Cis_code,Cis_caseCode,dbo.fu_replacecomillas(Pat_firstName) + ' ' + dbo.fu_replacecomillas(Pat_lastName) as patient,Ins_name,convert(char(10),c.Cis_accidentDate,101) as accident_date ,c.Cis_status , Use_firstName + ' ' + Use_lastName as supervisor, c.Cis_caseSupervisor
		from CaseInformationSheetHead c inner join patient p on c.Pat_code=p.Pat_code
		inner join Insurer i on c.Ins_code=i.Ins_code
		left join [User] u on u.Use_code = c.Cis_caseSupervisor
		where rtrim(ltrim(p.Pat_lastName)) like @busqueda + '%' and c.Cis_actual = 1
		order by (rtrim(ltrim(p.Pat_lastName))), c.Cis_accidentDate
	END
	if (@filtro = 'C')
	BEGIN
		select cis_code_old cod_cis, Cis_code,Cis_caseCode,dbo.fu_replacecomillas(Pat_firstName) + ' ' + dbo.fu_replacecomillas(Pat_lastName) as patient,Ins_name,convert(char(10),Cis_accidentDate,101) as accident_date ,c.Cis_status , Use_firstName + ' ' + Use_lastName as supervisor, c.Cis_caseSupervisor
		from CaseInformationSheetHead c , patient p , Insurer i, [User] u
		where c.Pat_code=p.Pat_code and c.Ins_code=i.Ins_code and u.Use_code = c.Cis_caseSupervisor
		and rtrim(ltrim(Cis_caseCode)) like @busqueda + '%' and c.Cis_actual = 1
		order by (rtrim(ltrim(p.Pat_lastName))), c.Cis_accidentDate
	END

end
---busca un casos por claim
else if @TipoConsulta=13
begin
	
	select cod_cis,case_cod,dbo.fu_replacecomillas(name_pat) + ' ' + dbo.fu_replacecomillas(last_pat) as patient,name_ins,convert(char(10),accident_date,101) as accident_date ,c.status , name + ' ' + lastname as supervisor, c.supervisor_user
	from case_information_sheet_head c , patient p , insurre i, USER_SYS u
	where c.cod_pat=p.cod_pat and c.cod_ins=i.cod_ins and u.cod_user = c.supervisor_user
	and rtrim(ltrim(case_cod)) like '%' + @busqueda + '%' and c.Cis_actual = 1
	order by last_pat

end
---busca supervisor de un casos por claim
else if @TipoConsulta=14
begin
	select u.Use_code, Use_userName,dbo.fu_replacecomillas(Use_firstName) name,dbo.fu_replacecomillas(Use_lastName) lastname,Use_number,Use_color,Use_tipo, Exc_email, Exc_password, dbo.fu_replacecomillas(p.Pat_firstName) + ' ' + dbo.fu_replacecomillas(p.Pat_lastName) as paciente
	from CaseInformationSheetHead c  
	inner join [User] u on u.Use_code = c.Cis_caseSupervisor
	inner join patient p on p.Pat_code = c.Pat_code
	left join Exchange e on e.Use_code = u.Use_code and exc_vigencia=1
	where cis_code = @cis_code -- and c.Cis_actual = 1	

end
go

IF (OBJECT_ID(N'pa_Categories', N'P') IS NOT NULL)
	DROP procedure pa_Categories
GO
create PROCEDURE pa_Categories
             @Cat_codigo    int=Null output,
             @Cat_nombre    varchar(100)=Null,
             @Cat_descripcion    varchar(100)=Null,
             @Cat_color    varchar(50)=Null,
			 @Cat_vigencia bit=Null

,@TipoConsulta tinyint
AS 
--if @TipoConsulta=1 
--Begin
--             UPDATE dbo.[Categoria]SET 
--                          [Cat_nombre]=@Cat_nombre,
--                          [Cat_descripcion]=@Cat_descripcion,
--                          [Cat_color]=@Cat_color,
--						  [Cat_vigencia]=@Cat_vigencia
--             WHERE  Cat_codigo = @Cat_codigo

--End 

if @TipoConsulta=1 
Begin
-- Comprueba si existen categorías con el mismo nombre de la categoría que se intenta actualizar excepto en ella misma
	IF  ( (SELECT COUNT(*) FROM Categoria WHERE Cat_nombre = @Cat_nombre and Cat_codigo <> @Cat_codigo) > 0 )			
	BEGIN
		SET @Cat_codigo	= 0
	END
	ELSE
	BEGIN
		UPDATE dbo.[Categoria]SET 
					[Cat_nombre]=@Cat_nombre,
					[Cat_descripcion]=@Cat_descripcion,
					[Cat_color]=@Cat_color,
					[Cat_vigencia]=@Cat_vigencia
		WHERE  Cat_codigo = @Cat_codigo
	
		SET @Cat_codigo = @Cat_codigo
	END
End

--===========================================================================================
--==========PROCEDIMIENTO CategoriesGetByAll ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=2
begin
	Select * from Categoria Cat where Cat.Cat_vigencia=@Cat_vigencia --order by Cat.Cat_vigencia DESC
End

--===========================================================================================
--==========PROCEDIMIENTO CategoriesGetByPrimaryKey ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=3
begin
	Select * from Categoria
	WHERE  Cat_codigo = @Cat_codigo
End

--===========================================================================================
--==========PROCEDIMIENTO CategoriesInsert ========================
--===========================================================================================
--===========================================================================================
ELSE IF @TipoConsulta=4
BEGIN
	-- Comprueba si existen categorías con el mismo nombre de la categoría que se intenta registrar
	IF  ( (SELECT COUNT(*) FROM Categoria WHERE Cat_nombre = @Cat_nombre) > 0  )			
	BEGIN
		SET @Cat_codigo	= 0
	END
	ELSE
	BEGIN
        INSERT INTO [dbo].[Categoria]( [Cat_nombre]
                                    ,[Cat_descripcion]
                                    ,[Cat_color]
						            ,[Cat_vigencia])
        VALUES( @Cat_nombre
            ,@Cat_descripcion
            ,@Cat_color
			,@Cat_vigencia)

        SET @Cat_codigo= @@IDENTITY
	END
END

--===========================================================================================
--==========PROCEDIMIENTO CategoriesDelete ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=5
begin
	Delete from Categoria
	WHERE  Cat_codigo = @Cat_codigo
end

--===========================================================================================
else if @TipoConsulta=6
begin
	Select * from Categoria
	where Cat_nombre Like @Cat_nombre+ '%'
end

else if @TipoConsulta=7
begin
	Select * from Categoria
end
go

IF (OBJECT_ID(N'pa_Configuracion', N'P') IS NOT NULL)
	DROP procedure pa_Configuracion
GO
create PROCEDURE pa_Configuracion
             @Cof_codigo    smallint=Null output,
             @Cof_descripcion    varchar(800)=Null,
             @Cof_valor    varchar(50)=Null,
             @Cof_vigencia    bit=Null,
             @Cof_identificador    varchar(100)=Null,
             @Cof_nombre    varchar(100)=Null,
             @Cof_tipodato    varchar(20)=Null,
			 @Cof_proceso    varchar(80)=Null
			 ,@TipoConsulta tinyint
AS 
if @TipoConsulta=1 
Begin
		UPDATE dbo.[Configuracion]SET                           
				[Cof_valor]=@Cof_valor 
		WHERE  Cof_codigo = @Cof_codigo

End

--===========================================================================================
--==========PROCEDIMIENTO ConfiguracionGetByAll ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=2
begin
Select * from Configuracion co where co.Cof_vigencia = 1
End

--===========================================================================================
--==========PROCEDIMIENTO ConfiguracionGetByPrimaryKey ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=3
begin
Select * from Configuracion
WHERE  Cof_codigo = @Cof_codigo
End

--===========================================================================================
--==========PROCEDIMIENTO ConfiguracionInsert ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=4
Begin
             INSERT INTO [dbo].[Configuracion]
             (
                          [Cof_descripcion],
                          [Cof_valor],
                          [Cof_vigencia],
                          [Cof_identificador],
                          [Cof_nombre],
                          [Cof_tipodato]

             )
             VALUES
             (
                          @Cof_descripcion,
                          @Cof_valor,
                          1,
                          @Cof_identificador,
                          @Cof_nombre,
                          @Cof_tipodato

             )
             SET @Cof_codigo= @@IDENTITY
End

--===========================================================================================
--==========PROCEDIMIENTO ConfiguracionDelete ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=5
begin
Delete from Configuracion
WHERE  Cof_codigo = @Cof_codigo
end

--===========================================================================================
else if @TipoConsulta=6
begin
	Select * from Configuracion
	WHERE  Cof_proceso = @Cof_proceso and Cof_vigencia = 1
End

else if @TipoConsulta=7
begin
	Select * from Configuracion
	WHERE  Cof_proceso = 'Exchange' --and Cof_tipodato = 'textbox'
	and Cof_vigencia = 1
End
else if @TipoConsulta=8
begin
		--declare @Cof_proceso varchar(80) = 'Cita'
		select se.Cof_codigo, se.Cof_identificador, se.Cof_valor, se.Cof_proceso,se.Cof_nombre 
		from Configuracion se
		where se.Cof_vigencia = 1 and se.Cof_proceso = @Cof_proceso
			  and se.Cof_identificador like '%'+@Cof_identificador+'%'

end

go

IF (OBJECT_ID(N'pa_DATA_ENTRY', N'P') IS NOT NULL)
	DROP procedure pa_DATA_ENTRY
GO
CREATE PROCEDURE pa_DATA_ENTRY
         
			 @dae_code int=null,
			 @cis_code int=null,

             --@dae_date    char(10)=Null,
			 @dae_date   date=Null,
             
			 --@act_code    char(10)=Null,
			 @act_code int=null,

			 @hour_act    decimal(5,2)=Null,
             @miles_act    decimal(5,2)=Null,


             @commentary    varchar(8000)=Null,

             --@use_code    char(4)=Null,
			 @use_code int=null,

             @Dae_invoiceStatus    char(1)=Null,
             @Dae_closedDate    varchar(10)=Null,
             @Dae_parameterDate    varchar(10)=Null,
             @Dae_deletingStatus    char(1)=Null,
             @Dae_deletedUser    char(4)=Null,
             @Dae_registerDate    smalldatetime=Null,
             @Dae_facturable    bit=Null,
			 @Dae_call    bit=Null,			  
             @Eve_codigo    int=Null,
			 @Dae_operatorUser int=Null

,@TipoConsulta tinyint
AS 
if @TipoConsulta=1 
Begin
             UPDATE dbo.[DataEntry]SET 
                          [cis_code]=@cis_code,
                          [dae_date]=@dae_date,
                          [act_code]=@act_code,
                          [dae_houract]=@hour_act,
                          [dae_milesAct]=@miles_act,
                          [Dae_comment]=@commentary,
                          [use_code]=@use_code,
                          [Dae_invoiceStatus]=@Dae_invoiceStatus,
                          [Dae_closedDate]=@Dae_closedDate,
                          [Dae_parameterDate]=@Dae_parameterDate,
                          [Dae_deletingStatus]=@Dae_deletingStatus,
                          [Dae_deletedUser]=@Dae_deletedUser,
                          [Dae_registerDate]=@Dae_registerDate,
                          [Dae_facturable]=@Dae_facturable,
                          [Eve_codigo]=@Eve_codigo,
						  [Dae_call]=@Dae_call,
						  Dae_operatorUser = @Dae_operatorUser

             WHERE  dae_code = @dae_code

End

--===========================================================================================
--==========PROCEDIMIENTO DATA_ENTRYGetByAll ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=2
begin
Select [dae_code]
      ,[cis_code],[dae_date],[act_code],[dae_houract]
      ,[dae_milesAct],dbo.fu_replacecomillas(DE.Dae_comment) + dbo.Fu_ObtenerInicialesUsuario (DE.dae_code, de.use_code) commentary
      ,[use_code],[Dae_invoiceStatus],[Dae_closedDate],[Dae_parameterDate],[Dae_deletingStatus],[Dae_deletedUser],[Dae_registerDate]
      ,[Dae_facturable],[Eve_codigo], Dae_call
	  from DataEntry de
where Dae_deletingStatus = 0
End

--===========================================================================================
--==========PROCEDIMIENTO DATA_ENTRYGetByPrimaryKey ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=3
begin
Select [dae_code]
      ,[cis_code],[dae_date],[act_code],[dae_houract]
      ,[dae_milesAct],dbo.fu_replacecomillas(DE.Dae_comment) + dbo.Fu_ObtenerInicialesUsuario (DE.dae_code, de.use_code) commentary
      ,[use_code],[Dae_invoiceStatus],[Dae_closedDate],[Dae_parameterDate],[Dae_deletingStatus],[Dae_deletedUser],[Dae_registerDate]
      ,[Dae_facturable],[Eve_codigo],Dae_call  from DataEntry de
WHERE  dae_code = @dae_code
End

--===========================================================================================
--==========PROCEDIMIENTO DATA_ENTRYInsert ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=4
Begin
             INSERT INTO [dbo].[DataEntry]
             (
                          [dae_code],
                          [cis_code],
                          [dae_date],
                          [act_code],
                          [dae_houract],
                          [dae_milesAct],
                          [Dae_comment],
                          [use_code],
                          [Dae_invoiceStatus],
                          [Dae_closedDate],
                          [Dae_parameterDate],
                          [Dae_deletingStatus],
                          [Dae_deletedUser],
                          [Dae_registerDate],
                          [Dae_facturable],
                          [Eve_codigo],
						  Dae_call,
						  Dae_operatorUser

             )
             VALUES
             (
                          @dae_code,
                          @cis_code,
                          @dae_date,
                          @act_code,
                          @hour_act,
                          @miles_act,
                          @commentary,
                          @use_code,
                          @Dae_invoiceStatus,
                          @Dae_closedDate,
                          @Dae_parameterDate,
                          @Dae_deletingStatus,
                          @Dae_deletedUser,
                          @Dae_registerDate,
                          @Dae_facturable,
                          @Eve_codigo,
						  @Dae_call,
						  @Dae_operatorUser

             )
             SET @dae_code= @@IDENTITY
End

--===========================================================================================
--==========PROCEDIMIENTO DATA_ENTRYDelete ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=5
begin
DECLARE @codigo_cis int = (select cis_code from DataEntry where dae_code=@dae_code)
DECLARE @codigo_ins int = (select ins_code from CaseInformationSheetHead where cis_code=@codigo_cis)
if (select count(*) from [dbo].[BillingBody] BB where BB.dae_code = @dae_code)<1
	begin	
		Update DataEntry set
			Dae_deletingStatus = 1,
			Dae_operatorUser = @Dae_operatorUser
		WHERE dae_code = @dae_code
	end

IF (@codigo_ins=27) --'Fe16I00064')
	BEGIN

	declare @table1 table
	(
	id int identity,
	dae_code varchar(20),
	dae_date varchar(10),
	act_code varchar(20),
	dae_houract decimal(6,2),
	hour decimal(6,2),
	dae_milesAct decimal(6,2),
	commentary varchar(8000),
	num int, 
	bandera char(1)
	)

	insert into @table1 (dae_code ,dae_date,act_code ,dae_houract,hour ,dae_milesAct, commentary ,num , bandera)
	Select  C1.dae_code, C1.dae_date, 
				 C1.act_code,C1.dae_houract,c1.hour, c1.dae_milesAct,
				 C1.Dae_comment, null as num, 'T' as bandera
	from (select ROW_NUMBER() OVER(ORDER BY dae_date asc) AS Row, a.aty_code, dae_code,dae_date ,a.act_code ,dae_houract,case when a.aty_code=2 then 0 else dae_houract end as hour,
	dae_milesAct,Dae_comment  
	from DataEntry d , Activity a, ActivityType t
	where cis_code=@cis_code and d.act_code=a.act_code and Dae_closedDate is null and Dae_invoiceStatus=0 and 
	Dae_parameterDate is null and Dae_deletingStatus=0
	and a.aty_code=t.aty_code
	AND Dae_facturable = 1 
	) C1 
	inner join ActivityType t 
	on c1.aty_code=t.aty_code
	Group By C1.Row, C1.dae_code, C1.dae_date, 
				 C1.act_code,C1.dae_houract, c1.dae_milesAct, 
				 C1.Dae_comment, C1.aty_code,c1.hour
	--Order by C1.Row
	order by convert(smalldatetime,dae_date) asc , dae_code asc

	declare @count int = (select count(*) from @table1)	
	declare @next int = 1
	declare @next2 int = 1
	declare @suma decimal(8,2)
	declare @cod_de2 varchar(20)

	while (@count > 0 and @next<=@count)
		begin
			set @suma = (select sum(hour) from @table1 where id <= @next and bandera='T')
			if(@suma <=9)
			begin 
				update @table1 set num=@next2 where id=@next

				--set @cod_de2 = (select dae_code from @table1 where id=@next)
				--update DataEntry set dae_facnum=@next2 where dae_code=@cod_de2
			end
			else
			begin 
				update @table1 set bandera='F' where id<@next
				set @next2=@next2+1
				update @table1 set num=@next2 where id=@next

				--set @cod_de2 = (select dae_code from @table1 where id=@next)
				--update DataEntry set dae_facnum=@next2 where dae_code=@cod_de2
			end 
			set @next = @next + 1 
	END

	
	update DataEntry set dae_facnum=b.num from DataEntry a inner join @table1 b on a.dae_code=b.dae_code

		
	Select  C1.dae_code, C1.dae_date, 
				 C1.act_code,C1.dae_houract, c1.dae_milesAct,
				 C1.commentary,  case when C1.aty_code=2 then 0 else Sum(C2.hour) end as acumulado, C1.Row, C1.dae_facnum
	from ( select d.id as Row, a.aty_code, dae_code,dae_date ,a.act_code ,dae_houract,case when a.aty_code=2 then 0 else dae_houract end as hour,
	dae_milesAct,commentary ,num as dae_facnum
	from @table1 d, Activity a, ActivityType t
	where  d.act_code=a.act_code 
	and a.aty_code=t.aty_code
	) C1 
	inner join 
	(select d.id as Row, a.aty_code, dae_code,dae_date ,a.act_code ,dae_houract,case when a.aty_code=2 then 0 else dae_houract end as hour,
	dae_milesAct,commentary ,num  as dae_facnum
	from @table1 d, Activity a, ActivityType t
	where  d.act_code=a.act_code 
	and a.aty_code=t.aty_code
	) C2 
	on (C1.Row >= C2.Row) 
	inner join ActivityType t 
	on c1.aty_code=t.aty_code
	Group By C1.Row, C1.dae_code, C1.dae_date, 
				 C1.act_code,C1.dae_houract, c1.dae_milesAct, 
				 C1.commentary, C1.aty_code,C1.dae_facnum
	Order by C1.Row

	end 

end

--===========================================================================================

else if @TipoConsulta=6
begin

	declare @closingdate varchar(15)
	declare @cerrado int
	
	if @dae_code != 0
	begin
		set @cerrado  =(select count(*) from  BillingBody where Bib_deletingStatus=0 and dae_code=@dae_code)
	end
	else
	begin
		set @cerrado = 0
	end

	if((select count(*) from BillingHead where cis_code=@cis_code and Bih_deleteStatus <> 'D')=0)
begin
	set @closingdate= '1/1/1901'
end
else
begin
	set @closingdate= (select top 1 Bih_closingDate from BillingHead where cis_code=@cis_code and Bih_deleteStatus <> 'D' order by cast(Bih_closingDate as date) desc)
end


if( cast(@dae_date as date) <= cast(@closingdate as date) and @cerrado=0)
begin

select -1 error   --- ERROR_DATE

end 
else
begin

declare @igual int = (select count(*) from DataEntry where  cis_code=@cis_code and act_code=@act_code and  dae_houract=@hour_act and dae_milesAct=@miles_act and Dae_comment=@commentary and Dae_deletingStatus=0 and dae_date=@dae_date)
if(@igual!=0)
begin

select -2 error ---ERROR_REPEATED

END
else
begin

	DECLARE @codigo int = (select ins_code from CaseInformationSheetHead where cis_code=@cis_code)
	if @dae_code = 0
	begin

		insert into DataEntry ([cis_code],[dae_date],[act_code],[dae_houract],[dae_milesAct],[Dae_comment],[use_code],[Dae_invoiceStatus],[Dae_closedDate],[Dae_parameterDate]
							,[Dae_deletingStatus],[Dae_deletedUser],[Dae_registerDate],[Dae_facturable],[Eve_codigo],[Dae_call], Dae_operatorUser) 
		values (@cis_code ,@dae_date ,@act_code ,@hour_act ,@miles_act ,@commentary ,@use_code,'0',null,null,0,null,GETDATE(), @Dae_facturable, @Eve_codigo,@Dae_call, @Dae_operatorUser)


		select 0 error 
			
	end
	else
	begin
		
		update DataEntry 
			set dae_date=@dae_date,
			act_code=@act_code,
			dae_houract =@hour_act,
			dae_milesAct=@miles_act,
			Dae_comment=@commentary,
			Dae_facturable=@Dae_facturable,
			Dae_call=@Dae_call,
			Dae_operatorUser = @Dae_operatorUser
		where dae_code=@dae_code and cis_code=@cis_code

		select 0 error 

	end

	IF (@codigo= 27 /*'Fe16I00064'*/)
	BEGIN

	declare @table2 table
	(
	id int identity,
	dae_code varchar(20),
	dae_date varchar(10),
	act_code varchar(20),
	dae_houract decimal(6,2),
	hour decimal(6,2),
	dae_milesAct decimal(6,2),
	commentary varchar(8000),
	num int, 
	bandera char(1)
	)

	insert into @table2 (dae_code ,dae_date,act_code ,dae_houract,hour ,dae_milesAct, commentary ,num , bandera)
	Select  C1.dae_code, C1.dae_date, 
				 C1.act_code,C1.dae_houract,c1.hour, c1.dae_milesAct,
				 C1.Dae_comment, null as num, 'T' as bandera
	from (select ROW_NUMBER() OVER(ORDER BY dae_date asc) AS Row, a.aty_code, dae_code,dae_date ,a.act_code ,dae_houract,case when a.aty_code=2 then 0 else dae_houract end as hour,
	dae_milesAct,Dae_comment  
	from DataEntry d , Activity a, ActivityType t
	where cis_code=@cis_code and d.act_code=a.act_code and Dae_closedDate is null and Dae_invoiceStatus=0 and Dae_parameterDate is null and Dae_deletingStatus=0
	and a.aty_code=t.aty_code
	AND Dae_facturable = 1 
	) C1 
	inner join ActivityType t 
	on c1.aty_code=t.aty_code
	Group By C1.Row, C1.dae_code, C1.dae_date, 
				 C1.act_code,C1.dae_houract, c1.dae_milesAct, 
				 C1.Dae_comment, C1.aty_code,c1.hour
	--Order by C1.Row
	order by convert(smalldatetime,dae_date) asc , dae_code asc

	declare @count2 int = (select count(*) from @table2)	
	declare @next_2 int = 1
	declare @next3 int = 1
	declare @suma2 decimal(8,2)
	declare @cod_de3 varchar(20)

	while (@count2 > 0 and @next_2<=@count2)
		begin
			set @suma2 = (select sum(hour) from @table2 where id <= @next_2 and bandera='T')
			if(@suma2 <=9)
			begin 
				update @table2 set num=@next3 where id=@next_2

				--set @cod_de3 = (select dae_code from @table2 where id=@next_2)
				--update DataEntry set dae_facnum=@next3 where dae_code=@cod_de3
			end
			else
			begin 
				update @table2 set bandera='F' where id<@next_2
				set @next3=@next3+1
				update @table2 set num=@next3 where id=@next_2

				--set @cod_de3 = (select dae_code from @table2 where id=@next_2)
				--update DataEntry set dae_facnum=@next3 where dae_code=@cod_de3
			end 
			set @next_2 = @next_2 + 1 
	END

	--SELECT * FROM @table2
	update DataEntry set dae_facnum=b.num from DataEntry a inner join @table2 b on a.dae_code=b.dae_code

	end 

end

end

end


--===========================================================================================
--==========PROCEDIMIENTO DATA_ENTRYGetcod_cis ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=7
Begin
Select [dae_code]
      ,[cis_code],[dae_date],[act_code],[dae_houract]
      ,[dae_milesAct],dbo.fu_replacecomillas(DE.Dae_comment) + dbo.Fu_ObtenerInicialesUsuario (DE.dae_code, de.use_code) commentary
      ,[use_code],[Dae_invoiceStatus],[Dae_closedDate],[Dae_parameterDate],[Dae_deletingStatus],[Dae_deletedUser],[Dae_registerDate]
      ,[Dae_facturable],[Eve_codigo],Dae_call  from DataEntry de
where cis_code = @cis_code
end

--===========================================================================================
--===========================================================================================
--==========PROCEDIMIENTO DATA_ENTRYGetcod_act ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=8
Begin
Select [dae_code]
      ,[cis_code],[dae_date],[act_code],[dae_houract]
      ,[dae_milesAct],dbo.fu_replacecomillas(DE.Dae_comment) + dbo.Fu_ObtenerInicialesUsuario (DE.dae_code, de.use_code) commentary
      ,[use_code],[Dae_invoiceStatus],[Dae_closedDate],[Dae_parameterDate],[Dae_deletingStatus],[Dae_deletedUser],[Dae_registerDate]
      ,[Dae_facturable],[Eve_codigo],Dae_call  from DataEntry de
where act_code = @act_code
end

--===========================================================================================
--===========================================================================================
--==========PROCEDIMIENTO DATA_ENTRYGetcod_user ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=9
Begin
Select [dae_code]
      ,[cis_code],[dae_date],[act_code],[dae_houract]
      ,[dae_milesAct],dbo.fu_replacecomillas(DE.Dae_comment) + dbo.Fu_ObtenerInicialesUsuario (DE.dae_code, de.use_code) commentary
      ,[use_code],[Dae_invoiceStatus],[Dae_closedDate],[Dae_parameterDate],[Dae_deletingStatus],[Dae_deletedUser],[Dae_registerDate]
      ,[Dae_facturable],[Eve_codigo],Dae_call  from DataEntry de
where use_code = @use_code
end

--===========================================================================================
--===========================================================================================
--==========PROCEDIMIENTO DATA_ENTRYGetEve_codigo ===============
--===========================================================================================
--===========================================================================================
-- Buscar notas por evento
else if @TipoConsulta=10
Begin
	Select (select count(*) from [dbo].BillingBody BB where BB.Dae_code = DE.Dae_code) as facturado,
	DE.Dae_code,DE.Cis_code,DE.Dae_date,DE.Act_code,DE.Dae_hourAct,DE.Dae_milesAct,
	dbo.fu_replacecomillas(DE.Dae_comment) + dbo.Fu_ObtenerInicialesUsuario (DE.Dae_code, de.Use_code) commentary ,	
	DE.Use_code,DE.Dae_invoiceStatus,ISNULL(cast(DE.Dae_closedDate as varchar),'') as Dae_closedDate,ISNULL(cast(DE.Dae_parameterDate as varchar),'') as Dae_parameterDate
	,DE.Dae_deletingStatus,ISNULL(cast(DE.Dae_deletedUser as varchar),'') as Dae_deletedUser,
	DE.Dae_registerDate,DE.Dae_facturable,DE.Eve_codigo,dbo.fu_replacecomillas(ACT.Act_description) description_act, Dae_call 
	from DataEntry DE
	inner join Activity ACT on ACT.Act_code=DE.Act_code
	where DE.Eve_codigo = @Eve_codigo and DE.Dae_deletingStatus = 0 ORDER BY cast(DE.Dae_date as date) , Dae_code

end

--===========================================================================================
--===========================================================================================
--==========PROCEDIMIENTO DATA_ENTRYDateNewNota ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=11
Begin

	if (select count(*) from DataEntry DE where DE.Eve_codigo =@Eve_codigo)>0
	begin
		select TOP 1 convert(varchar(10),dae_date,101)  as DateNote from DataEntry DE where DE.Eve_codigo =@Eve_codigo ORDER BY cast(DE.dae_date as date) DESC 
	end 
	else
	begin				
		select  cast (month(getdate()) as varchar) + '/' + cast (day(getdate()) as varchar) + '/' + cast (year(getdate()) as varchar) as DateNote
	end 	
end


else if @TipoConsulta=12
Begin
	Select 	DE.Dae_code,DE.Cis_code,DE.Dae_date,DE.Act_code,DE.Dae_hourAct,DE.Dae_milesAct,
	dbo.fu_replacecomillas(DE.Dae_comment) + dbo.Fu_ObtenerInicialesUsuario (DE.Dae_code, de.Use_code) commentary ,
	DE.Use_code,DE.Dae_invoiceStatus,DE.Dae_closedDate,DE.Dae_parameterDate,DE.Dae_deletingStatus,DE.Dae_deletedUser,
	DE.Dae_registerDate,DE.Dae_facturable,DE.Eve_codigo,ACT.Act_description,Dae_call from DataEntry DE
	inner join Activity ACT on ACT.Act_code=DE.Act_code
	where DE.Eve_codigo = @Eve_codigo and DE.Dae_deletingStatus = 0 ORDER BY cast(DE.Dae_date as date)
end
go

IF (OBJECT_ID(N'pa_EstadoEvento', N'P') IS NOT NULL)
	DROP procedure pa_EstadoEvento
GO
create PROCEDURE pa_EstadoEvento
             @Ese_codigo    tinyint=Null output,
             @Ese_nombre    varchar(150)=Null,
             @Ese_descripcion    varchar(250)=Null,
             @Ese_color    varchar(10)=Null,
             @Ese_abreviatura    varchar(10)=Null,
             @Ese_vigencia    bit=Null

,@TipoConsulta tinyint
AS 
if @TipoConsulta=1 
Begin
             UPDATE dbo.[EstadoEvento]SET 
                          [Ese_nombre]=@Ese_nombre,
                          [Ese_descripcion]=@Ese_descripcion,
                          [Ese_color]=@Ese_color,
                          [Ese_abreviatura]=@Ese_abreviatura,
                          [Ese_vigencia]=@Ese_vigencia
             WHERE  Ese_codigo = @Ese_codigo

End

--===========================================================================================
--==========PROCEDIMIENTO EstadoEventoGetByAll ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=2
begin
Select * from EstadoEvento where Ese_vigencia=@Ese_vigencia
End

--===========================================================================================
--==========PROCEDIMIENTO EstadoEventoGetByPrimaryKey ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=3
begin
Select * from EstadoEvento
WHERE  Ese_codigo = @Ese_codigo
End

--===========================================================================================
--==========PROCEDIMIENTO EstadoEventoInsert ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=4
Begin
             INSERT INTO [dbo].[EstadoEvento]
             (
                          [Ese_nombre],
                          [Ese_descripcion],
                          [Ese_color],
                          [Ese_abreviatura],
                          [Ese_vigencia]

             )
             VALUES
             (
                          @Ese_nombre,
                          @Ese_descripcion,
                          @Ese_color,
                          @Ese_abreviatura,
                          @Ese_vigencia

             )
             SET @Ese_codigo= @@IDENTITY
End

--===========================================================================================
--==========PROCEDIMIENTO EstadoEventoDelete ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=5
begin
	update EstadoEvento set Ese_vigencia = 0 where Ese_codigo = @Ese_codigo
end

--===========================================================================================
else if @TipoConsulta=6
begin
Select * from EstadoEvento
where Ese_nombre Like @Ese_nombre+ '%'
end

--===========================================================================================
--==========PROCEDIMIENTO EstadoEventoDelete ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=7
begin
	Select * from EstadoEvento
	where Ese_vigencia = @Ese_vigencia
end

else if @TipoConsulta=8
begin
	update EstadoEvento set Ese_vigencia = 1 where Ese_codigo = @Ese_codigo
end
else if @TipoConsulta=9
begin
	
	Select * from EstadoEvento
	where Ese_vigencia = 1 and Ese_mostrarDetailView = 1

end
go

IF (OBJECT_ID(N'pa_Evento', N'P') IS NOT NULL)
	DROP procedure pa_Evento
GO
CREATE PROCEDURE pa_Evento
             @Eve_codigo    int=Null output,
             @Eve_inicio    datetime=Null,
             @Eve_fin    datetime=Null,
             @Eve_fecha    smalldatetime=Null,
             @Eve_descripcion    text=Null,             
			 @cod_pro    char(10)=Null,
			 @Pro_code   int=Null,			 
            -- @cod_med    char(10)=Null,
             @med_code int=Null,
			 
			-- @cod_cis    char(15)=Null,
			 @cis_code    int=Null,      
			        
			 @Tie_codigo    tinyint=Null,
             @Ese_codigo    tinyint=Null,
             @Eve_codigoNext    int=Null,
			 @Eve_codigoNov		int=Null,             
			-- @cod_user    char(4)=Null,
			 @Use_code    int=Null,
			 @cod_user_Undochange char(4)=Null,
             @Eve_codExchange    varchar(600)=Null,
             @Eve_descartar    bit=Null,

			 @Mot_descripcion varchar(1000)=Null,
			 @Mot_codigo	bigint=Null,
			 @Mot_codigo2	bigint=Null,

			 @doctor    varchar(80)=Null,
			 @patient   varchar(80)=Null,

			 @confirmDoctorSearch int=null,
			 @confirmNurseSearch int=null,
			 @year int=null,
			 @month int=null,
			 @supervisor_user char(4)=Null,

			 @reasonDoctor varchar(1000)=null,
			 @reasonNurse  varchar(1000)=null,
			 -- confirms
			 @NextOfficeVisit bit=Null,
			 @checkDoctor bit=Null,
			 @checkNurse bit=Null,
			 @confirmDoctor bit=Null,
			 @confirmNurse	bit=Null,
			 @AconfirmDoctor bit=Null,
			 @AconfirmNurse	bit=Null,

			 @Con_codigo	int=Null,
			 @Eve_done		bit=null,

			 @fields varchar(1000)=Null,
			 -- filtro en master viewer
			 @novs varchar(400)=Null,
			 @supervisores   varchar(400)=Null,
			 @status   varchar(400)=Null,
			 @nurses   varchar(700)=Null,
			 @eventTypes   varchar(400)=Null,
			 @cantArchivos int=Null,
			 @Eve_allDay  bit=Null,
			 @Eve_override bit=Null,
			 @phone varchar(20)=Null,
			 @items varchar(400)=Null,
			 @codUserNurse int =Null,
			 @Mot_codigoMed bigint = Null,
			 @Mot_codigoPro bigint = Null,
			 @TipoConsulta tinyint,
			 @Cat_codigo int=Null,
			 @Tie_needNurse bit=Null,
			 @withAgenda bit=Null,
			 @RoleName	varchar(100)=Null,
			 @reasonOverrideNurse varchar(3000)=null,
			 @case_status int=null,
			 @Eve_codExchangeSec    varchar(600)=Null,
			 @tipoDelete int = null,
			 @orderby varchar(200)=null
AS 

declare @e_message varchar(500), @e_severity int, @e_state int, @ese_codigoy tinyint, @tie_codigoy tinyint

declare @Eve_bloqueo bit
declare @workDayStart int, @workDayEnd int, @timeStart int, @timeEnd int
declare @Cau_codigo int, @codUserSupervisor char(4), @Cantidad int


declare @sqlstring VARCHAR(8000) = ' '  
declare @sqlstring0 VARCHAR(8000) = ' '    	
declare @sqlstring1 VARCHAR(8000) = ' '   
declare @sqlstring2 VARCHAR(8000) = ' '  	 
declare @sqlstring3 VARCHAR(8000) = ' '  	
declare @sqlstring4 VARCHAR(8000) = ' ' 
declare @sqlstring5 VARCHAR(8000) = ' '	

if(@Pro_code=0) set @Pro_code=null

if @TipoConsulta=1
Begin
	
	begin try
		
		select @tie_codigoy=Tie_codigo, @Eve_bloqueo=isnull(Eve_bloqueo,0) from Evento where Eve_codigo=@Eve_codigo

		if @Eve_bloqueo=0--exists(select Eve_codigo from Evento where Eve_codigo=@Eve_codigo and isnull(Eve_bloqueo,0)=0)
		begin
			set @workDayStart = (select dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), cast(('2012-01-01 ' + con.Cof_valor) as datetime), 8)) from Configuracion con where con.Cof_identificador = 'dayStart')
			set @workDayEnd = (select dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), cast(('2012-01-01 ' + con.Cof_valor) as datetime), 8)) from Configuracion con where con.Cof_identificador = 'dayEnd')
			
			set @timeStart = dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), @Eve_inicio, 8))
			set @timeEnd = dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), @Eve_fin, 8))
		
			if (@timeStart>=@workDayStart and @timeStart<=@workDayEnd) and (@timeEnd>=@workDayStart and @timeEnd<=@workDayEnd)
			begin
			
			if not exists(select Eve_codigo from Evento where Eve_codigo<>@Eve_codigo and Eve_inicio=@Eve_inicio and Eve_fin=@Eve_fin and Cis_code=@Cis_code and Tie_codigo=@Tie_codigo and Med_code=@med_code and eve_vigencia = 1)
			begin
				set @codUserSupervisor = (select Cis_caseSupervisor from CaseInformationSheetHead where Cis_code = @Cis_code)
				set @codUserNurse = (select Use_Code from PROVIDER where Pro_code = @Pro_code)

				if (select count(*) from CalendarioUsuario cu 
					where (@Eve_codigo=0 or isnull(cu.Eve_codigo,0) <> @Eve_codigo) and cu.Cau_vigencia = 1 and @codUserNurse=cu.Use_Code and
						  (isnull(cu.Eve_codigo,0)=0 or (select count(*) from Evento ev where ev.Eve_codigo=cu.Eve_codigo and ev.Ese_codigo in (1,5))>0) and
						  ( (@Eve_inicio between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or (@Eve_fin between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or
							(dateadd(mi,1,cu.Cau_inicio) between @Eve_inicio and @Eve_fin)
						  )
					) >= 0 /*verifica fechas de nurse*/ --and
					/*(select count(*) from CalendarioUsuario cu
					 join TipoEvento te on cu.Tie_codigo =  te.Tie_codigo
					 where (@Eve_codigo=0 or isnull(cu.Eve_codigo,0) <> @Eve_codigo) and cu.Cau_vigencia = 1 and te.Tie_programable = 0 and @supervisor_user=cu.cod_user and
						   (isnull(cu.Eve_codigo,0)=0 or (select count(*) from Evento ev where ev.Eve_codigo=cu.Eve_codigo and ev.Ese_codigo in (1,5))>0) and
						   ( (@Eve_inicio between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or (@Eve_fin between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or
							 (dateadd(mi,1,cu.Cau_inicio) between @Eve_inicio and @Eve_fin)
						   )
					) = 0 -- verifica fechas de supervisor*/
				begin
					-- bloqueando evento
					update Evento set Eve_bloqueo=1 where Eve_codigo=@Eve_codigo

					begin tran				

					-- Esta accion se ejecuta para agregar un registro nuevo en la tabla eventohistorial pero con el nuevo con_codigo(codigo de la tabla confirmacion) actualizado.
					INSERT INTO [dbo].[EventoHistorial]
					([Eve_codigo],[Eve_inicio],[Eve_fin],[Eve_fecha],[Eve_descripcion],[Pro_code],[Med_code],[Cis_code],[Tie_codigo],[Ese_codigo],[Eve_codigoNext],[Evh_fecha],[Use_Code],[Eve_codExchange],[Eve_descartar],[Con_codigo],Mot_codigo,
					[Eve_done],[Eve_override],[Eve_allDay],[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia])
					select e.Eve_codigo, e.Eve_inicio, e.Eve_fin, e.Eve_fecha, e.Eve_descripcion, e.Pro_code, e.Med_code, e.Cis_code, e.Tie_codigo, e.Ese_codigo, e.Eve_codigoNext, getdate(), @Use_code, e.Eve_codExchange, e.Eve_descartar,e.Con_codigo,Mot_codigo,
					[Eve_done],[Eve_override],[Eve_allDay],[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia]
					from Evento e
					where e.Eve_codigo = @Eve_codigo
				
					-- registrando motivos de confirmacion
					/*if len(@reasonDoctor)>0
					begin
						insert into MotivoCambioEstado (Mot_descripcion, Mot_vigencia, Mot_fechaSistema, cod_user) values (@reasonDoctor, 1, getdate(), @cod_user)
						set @Mot_codigoMed = @@IDENTITY
					end
					else set @Mot_codigoMed = null

					if len(@reasonNurse)>0
					begin
						insert into MotivoCambioEstado (Mot_descripcion, Mot_vigencia, Mot_fechaSistema, cod_user) values (@reasonNurse, 1, getdate(), @cod_user)
						set @Mot_codigoPro = @@IDENTITY
					end
					else set @Mot_codigoPro = null
					*/
					-- seteando a null a provider si no requiere enfermera el nuevo tipo de evento
					if @Tie_needNurse=0 
					begin
						set @Pro_code = null
						-- registrando confirmacion
						INSERT INTO [dbo].[Confirmacion] ([Pro_code],[Med_code],[Con_fecha],[Con_vigencia],[Use_Code],Con_confirmMed,Con_confirmProv,Mot_codigoMed,Mot_codigoProv)
						VALUES (@Pro_code,@med_code, getdate(), 1, @Use_code, @confirmDoctor, @confirmNurse,(select Mot_codigoMed from Confirmacion where Con_codigo=(select Con_codigo from Evento where Eve_codigo=@Eve_codigo)),null)
						SET @Con_codigo = @@IDENTITY
					end		
					-- actualizar calendarios relacionado al evento
					update CalendarioUsuario set Cau_vigencia = 0 where Eve_codigo = @Eve_codigo

					-- registrando el nuevo calendario del evento 
					/*INSERT INTO [dbo].[CalendarioUsuario]([cod_user],[Cau_inicio],[Cau_fin],[Cau_descripcion],[Cau_vigencia],[Cau_mostrarMV],Tie_codigo,Eve_codigo)
					VALUES (@codUserSupervisor,@Eve_inicio,@Eve_fin,'',1,0,@Tie_codigo,@Eve_codigo)
					set @Cau_codigo = @@IDENTITY*/

					if (@Tie_needNurse=1)
					begin
						-- registrando el nuevo calendario del evento 
						INSERT INTO [dbo].[CalendarioUsuario]([Use_Code],[Cau_inicio],[Cau_fin],[Cau_descripcion],[Cau_vigencia],[Cau_mostrarMV],Tie_codigo,Eve_codigo)
						VALUES (@codUserNurse,@Eve_inicio,@Eve_fin,'',1,0,@Tie_codigo,@Eve_codigo)
						set @Cau_codigo = @@IDENTITY
					end

					-- agregando los nuevos tipos de documentos al evento
					if @Tie_codigo <> @tie_codigoy
					begin
						delete EventoFile where Tia_codigo in (select Tia_codigo from  EventoTipoArchivo where Eve_codigo=@Eve_codigo and Eta_archivosSubidos=0) and Eve_codigo=@Eve_codigo
						delete from EventoTipoArchivo where Eve_codigo=@Eve_codigo and Eta_archivosSubidos=0

						INSERT INTO [dbo].[EventoTipoArchivo]([Tia_codigo] ,[Eve_codigo],[Eta_numArchivos],[Eta_vigencia],[Eta_archivosSubidos])
						select tae.Tia_codigo, @Eve_codigo, ta.Tia_numArchivos, 1, 0
						from TipoArchivo ta
						join TipoArchivoEvento tae on tae.Tia_codigo = ta.Tia_codigo and tae.Tie_codigo=@Tie_codigo
						where tae.Tia_codigo not in (select eta.Tia_codigo from EventoTipoArchivo eta where eta.Eve_codigo=@Eve_codigo)
					end

					-- actualizando el evento
					if(@Con_codigo = 0) --CUANDO LLEGA CON_CODIGO = 0 NO ACTUALIZAMNOS ESE CAMPO
					begin
						UPDATE Evento SET
						[Eve_inicio]=@Eve_inicio, [Eve_fin]=@Eve_fin, [Eve_descripcion]=@Eve_descripcion, [Pro_code]=@Pro_code,
						[Med_code]=@med_code, [Cis_code]=@Cis_code, [Cat_codigo]=@Cat_codigo, Eve_allDay=@Eve_allDay,
						Tie_codigo=@Tie_codigo, Eve_nov=(select ti.Tie_nov from TipoEvento ti where ti.Tie_codigo=@Tie_codigo)
						WHERE Eve_codigo = @Eve_codigo
					end
					else
					begin
						UPDATE Evento SET
						[Eve_inicio]=@Eve_inicio, [Eve_fin]=@Eve_fin, [Eve_descripcion]=@Eve_descripcion, [Pro_code]=@Pro_code,
						[Med_code]=@med_code, [Cis_code]=@Cis_code, [Cat_codigo]=@Cat_codigo, Eve_allDay=@Eve_allDay,
						Con_codigo=@Con_codigo, Tie_codigo=@Tie_codigo, Eve_nov=(select ti.Tie_nov from TipoEvento ti where ti.Tie_codigo=@Tie_codigo)
						WHERE Eve_codigo = @Eve_codigo	
					end

					

					if isnull(@Eve_codigoNov,0)>0 update Evento set Eve_codigoNov=@Eve_codigo where Eve_codigo=@Eve_codigoNov

					--COMENTADO IVON
					/*-- verificando si se registra el doctor   
					if not exists(select cm.cod_med from CASE_INFORMATION_SHEET_BODY_MED cm where cm.cod_med = @cod_med and status = '0' and cm.cod_cis=@cod_cis)
					begin				
						if not exists(select cm.cod_med from CASE_INFORMATION_SHEET_BODY_MED cm where cm.cod_med = @cod_med and cm.cod_cis=@cod_cis)
							INSERT INTO [dbo].[CASE_INFORMATION_SHEET_BODY_MED] ([cod_cis],[cod_med],[status],[Cisbm_fecha],[Cisbm_procedencia],[cod_user]) VALUES (@cod_cis, @cod_med, '0',GETDATE(),'Calendar_InsertCaseMed desde EditEvento',@cod_user)
						else
							update CASE_INFORMATION_SHEET_BODY_MED set status = '0' where cod_cis = @cod_cis and cod_med = @cod_med
					end*/

					-- Esta accion se ejecuta solo cuando hay un cambio de estado	
					if @Ese_codigo > 0 update Evento set Ese_codigo = @Ese_codigo where Eve_codigo = @Eve_codigo				

					--if (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where Eve_codigo=@Eve_codigo and ETA.Eta_numArchivos>Eta_archivosSubidos and Eta.Eta_vigencia=1)=0 and exists(select ev.Eve_codigo from Evento ev where ev.Eve_codigo=@Eve_codigo and (ev.Eve_nov=0 or ev.Eve_codigoNov is not null))
					if (dbo.Fu_ValidarEstadoCompletado(@Eve_codigo)=0)
						update Evento set Eve_done=1, Ese_codigo=5 where Eve_codigo=@Eve_codigo
					else
					begin
						update Evento set Eve_done=0 where Eve_codigo=@Eve_codigo
						--update Evento set Eve_done=0, Ese_codigo=(case Ese_codigo when 5 then 1 else Ese_codigo end) where Eve_codigo=@Eve_codigo and Ese_codigo=5
					end
				
					if @supervisor_user <> @codUserSupervisor update CaseInformationSheetHead set Cis_caseSupervisor = @supervisor_user where Cis_code = @Cis_code							
					
					
					--20/06/2014--- nurse override (permite que una enfermera pueda registrase en un evento así esté ocupada a la misma fecha y hora 
						if(@reasonOverrideNurse is not null and @reasonOverrideNurse <>'')
						begin
							INSERT INTO [dbo].[EventoNurseOverride]([Eve_codigo],[Pro_code],[Eno_fecha],[Use_Code],[Eno_motivo])
							values (@Eve_codigo, @Pro_code, getdate(), @Use_code, @reasonOverrideNurse)
						end					
								
					commit tran

					-- debloqueando evento		
					update Evento set Eve_bloqueo=0 where Eve_codigo=@Eve_codigo

					-- retornando el resultado de la accion
					select Eve_codigo, Eve_done from Evento where Eve_codigo=@Eve_codigo
				end
				else
					select -1 Eve_codigo, cast(0 as bit) Eve_done
			end
			else  
				select -2 Eve_codigo, cast(0 as bit) Eve_done

			end
			else 
				select -3 Eve_codigo, cast(0 as bit) Eve_done
		end
		else
			select -4 Eve_codigo, cast(0 as bit) Eve_done
	end try
	begin catch
		
		rollback tran
		
		-- debloqueando evento		
		update Evento set Eve_bloqueo=0 where Eve_codigo=@Eve_codigo

		set @e_message = error_message()
		set @e_severity = error_severity()
		set @e_state = error_state()
		raiserror(@e_message, @e_severity, @e_state)

	end catch

End


--==========PROCEDIMIENTO EventoGetByAll ========================
else if @TipoConsulta=2
begin
	Select eve.Eve_codigo,[Eve_inicio],[Eve_fin],[Eve_fecha],[Eve_descripcion],eve.Pro_code,[Med_code],eve.Cis_code,eve.Tie_codigo,[Ese_codigo]
      ,[Eve_codigoNext],eve.Use_Code,[Eve_codExchange],[Eve_descartar],[Con_codigo],[Eve_done],[Eve_override],[Eve_allDay],[Mot_codigo]
      ,[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], 
	  (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status], Tie_nombre, Eve_codExchangeSec from Evento eve 
	  join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
	  join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo
	  where Eve_vigencia = 1 and Eve_codExchange is not null

End
--==========PROCEDIMIENTO EventoGetByPrimaryKey ===============
else if @TipoConsulta=3
begin

	UPDATE EVENTO
	SET Eve_nov = 0
	WHERE Eve_codigo IN (SELECT eve_codigo FROM EVENTO e WHERE --eve_nov = 0
	(select top 1 eno_nov from EventoNextOffice where Eve_codigo = e.Eve_codigo order by Eno_codigo desc) <> Eve_nov)	


	declare @update bit = 0--determina si el evento cambio a estado completado
	if dbo.Fu_ValidarEstadoCompletado(@Eve_codigo) = 0
	begin
		update Evento set Eve_done=1, Ese_codigo=5 where Eve_codigo=@Eve_codigo	
		set @update = 1
	end
	select tie.Tie_needNurse as Tie_needNurse, pat.Pat_birthday, eve.Cat_codigo, cat.Cat_nombre, cat.Cat_color, con.Con_codigo,con.Con_confirmMed as confirmDoctor ,con.Con_confirmProv as confirmNurse ,	eve.Eve_codigo, eve.Eve_inicio, eve.Eve_fin, eve.Eve_fecha, cas.Cis_accidentDate,
			(dbo.fu_replacecomillas(pat.Pat_firstName) + ' ' + dbo.fu_replacecomillas(pat.Pat_lastName)) patient, tie.Tie_codigo, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_nombre, tie.Tie_programable, 
			tie.Tie_nov, dbo.fu_replacecomillas((med.Med_firstName + ' ' + med.Med_lastName)) medico, med.Med_code, dbo.fu_replacecomillas(med.Med_address) address_med,
			dbo.fu_replacecomillas((pro.Pro_firstName + ' ' + pro.Pro_lastName)) nurse, pro.Pro_code,
			dbo.fu_replacecomillas((ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName)) supervisor, cas.Cis_caseSupervisor, est.Ese_codigo, 
			est.Ese_abreviatura, est.Ese_nombre, dbo.fu_replacecomillas(pat.Pat_address)address_pat, 
			(case cas.Cis_status when 1 then 'Open' else 'Close' end) [status],
			cas.Cis_code, cas.Cis_caseCode, eve.Eve_codExchange, eve.Eve_codigoNext, eve.Use_Code, 
			dbo.fu_replacecomillas(eve.Eve_descripcion)Eve_descripcion, dbo.fu_replacecomillas(cas.Cis_Injury)Injury,
			
			eve.Eve_codigoNov, eve.Eve_nov,
			(case when isnull(eve.Eve_codigoNov,0)>0 then cast(1 as bit) else cast(0 as bit) end) NextOfficeVisit,
			(select dbo.Fu_ObtenerDateTime(ex.Eve_inicio) + ', ' + patx.Pat_lastName + ' ' + patx.Pat_lastName from Evento ex join CaseInformationSheetHead casx on casx.Cis_code=ex.Cis_code join PATIENT patx on patx.Pat_code=casx.Pat_code where ex.Eve_codigo=eve.Eve_codigoNov) EventNextOffice,
			(select top 1 ex.Eve_codigo from Evento ex where ex.Eve_codigoNov=eve.Eve_codigo order by ex.Eve_codigo desc) Eve_codigoPov,
			(select top 1 dbo.Fu_ObtenerDateTime(ex.Eve_inicio) + ', ' + patx.Pat_firstName + ' ' + patx.Pat_lastName from Evento ex join CaseInformationSheetHead casx on casx.Cis_code=ex.Cis_code join PATIENT patx on patx.Pat_code=casx.Pat_code where ex.Eve_codigoNov=eve.Eve_codigo order by ex.Eve_codigo desc) EventPreviousOffice,
			(select top 1 dbo.Fu_ObtenerDateTime(eno.Eno_fecha) + (' ' + usx.Use_firstName + ' ' + usx.Use_lastName + ' ') + (case eno.Eno_nov when 0 then 'stopped' else 'started' end) + ' NOV. ' + rtrim(eno.Eno_descripcion) from EventoNextOffice eno join [User] usx on usx.Use_Code=eno.Use_Code where eno.Eve_codigo=eve.Eve_codigo order by eno.Eno_codigo desc) lastActionNov,

			cas.Cis_Longshore, cas.Cis_companyStatus, dbo.fu_replacecomillas(cas.Cis_other) other, dbo.fu_replacecomillas(cas.Cis_otherText) Other_text,  
			ltrim(rtrim(cas.Cis_translation)) traslation,
			ltrim(rtrim(cas.Cis_translationCompany)) traslation_company,ltrim(rtrim(cas.Cis_transportation)) transportation,ltrim(rtrim(cas.Cis_transportationCompany)) trasportation_company, ltrim(rtrim(cas.Cis_physicalTherapy)) Physical_therapy,
			ltrim(rtrim(cas.Cis_physicalTherapyCompany)) Physical_therapy_company,ltrim(rtrim(cas.Cis_permisionContact)) Permision_Contact,ltrim(rtrim(cas.Cis_permisionContactCompany)) Permision_Contact_company,dbo.fu_replacecomillas(ltrim(rtrim(cas.Cis_comment))) comentario,
		    dbo.fu_replacecomillas(mce.Mot_descripcion) Mot_descripcion, mce.Mot_codigo, (select count(eh.Evh_codigo) from EventoHistorial eh where eh.Eve_codigo = eve.Eve_codigo and Evh_usado = 0) Cantidad, cast (cas.Cis_status as char(1)) as CasoEstado, cas.Cis_actual, eve.Eve_done, eve.Eve_override,
			case when MceMed.Mot_codigo is null then '' else (convert(varchar(20),MceMed.Mot_fechaSistema,22) + ' (' + (select UsX.Use_firstName + ' ' + UsX.Use_lastName from [User] UsX where UsX.Use_Code = MceMed.Use_Code) + '). ' + MceMed.Mot_descripcion) end DescriptionDoctor,
			case when MceProv.Mot_codigo is null then '' else (convert(varchar(20),MceProv.Mot_fechaSistema,22) + ' (' + (select UsX.Use_firstName + ' ' + UsX.Use_lastName from [User] UsX where UsX.Use_Code = MceProv.Use_Code) + '). ' + MceProv.Mot_descripcion) end DescriptionNurse,
			(case when (cas.Cis_status = 0 and cas.Cis_actual = 1 and eve.Eve_override=0 and eve.Ese_codigo=1 and eve.Eve_done=0) then cast(1 as bit) else cast(0 as bit) end) as showOverride,
			('Override Date : ' + convert(char(10),(convert(smalldatetime,Eo.Eno_fecha,101)),101) + ', Coment: ' + Eo.Eno_motivo + ', User : ' + U.Use_userName) as  overrideNurse,
			dbo.Fu_ObtenerMotivosCambioEstado(eve.Eve_codigo,0) motivosCambioEstado, @update as EventoCompletado,
			ins.Ins_name as insurer, adj.Adj_firstName + ' ' + adj.Adj_lastName as adjuster, Eve_codExchangeSec, cas.Cis_contact1, cas.Cis_contact2
	from Evento eve
	left join Categoria cat on eve.Cat_codigo = cat.Cat_codigo

	join MEDICAL med on eve.Med_code = med.Med_code
	left join PROVIDER pro on eve.Pro_code = pro.Pro_code
	join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo
	join Confirmacion con on con.Con_codigo = eve.Con_codigo
	join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
	join PATIENT pat on pat.Pat_code = cas.Pat_code
	join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor
	join Insurer ins on ins.Ins_code = cas.Ins_code
	join ADJUSTER adj on adj.Adj_code = cas.Adj_code
																	
	join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo
	left join motivocambioestado MceMed on MceMed.Mot_codigo=Con.Mot_codigoMed
	left join motivocambioestado MceProv on MceProv.Mot_codigo=Con.Mot_codigoProv
	left join MotivoCambioEstado mce on mce.Mot_codigo = eve.Mot_codigo
	left join (select top 1 *  from EventoNurseOverride where eve_codigo = @Eve_codigo order by eno_codigo desc ) eo on eo.Pro_code = eve.Pro_code
	left join [User] u on u.Use_Code = eo.Use_Code	
	WHERE eve.Eve_codigo = @Eve_codigo and eve.Eve_vigencia=1
End
--cambio arriba
--===========================================================================================
--==========PROCEDIMIENTO EventoInsert ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=4
Begin
	begin try
		begin tran
		if(@Pro_code=0) set @pro_code=null

		if (@Eve_fin > @Eve_inicio)
		begin
			set @workDayStart = (select dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), cast(('2012-01-01 ' + con.Cof_valor) as datetime), 8)) from Configuracion con where con.Cof_identificador = 'dayStart')
			set @workDayEnd = (select dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), cast(('2012-01-01 ' + con.Cof_valor) as datetime), 8)) from Configuracion con where con.Cof_identificador = 'dayEnd')
			
			set @timeStart = dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), @Eve_inicio, 8))
			set @timeEnd = dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), @Eve_fin, 8))
			
			if (@timeStart>=@workDayStart and @timeStart<=@workDayEnd) and (@timeEnd>=@workDayStart and @timeEnd<=@workDayEnd)
			begin
				
				if not exists(select Eve_codigo from Evento where Eve_inicio=@Eve_inicio and Eve_fin=@Eve_fin and Cis_code=@Cis_code and Tie_codigo=@Tie_codigo and Med_code=@med_code and eve_vigencia = 1)
				begin
					set @codUserSupervisor = (select Cis_caseSupervisor from CaseInformationSheetHead where Cis_code = @Cis_code)
					set @codUserNurse = (select Use_Code from PROVIDER where Pro_code = @Pro_code)

					if ( ((select count(*) from CalendarioUsuario cu 
						where cu.Cau_vigencia = 1 and @codUserNurse=cu.Use_Code and
								(isnull(cu.Eve_codigo,0)=0 or (select count(*) from Evento ev where ev.Eve_codigo=cu.Eve_codigo and ev.Ese_codigo in (1,5))>0) and
								( (@Eve_inicio between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or (@Eve_fin between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or
								(dateadd(mi,1,cu.Cau_inicio) between @Eve_inicio and @Eve_fin)
								)
						) = 0 ) or ((@reasonOverrideNurse is not null) and @reasonOverrideNurse <>''))
						
						
						
						/*verifica fechas de nurse*/ --and
						/*(select count(*) from CalendarioUsuario cu 
						join TipoEvento te on cu.Tie_codigo =  te.Tie_codigo
						where cu.Cau_vigencia = 1 and te.Tie_programable=0 and @supervisor_user=cu.cod_user and
								(isnull(cu.Eve_codigo,0)=0 or (select count(*) from Evento ev where ev.Eve_codigo=cu.Eve_codigo and ev.Ese_codigo in (1,5))>0) and
								( (@Eve_inicio between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or (@Eve_fin between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or
								(dateadd(mi,1,cu.Cau_inicio) between @Eve_inicio and @Eve_fin)
								)
						) = 0 --verifica fechas de supervisor*/
					begin

						-- registrando motivos de confirmacion
						if @confirmDoctor = 1
						begin
							insert into MotivoCambioEstado (Mot_descripcion, Mot_vigencia, Mot_fechaSistema, Use_Code) values (@reasonDoctor, 1, getdate(), @Use_code)
							set @Mot_codigoMed = @@IDENTITY
						end
						else set @Mot_codigoMed = null

						if @confirmNurse = 1
						begin
							insert into MotivoCambioEstado (Mot_descripcion, Mot_vigencia, Mot_fechaSistema, Use_Code) values (@reasonNurse, 1, getdate(), @Use_code)
							set @Mot_codigoPro = @@IDENTITY
						end
						else set @Mot_codigoPro = null

						--Registramos los registros de confirmacion 
						INSERT INTO [dbo].[Confirmacion]([Pro_code],[Med_code],[Con_fecha],[Con_vigencia],[Use_Code],[Con_confirmMed],[Con_confirmProv],Mot_codigoMed,Mot_codigoProv,Use_code_old)
						VALUES(@Pro_code, @med_code,GETDATE(),1,@Use_code,@confirmDoctor,@confirmNurse,@Mot_codigoMed,@Mot_codigoPro,null)
						SET @Con_codigo = @@IDENTITY
				
						--Registramos un nuevo evento con el nuevo registro de confirmacion(Con_codigo)
						INSERT INTO [dbo].[Evento]
						(
							[Eve_inicio],[Eve_fin],[Eve_fecha],[Eve_descripcion],[Pro_code],[Med_code],[Cis_code],[Cis_code_old],[Tie_codigo],[Ese_codigo],[Eve_codigoNext],
							[Use_Code],[Eve_codExchange],[Eve_descartar],[Con_codigo],[eve_done],[eve_override],[Eve_allDay],[Cat_codigo],Eve_nov, Eve_codExchangeSec, Med_code_old,Use_code_old
						)
						select @Eve_inicio,@Eve_fin,getdate(),@Eve_descripcion,@Pro_code,@med_code,@Cis_code,@cis_code,te.Tie_codigo,1,@Eve_codigoNext,
								@Use_code,@Eve_codExchange,0,@Con_codigo,0,0,@Eve_allDay,@Cat_codigo,te.Tie_nov, @Eve_codExchangeSec, null, null
						from TipoEvento te where te.Tie_codigo=@Tie_codigo

						set @Eve_codigo = @@IDENTITY

						if isnull(@Eve_codigoNov,0)>0 update Evento set Eve_codigoNov=@Eve_codigo where Eve_codigo=@Eve_codigoNov

						--Registrar los archivos necesarios que se utilizaran para este evento
						INSERT INTO [dbo].[EventoTipoArchivo]([Tia_codigo] ,[Eve_codigo],[Eta_numArchivos],[Eta_vigencia],[Eta_archivosSubidos])
						select tae.Tia_codigo, @Eve_codigo, ta.Tia_numArchivos, 1, 0
						from TipoArchivoEvento tae
						join TipoArchivo ta on tae.Tia_codigo = ta.Tia_codigo
						where tae.Tie_codigo=@Tie_codigo

						-- registrando el nuevo calendario del evento
						/*INSERT INTO [dbo].[CalendarioUsuario]([cod_user],[Cau_inicio],[Cau_fin],[Cau_descripcion],[Cau_vigencia],[Cau_mostrarMV],Tie_codigo,Eve_codigo)
						VALUES (@codUserSupervisor,@Eve_inicio,@Eve_fin,'',1,0,@Tie_codigo,@Eve_codigo)
						set @Cau_codigo = @@IDENTITY*/

						if (@Tie_needNurse=1) 
						begin
							INSERT INTO [dbo].[CalendarioUsuario]([Use_Code],[Cau_inicio],[Cau_fin],[Cau_descripcion],[Cau_vigencia],[Cau_mostrarMV],Tie_codigo,Eve_codigo)
							VALUES (@codUserNurse,@Eve_inicio,@Eve_fin,'',1,0,@Tie_codigo,@Eve_codigo)
							set @Cau_codigo = @@IDENTITY
						end
						
						--COMENTADO IVON
						/*-- verificando si se registra el doctor
						if (select count(*) from CASE_INFORMATION_SHEET_BODY_MED cm where cm.cod_med = @cod_med and status = '0' and cm.cod_cis=@cod_cis) = 0
						begin
			
							if (select count(*) from CASE_INFORMATION_SHEET_BODY_MED cm where cm.cod_med = @cod_med and cm.cod_cis=@cod_cis) = 0
								INSERT INTO [dbo].[CASE_INFORMATION_SHEET_BODY_MED] ([cod_cis],[cod_med],[status],[Cisbm_fecha],[Cisbm_procedencia],[cod_user]) VALUES (@cod_cis, @cod_med, '0',GETDATE(),'Calendar_InsertCaseMed desde NewEvento',@cod_user)
							else
								update CASE_INFORMATION_SHEET_BODY_MED set status = '0' where cod_cis = @cod_cis and cod_med = @cod_med
						end*/

						-- verificando si el supervisor ha cambiado
						if @supervisor_user <> @codUserSupervisor update CaseInformationSheetHead set Cis_caseSupervisor = @supervisor_user where Cis_code = @Cis_code

						--20/06/2014--- nurse override (permite que una enfermera pueda registrase en un evento así esté ocupada a la misma fecha y hora 
						if(@reasonOverrideNurse is not null and @reasonOverrideNurse <>'')
						begin
							INSERT INTO [dbo].[EventoNurseOverride]([Eve_codigo],[Pro_code],[Eno_fecha],[Use_Code],[Eno_motivo])
							values (@Eve_codigo, @Pro_code, getdate(), @Use_code, @reasonOverrideNurse)
						end	
						

						select @Eve_codigo Eve_codigo
					end
					else
						select 0 Eve_codigo -- no existe disponibilidad para enfermera o para supervisor
				end
				else
					select -3 Eve_codigo -- duplicate event
			end
			else
			begin
				select -2 Eve_codigo -- las fechas no se encuentran en el horario de trabajo configurado
			end
		end
		else			
			select -1 Eve_codigo -- las fecha fin debe ser mayor que la fecha inicio

	commit tran

	end try
	begin catch

		rollback tran
		set @e_message = error_message()
		set @e_severity = error_severity()
		set @e_state = error_state()
		raiserror(@e_message, @e_severity, @e_state)

	end catch

End

--===========================================================================================
--==========PROCEDIMIENTO EventoDelete ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=5
begin
	--Delete from Evento
	--WHERE  Eve_codigo = @Eve_codigo

	-- Ray - 20/10/2015
	update Evento
	set Eve_vigencia = 0
	WHERE  Eve_codigo = @Eve_codigo

end
-- listado de eventos en detail view
else if @TipoConsulta=6
begin
	
	if @Cis_code!=0 set @patient = ''

	Select eve.Cat_codigo, dbo.fu_replacecomillas(cat.Cat_nombre) as cat_nombre, cat.Cat_color ,eve.Eve_allDay, eve.Eve_override, con.Con_codigo,con.Con_confirmMed as confirmDoctor ,con.Con_confirmProv as confirmNurse ,eve.Eve_codigo, eve.Eve_inicio, eve.Eve_fin, eve.Eve_fecha, cas.Cis_accidentDate as accident_date, 	dbo.fu_replacecomillas((pat.Pat_firstName + ' ' + pat.Pat_lastName)) patient, tie.Tie_codigo, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_nombre, tie.Tie_programable,
		   dbo.fu_replacecomillas((med.Med_firstName + ' ' + med.Med_lastName)) as medico, med.Med_code, dbo.fu_replacecomillas(med.Med_address)address_med, (pro.Pro_firstName + ' ' + pro.Pro_lastName) nurse, pro.Pro_code,
		   dbo.fu_replacecomillas((ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName)) as supervisor, est.Ese_codigo, est.Ese_abreviatura, est.Ese_nombre, dbo.fu_replacecomillas(pat.Pat_address) as address_pat, 
		   (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status], cas.Cis_code, cas.Cis_caseCode,
		   eve.Eve_codExchange, eve.Eve_codigoNext, eve.Use_Code, dbo.fu_replacecomillas(eve.Eve_descripcion) Eve_descripcion,
		   (select count(*) from EventoHistorial eh where eh.Eve_codigo = eve.Eve_codigo and Evh_usado = 0) Cantidad,
		   (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where ETA.Eve_codigo=eve.Eve_codigo and ETA.Eta_numArchivos>Eta_archivosSubidos and ETA.Eta_vigencia = 1) CantidadFalta,
		   cast(cas.Cis_status as varchar) as CasoEstado, cas.Cis_actual, Eve_done, eve.Eve_codExchangeSec	   
	from Evento eve
	left join Categoria cat on eve.Cat_codigo = cat.Cat_codigo
	join MEDICAL med on eve.Med_code = med.Med_code and rtrim(ltrim(med.Med_firstName + ' ' + med.Med_lastName)) like @doctor+'%'
	left join PROVIDER pro on eve.Pro_code = pro.Pro_code	
	join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code and (@Cis_code=0 or cas.Cis_code=@Cis_code)
	join PATIENT pat on pat.Pat_code = cas.Pat_code and rtrim(ltrim(pat.Pat_lastName)) like @patient +'%'
	join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor
	join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo
	join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo
	join Confirmacion con on con.Con_codigo = eve.Con_codigo
	where eve.eve_vigencia=1
	order by eve.Eve_inicio

end
-- reprogramar evento
else if @TipoConsulta=7
Begin
		
	Begin try
	  begin tran
		set @workDayStart = (select dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), cast(('2012-01-01 ' + con.Cof_valor) as datetime), 8)) from Configuracion con where con.Cof_identificador = 'dayStart')
		set @workDayEnd = (select dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), cast(('2012-01-01 ' + con.Cof_valor) as datetime), 8)) from Configuracion con where con.Cof_identificador = 'dayEnd')
			
		set @timeStart = dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), @Eve_inicio, 8))
		set @timeEnd = dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), @Eve_fin, 8))

		if (@timeStart>=@workDayStart and @timeStart<=@workDayEnd) and (@timeEnd>=@workDayStart and @timeEnd<=@workDayEnd)
		begin
			
			if not exists(select Eve_codigo from Evento where Eve_inicio=@Eve_inicio and Eve_fin=@Eve_fin and Cis_code=@Cis_code and Tie_codigo=@Tie_codigo and Med_code=@med_code and eve_vigencia=1)
			begin

				set @codUserSupervisor = (select Cis_caseSupervisor from CaseInformationSheetHead where Cis_code = @Cis_code) 
				set @codUserNurse = (select Use_Code from PROVIDER where Pro_code = @Pro_code)
			
				if (select count(*) from CalendarioUsuario cu 
					where (@Eve_codigo=0 or isnull(cu.Eve_codigo,0) <> @Eve_codigo) and cu.Cau_vigencia = 1 and @codUserNurse=cu.Use_Code and
						  (isnull(cu.Eve_codigo,0)=0 or (select count(*) from Evento ev where ev.Eve_codigo=cu.Eve_codigo and eve_vigencia=1 and ev.Ese_codigo in (1,5))>0) and
						  ( (@Eve_inicio between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or (@Eve_fin between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or
							(dateadd(mi,1,cu.Cau_inicio) between @Eve_inicio and @Eve_fin)
						  )
					) = 0 /*verifica fechas de nurse*/ --and
					/*(select count(*) from CalendarioUsuario cu
					join TipoEvento te on cu.Tie_codigo =  te.Tie_codigo
					where (@Eve_codigo=0 or isnull(cu.Eve_codigo,0) <> @Eve_codigo) and te.Tie_programable=0 and cu.Cau_vigencia = 1 and @supervisor_user=cu.cod_user and
						  (isnull(cu.Eve_codigo,0)=0 or (select count(*) from Evento ev where ev.Eve_codigo=cu.Eve_codigo and ev.Ese_codigo in (1,5))>0) and
						  ( (@Eve_inicio between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or (@Eve_fin between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or
							(dateadd(mi,1,cu.Cau_inicio) between @Eve_inicio and @Eve_fin)
						  )
					) = 0 --verifica fechas de supervisor*/	
				begin					
		
					-- registrar confirmacion
					INSERT INTO [dbo].[Confirmacion](Pro_code,Med_code,Con_fecha,Con_vigencia,Use_Code,Con_confirmMed,Con_confirmProv)
					values (@Pro_code,@med_code,GETDATE(),1,@Use_code,@confirmDoctor,@confirmNurse)
					SET @Con_codigo= @@IDENTITY

					-- registrar motivo de reprogramacion
					insert into MotivoCambioEstado (Mot_descripcion, Mot_vigencia, Mot_fechaSistema, Use_Code) values (@Mot_descripcion, 1, getdate(), @Use_code)
					set @Mot_codigo = @@IDENTITY

					-- registrar nuevo evento
					INSERT INTO [dbo].[Evento]
					(
						[Eve_inicio],
						[Eve_fin],
						[Eve_fecha],
						[Eve_descripcion],
						[Pro_code],
						[Med_code],
						[Cis_code],
						[Tie_codigo],
						[Ese_codigo],
						[Eve_codigoNext],
						[Use_Code],
						[Eve_codExchange],
						[Eve_descartar],
						[Con_codigo],
						[Eve_override],
						Eve_allDay,
						Mot_codigo,
						Evh_undoChangeUser,
						[Cat_codigo],
						Eve_nov, 
						Eve_codExchangeSec
					)
					select @Eve_inicio, @Eve_fin, getdate(), @Eve_descripcion, (case when len(@Pro_code)=0 then null else @Pro_code end), @med_code, @Cis_code, @Tie_codigo, 1, @Eve_codigoNext,
						   @Use_code, @Eve_codExchange, 0, @Con_codigo, 0, @Eve_allDay, null, null, @Cat_codigo, ti.Tie_nov, @Eve_codExchangeSec
					from TipoEvento ti
					where ti.Tie_codigo=@Tie_codigo
								
					SET @Eve_codigoNext = @@IDENTITY
			
					--Registrar los archivos necesarios que se utilizaran para este evento
					INSERT INTO [dbo].[EventoTipoArchivo]([Tia_codigo] ,[Eve_codigo],[Eta_numArchivos],[Eta_vigencia],[Eta_archivosSubidos])			
					select tae.Tia_codigo, @Eve_codigoNext, ta.Tia_numArchivos, 1, 0
					from TipoArchivoEvento tae
					join TipoArchivo ta on tae.Tia_codigo = ta.Tia_codigo
					where tae.Tie_codigo=@Tie_codigo
					union
					select eta.Tia_codigo, @Eve_codigoNext, eta.Eta_numArchivos, 1, 0--eta.Eta_archivosSubidos
					from EventoTipoArchivo eta
					where eta.Eve_codigo = @Eve_codigo and 
						  eta.Tia_codigo not in (select tae.Tia_codigo from TipoArchivoEvento tae join TipoArchivo ta on tae.Tia_codigo = ta.Tia_codigo where tae.Tie_codigo=@Tie_codigo) and eta.Eta_archivosSubidos>0

					-- registrar confirmacion del evento reprogramado
					--if (@AconfirmDoctor = 1 and @AconfirmNurse = 1) or (@AconfirmDoctor = 0 and @AconfirmNurse = 0)
					--begin
		
					--	INSERT INTO [dbo].[Confirmacion]
					--	([cod_pro],[cod_med],[Con_fecha],[Con_vigencia],[cod_user],Con_confirmMed,Con_confirmProv)
					--	VALUES
					--	(@cod_pro,@cod_med, getdate(), 1, @cod_user, @AconfirmDoctor, @AconfirmNurse)
					--	SET @Con_codigo = @@IDENTITY
					--	update Evento set Con_codigo = @Con_codigo where Eve_codigo = @Eve_codigo		
					--end	
					--else
					--begin
					--	if (@AconfirmDoctor=1)		
					--	begin
					--		INSERT INTO [dbo].[Confirmacion]
					--		([cod_pro],[cod_med],[Con_fecha],[Con_vigencia],[cod_user],Con_confirmMed)
					--		VALUES
					--		(@cod_pro,@cod_med, getdate(), 1, @cod_user, @AconfirmDoctor)
					--		SET @Con_codigo = @@IDENTITY
					--		update Evento set Con_codigo = @Con_codigo where Eve_codigo = @Eve_codigo		
					--	end
					--	if (@AconfirmNurse=1)
					--	begin
					--		INSERT INTO [dbo].[Confirmacion]
					--		([cod_pro],[cod_med],[Con_fecha],[Con_vigencia],[cod_user],Con_confirmProv)
					--		VALUES
					--		(@cod_pro,@cod_med, getdate(), 1, @cod_user, @AconfirmNurse)		
					--		SET @Con_codigo = @@IDENTITY
					--		update Evento set Con_codigo = @Con_codigo where Eve_codigo = @Eve_codigo		
					--	end
					--end

					-- registrando en el historial de evento
					INSERT INTO [dbo].[EventoHistorial]
					([Eve_codigo],[Eve_inicio],[Eve_fin],[Eve_fecha],[Eve_descripcion],[Pro_code],[Med_code],[Cis_code],[Tie_codigo],[Ese_codigo],[Eve_codigoNext],[Evh_fecha],[Use_Code],[Eve_codExchange],[Eve_descartar],[Con_codigo],Mot_codigo,
					[Eve_done],[Eve_override],[Eve_allDay],[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], Eve_codExchangeSec)
					select e.Eve_codigo, e.Eve_inicio, e.Eve_fin, e.Eve_fecha, e.Eve_descripcion, e.Pro_code, e.Med_code, e.Cis_code, e.Tie_codigo, e.Ese_codigo, e.Eve_codigoNext, getdate(), @Use_code, e.Eve_codExchange, e.Eve_descartar,e.Con_codigo,Mot_codigo,
					[Eve_done],[Eve_override],[Eve_allDay],[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], [Eve_codExchangeSec]
					from Evento e
					where e.Eve_codigo = @Eve_codigo

					-- actualizar evento reprogramdo				
					update Evento set Ese_codigo = 3, Eve_codigoNov = @Eve_codigoNext, Mot_codigo=@Mot_codigo,Eve_nov=1 where Eve_codigo = @Eve_codigo

					--registrar un nuevo nextofficevisit
					--insert into EventoNextOffice(Eno_descripcion, Eno_vigencia, Eno_fecha, cod_user, Eve_codigo, Eno_nov)
					--values('C+R', 1, getdate(), @cod_user, @Eve_codigo, 0)
					
			
					/*-- registrando el nuevo calendario del evento
					INSERT INTO [dbo].[CalendarioUsuario]([cod_user],[Cau_inicio],[Cau_fin],[Cau_descripcion],[Cau_vigencia],[Cau_mostrarMV],Tie_codigo,Eve_codigo)
					VALUES (@codUserSupervisor,@Eve_inicio,@Eve_fin,'',1,0,@Tie_codigo,@Eve_codigoNext)
					set @Cau_codigo = @@IDENTITY*/

					/*
					if(dbo.Fu_ValidarEstadoCompletado(@Eve_codigo)=0)
					begin
						update Evento set Eve_done=1, Ese_codigo=5 where Eve_codigo=@Eve_codigo		
					end
					else
					begin
						update Evento set Eve_done=0, Ese_codigo=1 where Eve_codigo=@Eve_codigo
					end
					*/
					

					-- registrando el nuevo calendario del evento
					if len(@Pro_code)>0
					begin
						INSERT INTO [dbo].[CalendarioUsuario]([Use_Code],[Cau_inicio],[Cau_fin],[Cau_descripcion],[Cau_vigencia],[Cau_mostrarMV],Tie_codigo,Eve_codigo)
						VALUES (@codUserNurse,@Eve_inicio,@Eve_fin,'',1,0,@Tie_codigo,@Eve_codigoNext)
						set @Cau_codigo = @@IDENTITY
					end

					if @codUserSupervisor <> @supervisor_user update CaseInformationSheetHead set Cis_caseSupervisor = @supervisor_user where Cis_code = @Cis_code

					

					-- obtener codigo nuevo
					select @Eve_codigoNext codigoNuevo
				end
				else
					select -1 codigoNuevo
			end
			else
				select -2 codigoNuevo
		end
		else
			select -3 codigoNuevo

		commit tran

	end try
	begin catch
		
		rollback tran
		set @e_message = error_message()
		set @e_severity = error_severity()
		set @e_state = error_state()
		raiserror(@e_message, @e_severity, @e_state)

	end catch

end
else if @TipoConsulta=8
Begin

	---actualizar eventos activos que deben estar en completado 
	declare @table table
						(
						id int identity,
						eve_codigo int
						)


	insert into @table (eve_codigo)
	select eve_codigo
	from Evento y 
	where Ese_codigo=1 and Eve_inicio < getdate()
	and exists(select ev.Eve_codigo from Evento ev where ev.Eve_codigo=y.Eve_codigo and (ev.Eve_nov=0 or ev.Eve_codigoNov is not null)) 
	and (select COUNT(*) from EventoTipoArchivo ETA where Eve_codigo=y.Eve_codigo and Eta_vigencia = 1 and ETA.Eta_numArchivos>Eta_archivosSubidos)  = 0
	and Eve_vigencia = 1
	order by Eve_inicio desc

	update Evento set Eve_done=1, Ese_codigo=5 where Eve_codigo in (select Eve_codigo from @table)
	----------------------------------------------------------------------------------------------------
	

	declare @tbEvents table(
		--Id int identity(1,1) primary key,
		Eve_codigo int,
		Eve_inicio datetime,
		Ese_abreviatura varchar(10),
		Ese_nombre varchar(150),		
		Tie_nombre varchar(150),
		Use_Code int,
		accident_date smalldatetime,
		patient varchar(400),		
		medico varchar(400),
		confirmDoctor bit,		
		nurse varchar(400),
		Pro_code int,
		confirmNurse bit,
		supervisor varchar(400),
		Ret_codigo int,
		Rec_codigo int,
		Rec_tipo bit,
		Rec_expira bit,
		Rec_fechaExpiracion datetime,
		Rec_every bit,
		Rec_everydays smallint,
		Rec_repetir bit,
		Rec_repetirCada tinyint,
		Rec_repetirDuracion tinyint,
		Rec_fechaInicio datetime,
		Rec_ultimaAparicion datetime,
		Rec_nextAparicion datetime,
		Rec_descripcion text,
		Users varchar(400)
	)

	insert into @tbEvents (Eve_codigo, Eve_inicio, Ese_abreviatura, Ese_nombre, Tie_nombre, Use_Code, 
						   accident_date, patient, medico, confirmDoctor, nurse, Pro_code, confirmNurse, supervisor, Ret_codigo, Rec_codigo, Rec_tipo, Rec_expira, Rec_fechaExpiracion,
						   Rec_every, Rec_everydays, Rec_repetir, Rec_repetirCada, Rec_repetirDuracion, Rec_fechaInicio, Rec_ultimaAparicion, Rec_nextAparicion, Rec_descripcion, Users)
	select e.Eve_codigo, e.Eve_inicio, ee.Ese_abreviatura, ee.Ese_nombre, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_nombre, e.Use_Code, 
		   cas.Cis_accidentDate, dbo.fu_replacecomillas((pat.Pat_FirstName + ' ' + pat.Pat_lastName)) patient,
		   dbo.fu_replacecomillas((med.Med_firstName + ' ' + med.Med_lastName)) medico, con.Con_confirmMed confirmDoctor,
		   dbo.fu_replacecomillas((pro.Pro_firstName + ' ' + pro.Pro_lastName)) nurse, pro.Pro_code, con.Con_confirmProv confirmNurse,
		   dbo.fu_replacecomillas((ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName)) supervisor, re.Ret_codigo, re.Rec_codigo, re.Rec_tipo, re.Rec_expira, re.Rec_fechaExpiracion, re.Rec_every, re.Rec_everydays,
		   re.Rec_repetir, re.Rec_repetirCada, re.Rec_repetirDuracion, re.Rec_fechaInicio, re.Rec_ultimaAparicion, re.Rec_nextAparicion, re.Rec_descripcion,
		   dbo.Fu_ObtenerUsersInReminder(rt.Ret_codigo)
	from Evento e
	join RecordatorioTrigger rt on rt.Eve_codigo = e.Eve_codigo and rt.Ret_vigencia=1
	join Recordatorio re on rt.Ret_codigo = re.Ret_codigo and re.Rec_vigencia=1

	join MEDICAL med on e.Med_code = med.Med_code
	left join PROVIDER pro on e.Pro_code = pro.Pro_code

	inner join EstadoEvento ee on e.Ese_codigo = ee.Ese_codigo

	join Confirmacion con on con.Con_codigo = e.Con_codigo
	join CaseInformationSheetHead cas on e.Cis_code = cas.Cis_code
	join PATIENT pat on pat.Pat_code = cas.Pat_code

	join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor
	join TipoEvento tie on tie.Tie_codigo = e.Tie_codigo
	where e.Eve_descartar=0 and 
		  e.eve_vigencia=1 and 
		  (ltrim(rtrim(@Use_code))='' or (select count(ru.Ret_codigo) from RecordatorioUsuario ru where ru.Ret_codigo=rt.Ret_codigo and ru.Use_Code=@Use_code)>0)

	update Recordatorio set Rec_ultimaAparicion = getdate()
	where Rec_codigo in (select tb.Rec_codigo from @tbEvents tb
						 where tb.Rec_repetir=1 and datediff(MILLISECOND,getdate(),dateadd(day,tb.Rec_repetirDuracion,tb.Rec_fechaInicio))>0 and (tb.Rec_nextAparicion between dateadd(MINUTE,-2,getdate()) and dateadd(MINUTE,2,getdate()))
						)  					
	select tb.Eve_codigo, tb.Eve_inicio, tb.Ese_abreviatura, tb.Ese_nombre, tb.Tie_nombre, tb.Use_Code, tb.accident_date, tb.patient, tb.medico, tb.confirmDoctor,
		   tb.nurse, tb.Pro_code, tb.confirmNurse, tb.supervisor, tb.Ret_codigo, tb.Rec_codigo, tb.Rec_tipo, tb.Rec_expira, tb.Rec_fechaExpiracion, tb.Rec_every, tb.Rec_everydays,
		   tb.Rec_repetir, tb.Rec_repetirCada, tb.Rec_repetirDuracion, tb.Rec_fechaInicio, tb.Rec_ultimaAparicion, tb.Rec_nextAparicion, tb.Rec_descripcion, tb.Users
	from @tbEvents tb

end
-- creating the next office visit
else if @TipoConsulta=9
Begin
		
	Begin try

	   if(@Pro_code=0) set @Pro_code=null
		set @workDayStart = (select dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), cast(('2012-01-01 ' + con.Cof_valor) as datetime), 8)) from Configuracion con where con.Cof_identificador = 'dayStart')
		set @workDayEnd = (select dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), cast(('2012-01-01 ' + con.Cof_valor) as datetime), 8)) from Configuracion con where con.Cof_identificador = 'dayEnd')
			
		set @timeStart = dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), @Eve_inicio, 8))
		set @timeEnd = dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), @Eve_fin, 8))

		if (@timeStart>=@workDayStart and @timeStart<=@workDayEnd) and (@timeEnd>=@workDayStart and @timeEnd<=@workDayEnd)
		begin
			
			if not exists(select Eve_codigo from Evento where Eve_inicio=@Eve_inicio and Eve_fin=@Eve_fin and Cis_code=@Cis_code and Tie_codigo=@Tie_codigo and Med_code=@med_code and eve_vigencia = 1)
			begin
				set @codUserSupervisor = (select Cis_caseSupervisor from CaseInformationSheetHead where Cis_code = @Cis_code) 
				set @codUserNurse = (select Use_Code from PROVIDER where Pro_code = @Pro_code)
				
				if (select count(*) from CalendarioUsuario cu 
					where (@Eve_codigo=0 or isnull(cu.Eve_codigo,0) <> @Eve_codigo) and cu.Cau_vigencia = 1 and @codUserNurse=cu.Use_Code and
						  (isnull(cu.Eve_codigo,0)=0 or (select count(*) from Evento ev where ev.Eve_codigo=cu.Eve_codigo and ev.Ese_codigo in (1,5))>0) and
						  ( (@Eve_inicio between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or (@Eve_fin between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or
							(dateadd(mi,1,cu.Cau_inicio) between @Eve_inicio and @Eve_fin)
						  )
					) = 0 /*verifica fechas de nurse*/ --and
					/*(select count(*) from CalendarioUsuario cu
					join TipoEvento te on cu.Tie_codigo =  te.Tie_codigo
					where (@Eve_codigo=0 or isnull(cu.Eve_codigo,0) <> @Eve_codigo) and te.Tie_programable=0 and cu.Cau_vigencia = 1 and @supervisor_user=cu.cod_user and
						  (isnull(cu.Eve_codigo,0)=0 or (select count(*) from Evento ev where ev.Eve_codigo=cu.Eve_codigo and ev.Ese_codigo in (1,5))>0) and
						  ( (@Eve_inicio between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or (@Eve_fin between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or
							(dateadd(mi,1,cu.Cau_inicio) between @Eve_inicio and @Eve_fin)
						  )
					) = 0 -- verifica fechas de supervisor*/
				begin
				  Begin try
					begin tran
		
					-- registrar confirmacion
					INSERT INTO [dbo].[Confirmacion](Pro_code,Med_code,Con_fecha,Con_vigencia,Use_Code,Con_confirmMed,Con_confirmProv)
					values (@Pro_code,@med_code,GETDATE(),1,@Use_code,@confirmDoctor,@confirmNurse)
					SET @Con_codigo= @@IDENTITY								

					-- registrar nuevo evento
					INSERT INTO [dbo].[Evento]
					(
						[Eve_inicio],
						[Eve_fin],
						[Eve_fecha],
						[Eve_descripcion],
						[Pro_code],
						[Med_code],
						[Cis_code],
						[Tie_codigo],
						[Ese_codigo],
						Eve_codigoNov,
						[Use_Code],
						[Eve_codExchange],
						[Eve_descartar],
						[Con_codigo],
						[Eve_override],
						Eve_allDay,
						Mot_codigo,
						Evh_undoChangeUser,
						[Cat_codigo],
						Eve_nov,
						[Eve_codExchangeSec]
					)
					select @Eve_inicio, @Eve_fin, getdate(), @Eve_descripcion, (case when len(@Pro_code)=0 then null else @Pro_code end), @med_code, @Cis_code, @Tie_codigo, 1, null,
						   @Use_code, @Eve_codExchange, 0, @Con_codigo, 0, @Eve_allDay, null, null, @Cat_codigo, ti.Tie_nov, @Eve_codExchangeSec
					from TipoEvento ti
					where ti.Tie_codigo=@Tie_codigo
				
					SET @Eve_codigoNext=@@IDENTITY

					if isnull(@Eve_codigoNov,0)>0 update Evento set Eve_codigoNov=@Eve_codigoNext where Eve_codigo=@Eve_codigoNov
			
					--Registrar los archivos necesarios que se utilizaran para este evento
					INSERT INTO [dbo].[EventoTipoArchivo]([Tia_codigo] ,[Eve_codigo],[Eta_numArchivos],[Eta_vigencia],[Eta_archivosSubidos])			
					select tae.Tia_codigo, @Eve_codigoNext, ta.Tia_numArchivos, 1, 0
					from TipoArchivoEvento tae
					join TipoArchivo ta on tae.Tia_codigo = ta.Tia_codigo
					where tae.Tie_codigo=@Tie_codigo
					union
					select eta.Tia_codigo, @Eve_codigoNext, eta.Eta_numArchivos, 1, 0--eta.Eta_archivosSubidos
					from EventoTipoArchivo eta
					where eta.Eve_codigo = @Eve_codigoNov and 
						  eta.Tia_codigo not in (select tae.Tia_codigo from TipoArchivoEvento tae join TipoArchivo ta on tae.Tia_codigo = ta.Tia_codigo where tae.Tie_codigo=@Tie_codigo) and eta.Eta_archivosSubidos>0
				
					/*-- registrando el nuevo calendario del evento
					INSERT INTO [dbo].[CalendarioUsuario]([cod_user],[Cau_inicio],[Cau_fin],[Cau_descripcion],[Cau_vigencia],[Cau_mostrarMV],Tie_codigo,Eve_codigo)
					VALUES (@codUserSupervisor,@Eve_inicio,@Eve_fin,'',1,0,@Tie_codigo,@Eve_codigoNext)
					set @Cau_codigo = @@IDENTITY
					*/
					-- registrando el nuevo calendario del evento
					if len(@Pro_code)>0
					begin
						INSERT INTO [dbo].[CalendarioUsuario]([Use_Code],[Cau_inicio],[Cau_fin],[Cau_descripcion],[Cau_vigencia],[Cau_mostrarMV],Tie_codigo,Eve_codigo)
						VALUES (@codUserNurse,@Eve_inicio,@Eve_fin,'',1,0,@Tie_codigo,@Eve_codigoNext)
						set @Cau_codigo = @@IDENTITY
					end

					if @codUserSupervisor <> @supervisor_user update CaseInformationSheetHead set Cis_caseSupervisor = @supervisor_user where Cis_code = @Cis_code

					-- verificar si se debe pasar a completado
					--set @Cantidad = (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where Eve_codigo=@Eve_codigoNov and Eta_vigencia = 1 and ETA.Eta_numArchivos>Eta_archivosSubidos)			
					--if @Cantidad = 0 and exists(select ev.Eve_codigo from Evento ev where ev.Eve_codigo=@Eve_codigoNov and (ev.Eve_nov=0 or ev.Eve_codigoNov is not null))
					if(dbo.Fu_ValidarEstadoCompletado(@Eve_codigoNov)=0)
					begin
						update Evento set Eve_done=1, Ese_codigo=5 where Eve_codigo=@Eve_codigoNov		
					end
					else
					begin
						update Evento set Eve_done=0 where Eve_codigo=@Eve_codigoNov
					end

					commit tran

					-- obtener codigo nuevo				
					select eve.Eve_codigoNov codigoNuevo, eve.Eve_done,
						   (select dbo.Fu_ObtenerDateTime(ex.Eve_inicio) + ', ' + patx.Pat_lastName + ' ' + patx.Pat_lastName from Evento ex join CaseInformationSheetHead casx on casx.Cis_code=ex.Cis_code join PATIENT patx on patx.Pat_code=casx.Pat_code where ex.Eve_codigo=eve.Eve_codigoNov) EventNextOffice
					from Evento eve where eve.Eve_codigo = @Eve_codigoNov

				  end try
				 begin catch
		
					rollback tran
					set @e_message = error_message()
					set @e_severity = error_severity()
					set @e_state = error_state()
					raiserror(@e_message, @e_severity, @e_state)

				 end catch

				end
				else
					select -1 codigoNuevo, '' EventNextOffice, cast(0 as bit) Eve_done
			end
			else
				select -2 codigoNuevo, '' EventNextOffice, cast(0 as bit) Eve_done
		end
		else
			select -3 codigoNuevo, '' EventNextOffice, cast(0 as bit) Eve_done
	
	
		
	end try
	begin catch
		
		--rollback tran
		set @e_message = error_message()
		set @e_severity = error_severity()
		set @e_state = error_state()
		raiserror(@e_message, @e_severity, @e_state)

	end catch

end

--===========================================================================================
--===========================================================================================
--==========PROCEDIMIENTO EventoGetTie_codigo ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=10
Begin
	select dbo.fu_replacecomillas(med.Med_phone) as phone_med,eve.Eve_allDay, eve.Eve_override, con.Con_codigo,con.Con_confirmMed as confirmDoctor ,
	con.Con_confirmProv as confirmNurse ,eve.Eve_codigo, eve.Eve_inicio, eve.Eve_fin, eve.Eve_fecha, cas.Cis_accidentDate, 
	dbo.fu_replacecomillas((pat.Pat_FirstName + ' ' + pat.Pat_lastName)) as patient, dbo.fu_replacecomillas(pat.Pat_address) as address_pat, 
	tie.Tie_codigo, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_nombre, tie.Tie_programable,
			dbo.fu_replacecomillas((med.Med_firstName + ' ' + med.Med_lastName)) as medico, med.Med_code, dbo.fu_replacecomillas(med.Med_address) as address_med, 
			dbo.fu_replacecomillas((pro.Pro_firstName + ' ' + pro.Pro_lastName)) as nurse, pro.Pro_code,
			dbo.fu_replacecomillas((ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName)) as supervisor, est.Ese_codigo, est.Ese_abreviatura, est.Ese_nombre, (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status], cas.Cis_code, cas.Cis_caseCode,

			eve.Eve_codExchange, eve.Eve_codigoNext, eve.Use_Code, dbo.fu_replacecomillas(eve.Eve_descripcion) as eve_descripcion,
			(select count(*) from EventoHistorial eh where eh.Eve_codigo = eve.Eve_codigo and Evh_usado = 0) Cantidad,
			(select COUNT(*) from EventoTipoArchivo ETA where ETA.Eve_codigo=eve.Eve_codigo and ETA.Eta_numArchivos>Eta_archivosSubidos and ETA.Eta_vigencia = 1) CantidadFalta,
			cast(cas.Cis_status as varchar) as CasoEstado, cas.Cis_actual, Eve_done,dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1) documents, eve.Eve_codExchangeSec
	from Evento eve
	join MEDICAL med on eve.Med_code = med.Med_code
	left join PROVIDER pro on eve.Pro_code = pro.Pro_code
	join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo	
	join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code and (len(@Cis_code)=0 or ltrim(rtrim(eve.Cis_code))=@Cis_code)
	join PATIENT pat on pat.Pat_code = cas.Pat_code
	join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor
	join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo and tie.Tie_nov=1 and (len(@eventTypes)=0 or tie.Tie_codigo in (select ti.item from [dbo].[fu_Split](@eventTypes, '*') ti))
	join Confirmacion con on con.Con_codigo = eve.Con_codigo
	where eve.Eve_codigo<>@Eve_codigo and (med.Med_firstName + ' ' + med.Med_lastName + '-' + med.Med_address) like '%'+@doctor+'%' and (pat.Pat_FirstName + ' ' + pat.Pat_lastName) like '%'+@patient+'%' and
	(len(@supervisores)=0 or rtrim(ltrim(cas.Cis_caseSupervisor)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split](@supervisores, '*') su)) and
	(len(@nurses)=0 or pro.Pro_code in (select nu.item from [dbo].[fu_Split](@nurses, '*') nu)) and
	(@confirmDoctorSearch = -1 or @confirmDoctorSearch = con.Con_confirmMed) and
	(@confirmNurseSearch = -1 or @confirmNurseSearch = con.Con_confirmProv) and
	(@phone = '' or rtrim(ltrim(@phone))=rtrim(ltrim(med.Med_phone)) or rtrim(ltrim(@phone))=rtrim(ltrim(med.Med_phoneExt)) or rtrim(ltrim(@phone))=rtrim(ltrim(med.Med_alternatePhone))) and
	( (@Eve_inicio is null or cast(eve.Eve_inicio as date)>=cast(@Eve_inicio as date)) and (@Eve_fin is null or cast(eve.Eve_fin as date)<=cast(@Eve_fin as date)) )
	and eve.eve_vigencia=1
	order by eve.Eve_inicio
end
-- actualizar confirmacion y estado de evento (no reprogramacion)
else if @TipoConsulta=11
Begin
	
	select @Eve_codigoNov=isnull(ev.Eve_codigoNov,0), @Eve_bloqueo=isnull(Eve_bloqueo,0), @ese_codigoy=ev.Ese_codigo from Evento ev 
	where ev.Eve_codigo=@Eve_codigo

	DECLARE @MOTCODIGOMED BIGINT = (SELECT Mot_codigoMed from Confirmacion where con_codigo=(select con_codigo from evento where Eve_codigo=@Eve_codigo))
	
	if @Eve_bloqueo=0
	begin
		-- Esta accion se ejecuta para agregar un registro nuevo en la tabla eventohistorial pero con el nuevo con_codigo(codigo de la tabla confirmacion) actualizado.
		INSERT INTO [dbo].[EventoHistorial]
		([Eve_codigo],[Eve_inicio],[Eve_fin],[Eve_fecha],[Eve_descripcion],[Pro_code],[Med_code],[Cis_code],[Tie_codigo],[Ese_codigo],[Eve_codigoNext],[Evh_fecha],[Use_code],[Eve_codExchange],[Eve_descartar],[Con_codigo],[Evh_override], Mot_codigo,
		[Eve_done],[Eve_override],[Eve_allDay],[Cat_codigo],[Evh_undoChangeUser],[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], Eve_codExchangeSec)
		select e.Eve_codigo, e.Eve_inicio, e.Eve_fin, e.Eve_fecha, e.Eve_descripcion, e.Pro_code, e.Med_code, e.Cis_code, e.Tie_codigo, e.Ese_codigo, e.Eve_codigoNext, getdate(), @Use_code, e.Eve_codExchange, e.Eve_descartar,e.Con_codigo,[Eve_override],Mot_codigo,

		[Eve_done],[Eve_override],[Eve_allDay],[Cat_codigo],[Evh_undoChangeUser],[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], [Eve_codExchangeSec]
		from Evento e
		where e.Eve_codigo = @Eve_codigo

		if (@checkNurse=1 or @checkDoctor=1)
		begin		
			insert into MotivoCambioEstado (Mot_descripcion, Mot_vigencia, Mot_fechaSistema, Use_code) values (@Mot_descripcion, 1, getdate(), @Use_code)
			set @Mot_codigo = @@IDENTITY

			if (@checkNurse=1)		
			begin
				if(@confirmNurse=1)	
				begin
					if(@Mot_codigo is not null)
					begin
						INSERT INTO [dbo].[Confirmacion]
						([Pro_code],[Med_code],[Con_fecha],[Con_vigencia],[Use_code],Con_confirmProv, Con_confirmMed ,Mot_codigoMed,Mot_codigoProv)
						VALUES
						(	@cod_pro,@med_code, getdate(), 1,@Use_code,@confirmNurse,@confirmDoctor,
							(select Mot_codigoMed from Evento Eve inner join Confirmacion Con on Eve.Con_codigo=Con.Con_codigo where Eve.Eve_codigo=@Eve_codigo),
							@Mot_codigo
				
						)
						SET @Con_codigo = @@IDENTITY
					end
					else
					begin
						--select -1 Eve_done
						insert into MotivoCambioEstado (Mot_descripcion, Mot_vigencia, Mot_fechaSistema, Use_code) values (@Mot_descripcion, 1, getdate(), @Use_code)
						set @Mot_codigo2 = @@IDENTITY

						INSERT INTO [dbo].[Confirmacion]
						([Pro_code],[Med_code],[Con_fecha],[Con_vigencia],[Use_code],Con_confirmProv, Con_confirmMed ,Mot_codigoMed,Mot_codigoProv)
						VALUES
						(	@cod_pro,@med_code, getdate(), 1,@Use_code,@confirmNurse,@confirmDoctor,
							(select Mot_codigoMed from Evento Eve inner join Confirmacion Con on Eve.Con_codigo=Con.Con_codigo where Eve.Eve_codigo=@Eve_codigo),
							@Mot_codigo2
				
						)
						SET @Con_codigo = @@IDENTITY

					end
				end 
				else
				begin
					INSERT INTO [dbo].[Confirmacion]
					([Pro_code],[Med_code],[Con_fecha],[Con_vigencia],[Use_code],Con_confirmProv, Con_confirmMed ,Mot_codigoMed,Mot_codigoProv)
					VALUES
					(	@cod_pro,@med_code, getdate(), 1,@Use_code,@confirmNurse,@confirmDoctor,
						(select Mot_codigoMed from Evento Eve inner join Confirmacion Con on Eve.Con_codigo=Con.Con_codigo where Eve.Eve_codigo=@Eve_codigo),
						@Mot_codigo
				
					)
					SET @Con_codigo = @@IDENTITY
				end
					
				
			end
			if (@checkDoctor=1)
			begin
				if(@confirmNurse=1)
				begin
					if((select Mot_codigoProv from Evento Eve inner join Confirmacion Con on Eve.Con_codigo=Con.Con_codigo	where Eve.Eve_codigo=@Eve_codigo)is not null)
					begin
					INSERT INTO [dbo].[Confirmacion]
					([Pro_code],[Med_code],[Con_fecha],[Con_vigencia],[Use_code],Con_confirmProv,Con_confirmMed,Mot_codigoMed,Mot_codigoProv)
					VALUES
					(	@cod_pro,@med_code, getdate(), 1, @Use_code, @confirmNurse,@confirmDoctor,@Mot_codigo,
						(select Mot_codigoProv from Evento Eve inner join Confirmacion Con on Eve.Con_codigo=Con.Con_codigo	where Eve.Eve_codigo=@Eve_codigo)
					)		
					SET @Con_codigo = @@IDENTITY	
					end
					else
					begin
						--select -1 Eve_done
						if (@MOTCODIGOMED is not null)
						begin							 

							insert into MotivoCambioEstado (Mot_descripcion, Mot_vigencia, Mot_fechaSistema, Use_code) values ('S: y. Notified of permission: y', 1, (select mot_fechasistema from MotivoCambioEstado where Mot_codigo=@MOTCODIGOMED), (select Use_code from MotivoCambioEstado where Mot_codigo=@MOTCODIGOMED))
							set @Mot_codigo2 = @@IDENTITY
						
							INSERT INTO [dbo].[Confirmacion]
							([Pro_code],[Med_code],[Con_fecha],[Con_vigencia],[Use_code],Con_confirmProv,Con_confirmMed,Mot_codigoMed,Mot_codigoProv)
							VALUES
							(	@cod_pro,@med_code, getdate(), 1, @Use_code, @confirmNurse,@confirmDoctor,@Mot_codigo,
								@Mot_codigo2
							)		
							SET @Con_codigo = @@IDENTITY	

						end
						else
						begin
							insert into MotivoCambioEstado (Mot_descripcion, Mot_vigencia, Mot_fechaSistema, Use_code) values ('S: y. Notified of permission: y', 1, getdate(), @Use_code)
							set @Mot_codigo2 = @@IDENTITY

							INSERT INTO [dbo].[Confirmacion]
							([Pro_code],[Med_code],[Con_fecha],[Con_vigencia],[Use_code],Con_confirmProv,Con_confirmMed,Mot_codigoMed,Mot_codigoProv)
							VALUES
							(	@cod_pro,@med_code, getdate(), 1, @Use_code, @confirmNurse,@confirmDoctor,@Mot_codigo,
								@Mot_codigo2
							)		
							SET @Con_codigo = @@IDENTITY	
						end 
							
					end
				end
				else
				begin
					INSERT INTO [dbo].[Confirmacion]
					([Pro_code],[Med_code],[Con_fecha],[Con_vigencia],[Use_code],Con_confirmProv,Con_confirmMed,Mot_codigoMed,Mot_codigoProv)
					VALUES
					(	@cod_pro,@med_code, getdate(), 1, @Use_code, @confirmNurse,@confirmDoctor,@Mot_codigo,
						(select Mot_codigoProv from Evento Eve inner join Confirmacion Con on Eve.Con_codigo=Con.Con_codigo	where Eve.Eve_codigo=@Eve_codigo)
					)		
					SET @Con_codigo = @@IDENTITY	
				end
											
			end
			update Evento set Con_codigo = @Con_codigo where Eve_codigo = @Eve_codigo
		end	

		-- Esta accion se ejecuta solo cuando hay un cambio de estado
		if (@Ese_codigo != @ese_codigoy)
		begin
			insert into MotivoCambioEstado (Mot_descripcion, Mot_vigencia, Mot_fechaSistema, Use_code) values (@Mot_descripcion, 1, getdate(), @Use_code)
			set @Mot_codigo = @@IDENTITY
			update Evento set Ese_codigo = @Ese_codigo, Mot_codigo=@Mot_codigo where Eve_codigo=@Eve_codigo
		end
		else
		begin		
			if(dbo.Fu_ValidarEstadoCompletado(@Eve_codigo)=0)	
			begin
				update Evento set Eve_done=1, Ese_codigo=5 where Eve_codigo=@Eve_codigo
			end				
			else
			begin
				update Evento set Eve_done=0 where Eve_codigo=@Eve_codigo
				--if @ese_codigoy = 5 update Evento set Ese_codigo=1 where Eve_codigo=@Eve_codigo
			end
		end

		select (cast(Eve_done as int)) Eve_done from Evento where Eve_codigo=@Eve_codigo
	end
	else
		select -1 Eve_done
end
else if @TipoConsulta=12
Begin
	
	declare @tbResult table(
		Eve_codigo int,
		Eve_inicio datetime,
		Eve_fin datetime
	)

	if not exists(select ev.Eve_codigo from Evento ev where ev.Eve_codigoNov=@Eve_codigo)
	begin
		insert into @tbResult(Eve_codigo, Eve_inicio, Eve_fin)
		select top 1 eve.Eve_codigo, eve.Eve_inicio, eve.Eve_fin 
		from Evento eve
		where eve.Cis_code=@Cis_code and eve.Med_code=@med_code and eve.Eve_codigo<>@Eve_codigo and eve.Eve_nov=1 and eve.Eve_inicio<=@Eve_inicio and Eve_vigencia<>0	
		order by eve.Eve_inicio desc
	end

	select tb.Eve_codigo, tb.Eve_inicio, tb.Eve_fin from @tbResult tb

end

--listar evento por estado
else if @TipoConsulta=13
Begin
	
	Select e.*,con.*, ee.Ese_color, Ese_abreviatura, Ese_nombre, tie.Tie_nombre,
	       cas.Cis_accidentDate, (pat.Pat_FirstName + ' ' + pat.Pat_lastName) patient, pat.Pat_address,   
		   (med.Med_firstName + ' ' + med.Med_lastName) medico, med.Med_code, con.Con_confirmMed confirmDoctor, med.Med_address,
		   (pro.Pro_firstName + ' ' + pro.Pro_lastName) nurse, pro.Pro_code, con.Con_confirmProv confirmNurse,
		   (ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName) supervisor

	from Evento e	
	join MEDICAL med on e.Med_code = med.Med_code
	left join PROVIDER pro on e.Pro_code = pro.Pro_code

	inner join EstadoEvento ee on e.Ese_codigo = ee.Ese_codigo

	join Confirmacion con on con.Con_codigo = e.Con_codigo
	join CaseInformationSheetHead cas on e.Cis_code = cas.Cis_code
	join PATIENT pat on pat.Pat_code = cas.Pat_code	

	join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor	
	join TipoEvento tie on tie.Tie_codigo = e.Tie_codigo
	where (len(@supervisores)=0 or rtrim(ltrim(cas.Cis_caseSupervisor)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split](@supervisores, ',') su)) and
	      (len(@nurses)=0 or rtrim(ltrim(pro.Pro_code)) in (select rtrim(ltrim(nu.item)) from [dbo].[fu_Split](@nurses, ',') nu)) and
		  (len(@eventTypes)=0 or tie.Tie_codigo in (select ti.item from [dbo].[fu_Split](@eventTypes, ',') ti)) and
		  (len(@status)=0 or e.Ese_codigo in (select ti.item from [dbo].[fu_Split](@status, ',') ti)) and 
		  e.eve_vigencia=1
	order by e.Eve_inicio
	
end
-- undo change
else if @TipoConsulta=14
Begin
	begin try
		begin tran
		select @Eve_codigoNov=isnull(ev.Eve_codigoNov,0), @Eve_bloqueo=isnull(Eve_bloqueo,0) from Evento ev where ev.Eve_codigo=@Eve_codigo

		if @Eve_bloqueo=0
		begin
		
			
			-- Esta accion se ejecuta para agregar un registro nuevo en la tabla eventohistorial.
			declare @eve_fechay datetime, @eve_inicioy datetime, @eve_finy datetime, @cod_cisy char(15), @cod_proy char(10), @cod_medy char(10), @con_codigoy int
			select @ese_codigoy = e.Ese_codigo, @eve_fechay = e.Eve_fecha, @eve_inicioy = e.Eve_inicio, @eve_finy = e.Eve_fin, @cod_cisy = e.Cis_code, @tie_codigoy = e.Tie_codigo, @cod_proy = e.Pro_code, @cod_medy = e.Med_code, @con_codigoy=e.Con_codigo
			from Evento e where e.Eve_codigo = @Eve_codigo
		
			if (select count(*) from EventoHistorial eh where eh.Ese_codigo=@ese_codigoy and eh.Eve_fecha=@eve_fechay and eh.Eve_inicio=@eve_inicioy and eh.Eve_fin=@eve_finy and eh.Cis_code=@cod_cisy and eh.Tie_codigo=@tie_codigoy and eh.Pro_code=@cod_proy and eh.Med_code=@cod_medy and eh.Con_codigo=@con_codigoy) = 0
			begin
				INSERT INTO [dbo].[EventoHistorial]
				([Eve_codigo],[Eve_inicio],[Eve_fin],[Eve_fecha],[Eve_descripcion],[Pro_code],[Med_code],[Cis_code],[Tie_codigo],[Ese_codigo],[Eve_codigoNext],[Evh_fecha],
				[Use_Code],[Eve_codExchange],[Eve_descartar],[Con_codigo],[Evh_override], Mot_codigo,Evh_usado,
				[Eve_done],[Eve_override],[Eve_allDay],[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], [Eve_codExchangeSec])
				select e.Eve_codigo, e.Eve_inicio, e.Eve_fin, e.Eve_fecha, e.Eve_descripcion, e.Pro_code, e.Med_code, e.Cis_code, e.Tie_codigo, e.Ese_codigo, e.Eve_codigoNext, getdate(), @Use_code, e.Eve_codExchange, e.Eve_descartar,e.Con_codigo,[Eve_override],Mot_codigo,1,
				[Eve_done],[Eve_override],[Eve_allDay],[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], [Eve_codExchangeSec]
				from Evento e
				where e.Eve_codigo = @Eve_codigo
			end

			--undo change
			UPDATE e
			SET e.Eve_inicio = eh.Eve_inicio,
				e.Eve_fin = eh.Eve_fin,
				e.Eve_fecha = eh.Eve_fecha,
				e.Eve_descripcion= eh.Eve_descripcion,
				e.Pro_code = eh.Pro_code,
				e.Med_code = eh.Med_code,
				e.Cis_code = eh.Cis_code,
				e.tie_codigo = eh.Tie_codigo,
				e.Ese_codigo = eh.Ese_codigo,						
				e.Eve_codigoNext =eh.Eve_codigoNext,
				e.Use_Code = eh.Use_Code,
				e.Eve_codExchange = eh.Eve_codExchange,
				e.Eve_codExchangeSec = eh.Eve_codExchangeSec,
				e.Eve_descartar= eh.Eve_descartar,
				e.Con_codigo = eh.Con_codigo,
				e.Eve_override = eh.Evh_override,
				e.Mot_codigo = eh.Mot_codigo,
				e.Evh_undoChangeUser = @cod_user_Undochange
			from Evento e
			inner join EventoHistorial eh on e.Eve_codigo = eh.Eve_codigo and 
			eh.Evh_codigo = (select top 1 ehx.Evh_codigo from EventoHistorial ehx 
							 where ehx.Eve_codigo = @Eve_codigo and ehx.Evh_usado = 0 order by ehx.Evh_codigo desc
							)
			where eh.Eve_codigo = @Eve_codigo
	
			update EventoHistorial set Evh_usado = 1
			where Evh_codigo = (select top 1 ehx.Evh_codigo from EventoHistorial ehx 
								where ehx.Eve_codigo = @Eve_codigo and ehx.Evh_usado = 0 order by ehx.Evh_codigo desc
								)			

			--if (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where Eve_codigo=@Eve_codigo and ETA.Eta_numArchivos>Eta_archivosSubidos and Eta.Eta_vigencia=1)=0 and exists(select ev.Eve_codigo from Evento ev where ev.Eve_codigo=@Eve_codigo and (ev.Eve_nov=0 or ev.Eve_codigoNov is not null))
			if(dbo.Fu_ValidarEstadoCompletado(@Eve_codigo)=0)
			begin
				set @Eve_done = 1
				update Evento set Ese_codigo=5, Eve_done=1 where Eve_codigo=@Eve_codigo
			end
			else
			begin
				set @Eve_done = 0				
				--update Evento set Eve_done=0, Ese_codigo=(case when Ese_codigo=5 then 1 else Ese_codigo end) where Eve_codigo=@Eve_codigo
				update Evento set Eve_done=0 where Eve_codigo=@Eve_codigo
			end

			
			select cast(@Eve_done as int) Eve_done
		end
		else
			select -1 Eve_done

	   commit tran
	end try
	begin catch
		
		rollback tran
		set @e_message = error_message()
		set @e_severity = error_severity()
		set @e_state = error_state()
		raiserror(@e_message, @e_severity, @e_state)

	end catch

end
---Verificacion de existencia de historias de evento para retroceder con el boton UNDOCHANGE
else if @TipoConsulta=15
begin
	select * from EventoHistorial eh where eh.Eve_codigo = @Eve_codigo and eh.Evh_usado=0
end
--actualizar codigo de exchange
--Ray Diaz
else if @TipoConsulta=16
begin
	UPDATE Evento
		SET Eve_codExchange = @Eve_codExchange			
	where eve_codigo = @Eve_codigo
end

else if @TipoConsulta=17
begin
	select COUNT(*) as Cantidad from EventoTipoArchivo ETA where Eve_codigo=@Eve_codigo and ETA.Eta_numArchivos>Eta_archivosSubidos
end

--OVERRIDE
else if @TipoConsulta=18
begin			
	INSERT INTO [dbo].[EventoHistorial]
		([Eve_codigo],[Eve_inicio],[Eve_fin],[Eve_fecha],[Eve_descripcion],[Pro_code],[Med_code],[Cis_code],[Tie_codigo],[Ese_codigo],[Eve_codigoNext],[Evh_fecha],[Use_Code],[Eve_codExchange],[Eve_descartar],[Con_codigo],[Evh_override],Mot_codigo,
		[Eve_done],[Eve_override],[Eve_allDay],[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], [Eve_codExchangeSec])
	select e.Eve_codigo, e.Eve_inicio, e.Eve_fin, e.Eve_fecha, dbo.fu_replacecomillas(e.Eve_descripcion) as eve_descripcion, e.Pro_code, e.Med_code, e.Cis_code, e.Tie_codigo, e.Ese_codigo, e.Eve_codigoNext, getdate(), @Use_code, e.Eve_codExchange, e.Eve_descartar,e.Con_codigo,e.Eve_override,Mot_codigo,
	[Eve_done],[Eve_override],[Eve_allDay],[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], [Eve_codExchangeSec]
	from Evento e 
	where e.Eve_codigo = @Eve_codigo

	if (select COUNT(*) from Evento where Eve_done=0 and Ese_codigo=1 and Eve_codigo=@Eve_codigo)=0
	begin
		UPDATE CaseInformationSheetHead SET Cis_actual=0
		where Cis_code=(select e.Cis_code from Evento e where e.Eve_codigo = @Eve_codigo )
	end

	UPDATE Evento SET Eve_done=1, Eve_override=1,Ese_codigo=5
	where Eve_codigo = @Eve_codigo

end
else if @TipoConsulta=19
begin
	if @withAgenda=1
	begin
		select dbo.fu_replacecomillas(med.Med_phone) as phone_med,eve.Eve_allDay, eve.Eve_override, con.Con_codigo,con.Con_confirmMed confirmDoctor,con.Con_confirmProv confirmNurse, eve.Eve_codigo, eve.Eve_inicio, 
		eve.Eve_fin, eve.Eve_fecha, cas.Cis_accidentDate, dbo.fu_replacecomillas((pat.Pat_FirstName + ' ' + pat.Pat_lastName)) as patient, dbo.fu_replacecomillas(pat.Pat_address) as address_pat,
			   tie.Tie_codigo, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_Nombre, tie.Tie_programable, dbo.fu_replacecomillas((med.Med_firstName + ' ' + med.Med_lastName)) as medico, med.Med_code, dbo.fu_replacecomillas(med.Med_address) as address_med, dbo.fu_replacecomillas((med.Med_address + ', ' + med.Med_city + ' ' + med.Med_state + ', ' + med.Med_zipCode)) as address_medfull,			  dbo.fu_replacecomillas((pro.Pro_firstName + ' ' + pro.Pro_lastName)) as nurse, pro.Pro_code, dbo.fu_replacecomillas((ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName)) as supervisor, est.Ese_codigo, est.Ese_abreviatura, est.Ese_nombre, (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status],
			   cas.Cis_code, cas.Cis_caseCode, eve.Eve_codigoNov, eve.Eve_nov, eve.Eve_codExchange, eve.Eve_codExchangeSec,  eve.Eve_codigoNext, eve.Use_Code, dbo.fu_replacecomillas(eve.Eve_descripcion) as eve_descripcion,
			  (select count(*) from EventoHistorial eh where eh.Eve_codigo = eve.Eve_codigo and Evh_usado = 0) Cantidad,
			  (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where ETA.Eve_codigo=eve.Eve_codigo and ETA.Eta_numArchivos>Eta_archivosSubidos and ETA.Eta_vigencia = 1) CantidadFalta,
			   cast(cas.Cis_status as varchar) as CasoEstado, cas.Cis_actual, Eve_done, dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1) documents
		from Evento eve
		join MEDICAL med on eve.Med_code = med.Med_code
		left join PROVIDER pro on eve.Pro_code = pro.Pro_code
		join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo
		join Confirmacion con on con.Con_codigo = eve.Con_codigo
		join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
		join PATIENT pat on pat.Pat_code = cas.Pat_code
		join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor
		join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo

		where (isnull(@Cis_code,'')='' or eve.Cis_code=@Cis_code) and (med.Med_firstName + ' ' + med.Med_lastName) like '%'+@doctor+'%' and rtrim(ltrim(pat.Pat_FirstName + ' ' + pat.Pat_lastName)) like '%' + @patient + '%' and
		(len(@supervisores)=0 or rtrim(ltrim(cas.Cis_caseSupervisor)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split](@supervisores, '*') su)) and
		(len(@eventTypes)=0 or tie.Tie_codigo in (select ti.item from [dbo].[fu_Split](@eventTypes, '*') ti)) and
		(len(@nurses)=0 or (eve.Pro_code is null and exists(select nu.id from [dbo].[fu_Split](@nurses, '*') nu where nu.item=0)) or pro.Pro_code in (select nu.item from [dbo].[fu_Split](@nurses, '*') nu)) and
		(len(@items)=0 or (dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1)='' and exists(select nu.id from [dbo].[fu_Split](@items, '*') nu where nu.item=0)) or (select count(*) from EventoTipoArchivo eta where eta.Eta_vigencia = 1 and eta.Eve_codigo = eve.Eve_codigo


 and eta.Tia_codigo in (select it.item from [dbo].[fu_Split](@items, '*') it))>0) and
		(len(@status)=0 or est.Ese_codigo in (select es.item from [dbo].[fu_Split](@status, '*') es)) and
	
		(@confirmDoctorSearch=-1 or @confirmDoctorSearch=con.Con_confirmMed) and
		(@confirmNurseSearch=-1 or @confirmNurseSearch=con.Con_confirmProv) and
		(@phone='' or rtrim(ltrim(@phone))=rtrim(ltrim(med.Med_phone)) or rtrim(ltrim(@phone))=rtrim(ltrim(med.Med_phoneExt)) or rtrim(ltrim(@phone))=rtrim(ltrim(med.Med_alternatePhone))) and
		( (@Eve_inicio is null or cast(eve.Eve_inicio as date)>=cast(@Eve_inicio as date)) and (@Eve_fin is null or cast(eve.Eve_fin as date)<=cast(@Eve_fin as date)) ) and
		(len(@novs)=0 or ( (eve.Eve_nov=0 and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='sinNov')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is null and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='sinNovSchedule')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is not null and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='conNovSchedule')) ) )
		and eve.eve_vigencia=1
		and (@case_status=-1 or @case_status=cas.Cis_status)
		union all
		select  '' phone_med, cast(0 as bit) Eve_allDay, cast(0 as bit) Eve_override, 0 Con_codigo, cast(0 as bit) confirmDoctor, cast(0 as bit) confirmNurse, 0 Eve_codigo, cau.Cau_inicio Eve_inicio, cau.Cau_fin Eve_fin, null Eve_fecha, null Cis_accidentDate, (ltrim(rtrim(usys.Use_firstName)) + ' ' + usys.Use_lastName) patient, '' address_pat,
				tie.Tie_codigo, tie.Tie_nombre, tie.Tie_programable, '-' medico, '' Med_code, '' address_med, '-' address_medfull,
				'-' nurse, '' Pro_code, '-' supervisor, cast(0 as tinyint) Ese_codigo, '' Ese_abreviatura, '' Ese_nombre, cau.Cau_descripcion [status],
				'' Cis_code, '' case_cod, 0 Eve_codigoNov, cast(0 as bit) Eve_nov, '' Eve_codExchange, '' Eve_codExchangeSec, 0 Eve_codigoNext, '' Use_Code, '' Eve_descripcion,
				0 Cantidad, 0 CantidadFalta, '' CasoEstado, cast(0 as bit) Cis_actual, cast(0 as bit) Eve_done, '' documents
		from CalendarioUsuario cau
		join TipoEvento tie on tie.Tie_codigo = cau.Tie_codigo
		join [User] usys on usys.Use_Code = cau.Use_Code
		where cau.Cau_vigencia=1 and cau.Cau_mostrarMV=1 and
			 (len(@nurses)=0 or (cau.Use_Code is null and exists(select nu.id from [dbo].[fu_Split](@nurses, '*') nu where nu.item=0)) or cau.Use_Code in (select prx.Use_Code from [dbo].[fu_Split](@nurses, '*') nu join PROVIDER prx on ltrim(rtrim(prx.Pro_code))=nu.item)) and
			 ( (@Eve_inicio is null or cast(cau.Cau_inicio as date)>=cast(@Eve_inicio as date)) and (@Eve_fin is null or cast(cau.Cau_fin as date)<=cast(@Eve_fin as date)) )
		order by Eve_inicio
	end
	else
	begin
		select dbo.fu_replacecomillas(med.Med_phone) as phone_med,eve.Eve_allDay, eve.Eve_override, con.Con_codigo,con.Con_confirmMed confirmDoctor ,con.Con_confirmProv confirmNurse ,eve.Eve_codigo, eve.Eve_inicio, eve.Eve_fin, eve.Eve_fecha, cas.Cis_accidentDate, dbo.fu_replacecomillas((pat.Pat_FirstName + ' ' + pat.Pat_lastName)) patient, dbo.fu_replacecomillas(pat.Pat_address) as address_pat,
			   tie.Tie_codigo, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_nombre, tie.Tie_programable, dbo.fu_replacecomillas((med.Med_firstName + ' ' + med.Med_lastName)) as medico, med.Med_code, dbo.fu_replacecomillas(med.Med_address) as Med_address, 
			   dbo.fu_replacecomillas((med.Med_address + ', ' + med.Med_city + ' ' + med.Med_state + ', ' + med.Med_zipCode)) as address_medfull,
			  dbo.fu_replacecomillas((pro.Pro_firstName + ' ' + pro.Pro_lastName)) as nurse, pro.Pro_code, dbo.fu_replacecomillas((ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName)) as supervisor, est.Ese_codigo, est.Ese_abreviatura, est.Ese_nombre, (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status],
			   cas.Cis_code, cas.Cis_caseCode, eve.Eve_codigoNov, eve.Eve_nov, eve.Eve_codExchange, eve.Eve_codExchangeSec, eve.Eve_codigoNext, eve.Use_Code, dbo.fu_replacecomillas(eve.Eve_descripcion) as eve_descripcion,
			  (select count(*) from EventoHistorial eh where eh.Eve_codigo = eve.Eve_codigo and Evh_usado = 0) Cantidad,
			  (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where ETA.Eve_codigo=eve.Eve_codigo and ETA.Eta_numArchivos>Eta_archivosSubidos and ETA.Eta_vigencia = 1) CantidadFalta,
			   cast(cas.Cis_status as varchar) as CasoEstado, cas.Cis_actual, Eve_done,dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1) documents
		from Evento eve
		join MEDICAL med on eve.Med_code = med.Med_code
		left join PROVIDER pro on eve.Pro_code = pro.Pro_code
		join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo
		join Confirmacion con on con.Con_codigo = eve.Con_codigo
		join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
		join PATIENT pat on pat.Pat_code = cas.Pat_code
		join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor
		join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo

		where (isnull(@Cis_code,'')='' or eve.Cis_code=@Cis_code) and (med.Med_firstName + ' ' + med.Med_lastName) like '%'+@doctor+'%' and rtrim(ltrim(pat.Pat_FirstName + ' ' + pat.Pat_lastName)) like '%' + @patient + '%' and
		(len(@supervisores)=0 or rtrim(ltrim(cas.Cis_caseSupervisor)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split](@supervisores, '*') su)) and
		(len(@eventTypes)=0 or tie.Tie_codigo in (select ti.item from [dbo].[fu_Split](@eventTypes, '*') ti)) and
		(len(@nurses)=0 or (eve.Pro_code is null and exists(select nu.id from [dbo].[fu_Split](@nurses, '*') nu where nu.item=0)) or pro.Pro_code in (select nu.item from [dbo].[fu_Split](@nurses, '*') nu)) and
		(len(@items)=0 or (dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1)='' and exists(select nu.id from [dbo].[fu_Split](@items, '*') nu where nu.item=0)) or (select count(eta.Eve_codigo) from EventoTipoArchivo eta where eta.Eta_vigencia=1 and eta.Eve_codigo=eve.Eve_codigo and isnull(eta.Eta_archivosSubidos,0)=0 and eta.Tia_codigo in (select it.item from [dbo].[fu_Split](@items, '*') it))>0) and
		(len(@status)=0 or est.Ese_codigo in (select es.item from [dbo].[fu_Split](@status, '*') es)) and
	
		(@confirmDoctorSearch=-1 or @confirmDoctorSearch=con.Con_confirmMed) and
		(@confirmNurseSearch=-1 or @confirmNurseSearch=con.Con_confirmProv) and
		(@phone='' or rtrim(ltrim(@phone))=rtrim(ltrim(med.Med_phone)) or rtrim(ltrim(@phone))=rtrim(ltrim(med.Med_phoneExt)) or rtrim(ltrim(@phone))=rtrim(ltrim(med.Med_alternatePhone))) and
		( (@Eve_inicio is null or cast(eve.Eve_inicio as date)>=cast(@Eve_inicio as date)) and (@Eve_fin is null or cast(eve.Eve_fin as date)<=cast(@Eve_fin as date)) ) and
		(len(@novs)=0 or ( (eve.Eve_nov=0 and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='sinNov')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is null and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='sinNovSchedule')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is not null and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='conNovSchedule')) ) )
		and eve.eve_vigencia=1
		and (@case_status=-1 or @case_status=cas.Cis_status)
		order by eve.Eve_inicio
	end
end
else if @TipoConsulta=20
begin
	update Evento set Eve_descartar = 1 where Eve_codigo = @Eve_codigo
end
else if @TipoConsulta=21
begin

	select e.Eve_codigo, e.Eve_inicio, e.Eve_fin, e.Cat_codigo, Ese_abreviatura, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_nombre, cas.Cis_accidentDate as accident_date , dbo.fu_replacecomillas((pat.Pat_firstName + ' ' + pat.Pat_lastName)) patient,
		   dbo.fu_replacecomillas(pat.Pat_address) as address_pat, dbo.fu_replacecomillas((med.Med_firstName + ' ' + med.Med_lastName)) as medico, con.Con_confirmMed confirmDoctor, dbo.fu_replacecomillas(med.Med_address) as address_med,
		   dbo.fu_replacecomillas((pro.Pro_firstName + ' ' + pro.Pro_lastName)) as nurse, pro.Pro_code , con.Con_confirmProv confirmNurse, e.Ese_codigo,
		   dbo.fu_replacecomillas((ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName)) as supervisor, 0 Cau_codigo, '' Cau_descripcion, (case cas.Cis_status when '1' then 'Open' else 'Close' end) CasoEstado
	from Evento e
	left join PROVIDER pro on e.Pro_code = pro.Pro_code
	inner join EstadoEvento ee on e.Ese_codigo = ee.Ese_codigo and (len(@status)=0 or exists(select ti.id from [dbo].[fu_Split](@status, ',') ti where ti.item=e.Ese_codigo))
	join TipoEvento tie on tie.Tie_codigo = e.Tie_codigo and (len(@eventTypes)=0 or exists(select ti.id from [dbo].[fu_Split](@eventTypes, ',') ti where ti.item=tie.Tie_codigo))
	join MEDICAL med on e.Med_code = med.Med_code
	join Confirmacion con on con.Con_codigo = e.Con_codigo
	join CaseInformationSheetHead cas on e.Cis_code = cas.Cis_code	
	join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor
	join PATIENT pat on pat.Pat_code = cas.Pat_code
	where (len(@supervisores)=0 or rtrim(ltrim(cas.Cis_caseSupervisor)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split](@supervisores, ',') su)) and
		  (len(@nurses)=0 or (e.Pro_code is null and exists(select nu.id from [dbo].[fu_Split](@nurses, ',') nu where nu.item=0)) or exists(select nu.id from [dbo].[fu_Split](@nurses, ',') nu where nu.item=convert(varchar(100),e.Pro_code))) and
		  (@month=MONTH(e.Eve_inicio) or @month=MONTH(e.Eve_fin)) and (@year=year(e.Eve_inicio) or @year=year(e.Eve_fin))
		  and e.eve_vigencia=1
	union all
	select 0 Eve_codigo, cau.Cau_inicio Eve_inicio, cau.Cau_fin Eve_fin, 0 Cat_codigo, '' Ese_abreviatura, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_nombre, cast(GETDATE() as date) accident_date ,
	       '' patient, '' address_pat, '' medico, cast(0 as bit) confirmDoctor, '' address_med, '' nurse, '' Pro_code, cast(0 as bit) confirmNurse, cast(0 as tinyint) Ese_codigo,
		   dbo.fu_replacecomillas((ltrim(rtrim(usys.Use_firstName)) + ' ' + usys.Use_lastName)) AS supervisor, cau.Cau_codigo, dbo.fu_replacecomillas(cau.Cau_descripcion) as cau_descripcion,
		   'Open' CasoEstado
	from CalendarioUsuario cau
	join TipoEvento tie on tie.Tie_codigo = cau.Tie_codigo
	join [User] usys on usys.Use_Code = cau.Use_Code
	where cau.Cau_vigencia=1 and cau.Cau_mostrarMV=1 and
	     (@month=MONTH(cau.Cau_inicio) or @month=MONTH(cau.Cau_fin)) and (@year=year(cau.Cau_inicio) or @year=year(cau.Cau_fin))

	order by e.Eve_inicio
	--cambio arriba
end
else if @TipoConsulta=22
begin
	
	update MotivoCambioEstado set Mot_descripcion = @Mot_descripcion where Mot_codigo = @Mot_codigo
	
end
else if @TipoConsulta=23
begin
	set @codUserNurse = (select Use_Code from PROVIDER where Pro_code = (select top 1 ehx.Pro_code from EventoHistorial ehx where ehx.Eve_codigo = @Eve_codigo and ehx.Evh_usado = 0 order by ehx.Evh_codigo desc))
	set @Eve_inicio = (select top 1 ehx.Eve_inicio from EventoHistorial ehx where ehx.Eve_codigo = @Eve_codigo and ehx.Evh_usado = 0 order by ehx.Evh_codigo desc)
	set @Eve_fin = (select top 1 ehx.Eve_fin from EventoHistorial ehx where ehx.Eve_codigo = @Eve_codigo and ehx.Evh_usado = 0 order by ehx.Evh_codigo desc)
		
	if (select count(*) from CalendarioUsuario cu 
		where (@Eve_codigo=0 or isnull(cu.Eve_codigo,0) <> @Eve_codigo) and cu.Cau_vigencia = 1 and @codUserNurse=cu.Use_Code and
		      (isnull(cu.Eve_codigo,0)=0 or (select count(*) from Evento ev where ev.Eve_codigo=cu.Eve_codigo and ev.Ese_codigo in (1,5))>0) and
			  (  (@Eve_inicio between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or (@Eve_fin between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or
				 (dateadd(mi,1,cu.Cau_inicio) between @Eve_inicio and @Eve_fin)
			  )
		) = 0 /*verifica fechas de nurse*/			
	begin					
		select cast(1 as bit) as Verify --Puede proceder con la accion undochange
	end
	else
	begin
		select cast(0 as bit) as Verify	--No se puede proceder con la accion undochange
	end

end
else if @TipoConsulta=24
begin
	if @withAgenda = 1
	begin
		select con.Con_confirmMed confirmDoctor, con.Con_confirmProv confirmNurse, eve.Eve_codigo, eve.Eve_inicio, eve.Eve_fin, cas.Cis_accidentDate, dbo.fu_replacecomillas((pat.Pat_FirstName + ' ' + pat.Pat_lastName)) patient, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_nombre,
				dbo.fu_replacecomillas((med.Med_firstName + ' ' + med.Med_lastName)) medico, med.Med_code, dbo.fu_replacecomillas(med.Med_address) as address_med, 
				dbo.fu_replacecomillas((med.Med_address + ', ' + med.Med_city + ' ' + med.Med_state + ', ' + med.Med_zipCode)) as address_medfull, dbo.fu_replacecomillas((pro.Pro_firstName + ' ' + pro.Pro_lastName)) as nurse, pro.Pro_code,
				dbo.fu_replacecomillas((ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName)) as supervisor, est.Ese_abreviatura, est.Ese_nombre, dbo.fu_replacecomillas(pat.Pat_address) as address_pat, (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status], cas.Cis_code, cas.Cis_caseCode,
				eve.Use_Code, dbo.fu_replacecomillas(eve.Eve_descripcion) as eve_descripcion, cast(cas.Cis_status as varchar) as CasoEstado, cas.Cis_actual, dbo.Fu_ObtenerDocuments(eve.Eve_codigo,0) documents
		from Evento eve

		join MEDICAL med on eve.Med_code = med.Med_code
		left join PROVIDER pro on eve.Pro_code = pro.Pro_code
		join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo
		join Confirmacion con on con.Con_codigo = eve.Con_codigo
		join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
		join PATIENT pat on pat.Pat_code = cas.Pat_code
		join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor

		join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo
		where (len(@supervisores)=0 or rtrim(ltrim(cas.Cis_caseSupervisor)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split](@supervisores, ',') su)) and	      
			  (len(@nurses)=0 or (eve.Pro_code is null and exists(select nu.id from [dbo].[fu_Split](@nurses, ',') nu where nu.item=0)) or pro.Pro_code in (select nu.item from [dbo].[fu_Split](@nurses, ',') nu)) and
			  (len(@eventTypes)=0 or tie.Tie_codigo in (select ti.item from [dbo].[fu_Split](@eventTypes, ',') ti)) and
			  (len(@status)=0 or eve.Ese_codigo in (select ti.item from [dbo].[fu_Split](@status, ',') ti)) and
			  ( (cast(eve.Eve_inicio as date) between cast(@Eve_inicio as date) and cast(@Eve_fin as date)) or (cast(eve.Eve_fin as date) between cast(@Eve_inicio as date) and cast(@Eve_fin as date)) )
			  and eve.eve_vigencia=1
		union all
		select cast(0 as bit) confirmDoctor, cast(0 as bit) confirmNurse, 0 Eve_codigo, cau.Cau_inicio Eve_inicio, cau.Cau_fin Eve_fin, null accident_date, (ltrim(rtrim(usys.Use_firstName)) + ' ' + usys.Use_lastName) patient, tie.Tie_nombre,
			   '-' medico, '' Med_code, '' address_med, '-' address_medfull, '-' nurse, '' Pro_code,
			   '-' supervisor, '' Ese_abreviatura, '' Ese_nombre, '' address_pat, cau.Cau_descripcion [status], '' Cis_code, '' case_cod,
			   '' Use_Code, '' Eve_descripcion, '' CasoEstado, cast(0 as bit) Cis_actual, '' documents
		from CalendarioUsuario cau
		join TipoEvento tie on tie.Tie_codigo = cau.Tie_codigo
		join [User] usys on usys.Use_Code = cau.Use_Code
		where cau.Cau_vigencia=1 and cau.Cau_mostrarMV=1 and
			  ( (cast(cau.Cau_inicio as date) between cast(@Eve_inicio as date) and cast(@Eve_fin as date)) or (cast(cau.Cau_fin as date) between cast(@Eve_inicio as date) and cast(@Eve_fin as date)) )
		order by 4
	end
	else
	begin
		select con.Con_confirmMed as confirmDoctor, con.Con_confirmProv as confirmNurse ,eve.Eve_codigo, eve.Eve_inicio, eve.Eve_fin, cas.Cis_accidentDate, dbo.fu_replacecomillas((pat.Pat_FirstName + ' ' + pat.Pat_lastName)) patient, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_nombre,
				dbo.fu_replacecomillas((med.Med_firstName + ' ' + med.Med_lastName)) medico, med.Med_code, dbo.fu_replacecomillas(med.Med_address) as address_med, dbo.fu_replacecomillas((med.Med_address + ', ' + med.Med_city + ' ' + med.Med_state + ', ' + med.Med_zipCode)) address_medfull, dbo.fu_replacecomillas((pro.Pro_firstName + ' ' + pro.Pro_lastName)) nurse, pro.Pro_code,
				(ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName) supervisor, est.Ese_abreviatura, est.Ese_nombre, pat.Pat_address, (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status], cas.Cis_code, cas.Cis_caseCode,
				eve.Use_Code, dbo.fu_replacecomillas(eve.Eve_descripcion) as eve_descripcion, cast(cas.Cis_status as varchar) as CasoEstado, cas.Cis_actual, dbo.Fu_ObtenerDocuments(eve.Eve_codigo,0) documents
		from Evento eve
		join MEDICAL med on eve.Med_code = med.Med_code
		left join PROVIDER pro on eve.Pro_code = pro.Pro_code
		join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo
		join Confirmacion con on con.Con_codigo = eve.Con_codigo
		join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
		join PATIENT pat on pat.Pat_code = cas.Pat_code
		join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor

		join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo
		where (len(@supervisores)=0 or rtrim(ltrim(cas.Cis_caseSupervisor)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split](@supervisores, ',') su)) and
			  (len(@nurses)=0 or (eve.Pro_code is null and exists(select nu.id from [dbo].[fu_Split](@nurses, ',') nu where nu.item=0)) or pro.Pro_code in (select nu.item from [dbo].[fu_Split](@nurses, ',') nu)) and
			  (len(@eventTypes)=0 or tie.Tie_codigo in (select ti.item from [dbo].[fu_Split](@eventTypes, ',') ti)) and
			  (len(@status)=0 or eve.Ese_codigo in (select ti.item from [dbo].[fu_Split](@status, ',') ti)) and
			  ( (cast(eve.Eve_inicio as date) between cast(@Eve_inicio as date) and cast(@Eve_fin as date)) or (cast(eve.Eve_fin as date) between cast(@Eve_inicio as date) and cast(@Eve_fin as date)) )
			  and eve.eve_vigencia=1
		order by Eve_inicio, Pat_lastName
	end
end
else if @TipoConsulta=25
begin
	
	declare @tbEventsPrint table(
		--Id int identity(1,1),
		Eve_codigo int,
		phone_med varchar(15),
		confirmDoctor bit,
		confirmNurse bit,
		Eve_inicio datetime,
		Eve_fin datetime,
		accident_date datetime,
		patient varchar(200),
		Tie_nombre varchar(150),
		medico varchar(200),
		address_med varchar(255),
		nurse varchar(200),
		supervisor varchar(100),
		Ese_nombre varchar(150),
		status varchar(40),
		documents varchar(2000),
		Eve_codigoNov int,
		Eve_nov bit
	)

	insert into @tbEventsPrint(Eve_codigo, phone_med, confirmDoctor, confirmNurse, Eve_inicio, Eve_fin, accident_date, patient, Tie_nombre, medico, address_med, nurse, supervisor, Ese_nombre, status, documents, Eve_codigoNov, Eve_nov)

	select eve.Eve_codigo, dbo.fu_replacecomillas(med.Med_phone) phone_med, con.Con_confirmMed, con.Con_confirmProv, eve.Eve_inicio, eve.Eve_fin, cas.Cis_accidentDate, dbo.fu_replacecomillas((pat.Pat_FirstName + ' ' + pat.Pat_lastName)),
		   dbo.fu_replacecomillas(tie.Tie_nombre) as tie_nombre, dbo.fu_replacecomillas((med.Med_firstName + ' ' + med.Med_lastName)) medico, dbo.fu_replacecomillas((med.Med_address + ', ' + med.Med_city + ' ' + med.Med_state + ', ' + med.Med_zipCode)) address_medfull,--, med.address_med, 
		   isnull((pro.Pro_firstName + ' ' + pro.Pro_lastName),'') nurse,
		   dbo.fu_replacecomillas((ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName)) supervisor, est.Ese_nombre, (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status],
		   dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1) documents, isnull(eve.Eve_codigoNov,0), eve.Eve_nov
	from Evento eve

	join MEDICAL med on eve.Med_code = med.Med_code
	left join PROVIDER pro on eve.Pro_code = pro.Pro_code
	join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo
	join Confirmacion con on con.Con_codigo = eve.Con_codigo
	join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
	join PATIENT pat on pat.Pat_code = cas.Pat_code
	join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor

	join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo

		where (isnull(@Cis_code,'')='' or eve.Cis_code=@Cis_code) and (med.Med_firstName + ' ' + med.Med_lastName) like '%'+@doctor+'%' and rtrim(ltrim(pat.Pat_FirstName + ' ' + pat.Pat_lastName)) like '%' + @patient + '%' and
		(len(@supervisores)=0 or rtrim(ltrim(cas.Cis_caseSupervisor)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split](@supervisores, '*') su)) and
		(len(@eventTypes)=0 or tie.Tie_codigo in (select ti.item from [dbo].[fu_Split](@eventTypes, '*') ti)) and
		(len(@nurses)=0 or (eve.Pro_code is null and exists(select nu.id from [dbo].[fu_Split](@nurses, '*') nu where nu.item=0)) or pro.Pro_code in (select nu.item from [dbo].[fu_Split](@nurses, '*') nu)) and
		(len(@items)=0 or (dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1)='' and exists(select nu.id from [dbo].[fu_Split](@items, '*') nu where nu.item=0)) or (select count(eta.Eve_codigo) from EventoTipoArchivo eta where eta.Eta_vigencia=1 and eta.Eve_codigo=eve.Eve_codigo and isnull(eta.Eta_archivosSubidos,0)=0 and eta.Tia_codigo in (select it.item from [dbo].[fu_Split](@items, '*') it))>0) and
		(len(@status)=0 or est.Ese_codigo in (select es.item from [dbo].[fu_Split](@status, '*') es)) and
	
		(@confirmDoctorSearch=-1 or @confirmDoctorSearch=con.Con_confirmMed) and
		(@confirmNurseSearch=-1 or @confirmNurseSearch=con.Con_confirmProv) and
		(@phone='' or rtrim(ltrim(@phone))=rtrim(ltrim(med.Med_phone)) or rtrim(ltrim(@phone))=rtrim(ltrim(med.Med_phoneExt)) or rtrim(ltrim(@phone))=rtrim(ltrim(med.Med_alternatePhone))) and
		( (@Eve_inicio is null or cast(eve.Eve_inicio as date)>=cast(@Eve_inicio as date)) and (@Eve_fin is null or cast(eve.Eve_fin as date)<=cast(@Eve_fin as date)) ) and
		(len(@novs)=0 or ( (eve.Eve_nov=0 and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='sinNov')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is null and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='sinNovSchedule')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is not null and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='conNovSchedule')) ) )
		and eve.eve_vigencia=1
		and (@case_status=-1 or cas.Cis_status=@case_status)
		order by eve.Eve_inicio

	declare @tbPrint table(
		Eve_codigo int,
		Fieldname varchar(2000),
		Fieldvalue varchar(2000),
		FieldOrder int,
		[status] varchar(20)
	)

	-- verificar eventInicio
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'eventInicio') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'Start Date', convert(varchar(20),tb.Eve_inicio,22), 1, tb.status from @tbEventsPrint tb

	-- verificar eventFin
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'eventFin') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'End Date', convert(varchar(20),tb.Eve_fin,22), 2, tb.status from @tbEventsPrint tb

	-- verificar doi
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'doi') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'Patient / DOI', (tb.patient + ', ' + convert(varchar(10),tb.accident_date,101)), 3, tb.status from @tbEventsPrint tb
				
	-- verificar medico
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'medico') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'Doctor / Facility', tb.medico + (case when tb.confirmDoctor=1 then ' (C)' else '' end), 4, tb.status from @tbEventsPrint tb
	
	-- verificar address_med
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'address_med') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'Doctor Address', tb.address_med, 5, tb.status from @tbEventsPrint tb

	-- verificar phone_med
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'phone_med') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'Phone Number', tb.phone_med, 6, tb.status from @tbEventsPrint tb

	-- verificar Tie_nombre
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'Tie_nombre') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'Event Type', tb.Tie_nombre, 7, tb.status from @tbEventsPrint tb

	-- verificar nurse
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'nurse') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'Nurse', case when len(tb.nurse)>0 then tb.nurse + (case when tb.confirmNurse=1 then ' (C)' else '' end) else 'NO NURSE' end, 8, tb.status from @tbEventsPrint tb

	-- verificar supervisor
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'supervisor') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'Supervisor', tb.supervisor, 9, tb.status from @tbEventsPrint tb
	
	-- verificar documents
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'documents') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'Required documents', tb.documents, 10, tb.status from @tbEventsPrint tb
	
	-- verificar nov
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'nov') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'NOV', (case when tb.Eve_nov=0 then 'X' when tb.Eve_nov=1 and tb.Eve_codigoNov>0 then 'Yes' else 'No' end), 11, tb.status from @tbEventsPrint tb

	-- verificar Ese_nombre
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'Ese_nombre') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'Event''s status', tb.Ese_nombre, 12, tb.status from @tbEventsPrint tb

	-- verificar status
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'status') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'Case''s status', tb.status, 13, tb.status from @tbEventsPrint tb




	-- mostrar resultados
	select tp.Eve_codigo, tp.Fieldname, tp.Fieldvalue, tp.FieldOrder, tp.status from @tbPrint tp
end
else if @TipoConsulta=26
begin
	
	select med.Med_phone,eve.Eve_allDay, eve.Eve_override, con.Con_codigo,con.Con_confirmMed as confirmDoctor ,con.Con_confirmProv as confirmNurse ,
	eve.Eve_codigo, eve.Eve_inicio, eve.Eve_fin, eve.Eve_fecha, cas.Cis_accidentDate, dbo.fu_replacecomillas((pat.Pat_FirstName + ' ' + pat.Pat_lastName)) patient, dbo.fu_replacecomillas(pat.Pat_address) address_pat, 
		    tie.Tie_codigo, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_nombre, tie.Tie_programable, dbo.fu_replacecomillas((med.Med_firstName + ' ' + med.Med_lastName)) medico, med.Med_code, dbo.fu_replacecomillas(med.Med_address) address_med, 
			dbo.fu_replacecomillas((pro.Pro_firstName + ' ' + pro.Pro_lastName)) nurse, pro.Pro_code,
			dbo.fu_replacecomillas((ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName)) supervisor, est.Ese_codigo, est.Ese_abreviatura, est.Ese_nombre, (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status], cas.Cis_code, cas.Cis_caseCode,
			eve.Eve_codExchange, eve.Eve_codExchangeSec,  eve.Eve_codigoNext, eve.Use_Code, dbo.fu_replacecomillas(eve.Eve_descripcion) as eve_descripcion,
			(select count(*) from EventoHistorial eh where eh.Eve_codigo = eve.Eve_codigo and Evh_usado = 0) Cantidad,
			(select COUNT(*) as Cantidad from EventoTipoArchivo ETA where ETA.Eve_codigo=eve.Eve_codigo and ETA.Eta_numArchivos>Eta_archivosSubidos and ETA.Eta_vigencia = 1) CantidadFalta,
			cast(cas.Cis_status as varchar) as CasoEstado, cas.Cis_actual, Eve_done,dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1) documents 
	from Evento eve
	join MEDICAL med on eve.Med_code = med.Med_code
	left join PROVIDER pro on eve.Pro_code = pro.Pro_code
	join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo
	join Confirmacion con on con.Con_codigo = eve.Con_codigo
	join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
	join PATIENT pat on pat.Pat_code = cas.Pat_code
	join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor
	join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo
	where eve.Cis_code = @Cis_code
	order by eve.Eve_inicio

end
else if @TipoConsulta=27
begin
	
	begin try
		begin tran

		declare @eve_inicioE datetime=(select eve_inicio from evento where eve_codigo=@Eve_codigo)  ---IVON TORRES
		
		update Evento set Eve_nov=@NextOfficeVisit where Eve_codigo=@Eve_codigo

		insert into EventoNextOffice(Eno_descripcion, Eno_vigencia, Eno_fecha, Use_Code, Eve_codigo, Eno_nov)
		values(@Eve_descripcion, 1, getdate(), @Use_code, @Eve_codigo, @NextOfficeVisit)

		set @Cantidad = (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where Eve_codigo=@Eve_codigo and Eta_vigencia = 1 and ETA.Eta_numArchivos>Eta_archivosSubidos)
		if @Cantidad = 0 and exists(select ev.Eve_codigo from Evento ev where ev.Eve_codigo=@Eve_codigo and (ev.Eve_nov=0 or ev.Eve_codigoNov is not null))
		and @eve_inicioE < getdate() 	
		begin
			update Evento set Eve_done=1, Ese_codigo=5 where Eve_codigo=@Eve_codigo
			set @Eve_done = 1
		end
		else
		begin			
			set @Eve_done = 0
			update Evento set Eve_done=0, Ese_codigo=(case when Ese_codigo=5 then 1 else Ese_codigo end) where Eve_codigo=@Eve_codigo
		end

		select @Eve_done Eve_done, (select top 1 dbo.Fu_ObtenerDateTime(eno.Eno_fecha) + (' ' + usx.Use_firstName + ' ' + usx.Use_lastName + ' ') 
		+ (case eno.Eno_nov when 0 then 'stopped' else 'started' end) + ' NOV. ' + rtrim(eno.Eno_descripcion) from EventoNextOffice eno 

		join [User] usx on usx.Use_Code=eno.Use_Code where eno.Eve_codigo=@Eve_codigo order by eno.Eno_codigo desc) lastActionNov

		commit tran
	end try
	begin catch
		
		rollback tran

		set @e_message = error_message()
		set @e_severity = error_severity()
		set @e_state = error_state()
		raiserror(@e_message, @e_severity, @e_state)

	end catch

end
else if @TipoConsulta=28
begin
	declare @modelgroup table(
		id varchar(10),
		name varchar(200),		
		color varchar(20),
		[type] varchar(20)
	)

	insert into @modelgroup
	select us.Use_Code, us.Use_firstName + ' ' + us.Use_lastName, '', 'supervisor'
	from [User] us
	where (@RoleName='' or (select count(*) from aspnet_Roles ar join aspnet_UsersInRoles aur on aur.RoleId = ar.RoleId 
							where aur.UserId = us.UserId and ar.RoleName in (select ro.item from dbo.fu_Split(@RoleName,',') ro) )>0) and
	      us.Use_status = '0'
	order by us.Use_lastName, us.Use_firstName

	insert into @modelgroup
	select cat.Cat_codigo, cat.Cat_nombre, cat.Cat_color, 'category'
	from Categoria Cat where Cat.Cat_vigencia=1
	order by cat.Cat_nombre

	insert into @modelgroup
	Select te.Tie_codigo, te.Tie_nombre, '', 'tipoevento'
	from TipoEvento te
	WHERE te.Tie_programable=1 and te.Tie_vigencia=1

	select mg.id, mg.name, mg.color, mg.type
	from @modelgroup mg
end

else if @TipoConsulta=29 -- DELETE EVENTO
begin
/*
	update evento set Eve_vigencia=0,Eve_codExchange=NULL  where Eve_codigo=@Eve_codigo		 
	insert into EventoDelete (eve_codigo,evd_fecha,cod_user,evd_motivo) values(@Eve_codigo,getdate(),@cod_user,@Eve_descripcion)
*/
	--RAY DIAZ 24/11/2015

	if (@tipoDelete = 1) -- elimina solo codigoExch 1
		update evento set Eve_vigencia=0 ,Eve_codExchange=NULL  
		where Eve_codigo=@Eve_codigo
	if (@tipoDelete = 2) -- elimina solo codigoExch 2
		update evento set Eve_vigencia=0 ,Eve_codExchangeSec=NULL  
		where Eve_codigo=@Eve_codigo
	if (@tipoDelete = 3) -- elimina codigoExch 1 y 2
		update evento set Eve_vigencia=0 ,Eve_codExchange=NULL, Eve_codExchangeSec=NULL  
		where Eve_codigo=@Eve_codigo
	
	insert into EventoDelete (eve_codigo,evd_fecha,Use_Code, Use_code_old,evd_motivo) values(@Eve_codigo,getdate(),@Use_code,null,@Eve_descripcion)

end
else if @TipoConsulta = 30 -- eventos sin codigo exchange
begin
Select eve.Eve_codigo,[Eve_inicio],[Eve_fin],[Eve_fecha],[Eve_descripcion],eve.Pro_code,[Med_code],eve.Cis_code,eve.Tie_codigo,[Ese_codigo]
      ,[Eve_codigoNext],eve.Use_Code,isnull(Eve_codExchange,'') as Eve_codExchange,[Eve_descartar],[Con_codigo],[Eve_done],[Eve_override],[Eve_allDay],[Mot_codigo]
      ,[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], isnull(Eve_codExchangeSec,'') as Eve_codExchangeSec,
	  (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status], Tie_nombre from Evento eve 
	  join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
	  join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo
	  where Eve_vigencia = 1 and (isnull(Eve_codExchange,'') = '' OR isnull(Eve_codExchangeSec,'') = '')
	  AND CAST(Eve_inicio AS DATE) >= CAST('11/23/2015' AS DATE)
	  order by Eve_inicio

end


else if @TipoConsulta=31 -- advanced search
begin

set @sqlstring = ' '
set @sqlstring2 = ' '
set @sqlstring3 = ' '
set @sqlstring4 = ' '
set @sqlstring5 = ' '

SET @sqlstring = 'select dbo.fu_replacecomillas(med.Med_phone) as phone_med,eve.Eve_allDay, eve.Eve_override, con.Con_codigo,con.Con_confirmMed confirmDoctor,con.Con_confirmProv confirmNurse, eve.Eve_codigo, eve.Eve_inicio, 
		eve.Eve_fin, eve.Eve_fecha, cas.Cis_accidentDate, dbo.fu_replacecomillas((pat.Pat_firstName + '' '' + pat.Pat_lastName)) as patient, dbo.fu_replacecomillas(pat.Pat_address) as address_pat,
			   tie.Tie_codigo, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_Nombre, tie.Tie_programable, dbo.fu_replacecomillas((med.Med_firstName + '' '' + med.Med_lastName)) as medico, med.Med_code, dbo.fu_replacecomillas(med.Med_address) as address_med, dbo.f
u_replacecomillas((med.Med_address + '', '' + med.Med_city + '' '' + med.Med_state + '', '' + med.Med_zipCode)) as address_medfull,
			  dbo.fu_replacecomillas((pro.Pro_firstName + '' '' + pro.Pro_lastName)) as nurse, pro.Pro_code, dbo.fu_replacecomillas((ltrim(rtrim(sup.Use_firstName)) + '' '' + sup.Use_lastName)) as supervisor, est.Ese_codigo, est.Ese_abreviatura, est.Ese_nombre, (c
ase cas.Cis_status when ''1'' then ''Open'' else ''Close'' end) [status],
			   cas.Cis_code, cas.Cis_caseCode, eve.Eve_codigoNov, eve.Eve_nov, eve.Eve_codExchange, eve.Eve_codExchangeSec, eve.Eve_codigoNext, eve.Use_Code, dbo.fu_replacecomillas(eve.Eve_descripcion) as eve_descripcion,
			  (select count(*) from EventoHistorial eh where eh.Eve_codigo = eve.Eve_codigo and Evh_usado = 0) Cantidad,
			  (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where ETA.Eve_codigo=eve.Eve_codigo and ETA.Eta_numArchivos>Eta_archivosSubidos and ETA.Eta_vigencia = 1) CantidadFalta,
			   cast(cas.Cis_status as varchar) as CasoEstado, cas.Cis_actual, Eve_done, dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1) documents, cast((dbo.Fu_ObtenerLastCall(eve.Eve_codigo)) as varchar(14)) as lastCall from Evento eve
		join MEDICAL med on eve.Med_code = med.Med_code
		left join PROVIDER pro on eve.Pro_code = pro.Pro_code
		join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo
		join Confirmacion con on con.Con_codigo = eve.Con_codigo
		join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
		join PATIENT pat on pat.Pat_code = cas.Pat_code
		join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor
		join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo 
		where eve.eve_vigencia=1 '

		if(@case_status=0) 
		begin
		set @case_status=1
		end
		else if(@case_status=1) 
		begin
		set @case_status=0
		end 
	
	
		if rtrim(ltrim(@case_status)) <> '-1'
		begin
			SET @sqlstring = @sqlstring + ' and ' + cast(@case_status as varchar(15)) + ' = cas.Cis_status'
		end
		if rtrim(ltrim(@Cis_code)) <> 0
		begin
			SET @sqlstring = @sqlstring + ' and (isnull(''' + cast(@Cis_code as varchar(15)) + ''','''')='''' or eve.Cis_code=''' + cast(@Cis_code as varchar(15))  + ''')'
		end
		if rtrim(ltrim(@supervisores)) <> ''
		begin
			SET @sqlstring = @sqlstring + ' and rtrim(ltrim(cas.Cis_caseSupervisor)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split]( ''' + @supervisores + ''' , ''*'') su) '
		end
		if rtrim(ltrim(@eventTypes)) <> ''
		begin
			SET @sqlstring = @sqlstring + ' and tie.Tie_codigo in (select ti.item from [dbo].[fu_Split](''' + @eventTypes + '''  , ''*'') ti)'
		end
		if rtrim(ltrim(@nurses)) <> ''
		begin
			SET @sqlstring2 = @sqlstring2 + ' and ((eve.Pro_code is null and exists(select nu.id from [dbo].[fu_Split](''' + @nurses + ''', ''*'') nu where nu.item=''0'')) or pro.Pro_code in (select nu.item from [dbo].[fu_Split](''' + @nurses + ''', ''*'') nu)) '



		end
		if rtrim(ltrim(@items)) <> ''
		begin
			SET @sqlstring2 = @sqlstring2 + '  and ((dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1)='''' 
			and exists(select nu.id from [dbo].[fu_Split](''' + @items + ''', ''*'') nu where nu.item=0))
			 or (select count(*) from EventoTipoArchivo eta where eta.Eta_vigencia = 1 
			 and eta.Eve_codigo = eve.Eve_codigo and eta.Tia_codigo in (select it.item from [dbo].[fu_Split](''' + @items + ''', ''*'') it) and eta.Eta_archivosSubidos<eta.Eta_numArchivos)>0)'
			 
		end
		if rtrim(ltrim(@status)) <> ''
		begin
			SET @sqlstring2 = @sqlstring2 + ' and est.Ese_codigo in (select es.item from [dbo].[fu_Split](''' + @status + ''', ''*'') es)'
		end

		if rtrim(ltrim(@confirmDoctorSearch)) <> '-1'
		begin
			SET @sqlstring2 = @sqlstring2 + '  and (' + CAST(@confirmDoctorSearch AS VARCHAR(4)) + ' =con.Con_confirmMed) ' 
		end

		if rtrim(ltrim(@phone)) <> ''
		begin
			SET @sqlstring2 = @sqlstring2 + ' and (rtrim(ltrim(''' + @phone + ''' ))=rtrim(ltrim(med.Med_phone)) or rtrim(ltrim(''' + @phone + ''' ))=rtrim(ltrim(med.Med_phoneExt)) or rtrim(ltrim(''' + @phone + ''' ))=rtrim(ltrim(med.Med_alternatePhone)))'
		end
		if rtrim(ltrim(@novs)) <> ''
		begin
			SET @sqlstring2 = @sqlstring2 + ' and (len(''' + @novs + ''' )=0 or ( (eve.Eve_nov=0 and exists(select nov.id from dbo.fu_Split(''' + @novs + ''' ,''*'') nov where nov.item=''sinNov'')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is null and exists(select nov.id from dbo.fu_Split(''' + @novs + ''',''*'') nov where nov.item=''sinNovSchedule'')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is not null and exists(select nov.id from dbo.fu_Split(''' + @novs + ''' ,''*'') nov where nov.item=''conNovSchedule'')) ) )'

		end	
		
			
		if rtrim(ltrim(@doctor)) <> ''
		begin
			SET @sqlstring2 = @sqlstring2 + ' and (med.Med_firstName + '' '' + med.Med_lastName) like ''%' +  @doctor +'%'''
		end	
		if rtrim(ltrim(@patient)) <> ''
		begin
			SET @sqlstring2 = @sqlstring2 + ' and rtrim(ltrim(pat.Pat_firstName + '' '' + pat.Pat_lastName)) like ''%' + @patient + '%'''
		end	
		if @confirmNurseSearch <> -1
		begin
			SET @sqlstring2 = @sqlstring2 + ' and ' + CAST(@confirmNurseSearch AS VARCHAR(4))+ ' = con.Con_confirmProv '
		end	

		if @Eve_inicio is not null
		begin
			SET @sqlstring2 = @sqlstring2 + ' and (''' + (CAST(@Eve_inicio AS VARCHAR(50))) + ''' is null or 
			cast(eve.Eve_inicio as date)>=cast(''' + CAST(@Eve_inicio AS VARCHAR(50)) + ''' as date)) '
		end

		if @Eve_fin is not null
		begin
			SET @sqlstring2 = @sqlstring2 + ' and (''' + CAST(@Eve_fin AS VARCHAR(50)) + ''' is null or cast(eve.Eve_fin as date)<=cast(''' + CAST(@Eve_fin AS VARCHAR(50)) + ''' as date))'
		end
		
		if @withAgenda=1
		begin
			SET @sqlstring3 = @sqlstring3 + ' union all
			select  '''' phone_med, cast(0 as bit) Eve_allDay, cast(0 as bit) Eve_override, 0 Con_codigo, cast(0 as bit) confirmDoctor, cast(0 as bit) confirmNurse, 0 Eve_codigo, cau.Cau_inicio Eve_inicio, cau.Cau_fin Eve_fin, null Eve_fecha, null accident_date, (ltrim(rtrim(usys.Use_firstName)) + '' '' + usys.Use_lastName) patient, '''' address_pat,
					tie.Tie_codigo, tie.Tie_nombre, tie.Tie_programable, ''-'' medico, '''' Med_code, '''' address_med, ''-'' address_medfull,
					''-'' nurse, '''' Pro_code, ''-'' supervisor, cast(0 as tinyint) Ese_codigo, '''' Ese_abreviatura, '''' Ese_nombre, cau.Cau_descripcion [status],
					'''' Cis_code, '''' case_cod, 0 Eve_codigoNov, cast(0 as bit) Eve_nov, '''' Eve_codExchange, '''' Eve_codExchangeSec, 0 Eve_codigoNext, '''' Use_Code, '''' Eve_descripcion,
					0 Cantidad, 0 CantidadFalta, '''' CasoEstado, cast(0 as bit) Cis_actual, cast(0 as bit) Eve_done, '''' documents, '''' lastCall
			from CalendarioUsuario cau
			join TipoEvento tie on tie.Tie_codigo = cau.Tie_codigo
			join [User] usys on usys.Use_Code = cau.Use_Code
			where cau.Cau_vigencia=1 and cau.Cau_mostrarMV=1 '
			if rtrim(ltrim(@nurses)) <> ''
			begin
				SET @sqlstring3 = @sqlstring3 + ' and (cau.Use_Code is null and exists(select nu.id from [dbo].[fu_Split](''' + @nurses + ''', ''*'') nu where nu.item=''0'')) 
				or cau.Use_Code in (select prx.Use_Code from [dbo].[fu_Split](''' + @nurses + ''' , ''*'') nu 
				join PROVIDER prx on ltrim(rtrim(prx.Pro_code))=nu.item) '
			end	
			if @Eve_inicio is not null
			begin
				SET @sqlstring3 = @sqlstring3 + ' and cast(cau.Cau_inicio as date)>=cast(''' + (CAST(@Eve_inicio AS VARCHAR(50))) + ''' as date)'
			end	 
			if @Eve_fin is not null
			begin
				SET @sqlstring3 = @sqlstring3 + ' and cast(cau.Cau_fin as date)<=cast(''' + (CAST(@Eve_fin AS VARCHAR(50))) + ''' as date)'
			end
		end
	
		SET @sqlstring3 = @sqlstring3 + ' ' + @orderBy
		--PRINT (@sqlstring + @sqlstring2 + @sqlstring3) -- + @sqlstring + @sqlstring) --+ @sqlstring3 + @sqlstring)
		exec (@sqlstring + @sqlstring2 + @sqlstring3)

/*
	if @withAgenda=1
	begin
		select dbo.fu_replacecomillas(med.phone_med) as phone_med,eve.Eve_allDay, eve.Eve_override, con.Con_codigo,con.Con_confirmMed confirmDoctor,con.Con_confirmProv confirmNurse, eve.Eve_codigo, eve.Eve_inicio, 
		eve.Eve_fin, eve.Eve_fecha, cas.accident_date, dbo.fu_replacecomillas((pat.name_pat + ' ' + pat.last_pat)) as patient, dbo.fu_replacecomillas(pat.address_pat) as address_pat,
			   tie.Tie_codigo, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_Nombre, tie.Tie_programable, dbo.fu_replacecomillas((med.name_med + ' ' + med.last_med)) as medico, med.cod_med, dbo.fu_replacecomillas(med.address_med) as address_med, dbo.fu_replacecomi
llas((med.address_med + ', ' + med.city + ' ' + med.state + ', ' + med.zipcode)) as address_medfull,
			  dbo.fu_replacecomillas((pro.name_pro + ' ' + pro.Pro_lastName)) as nurse, pro.cod_pro, dbo.fu_replacecomillas((ltrim(rtrim(sup.name)) + ' ' + sup.lastname)) as supervisor, est.Ese_codigo, est.Ese_abreviatura, est.Ese_nombre, (case cas.status when '0'
 then 'Open' else 'Close' end) [status],
			   cas.cod_cis, cas.case_cod, eve.Eve_codigoNov, eve.Eve_nov, eve.Eve_codExchange, eve.Eve_codigoNext, eve.cod_user, dbo.fu_replacecomillas(eve.Eve_descripcion) as eve_descripcion,
			  (select count(*) from EventoHistorial eh where eh.Eve_codigo = eve.Eve_codigo and Evh_usado = 0) Cantidad,
			  (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where ETA.Eve_codigo=eve.Eve_codigo and ETA.Eta_numArchivos>Eta_archivosSubidos and ETA.Eta_vigencia = 1) CantidadFalta,
			   cas.status as CasoEstado, cas.Cis_actual, Eve_done, dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1) documents
		from Evento eve
		join MEDICAL med on eve.cod_med = med.cod_med
		left join PROVIDER pro on eve.cod_pro = pro.cod_pro
		join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo
		join Confirmacion con on con.Con_codigo = eve.Con_codigo
		join CaseInformationSheetHead cas on eve.cod_cis = cas.cod_cis
		join PATIENT pat on pat.cod_pat = cas.cod_pat
		join [User] sup on sup.cod_user = cas.supervisor_user
		join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo

		where (isnull(@cod_cis,'')='' or eve.cod_cis=@cod_cis) and (med.name_med + ' ' + med.last_med) like '%'+@doctor+'%' and rtrim(ltrim(pat.name_pat + ' ' + pat.last_pat)) like '%' + @patient + '%' and
		(len(@supervisores)=0 or rtrim(ltrim(cas.supervisor_user)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split](@supervisores, '*') su)) and
		(len(@eventTypes)=0 or tie.Tie_codigo in (select ti.item from [dbo].[fu_Split](@eventTypes, '*') ti)) and
		(len(@nurses)=0 or (eve.cod_pro is null and exists(select nu.id from [dbo].[fu_Split](@nurses, '*') nu where nu.item=0)) or pro.cod_pro in (select nu.item from [dbo].[fu_Split](@nurses, '*') nu)) and
		(len(@items)=0 or (dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1)='' and exists(select nu.id from [dbo].[fu_Split](@items, '*') nu where nu.item=0)) or (select count(*) from EventoTipoArchivo eta where eta.Eta_vigencia = 1 and eta.Eve_codigo = eve.Eve_codigo
 and eta.Tia_codigo in (select it.item from [dbo].[fu_Split](@items, '*') it))>0) and
		(len(@status)=0 or est.Ese_codigo in (select es.item from [dbo].[fu_Split](@status, '*') es)) and
	
		(@confirmDoctorSearch=-1 or @confirmDoctorSearch=con.Con_confirmMed) and
		(@confirmNurseSearch=-1 or @confirmNurseSearch=con.Con_confirmProv) and
		(@phone='' or rtrim(ltrim(@phone))=rtrim(ltrim(med.phone_med)) or rtrim(ltrim(@phone))=rtrim(ltrim(med.phone_ext)) or rtrim(ltrim(@phone))=rtrim(ltrim(med.phone_alternative))) and
		( (@Eve_inicio is null or cast(eve.Eve_inicio as date)>=cast(@Eve_inicio as date)) and (@Eve_fin is null or cast(eve.Eve_fin as date)<=cast(@Eve_fin as date)) ) and
		(len(@novs)=0 or ( (eve.Eve_nov=0 and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='sinNov')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is null and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='sinNovSchedul
e')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is not null and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='conNovSchedule')) ) )
		and eve.eve_vigencia=1
		and (@case_status=-1 or @case_status=cas.status)
		union all
		select  '' phone_med, cast(0 as bit) Eve_allDay, cast(0 as bit) Eve_override, 0 Con_codigo, cast(0 as bit) confirmDoctor, cast(0 as bit) confirmNurse, 0 Eve_codigo, cau.Cau_inicio Eve_inicio, cau.Cau_fin Eve_fin, null Eve_fecha, null accident_date, (ltr
im(rtrim(usys.name)) + ' ' + usys.lastname) patient, '' address_pat,
				tie.Tie_codigo, tie.Tie_nombre, tie.Tie_programable, '-' medico, '' cod_med, '' address_med, '-' address_medfull,
				'-' nurse, '' cod_pro, '-' supervisor, cast(0 as tinyint) Ese_codigo, '' Ese_abreviatura, '' Ese_nombre, cau.Cau_descripcion [status],
				'' cod_cis, '' case_cod, 0 Eve_codigoNov, cast(0 as bit) Eve_nov, '' Eve_codExchange, 0 Eve_codigoNext, '' cod_user, '' Eve_descripcion,
				0 Cantidad, 0 CantidadFalta, '' CasoEstado, cast(0 as bit) Cis_actual, cast(0 as bit) Eve_done, '' documents
		from CalendarioUsuario cau
		join TipoEvento tie on tie.Tie_codigo = cau.Tie_codigo
		join [User] usys on usys.cod_user = cau.cod_user
		where cau.Cau_vigencia=1 and cau.Cau_mostrarMV=1 and
			 (len(@nurses)=0 or (cau.cod_user is null and exists(select nu.id from [dbo].[fu_Split](@nurses, '*') nu where nu.item=0)) or cau.cod_user in (select prx.cod_user from [dbo].[fu_Split](@nurses, '*') nu join PROVIDER prx on ltrim(rtrim(prx.cod_pro))=nu.
item)) and
			 ( (@Eve_inicio is null or cast(cau.Cau_inicio as date)>=cast(@Eve_inicio as date)) and (@Eve_fin is null or cast(cau.Cau_fin as date)<=cast(@Eve_fin as date)) )
		order by Eve_inicio
	end
	else
	begin
		select dbo.fu_replacecomillas(med.phone_med) as phone_med,eve.Eve_allDay, eve.Eve_override, con.Con_codigo,con.Con_confirmMed confirmDoctor ,con.Con_confirmProv confirmNurse ,eve.Eve_codigo, eve.Eve_inicio, eve.Eve_fin, eve.Eve_fecha, cas.accident_date,
 dbo.fu_replacecomillas((pat.name_pat + ' ' + pat.last_pat)) patient, dbo.fu_replacecomillas(pat.address_pat) as address_pat,
			   tie.Tie_codigo, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_nombre, tie.Tie_programable, dbo.fu_replacecomillas((med.name_med + ' ' + med.last_med)) as medico, med.cod_med, dbo.fu_replacecomillas(med.address_med) as address_med, 
			   dbo.fu_replacecomillas((med.address_med + ', ' + med.city + ' ' + med.state + ', ' + med.zipcode)) as address_medfull,
			  dbo.fu_replacecomillas((pro.name_pro + ' ' + pro.Pro_lastName)) as nurse, pro.cod_pro, dbo.fu_replacecomillas((ltrim(rtrim(sup.name)) + ' ' + sup.lastname)) as supervisor, est.Ese_codigo, est.Ese_abreviatura, est.Ese_nombre, (case cas.status when '0'
 then 'Open' else 'Close' end) [status],
			   cas.cod_cis, cas.case_cod, eve.Eve_codigoNov, eve.Eve_nov, eve.Eve_codExchange, eve.Eve_codigoNext, eve.cod_user, dbo.fu_replacecomillas(eve.Eve_descripcion) as eve_descripcion,
			  (select count(*) from EventoHistorial eh where eh.Eve_codigo = eve.Eve_codigo and Evh_usado = 0) Cantidad,
			  (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where ETA.Eve_codigo=eve.Eve_codigo and ETA.Eta_numArchivos>Eta_archivosSubidos and ETA.Eta_vigencia = 1) CantidadFalta,
			   cas.status as CasoEstado, cas.Cis_actual, Eve_done,dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1) documents
		from Evento eve
		join MEDICAL med on eve.cod_med = med.cod_med
		left join PROVIDER pro on eve.cod_pro = pro.cod_pro
		join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo
		join Confirmacion con on con.Con_codigo = eve.Con_codigo
		join CaseInformationSheetHead cas on eve.cod_cis = cas.cod_cis
		join PATIENT pat on pat.cod_pat = cas.cod_pat
		join [User] sup on sup.cod_user = cas.supervisor_user
		join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo

		where (isnull(@cod_cis,'')='' or eve.cod_cis=@cod_cis) and (med.name_med + ' ' + med.last_med) like '%'+@doctor+'%' and rtrim(ltrim(pat.name_pat + ' ' + pat.last_pat)) like '%' + @patient + '%' and
		(len(@supervisores)=0 or rtrim(ltrim(cas.supervisor_user)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split](@supervisores, '*') su)) and
		(len(@eventTypes)=0 or tie.Tie_codigo in (select ti.item from [dbo].[fu_Split](@eventTypes, '*') ti)) and
		(len(@nurses)=0 or (eve.cod_pro is null and exists(select nu.id from [dbo].[fu_Split](@nurses, '*') nu where nu.item=0)) or pro.cod_pro in (select nu.item from [dbo].[fu_Split](@nurses, '*') nu)) and
		(len(@items)=0 or (dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1)='' and exists(select nu.id from [dbo].[fu_Split](@items, '*') nu where nu.item=0)) or (select count(eta.Eve_codigo) from EventoTipoArchivo eta where eta.Eta_vigencia=1 and eta.Eve_codigo=eve.E
ve_codigo and isnull(eta.Eta_archivosSubidos,0)=0 and eta.Tia_codigo in (select it.item from [dbo].[fu_Split](@items, '*') it))>0) and
		(len(@status)=0 or est.Ese_codigo in (select es.item from [dbo].[fu_Split](@status, '*') es)) and
	
		(@confirmDoctorSearch=-1 or @confirmDoctorSearch=con.Con_confirmMed) and
		(@confirmNurseSearch=-1 or @confirmNurseSearch=con.Con_confirmProv) and
		(@phone='' or rtrim(ltrim(@phone))=rtrim(ltrim(med.phone_med)) or rtrim(ltrim(@phone))=rtrim(ltrim(med.phone_ext)) or rtrim(ltrim(@phone))=rtrim(ltrim(med.phone_alternative))) and
		( (@Eve_inicio is null or cast(eve.Eve_inicio as date)>=cast(@Eve_inicio as date)) and (@Eve_fin is null or cast(eve.Eve_fin as date)<=cast(@Eve_fin as date)) ) and
		(len(@novs)=0 or ( (eve.Eve_nov=0 and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='sinNov')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is null and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='sinNovSchedul
e')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is not null and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='conNovSchedule')) ) )
		and eve.eve_vigencia=1
		and (@case_status=-1 or @case_status=cas.status)
		order by eve.Eve_inicio
	end
	*/
end
--actualizar codigo de exchange - server secundario
--Ray Diaz
else if @TipoConsulta=32
begin
	UPDATE Evento
		SET Eve_codExchangeSec = @Eve_codExchange			
	where eve_codigo = @Eve_codigo
end

else if @TipoConsulta = 33 -- eventos no vigentes que aun falta eliminar de exchange
begin
/*Select eve.Eve_codigo,[Eve_inicio],[Eve_fin],[Eve_fecha],[Eve_descripcion],eve.cod_pro,[cod_med],eve.cod_cis,eve.Tie_codigo,[Ese_codigo]
      ,[Eve_codigoNext],eve.cod_user,isnull(Eve_codExchange,'') as Eve_codExchange,[Eve_descartar],[Con_codigo],[Eve_done],[Eve_override],[Eve_allDay],[Mot_codigo]
      ,[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], isnull(Eve_codExchangeSec,'') as Eve_codExchangeSec,
	  (case cas.status when '0' then 'Open' else 'Close' end) [status], Tie_nombre from Evento eve 
	  join CaseInformationSheetHead cas on eve.cod_cis = cas.cod_cis
	  join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo
	  where Eve_vigencia = 0 and (isnull(Eve_codExchange,'') <> '' OR isnull(Eve_codExchangeSec,'') <> '')
	  --AND CAST(Eve_fecha AS DATE) >= CAST('11/23/2015' AS DATE)
*/

Select eve.Eve_codigo,[Eve_inicio],[Eve_fin],[Eve_fecha],[Eve_descripcion],eve.Pro_code,[Med_code],eve.Cis_code,eve.Tie_codigo,[Ese_codigo]
      ,[Eve_codigoNext],eve.Use_Code,isnull(Eve_codExchange,'') as Eve_codExchange,[Eve_descartar],[Con_codigo],[Eve_done],[Eve_override],[Eve_allDay],[Mot_codigo]
      ,[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], isnull(Eve_codExchangeSec,'') as Eve_codExchangeSec,
	  (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status], Tie_nombre from Evento eve 
	  join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
	  join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo
	  where --eve_codigo in (select eve_codigo from EVENTOTEMP)
	  eve_codigo in (39753,
39893,
47255,
51460,
43674,
44752,
51470,
42630,
42163)
		/*(
		select * from evento where Eve_codigo not in (select eve_codigo from EventoHistorial) and cast(Eve_fecha as date) >= cast('07/19/2016' as date)
		and Eve_vigencia = 1 --order by Eve_inicio


		union all

		select * from evento where Eve_codigo in (select eve_codigo from EventoHistorial) and cast(Eve_fecha as date) >= cast('07/19/2016' as date)
		and Eve_vigencia = 1 ) as t-- order by Eve_codigo
		)*/

end

else if @TipoConsulta = 34 -- actualizar estado de eventos
begin

--RAY DIAZ 24/11/2015
	update evento set Eve_statusUpdateExc = @tipoDelete
	where Eve_codigo=@Eve_codigo

end	

else if @TipoConsulta = 35 -- eventos vigentes que no han sido actualizados en exchange
begin
Select eve.Eve_codigo,[Eve_inicio],[Eve_fin],[Eve_fecha],[Eve_descripcion],eve.Pro_code,[Med_code],eve.Cis_code,eve.Tie_codigo,[Ese_codigo]
      ,[Eve_codigoNext],eve.Use_Code,isnull(Eve_codExchange,'') as Eve_codExchange,[Eve_descartar],[Con_codigo],[Eve_done],[Eve_override],[Eve_allDay],[Mot_codigo]
      ,[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], isnull(Eve_codExchangeSec,'') as Eve_codExchangeSec,
	  (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status], Tie_nombre, Eve_statusUpdateExc from Evento eve 
	  join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
	  join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo
	  where Eve_vigencia = 1 and Eve_statusUpdateExc in (1,2)
	  --AND CAST(Eve_fecha AS DATE) >= CAST('11/23/2015' AS DATE)

end

--- listado personalizado de eventos
else if @TipoConsulta = 36 -- eventos sin codigo exchange
begin
Select eve.Eve_codigo,[Eve_inicio],[Eve_fin],[Eve_fecha],[Eve_descripcion],eve.Pro_code,[Med_code],eve.Cis_code,eve.Tie_codigo,[Ese_codigo]
      ,[Eve_codigoNext],eve.Use_Code,isnull(Eve_codExchange,'') as Eve_codExchange,[Eve_descartar],[Con_codigo],[Eve_done],[Eve_override],[Eve_allDay],[Mot_codigo]
      ,[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], isnull(Eve_codExchangeSec,'') as Eve_codExchangeSec,
	  (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status], Tie_nombre from Evento eve 
	  join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
	  join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo
	  where Eve_vigencia = 1 and (isnull(Eve_codExchange,'') = '' OR isnull(Eve_codExchangeSec,'') = '')
	  AND /*CAST(Eve_inicio AS DATE) >= CAST('11/23/2015' AS DATE)
	  order by Eve_inicio*/

	  --eve_codigo in (SELECT EVE_CODIGO FROM EVENTOTEMP)
	   eve_codigo in (39753,
39893,
47255,
51460,
43674,
44752,
51470,
42630,
42163)
end




--Alter table EventoDelete alter column cod_user  char(4) null

--Alter table EventoDelete alter column Use_code  int not null
go

IF (OBJECT_ID(N'pa_Evento', N'P') IS NOT NULL)
	DROP procedure pa_Evento
GO
CREATE PROCEDURE pa_Evento
             @Eve_codigo    int=Null output,
             @Eve_inicio    datetime=Null,
             @Eve_fin    datetime=Null,
             @Eve_fecha    smalldatetime=Null,
             @Eve_descripcion    text=Null,             
			 @cod_pro    char(10)=Null,
			 @Pro_code   int=Null,			 
            -- @cod_med    char(10)=Null,
             @med_code int=Null,
			 
			-- @cod_cis    char(15)=Null,
			 @cis_code    int=Null,      
			        
			 @Tie_codigo    tinyint=Null,
             @Ese_codigo    tinyint=Null,
             @Eve_codigoNext    int=Null,
			 @Eve_codigoNov		int=Null,             
			-- @cod_user    char(4)=Null,
			 @Use_code    int=Null,
			 @cod_user_Undochange char(4)=Null,
             @Eve_codExchange    varchar(600)=Null,
             @Eve_descartar    bit=Null,

			 @Mot_descripcion varchar(1000)=Null,
			 @Mot_codigo	bigint=Null,
			 @Mot_codigo2	bigint=Null,

			 @doctor    varchar(80)=Null,
			 @patient   varchar(80)=Null,

			 @confirmDoctorSearch int=null,
			 @confirmNurseSearch int=null,
			 @year int=null,
			 @month int=null,
			 @supervisor_user char(4)=Null,

			 @reasonDoctor varchar(1000)=null,
			 @reasonNurse  varchar(1000)=null,
			 -- confirms
			 @NextOfficeVisit bit=Null,
			 @checkDoctor bit=Null,
			 @checkNurse bit=Null,
			 @confirmDoctor bit=Null,
			 @confirmNurse	bit=Null,
			 @AconfirmDoctor bit=Null,
			 @AconfirmNurse	bit=Null,

			 @Con_codigo	int=Null,
			 @Eve_done		bit=null,

			 @fields varchar(1000)=Null,
			 -- filtro en master viewer
			 @novs varchar(400)=Null,
			 @supervisores   varchar(400)=Null,
			 @status   varchar(400)=Null,
			 @nurses   varchar(700)=Null,
			 @eventTypes   varchar(400)=Null,
			 @cantArchivos int=Null,
			 @Eve_allDay  bit=Null,
			 @Eve_override bit=Null,
			 @phone varchar(20)=Null,
			 @items varchar(400)=Null,
			 @codUserNurse int =Null,
			 @Mot_codigoMed bigint = Null,
			 @Mot_codigoPro bigint = Null,
			 @TipoConsulta tinyint,
			 @Cat_codigo int=Null,
			 @Tie_needNurse bit=Null,
			 @withAgenda bit=Null,
			 @RoleName	varchar(100)=Null,
			 @reasonOverrideNurse varchar(3000)=null,
			 @case_status int=null,
			 @Eve_codExchangeSec    varchar(600)=Null,
			 @tipoDelete int = null,
			 @orderby varchar(200)=null
AS 

declare @e_message varchar(500), @e_severity int, @e_state int, @ese_codigoy tinyint, @tie_codigoy tinyint

declare @Eve_bloqueo bit
declare @workDayStart int, @workDayEnd int, @timeStart int, @timeEnd int
declare @Cau_codigo int, @codUserSupervisor char(4), @Cantidad int


declare @sqlstring VARCHAR(8000) = ' '  
declare @sqlstring0 VARCHAR(8000) = ' '    	
declare @sqlstring1 VARCHAR(8000) = ' '   
declare @sqlstring2 VARCHAR(8000) = ' '  	 
declare @sqlstring3 VARCHAR(8000) = ' '  	
declare @sqlstring4 VARCHAR(8000) = ' ' 
declare @sqlstring5 VARCHAR(8000) = ' '	

if(@Pro_code=0) set @Pro_code=null

if @TipoConsulta=1
Begin
	
	begin try
		
		select @tie_codigoy=Tie_codigo, @Eve_bloqueo=isnull(Eve_bloqueo,0) from Evento where Eve_codigo=@Eve_codigo

		if @Eve_bloqueo=0--exists(select Eve_codigo from Evento where Eve_codigo=@Eve_codigo and isnull(Eve_bloqueo,0)=0)
		begin
			set @workDayStart = (select dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), cast(('2012-01-01 ' + con.Cof_valor) as datetime), 8)) from Configuracion con where con.Cof_identificador = 'dayStart')
			set @workDayEnd = (select dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), cast(('2012-01-01 ' + con.Cof_valor) as datetime), 8)) from Configuracion con where con.Cof_identificador = 'dayEnd')
			
			set @timeStart = dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), @Eve_inicio, 8))
			set @timeEnd = dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), @Eve_fin, 8))
		
			if (@timeStart>=@workDayStart and @timeStart<=@workDayEnd) and (@timeEnd>=@workDayStart and @timeEnd<=@workDayEnd)
			begin
			
			if not exists(select Eve_codigo from Evento where Eve_codigo<>@Eve_codigo and Eve_inicio=@Eve_inicio and Eve_fin=@Eve_fin and Cis_code=@Cis_code and Tie_codigo=@Tie_codigo and Med_code=@med_code and eve_vigencia = 1)
			begin
				set @codUserSupervisor = (select Cis_caseSupervisor from CaseInformationSheetHead where Cis_code = @Cis_code)
				set @codUserNurse = (select Use_Code from PROVIDER where Pro_code = @Pro_code)

				if (select count(*) from CalendarioUsuario cu 
					where (@Eve_codigo=0 or isnull(cu.Eve_codigo,0) <> @Eve_codigo) and cu.Cau_vigencia = 1 and @codUserNurse=cu.Use_Code and
						  (isnull(cu.Eve_codigo,0)=0 or (select count(*) from Evento ev where ev.Eve_codigo=cu.Eve_codigo and ev.Ese_codigo in (1,5))>0) and
						  ( (@Eve_inicio between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or (@Eve_fin between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or
							(dateadd(mi,1,cu.Cau_inicio) between @Eve_inicio and @Eve_fin)
						  )
					) >= 0 /*verifica fechas de nurse*/ --and
					/*(select count(*) from CalendarioUsuario cu
					 join TipoEvento te on cu.Tie_codigo =  te.Tie_codigo
					 where (@Eve_codigo=0 or isnull(cu.Eve_codigo,0) <> @Eve_codigo) and cu.Cau_vigencia = 1 and te.Tie_programable = 0 and @supervisor_user=cu.cod_user and
						   (isnull(cu.Eve_codigo,0)=0 or (select count(*) from Evento ev where ev.Eve_codigo=cu.Eve_codigo and ev.Ese_codigo in (1,5))>0) and
						   ( (@Eve_inicio between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or (@Eve_fin between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or
							 (dateadd(mi,1,cu.Cau_inicio) between @Eve_inicio and @Eve_fin)
						   )
					) = 0 -- verifica fechas de supervisor*/
				begin
					-- bloqueando evento
					update Evento set Eve_bloqueo=1 where Eve_codigo=@Eve_codigo

					begin tran				

					-- Esta accion se ejecuta para agregar un registro nuevo en la tabla eventohistorial pero con el nuevo con_codigo(codigo de la tabla confirmacion) actualizado.
					INSERT INTO [dbo].[EventoHistorial]
					([Eve_codigo],[Eve_inicio],[Eve_fin],[Eve_fecha],[Eve_descripcion],[Pro_code],[Med_code],[Cis_code],[Tie_codigo],[Ese_codigo],[Eve_codigoNext],[Evh_fecha],[Use_Code],[Eve_codExchange],[Eve_descartar],[Con_codigo],Mot_codigo,
					[Eve_done],[Eve_override],[Eve_allDay],[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia])
					select e.Eve_codigo, e.Eve_inicio, e.Eve_fin, e.Eve_fecha, e.Eve_descripcion, e.Pro_code, e.Med_code, e.Cis_code, e.Tie_codigo, e.Ese_codigo, e.Eve_codigoNext, getdate(), @Use_code, e.Eve_codExchange, e.Eve_descartar,e.Con_codigo,Mot_codigo,
					[Eve_done],[Eve_override],[Eve_allDay],[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia]
					from Evento e
					where e.Eve_codigo = @Eve_codigo
				
					-- registrando motivos de confirmacion
					/*if len(@reasonDoctor)>0
					begin
						insert into MotivoCambioEstado (Mot_descripcion, Mot_vigencia, Mot_fechaSistema, cod_user) values (@reasonDoctor, 1, getdate(), @cod_user)
						set @Mot_codigoMed = @@IDENTITY
					end
					else set @Mot_codigoMed = null

					if len(@reasonNurse)>0
					begin
						insert into MotivoCambioEstado (Mot_descripcion, Mot_vigencia, Mot_fechaSistema, cod_user) values (@reasonNurse, 1, getdate(), @cod_user)
						set @Mot_codigoPro = @@IDENTITY
					end
					else set @Mot_codigoPro = null
					*/
					-- seteando a null a provider si no requiere enfermera el nuevo tipo de evento
					if @Tie_needNurse=0 
					begin
						set @Pro_code = null
						-- registrando confirmacion
						INSERT INTO [dbo].[Confirmacion] ([Pro_code],[Med_code],[Con_fecha],[Con_vigencia],[Use_Code],Con_confirmMed,Con_confirmProv,Mot_codigoMed,Mot_codigoProv)
						VALUES (@Pro_code,@med_code, getdate(), 1, @Use_code, @confirmDoctor, @confirmNurse,(select Mot_codigoMed from Confirmacion where Con_codigo=(select Con_codigo from Evento where Eve_codigo=@Eve_codigo)),null)
						SET @Con_codigo = @@IDENTITY
					end		
					-- actualizar calendarios relacionado al evento
					update CalendarioUsuario set Cau_vigencia = 0 where Eve_codigo = @Eve_codigo

					-- registrando el nuevo calendario del evento 
					/*INSERT INTO [dbo].[CalendarioUsuario]([cod_user],[Cau_inicio],[Cau_fin],[Cau_descripcion],[Cau_vigencia],[Cau_mostrarMV],Tie_codigo,Eve_codigo)
					VALUES (@codUserSupervisor,@Eve_inicio,@Eve_fin,'',1,0,@Tie_codigo,@Eve_codigo)
					set @Cau_codigo = @@IDENTITY*/

					if (@Tie_needNurse=1)
					begin
						-- registrando el nuevo calendario del evento 
						INSERT INTO [dbo].[CalendarioUsuario]([Use_Code],[Cau_inicio],[Cau_fin],[Cau_descripcion],[Cau_vigencia],[Cau_mostrarMV],Tie_codigo,Eve_codigo)
						VALUES (@codUserNurse,@Eve_inicio,@Eve_fin,'',1,0,@Tie_codigo,@Eve_codigo)
						set @Cau_codigo = @@IDENTITY
					end

					-- agregando los nuevos tipos de documentos al evento
					if @Tie_codigo <> @tie_codigoy
					begin
						delete EventoFile where Tia_codigo in (select Tia_codigo from  EventoTipoArchivo where Eve_codigo=@Eve_codigo and Eta_archivosSubidos=0) and Eve_codigo=@Eve_codigo
						delete from EventoTipoArchivo where Eve_codigo=@Eve_codigo and Eta_archivosSubidos=0

						INSERT INTO [dbo].[EventoTipoArchivo]([Tia_codigo] ,[Eve_codigo],[Eta_numArchivos],[Eta_vigencia],[Eta_archivosSubidos])
						select tae.Tia_codigo, @Eve_codigo, ta.Tia_numArchivos, 1, 0
						from TipoArchivo ta
						join TipoArchivoEvento tae on tae.Tia_codigo = ta.Tia_codigo and tae.Tie_codigo=@Tie_codigo
						where tae.Tia_codigo not in (select eta.Tia_codigo from EventoTipoArchivo eta where eta.Eve_codigo=@Eve_codigo)
					end

					-- actualizando el evento
					if(@Con_codigo = 0) --CUANDO LLEGA CON_CODIGO = 0 NO ACTUALIZAMNOS ESE CAMPO
					begin
						UPDATE Evento SET
						[Eve_inicio]=@Eve_inicio, [Eve_fin]=@Eve_fin, [Eve_descripcion]=@Eve_descripcion, [Pro_code]=@Pro_code,
						[Med_code]=@med_code, [Cis_code]=@Cis_code, [Cat_codigo]=@Cat_codigo, Eve_allDay=@Eve_allDay,
						Tie_codigo=@Tie_codigo, Eve_nov=(select ti.Tie_nov from TipoEvento ti where ti.Tie_codigo=@Tie_codigo)
						WHERE Eve_codigo = @Eve_codigo
					end
					else
					begin
						UPDATE Evento SET
						[Eve_inicio]=@Eve_inicio, [Eve_fin]=@Eve_fin, [Eve_descripcion]=@Eve_descripcion, [Pro_code]=@Pro_code,
						[Med_code]=@med_code, [Cis_code]=@Cis_code, [Cat_codigo]=@Cat_codigo, Eve_allDay=@Eve_allDay,
						Con_codigo=@Con_codigo, Tie_codigo=@Tie_codigo, Eve_nov=(select ti.Tie_nov from TipoEvento ti where ti.Tie_codigo=@Tie_codigo)
						WHERE Eve_codigo = @Eve_codigo	
					end

					

					if isnull(@Eve_codigoNov,0)>0 update Evento set Eve_codigoNov=@Eve_codigo where Eve_codigo=@Eve_codigoNov

					--COMENTADO IVON
					/*-- verificando si se registra el doctor   
					if not exists(select cm.cod_med from CASE_INFORMATION_SHEET_BODY_MED cm where cm.cod_med = @cod_med and status = '0' and cm.cod_cis=@cod_cis)
					begin				
						if not exists(select cm.cod_med from CASE_INFORMATION_SHEET_BODY_MED cm where cm.cod_med = @cod_med and cm.cod_cis=@cod_cis)
							INSERT INTO [dbo].[CASE_INFORMATION_SHEET_BODY_MED] ([cod_cis],[cod_med],[status],[Cisbm_fecha],[Cisbm_procedencia],[cod_user]) VALUES (@cod_cis, @cod_med, '0',GETDATE(),'Calendar_InsertCaseMed desde EditEvento',@cod_user)
						else
							update CASE_INFORMATION_SHEET_BODY_MED set status = '0' where cod_cis = @cod_cis and cod_med = @cod_med
					end*/

					-- Esta accion se ejecuta solo cuando hay un cambio de estado	
					if @Ese_codigo > 0 update Evento set Ese_codigo = @Ese_codigo where Eve_codigo = @Eve_codigo				

					--if (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where Eve_codigo=@Eve_codigo and ETA.Eta_numArchivos>Eta_archivosSubidos and Eta.Eta_vigencia=1)=0 and exists(select ev.Eve_codigo from Evento ev where ev.Eve_codigo=@Eve_codigo and (ev.Eve_nov=0 or ev.Eve_codigoNov is not null))
					if (dbo.Fu_ValidarEstadoCompletado(@Eve_codigo)=0)
						update Evento set Eve_done=1, Ese_codigo=5 where Eve_codigo=@Eve_codigo
					else
					begin
						update Evento set Eve_done=0 where Eve_codigo=@Eve_codigo
						--update Evento set Eve_done=0, Ese_codigo=(case Ese_codigo when 5 then 1 else Ese_codigo end) where Eve_codigo=@Eve_codigo and Ese_codigo=5
					end
				
					if @supervisor_user <> @codUserSupervisor update CaseInformationSheetHead set Cis_caseSupervisor = @supervisor_user where Cis_code = @Cis_code							
					
					
					--20/06/2014--- nurse override (permite que una enfermera pueda registrase en un evento así esté ocupada a la misma fecha y hora 
						if(@reasonOverrideNurse is not null and @reasonOverrideNurse <>'')
						begin
							INSERT INTO [dbo].[EventoNurseOverride]([Eve_codigo],[Pro_code],[Eno_fecha],[Use_Code],[Eno_motivo])
							values (@Eve_codigo, @Pro_code, getdate(), @Use_code, @reasonOverrideNurse)
						end					
								
					commit tran

					-- debloqueando evento		
					update Evento set Eve_bloqueo=0 where Eve_codigo=@Eve_codigo

					-- retornando el resultado de la accion
					select Eve_codigo, Eve_done from Evento where Eve_codigo=@Eve_codigo
				end
				else
					select -1 Eve_codigo, cast(0 as bit) Eve_done
			end
			else  
				select -2 Eve_codigo, cast(0 as bit) Eve_done

			end
			else 
				select -3 Eve_codigo, cast(0 as bit) Eve_done
		end
		else
			select -4 Eve_codigo, cast(0 as bit) Eve_done
	end try
	begin catch
		
		rollback tran
		
		-- debloqueando evento		
		update Evento set Eve_bloqueo=0 where Eve_codigo=@Eve_codigo

		set @e_message = error_message()
		set @e_severity = error_severity()
		set @e_state = error_state()
		raiserror(@e_message, @e_severity, @e_state)

	end catch

End


--==========PROCEDIMIENTO EventoGetByAll ========================
else if @TipoConsulta=2
begin
	Select eve.Eve_codigo,[Eve_inicio],[Eve_fin],[Eve_fecha],[Eve_descripcion],eve.Pro_code,[Med_code],eve.Cis_code,eve.Tie_codigo,[Ese_codigo]
      ,[Eve_codigoNext],eve.Use_Code,[Eve_codExchange],[Eve_descartar],[Con_codigo],[Eve_done],[Eve_override],[Eve_allDay],[Mot_codigo]
      ,[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], 
	  (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status], Tie_nombre, Eve_codExchangeSec from Evento eve 
	  join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
	  join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo
	  where Eve_vigencia = 1 and Eve_codExchange is not null

End
--==========PROCEDIMIENTO EventoGetByPrimaryKey ===============
else if @TipoConsulta=3
begin

	UPDATE EVENTO
	SET Eve_nov = 0
	WHERE Eve_codigo IN (SELECT eve_codigo FROM EVENTO e WHERE --eve_nov = 0
	(select top 1 eno_nov from EventoNextOffice where Eve_codigo = e.Eve_codigo order by Eno_codigo desc) <> Eve_nov)	


	declare @update bit = 0--determina si el evento cambio a estado completado
	if dbo.Fu_ValidarEstadoCompletado(@Eve_codigo) = 0
	begin
		update Evento set Eve_done=1, Ese_codigo=5 where Eve_codigo=@Eve_codigo	
		set @update = 1
	end
	select tie.Tie_needNurse as Tie_needNurse, pat.Pat_birthday, eve.Cat_codigo, cat.Cat_nombre, cat.Cat_color, con.Con_codigo,con.Con_confirmMed as confirmDoctor ,con.Con_confirmProv as confirmNurse ,	eve.Eve_codigo, eve.Eve_inicio, eve.Eve_fin, eve.Eve_fecha, cas.Cis_accidentDate,
			(dbo.fu_replacecomillas(pat.Pat_firstName) + ' ' + dbo.fu_replacecomillas(pat.Pat_lastName)) patient, tie.Tie_codigo, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_nombre, tie.Tie_programable, 
			tie.Tie_nov, dbo.fu_replacecomillas((med.Med_firstName + ' ' + med.Med_lastName)) medico, med.Med_code, dbo.fu_replacecomillas(med.Med_address) address_med,
			dbo.fu_replacecomillas((pro.Pro_firstName + ' ' + pro.Pro_lastName)) nurse, pro.Pro_code,
			dbo.fu_replacecomillas((ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName)) supervisor, cas.Cis_caseSupervisor, est.Ese_codigo, 
			est.Ese_abreviatura, est.Ese_nombre, dbo.fu_replacecomillas(pat.Pat_address)address_pat, 
			(case cas.Cis_status when 1 then 'Open' else 'Close' end) [status],
			cas.Cis_code, cas.Cis_caseCode, eve.Eve_codExchange, eve.Eve_codigoNext, eve.Use_Code, 
			dbo.fu_replacecomillas(eve.Eve_descripcion)Eve_descripcion, dbo.fu_replacecomillas(cas.Cis_Injury)Injury,
			
			eve.Eve_codigoNov, eve.Eve_nov,
			(case when isnull(eve.Eve_codigoNov,0)>0 then cast(1 as bit) else cast(0 as bit) end) NextOfficeVisit,
			(select dbo.Fu_ObtenerDateTime(ex.Eve_inicio) + ', ' + patx.Pat_lastName + ' ' + patx.Pat_lastName from Evento ex join CaseInformationSheetHead casx on casx.Cis_code=ex.Cis_code join PATIENT patx on patx.Pat_code=casx.Pat_code where ex.Eve_codigo=eve.Eve_codigoNov) EventNextOffice,
			(select top 1 ex.Eve_codigo from Evento ex where ex.Eve_codigoNov=eve.Eve_codigo order by ex.Eve_codigo desc) Eve_codigoPov,
			(select top 1 dbo.Fu_ObtenerDateTime(ex.Eve_inicio) + ', ' + patx.Pat_firstName + ' ' + patx.Pat_lastName from Evento ex join CaseInformationSheetHead casx on casx.Cis_code=ex.Cis_code join PATIENT patx on patx.Pat_code=casx.Pat_code where ex.Eve_codigoNov=eve.Eve_codigo order by ex.Eve_codigo desc) EventPreviousOffice,
			(select top 1 dbo.Fu_ObtenerDateTime(eno.Eno_fecha) + (' ' + usx.Use_firstName + ' ' + usx.Use_lastName + ' ') + (case eno.Eno_nov when 0 then 'stopped' else 'started' end) + ' NOV. ' + rtrim(eno.Eno_descripcion) from EventoNextOffice eno join [User] usx on usx.Use_Code=eno.Use_Code where eno.Eve_codigo=eve.Eve_codigo order by eno.Eno_codigo desc) lastActionNov,

			cas.Cis_Longshore, cas.Cis_companyStatus, dbo.fu_replacecomillas(cas.Cis_other) other, dbo.fu_replacecomillas(cas.Cis_otherText) Other_text,  
			ltrim(rtrim(cas.Cis_translation)) traslation,
			ltrim(rtrim(cas.Cis_translationCompany)) traslation_company,ltrim(rtrim(cas.Cis_transportation)) transportation,ltrim(rtrim(cas.Cis_transportationCompany)) trasportation_company, ltrim(rtrim(cas.Cis_physicalTherapy)) Physical_therapy,
			ltrim(rtrim(cas.Cis_physicalTherapyCompany)) Physical_therapy_company,ltrim(rtrim(cas.Cis_permisionContact)) Permision_Contact,ltrim(rtrim(cas.Cis_permisionContactCompany)) Permision_Contact_company,dbo.fu_replacecomillas(ltrim(rtrim(cas.Cis_comment))) comentario,
		    dbo.fu_replacecomillas(mce.Mot_descripcion) Mot_descripcion, mce.Mot_codigo, (select count(eh.Evh_codigo) from EventoHistorial eh where eh.Eve_codigo = eve.Eve_codigo and Evh_usado = 0) Cantidad, cast (cas.Cis_status as char(1)) as CasoEstado, cas.Cis_actual, eve.Eve_done, eve.Eve_override,
			case when MceMed.Mot_codigo is null then '' else (convert(varchar(20),MceMed.Mot_fechaSistema,22) + ' (' + (select UsX.Use_firstName + ' ' + UsX.Use_lastName from [User] UsX where UsX.Use_Code = MceMed.Use_Code) + '). ' + MceMed.Mot_descripcion) end DescriptionDoctor,
			case when MceProv.Mot_codigo is null then '' else (convert(varchar(20),MceProv.Mot_fechaSistema,22) + ' (' + (select UsX.Use_firstName + ' ' + UsX.Use_lastName from [User] UsX where UsX.Use_Code = MceProv.Use_Code) + '). ' + MceProv.Mot_descripcion) end DescriptionNurse,
			(case when (cas.Cis_status = 0 and cas.Cis_actual = 1 and eve.Eve_override=0 and eve.Ese_codigo=1 and eve.Eve_done=0) then cast(1 as bit) else cast(0 as bit) end) as showOverride,
			('Override Date : ' + convert(char(10),(convert(smalldatetime,Eo.Eno_fecha,101)),101) + ', Coment: ' + Eo.Eno_motivo + ', User : ' + U.Use_userName) as  overrideNurse,
			dbo.Fu_ObtenerMotivosCambioEstado(eve.Eve_codigo,0) motivosCambioEstado, @update as EventoCompletado,
			ins.Ins_name as insurer, adj.Adj_firstName + ' ' + adj.Adj_lastName as adjuster, Eve_codExchangeSec, cas.Cis_contact1, cas.Cis_contact2
	from Evento eve
	left join Categoria cat on eve.Cat_codigo = cat.Cat_codigo

	join MEDICAL med on eve.Med_code = med.Med_code
	left join PROVIDER pro on eve.Pro_code = pro.Pro_code
	join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo
	join Confirmacion con on con.Con_codigo = eve.Con_codigo
	join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
	join PATIENT pat on pat.Pat_code = cas.Pat_code
	join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor
	join Insurer ins on ins.Ins_code = cas.Ins_code
	join ADJUSTER adj on adj.Adj_code = cas.Adj_code
																	
	join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo
	left join motivocambioestado MceMed on MceMed.Mot_codigo=Con.Mot_codigoMed
	left join motivocambioestado MceProv on MceProv.Mot_codigo=Con.Mot_codigoProv
	left join MotivoCambioEstado mce on mce.Mot_codigo = eve.Mot_codigo
	left join (select top 1 *  from EventoNurseOverride where eve_codigo = @Eve_codigo order by eno_codigo desc ) eo on eo.Pro_code = eve.Pro_code
	left join [User] u on u.Use_Code = eo.Use_Code	
	WHERE eve.Eve_codigo = @Eve_codigo and eve.Eve_vigencia=1
End
--cambio arriba
--===========================================================================================
--==========PROCEDIMIENTO EventoInsert ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=4
Begin
	begin try
		begin tran
		if(@Pro_code=0) set @pro_code=null

		if (@Eve_fin > @Eve_inicio)
		begin
			set @workDayStart = (select dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), cast(('2012-01-01 ' + con.Cof_valor) as datetime), 8)) from Configuracion con where con.Cof_identificador = 'dayStart')
			set @workDayEnd = (select dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), cast(('2012-01-01 ' + con.Cof_valor) as datetime), 8)) from Configuracion con where con.Cof_identificador = 'dayEnd')
			
			set @timeStart = dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), @Eve_inicio, 8))
			set @timeEnd = dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), @Eve_fin, 8))
			
			if (@timeStart>=@workDayStart and @timeStart<=@workDayEnd) and (@timeEnd>=@workDayStart and @timeEnd<=@workDayEnd)
			begin
				
				if not exists(select Eve_codigo from Evento where Eve_inicio=@Eve_inicio and Eve_fin=@Eve_fin and Cis_code=@Cis_code and Tie_codigo=@Tie_codigo and Med_code=@med_code and eve_vigencia = 1)
				begin
					set @codUserSupervisor = (select Cis_caseSupervisor from CaseInformationSheetHead where Cis_code = @Cis_code)
					set @codUserNurse = (select Use_Code from PROVIDER where Pro_code = @Pro_code)

					if ( ((select count(*) from CalendarioUsuario cu 
						where cu.Cau_vigencia = 1 and @codUserNurse=cu.Use_Code and
								(isnull(cu.Eve_codigo,0)=0 or (select count(*) from Evento ev where ev.Eve_codigo=cu.Eve_codigo and ev.Ese_codigo in (1,5))>0) and
								( (@Eve_inicio between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or (@Eve_fin between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or
								(dateadd(mi,1,cu.Cau_inicio) between @Eve_inicio and @Eve_fin)
								)
						) = 0 ) or ((@reasonOverrideNurse is not null) and @reasonOverrideNurse <>''))
						
						
						
						/*verifica fechas de nurse*/ --and
						/*(select count(*) from CalendarioUsuario cu 
						join TipoEvento te on cu.Tie_codigo =  te.Tie_codigo
						where cu.Cau_vigencia = 1 and te.Tie_programable=0 and @supervisor_user=cu.cod_user and
								(isnull(cu.Eve_codigo,0)=0 or (select count(*) from Evento ev where ev.Eve_codigo=cu.Eve_codigo and ev.Ese_codigo in (1,5))>0) and
								( (@Eve_inicio between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or (@Eve_fin between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or
								(dateadd(mi,1,cu.Cau_inicio) between @Eve_inicio and @Eve_fin)
								)
						) = 0 --verifica fechas de supervisor*/
					begin

						-- registrando motivos de confirmacion
						if @confirmDoctor = 1
						begin
							insert into MotivoCambioEstado (Mot_descripcion, Mot_vigencia, Mot_fechaSistema, Use_Code) values (@reasonDoctor, 1, getdate(), @Use_code)
							set @Mot_codigoMed = @@IDENTITY
						end
						else set @Mot_codigoMed = null

						if @confirmNurse = 1
						begin
							insert into MotivoCambioEstado (Mot_descripcion, Mot_vigencia, Mot_fechaSistema, Use_Code) values (@reasonNurse, 1, getdate(), @Use_code)
							set @Mot_codigoPro = @@IDENTITY
						end
						else set @Mot_codigoPro = null

						--Registramos los registros de confirmacion 
						INSERT INTO [dbo].[Confirmacion]([Pro_code],[Med_code],[Con_fecha],[Con_vigencia],[Use_Code],[Con_confirmMed],[Con_confirmProv],Mot_codigoMed,Mot_codigoProv,Use_code_old)
						VALUES(@Pro_code, @med_code,GETDATE(),1,@Use_code,@confirmDoctor,@confirmNurse,@Mot_codigoMed,@Mot_codigoPro,null)
						SET @Con_codigo = @@IDENTITY
				
						--Registramos un nuevo evento con el nuevo registro de confirmacion(Con_codigo)
						INSERT INTO [dbo].[Evento]
						(
							[Eve_inicio],[Eve_fin],[Eve_fecha],[Eve_descripcion],[Pro_code],[Med_code],[Cis_code],[Cis_code_old],[Tie_codigo],[Ese_codigo],[Eve_codigoNext],
							[Use_Code],[Eve_codExchange],[Eve_descartar],[Con_codigo],[eve_done],[eve_override],[Eve_allDay],[Cat_codigo],Eve_nov, Eve_codExchangeSec, Med_code_old,Use_code_old
						)
						select @Eve_inicio,@Eve_fin,getdate(),@Eve_descripcion,@Pro_code,@med_code,@Cis_code,@cis_code,te.Tie_codigo,1,@Eve_codigoNext,
								@Use_code,@Eve_codExchange,0,@Con_codigo,0,0,@Eve_allDay,@Cat_codigo,te.Tie_nov, @Eve_codExchangeSec, null, null
						from TipoEvento te where te.Tie_codigo=@Tie_codigo

						set @Eve_codigo = @@IDENTITY

						if isnull(@Eve_codigoNov,0)>0 update Evento set Eve_codigoNov=@Eve_codigo where Eve_codigo=@Eve_codigoNov

						--Registrar los archivos necesarios que se utilizaran para este evento
						INSERT INTO [dbo].[EventoTipoArchivo]([Tia_codigo] ,[Eve_codigo],[Eta_numArchivos],[Eta_vigencia],[Eta_archivosSubidos])
						select tae.Tia_codigo, @Eve_codigo, ta.Tia_numArchivos, 1, 0
						from TipoArchivoEvento tae
						join TipoArchivo ta on tae.Tia_codigo = ta.Tia_codigo
						where tae.Tie_codigo=@Tie_codigo

						-- registrando el nuevo calendario del evento
						/*INSERT INTO [dbo].[CalendarioUsuario]([cod_user],[Cau_inicio],[Cau_fin],[Cau_descripcion],[Cau_vigencia],[Cau_mostrarMV],Tie_codigo,Eve_codigo)
						VALUES (@codUserSupervisor,@Eve_inicio,@Eve_fin,'',1,0,@Tie_codigo,@Eve_codigo)
						set @Cau_codigo = @@IDENTITY*/

						if (@Tie_needNurse=1) 
						begin
							INSERT INTO [dbo].[CalendarioUsuario]([Use_Code],[Cau_inicio],[Cau_fin],[Cau_descripcion],[Cau_vigencia],[Cau_mostrarMV],Tie_codigo,Eve_codigo)
							VALUES (@codUserNurse,@Eve_inicio,@Eve_fin,'',1,0,@Tie_codigo,@Eve_codigo)
							set @Cau_codigo = @@IDENTITY
						end
						
						--COMENTADO IVON
						/*-- verificando si se registra el doctor
						if (select count(*) from CASE_INFORMATION_SHEET_BODY_MED cm where cm.cod_med = @cod_med and status = '0' and cm.cod_cis=@cod_cis) = 0
						begin
			
							if (select count(*) from CASE_INFORMATION_SHEET_BODY_MED cm where cm.cod_med = @cod_med and cm.cod_cis=@cod_cis) = 0
								INSERT INTO [dbo].[CASE_INFORMATION_SHEET_BODY_MED] ([cod_cis],[cod_med],[status],[Cisbm_fecha],[Cisbm_procedencia],[cod_user]) VALUES (@cod_cis, @cod_med, '0',GETDATE(),'Calendar_InsertCaseMed desde NewEvento',@cod_user)
							else
								update CASE_INFORMATION_SHEET_BODY_MED set status = '0' where cod_cis = @cod_cis and cod_med = @cod_med
						end*/

						-- verificando si el supervisor ha cambiado
						if @supervisor_user <> @codUserSupervisor update CaseInformationSheetHead set Cis_caseSupervisor = @supervisor_user where Cis_code = @Cis_code

						--20/06/2014--- nurse override (permite que una enfermera pueda registrase en un evento así esté ocupada a la misma fecha y hora 
						if(@reasonOverrideNurse is not null and @reasonOverrideNurse <>'')
						begin
							INSERT INTO [dbo].[EventoNurseOverride]([Eve_codigo],[Pro_code],[Eno_fecha],[Use_Code],[Eno_motivo])
							values (@Eve_codigo, @Pro_code, getdate(), @Use_code, @reasonOverrideNurse)
						end	
						

						select @Eve_codigo Eve_codigo
					end
					else
						select 0 Eve_codigo -- no existe disponibilidad para enfermera o para supervisor
				end
				else
					select -3 Eve_codigo -- duplicate event
			end
			else
			begin
				select -2 Eve_codigo -- las fechas no se encuentran en el horario de trabajo configurado
			end
		end
		else			
			select -1 Eve_codigo -- las fecha fin debe ser mayor que la fecha inicio

	commit tran

	end try
	begin catch

		rollback tran
		set @e_message = error_message()
		set @e_severity = error_severity()
		set @e_state = error_state()
		raiserror(@e_message, @e_severity, @e_state)

	end catch

End

--===========================================================================================
--==========PROCEDIMIENTO EventoDelete ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=5
begin
	--Delete from Evento
	--WHERE  Eve_codigo = @Eve_codigo

	-- Ray - 20/10/2015
	update Evento
	set Eve_vigencia = 0
	WHERE  Eve_codigo = @Eve_codigo

end
-- listado de eventos en detail view
else if @TipoConsulta=6
begin
	
	if @Cis_code!=0 set @patient = ''

	Select eve.Cat_codigo, dbo.fu_replacecomillas(cat.Cat_nombre) as cat_nombre, cat.Cat_color ,eve.Eve_allDay, eve.Eve_override, con.Con_codigo,con.Con_confirmMed as confirmDoctor ,con.Con_confirmProv as confirmNurse ,eve.Eve_codigo, eve.Eve_inicio, eve.Eve_fin, eve.Eve_fecha, cas.Cis_accidentDate as accident_date, 
	dbo.fu_replacecomillas((pat.Pat_firstName + ' ' + pat.Pat_lastName)) patient, tie.Tie_codigo, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_nombre, tie.Tie_programable,
		   dbo.fu_replacecomillas((med.Med_firstName + ' ' + med.Med_lastName)) as medico, med.Med_code, dbo.fu_replacecomillas(med.Med_address)address_med, (pro.Pro_firstName + ' ' + pro.Pro_lastName) nurse, pro.Pro_code,
		   dbo.fu_replacecomillas((ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName)) as supervisor, est.Ese_codigo, est.Ese_abreviatura, est.Ese_nombre, dbo.fu_replacecomillas(pat.Pat_address) as address_pat, 
		   (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status], cas.Cis_code, cas.Cis_caseCode,
		   eve.Eve_codExchange, eve.Eve_codigoNext, eve.Use_Code, dbo.fu_replacecomillas(eve.Eve_descripcion) Eve_descripcion,
		   (select count(*) from EventoHistorial eh where eh.Eve_codigo = eve.Eve_codigo and Evh_usado = 0) Cantidad,
		   (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where ETA.Eve_codigo=eve.Eve_codigo and ETA.Eta_numArchivos>Eta_archivosSubidos and ETA.Eta_vigencia = 1) CantidadFalta,
		   cast(cas.Cis_status as varchar) as CasoEstado, cas.Cis_actual, Eve_done, eve.Eve_codExchangeSec	   
	from Evento eve
	left join Categoria cat on eve.Cat_codigo = cat.Cat_codigo
	join MEDICAL med on eve.Med_code = med.Med_code and rtrim(ltrim(med.Med_firstName + ' ' + med.Med_lastName)) like @doctor+'%'
	left join PROVIDER pro on eve.Pro_code = pro.Pro_code	
	join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code and (@Cis_code=0 or cas.Cis_code=@Cis_code)
	join PATIENT pat on pat.Pat_code = cas.Pat_code and rtrim(ltrim(pat.Pat_lastName)) like @patient +'%'
	join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor
	join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo
	join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo
	join Confirmacion con on con.Con_codigo = eve.Con_codigo
	where eve.eve_vigencia=1
	order by eve.Eve_inicio

end
-- reprogramar evento
else if @TipoConsulta=7
Begin
		
	Begin try
	  begin tran
		set @workDayStart = (select dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), cast(('2012-01-01 ' + con.Cof_valor) as datetime), 8)) from Configuracion con where con.Cof_identificador = 'dayStart')
		set @workDayEnd = (select dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), cast(('2012-01-01 ' + con.Cof_valor) as datetime), 8)) from Configuracion con where con.Cof_identificador = 'dayEnd')
			
		set @timeStart = dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), @Eve_inicio, 8))
		set @timeEnd = dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), @Eve_fin, 8))

		if (@timeStart>=@workDayStart and @timeStart<=@workDayEnd) and (@timeEnd>=@workDayStart and @timeEnd<=@workDayEnd)
		begin
			
			if not exists(select Eve_codigo from Evento where Eve_inicio=@Eve_inicio and Eve_fin=@Eve_fin and Cis_code=@Cis_code and Tie_codigo=@Tie_codigo and Med_code=@med_code and eve_vigencia=1)
			begin

				set @codUserSupervisor = (select Cis_caseSupervisor from CaseInformationSheetHead where Cis_code = @Cis_code) 
				set @codUserNurse = (select Use_Code from PROVIDER where Pro_code = @Pro_code)
			
				if (select count(*) from CalendarioUsuario cu 
					where (@Eve_codigo=0 or isnull(cu.Eve_codigo,0) <> @Eve_codigo) and cu.Cau_vigencia = 1 and @codUserNurse=cu.Use_Code and
						  (isnull(cu.Eve_codigo,0)=0 or (select count(*) from Evento ev where ev.Eve_codigo=cu.Eve_codigo and eve_vigencia=1 and ev.Ese_codigo in (1,5))>0) and
						  ( (@Eve_inicio between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or (@Eve_fin between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or
							(dateadd(mi,1,cu.Cau_inicio) between @Eve_inicio and @Eve_fin)
						  )
					) = 0 /*verifica fechas de nurse*/ --and
					/*(select count(*) from CalendarioUsuario cu
					join TipoEvento te on cu.Tie_codigo =  te.Tie_codigo
					where (@Eve_codigo=0 or isnull(cu.Eve_codigo,0) <> @Eve_codigo) and te.Tie_programable=0 and cu.Cau_vigencia = 1 and @supervisor_user=cu.cod_user and
						  (isnull(cu.Eve_codigo,0)=0 or (select count(*) from Evento ev where ev.Eve_codigo=cu.Eve_codigo and ev.Ese_codigo in (1,5))>0) and
						  ( (@Eve_inicio between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or (@Eve_fin between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or
							(dateadd(mi,1,cu.Cau_inicio) between @Eve_inicio and @Eve_fin)
						  )
					) = 0 --verifica fechas de supervisor*/	
				begin					
		
					-- registrar confirmacion
					INSERT INTO [dbo].[Confirmacion](Pro_code,Med_code,Con_fecha,Con_vigencia,Use_Code,Con_confirmMed,Con_confirmProv)
					values (@Pro_code,@med_code,GETDATE(),1,@Use_code,@confirmDoctor,@confirmNurse)
					SET @Con_codigo= @@IDENTITY

					-- registrar motivo de reprogramacion
					insert into MotivoCambioEstado (Mot_descripcion, Mot_vigencia, Mot_fechaSistema, Use_Code) values (@Mot_descripcion, 1, getdate(), @Use_code)
					set @Mot_codigo = @@IDENTITY

					-- registrar nuevo evento
					INSERT INTO [dbo].[Evento]
					(
						[Eve_inicio],
						[Eve_fin],
						[Eve_fecha],
						[Eve_descripcion],
						[Pro_code],
						[Med_code],
						[Cis_code],
						[Tie_codigo],
						[Ese_codigo],
						[Eve_codigoNext],
						[Use_Code],
						[Eve_codExchange],
						[Eve_descartar],
						[Con_codigo],
						[Eve_override],
						Eve_allDay,
						Mot_codigo,
						Evh_undoChangeUser,
						[Cat_codigo],
						Eve_nov, 
						Eve_codExchangeSec
					)
					select @Eve_inicio, @Eve_fin, getdate(), @Eve_descripcion, (case when len(@Pro_code)=0 then null else @Pro_code end), @med_code, @Cis_code, @Tie_codigo, 1, @Eve_codigoNext,
						   @Use_code, @Eve_codExchange, 0, @Con_codigo, 0, @Eve_allDay, null, null, @Cat_codigo, ti.Tie_nov, @Eve_codExchangeSec
					from TipoEvento ti
					where ti.Tie_codigo=@Tie_codigo
								
					SET @Eve_codigoNext = @@IDENTITY
			
					--Registrar los archivos necesarios que se utilizaran para este evento
					INSERT INTO [dbo].[EventoTipoArchivo]([Tia_codigo] ,[Eve_codigo],[Eta_numArchivos],[Eta_vigencia],[Eta_archivosSubidos])			
					select tae.Tia_codigo, @Eve_codigoNext, ta.Tia_numArchivos, 1, 0
					from TipoArchivoEvento tae
					join TipoArchivo ta on tae.Tia_codigo = ta.Tia_codigo
					where tae.Tie_codigo=@Tie_codigo
					union
					select eta.Tia_codigo, @Eve_codigoNext, eta.Eta_numArchivos, 1, 0--eta.Eta_archivosSubidos
					from EventoTipoArchivo eta
					where eta.Eve_codigo = @Eve_codigo and 
						  eta.Tia_codigo not in (select tae.Tia_codigo from TipoArchivoEvento tae join TipoArchivo ta on tae.Tia_codigo = ta.Tia_codigo where tae.Tie_codigo=@Tie_codigo) and eta.Eta_archivosSubidos>0

					-- registrar confirmacion del evento reprogramado
					--if (@AconfirmDoctor = 1 and @AconfirmNurse = 1) or (@AconfirmDoctor = 0 and @AconfirmNurse = 0)
					--begin
		
					--	INSERT INTO [dbo].[Confirmacion]
					--	([cod_pro],[cod_med],[Con_fecha],[Con_vigencia],[cod_user],Con_confirmMed,Con_confirmProv)
					--	VALUES
					--	(@cod_pro,@cod_med, getdate(), 1, @cod_user, @AconfirmDoctor, @AconfirmNurse)
					--	SET @Con_codigo = @@IDENTITY
					--	update Evento set Con_codigo = @Con_codigo where Eve_codigo = @Eve_codigo		
					--end	
					--else
					--begin
					--	if (@AconfirmDoctor=1)		
					--	begin
					--		INSERT INTO [dbo].[Confirmacion]
					--		([cod_pro],[cod_med],[Con_fecha],[Con_vigencia],[cod_user],Con_confirmMed)
					--		VALUES
					--		(@cod_pro,@cod_med, getdate(), 1, @cod_user, @AconfirmDoctor)
					--		SET @Con_codigo = @@IDENTITY
					--		update Evento set Con_codigo = @Con_codigo where Eve_codigo = @Eve_codigo		
					--	end
					--	if (@AconfirmNurse=1)
					--	begin
					--		INSERT INTO [dbo].[Confirmacion]
					--		([cod_pro],[cod_med],[Con_fecha],[Con_vigencia],[cod_user],Con_confirmProv)
					--		VALUES
					--		(@cod_pro,@cod_med, getdate(), 1, @cod_user, @AconfirmNurse)		
					--		SET @Con_codigo = @@IDENTITY
					--		update Evento set Con_codigo = @Con_codigo where Eve_codigo = @Eve_codigo		
					--	end
					--end

					-- registrando en el historial de evento
					INSERT INTO [dbo].[EventoHistorial]
					([Eve_codigo],[Eve_inicio],[Eve_fin],[Eve_fecha],[Eve_descripcion],[Pro_code],[Med_code],[Cis_code],[Tie_codigo],[Ese_codigo],[Eve_codigoNext],[Evh_fecha],[Use_Code],[Eve_codExchange],[Eve_descartar],[Con_codigo],Mot_codigo,
					[Eve_done],[Eve_override],[Eve_allDay],[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], Eve_codExchangeSec)
					select e.Eve_codigo, e.Eve_inicio, e.Eve_fin, e.Eve_fecha, e.Eve_descripcion, e.Pro_code, e.Med_code, e.Cis_code, e.Tie_codigo, e.Ese_codigo, e.Eve_codigoNext, getdate(), @Use_code, e.Eve_codExchange, e.Eve_descartar,e.Con_codigo,Mot_codigo,
					[Eve_done],[Eve_override],[Eve_allDay],[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], [Eve_codExchangeSec]
					from Evento e
					where e.Eve_codigo = @Eve_codigo

					-- actualizar evento reprogramdo				
					update Evento set Ese_codigo = 3, Eve_codigoNov = @Eve_codigoNext, Mot_codigo=@Mot_codigo,Eve_nov=1 where Eve_codigo = @Eve_codigo

					--registrar un nuevo nextofficevisit
					--insert into EventoNextOffice(Eno_descripcion, Eno_vigencia, Eno_fecha, cod_user, Eve_codigo, Eno_nov)
					--values('C+R', 1, getdate(), @cod_user, @Eve_codigo, 0)
					
			
					/*-- registrando el nuevo calendario del evento
					INSERT INTO [dbo].[CalendarioUsuario]([cod_user],[Cau_inicio],[Cau_fin],[Cau_descripcion],[Cau_vigencia],[Cau_mostrarMV],Tie_codigo,Eve_codigo)
					VALUES (@codUserSupervisor,@Eve_inicio,@Eve_fin,'',1,0,@Tie_codigo,@Eve_codigoNext)
					set @Cau_codigo = @@IDENTITY*/

					/*
					if(dbo.Fu_ValidarEstadoCompletado(@Eve_codigo)=0)
					begin
						update Evento set Eve_done=1, Ese_codigo=5 where Eve_codigo=@Eve_codigo		
					end
					else
					begin
						update Evento set Eve_done=0, Ese_codigo=1 where Eve_codigo=@Eve_codigo
					end
					*/
					

					-- registrando el nuevo calendario del evento
					if len(@Pro_code)>0
					begin
						INSERT INTO [dbo].[CalendarioUsuario]([Use_Code],[Cau_inicio],[Cau_fin],[Cau_descripcion],[Cau_vigencia],[Cau_mostrarMV],Tie_codigo,Eve_codigo)
						VALUES (@codUserNurse,@Eve_inicio,@Eve_fin,'',1,0,@Tie_codigo,@Eve_codigoNext)
						set @Cau_codigo = @@IDENTITY
					end

					if @codUserSupervisor <> @supervisor_user update CaseInformationSheetHead set Cis_caseSupervisor = @supervisor_user where Cis_code = @Cis_code

					

					-- obtener codigo nuevo
					select @Eve_codigoNext codigoNuevo
				end
				else
					select -1 codigoNuevo
			end
			else
				select -2 codigoNuevo
		end
		else
			select -3 codigoNuevo

		commit tran

	end try
	begin catch
		
		rollback tran
		set @e_message = error_message()
		set @e_severity = error_severity()
		set @e_state = error_state()
		raiserror(@e_message, @e_severity, @e_state)

	end catch

end
else if @TipoConsulta=8
Begin

	---actualizar eventos activos que deben estar en completado 
	declare @table table
						(
						id int identity,
						eve_codigo int
						)


	insert into @table (eve_codigo)
	select eve_codigo
	from Evento y 
	where Ese_codigo=1 and Eve_inicio < getdate()
	and exists(select ev.Eve_codigo from Evento ev where ev.Eve_codigo=y.Eve_codigo and (ev.Eve_nov=0 or ev.Eve_codigoNov is not null)) 
	and (select COUNT(*) from EventoTipoArchivo ETA where Eve_codigo=y.Eve_codigo and Eta_vigencia = 1 and ETA.Eta_numArchivos>Eta_archivosSubidos)  = 0
	and Eve_vigencia = 1
	order by Eve_inicio desc

	update Evento set Eve_done=1, Ese_codigo=5 where Eve_codigo in (select Eve_codigo from @table)
	----------------------------------------------------------------------------------------------------
	

	declare @tbEvents table(
		--Id int identity(1,1) primary key,
		Eve_codigo int,
		Eve_inicio datetime,
		Ese_abreviatura varchar(10),
		Ese_nombre varchar(150),		
		Tie_nombre varchar(150),
		Use_Code int,
		accident_date smalldatetime,
		patient varchar(400),		
		medico varchar(400),
		confirmDoctor bit,		
		nurse varchar(400),
		Pro_code int,
		confirmNurse bit,
		supervisor varchar(400),
		Ret_codigo int,
		Rec_codigo int,
		Rec_tipo bit,
		Rec_expira bit,
		Rec_fechaExpiracion datetime,
		Rec_every bit,
		Rec_everydays smallint,
		Rec_repetir bit,
		Rec_repetirCada tinyint,
		Rec_repetirDuracion tinyint,
		Rec_fechaInicio datetime,
		Rec_ultimaAparicion datetime,
		Rec_nextAparicion datetime,
		Rec_descripcion text,
		Users varchar(400)
	)

	insert into @tbEvents (Eve_codigo, Eve_inicio, Ese_abreviatura, Ese_nombre, Tie_nombre, Use_Code, 
						   accident_date, patient, medico, confirmDoctor, nurse, Pro_code, confirmNurse, supervisor, Ret_codigo, Rec_codigo, Rec_tipo, Rec_expira, Rec_fechaExpiracion,
						   Rec_every, Rec_everydays, Rec_repetir, Rec_repetirCada, Rec_repetirDuracion, Rec_fechaInicio, Rec_ultimaAparicion, Rec_nextAparicion, Rec_descripcion, Users)
	select e.Eve_codigo, e.Eve_inicio, ee.Ese_abreviatura, ee.Ese_nombre, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_nombre, e.Use_Code, 
		   cas.Cis_accidentDate, dbo.fu_replacecomillas((pat.Pat_FirstName + ' ' + pat.Pat_lastName)) patient,
		   dbo.fu_replacecomillas((med.Med_firstName + ' ' + med.Med_lastName)) medico, con.Con_confirmMed confirmDoctor,
		   dbo.fu_replacecomillas((pro.Pro_firstName + ' ' + pro.Pro_lastName)) nurse, pro.Pro_code, con.Con_confirmProv confirmNurse,
		   dbo.fu_replacecomillas((ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName)) supervisor, re.Ret_codigo, re.Rec_codigo, re.Rec_tipo, re.Rec_expira, re.Rec_fechaExpiracion, re.Rec_every, re.Rec_everydays,
		   re.Rec_repetir, re.Rec_repetirCada, re.Rec_repetirDuracion, re.Rec_fechaInicio, re.Rec_ultimaAparicion, re.Rec_nextAparicion, re.Rec_descripcion,
		   dbo.Fu_ObtenerUsersInReminder(rt.Ret_codigo)
	from Evento e
	join RecordatorioTrigger rt on rt.Eve_codigo = e.Eve_codigo and rt.Ret_vigencia=1
	join Recordatorio re on rt.Ret_codigo = re.Ret_codigo and re.Rec_vigencia=1

	join MEDICAL med on e.Med_code = med.Med_code
	left join PROVIDER pro on e.Pro_code = pro.Pro_code

	inner join EstadoEvento ee on e.Ese_codigo = ee.Ese_codigo

	join Confirmacion con on con.Con_codigo = e.Con_codigo
	join CaseInformationSheetHead cas on e.Cis_code = cas.Cis_code
	join PATIENT pat on pat.Pat_code = cas.Pat_code

	join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor
	join TipoEvento tie on tie.Tie_codigo = e.Tie_codigo
	where e.Eve_descartar=0 and 
		  e.eve_vigencia=1 and 
		  (ltrim(rtrim(@Use_code))='' or (select count(ru.Ret_codigo) from RecordatorioUsuario ru where ru.Ret_codigo=rt.Ret_codigo and ru.Use_Code=@Use_code)>0)

	update Recordatorio set Rec_ultimaAparicion = getdate()
	where Rec_codigo in (select tb.Rec_codigo from @tbEvents tb
						 where tb.Rec_repetir=1 and datediff(MILLISECOND,getdate(),dateadd(day,tb.Rec_repetirDuracion,tb.Rec_fechaInicio))>0 and (tb.Rec_nextAparicion between dateadd(MINUTE,-2,getdate()) and dateadd(MINUTE,2,getdate()))
						)  					
	select tb.Eve_codigo, tb.Eve_inicio, tb.Ese_abreviatura, tb.Ese_nombre, tb.Tie_nombre, tb.Use_Code, tb.accident_date, tb.patient, tb.medico, tb.confirmDoctor,
		   tb.nurse, tb.Pro_code, tb.confirmNurse, tb.supervisor, tb.Ret_codigo, tb.Rec_codigo, tb.Rec_tipo, tb.Rec_expira, tb.Rec_fechaExpiracion, tb.Rec_every, tb.Rec_everydays,
		   tb.Rec_repetir, tb.Rec_repetirCada, tb.Rec_repetirDuracion, tb.Rec_fechaInicio, tb.Rec_ultimaAparicion, tb.Rec_nextAparicion, tb.Rec_descripcion, tb.Users
	from @tbEvents tb

end
-- creating the next office visit
else if @TipoConsulta=9
Begin
		
	Begin try

	   if(@Pro_code=0) set @Pro_code=null
		set @workDayStart = (select dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), cast(('2012-01-01 ' + con.Cof_valor) as datetime), 8)) from Configuracion con where con.Cof_identificador = 'dayStart')
		set @workDayEnd = (select dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), cast(('2012-01-01 ' + con.Cof_valor) as datetime), 8)) from Configuracion con where con.Cof_identificador = 'dayEnd')
			
		set @timeStart = dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), @Eve_inicio, 8))
		set @timeEnd = dbo.Fu_ObtenerMinutesFromTime(CONVERT(varchar(8), @Eve_fin, 8))

		if (@timeStart>=@workDayStart and @timeStart<=@workDayEnd) and (@timeEnd>=@workDayStart and @timeEnd<=@workDayEnd)
		begin
			
			if not exists(select Eve_codigo from Evento where Eve_inicio=@Eve_inicio and Eve_fin=@Eve_fin and Cis_code=@Cis_code and Tie_codigo=@Tie_codigo and Med_code=@med_code and eve_vigencia = 1)
			begin
				set @codUserSupervisor = (select Cis_caseSupervisor from CaseInformationSheetHead where Cis_code = @Cis_code) 
				set @codUserNurse = (select Use_Code from PROVIDER where Pro_code = @Pro_code)
				
				if (select count(*) from CalendarioUsuario cu 
					where (@Eve_codigo=0 or isnull(cu.Eve_codigo,0) <> @Eve_codigo) and cu.Cau_vigencia = 1 and @codUserNurse=cu.Use_Code and
						  (isnull(cu.Eve_codigo,0)=0 or (select count(*) from Evento ev where ev.Eve_codigo=cu.Eve_codigo and ev.Ese_codigo in (1,5))>0) and
						  ( (@Eve_inicio between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or (@Eve_fin between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or
							(dateadd(mi,1,cu.Cau_inicio) between @Eve_inicio and @Eve_fin)
						  )
					) = 0 /*verifica fechas de nurse*/ --and
					/*(select count(*) from CalendarioUsuario cu
					join TipoEvento te on cu.Tie_codigo =  te.Tie_codigo
					where (@Eve_codigo=0 or isnull(cu.Eve_codigo,0) <> @Eve_codigo) and te.Tie_programable=0 and cu.Cau_vigencia = 1 and @supervisor_user=cu.cod_user and
						  (isnull(cu.Eve_codigo,0)=0 or (select count(*) from Evento ev where ev.Eve_codigo=cu.Eve_codigo and ev.Ese_codigo in (1,5))>0) and
						  ( (@Eve_inicio between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or (@Eve_fin between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or
							(dateadd(mi,1,cu.Cau_inicio) between @Eve_inicio and @Eve_fin)
						  )
					) = 0 -- verifica fechas de supervisor*/
				begin
				  Begin try
					begin tran
		
					-- registrar confirmacion
					INSERT INTO [dbo].[Confirmacion](Pro_code,Med_code,Con_fecha,Con_vigencia,Use_Code,Con_confirmMed,Con_confirmProv)
					values (@Pro_code,@med_code,GETDATE(),1,@Use_code,@confirmDoctor,@confirmNurse)
					SET @Con_codigo= @@IDENTITY								

					-- registrar nuevo evento
					INSERT INTO [dbo].[Evento]
					(
						[Eve_inicio],
						[Eve_fin],
						[Eve_fecha],
						[Eve_descripcion],
						[Pro_code],
						[Med_code],
						[Cis_code],
						[Tie_codigo],
						[Ese_codigo],
						Eve_codigoNov,
						[Use_Code],
						[Eve_codExchange],
						[Eve_descartar],
						[Con_codigo],
						[Eve_override],
						Eve_allDay,
						Mot_codigo,
						Evh_undoChangeUser,
						[Cat_codigo],
						Eve_nov,
						[Eve_codExchangeSec]
					)
					select @Eve_inicio, @Eve_fin, getdate(), @Eve_descripcion, (case when len(@Pro_code)=0 then null else @Pro_code end), @med_code, @Cis_code, @Tie_codigo, 1, null,
						   @Use_code, @Eve_codExchange, 0, @Con_codigo, 0, @Eve_allDay, null, null, @Cat_codigo, ti.Tie_nov, @Eve_codExchangeSec
					from TipoEvento ti
					where ti.Tie_codigo=@Tie_codigo
				
					SET @Eve_codigoNext=@@IDENTITY

					if isnull(@Eve_codigoNov,0)>0 update Evento set Eve_codigoNov=@Eve_codigoNext where Eve_codigo=@Eve_codigoNov
			
					--Registrar los archivos necesarios que se utilizaran para este evento
					INSERT INTO [dbo].[EventoTipoArchivo]([Tia_codigo] ,[Eve_codigo],[Eta_numArchivos],[Eta_vigencia],[Eta_archivosSubidos])			
					select tae.Tia_codigo, @Eve_codigoNext, ta.Tia_numArchivos, 1, 0
					from TipoArchivoEvento tae
					join TipoArchivo ta on tae.Tia_codigo = ta.Tia_codigo
					where tae.Tie_codigo=@Tie_codigo
					union
					select eta.Tia_codigo, @Eve_codigoNext, eta.Eta_numArchivos, 1, 0--eta.Eta_archivosSubidos
					from EventoTipoArchivo eta
					where eta.Eve_codigo = @Eve_codigoNov and 
						  eta.Tia_codigo not in (select tae.Tia_codigo from TipoArchivoEvento tae join TipoArchivo ta on tae.Tia_codigo = ta.Tia_codigo where tae.Tie_codigo=@Tie_codigo) and eta.Eta_archivosSubidos>0
				
					/*-- registrando el nuevo calendario del evento
					INSERT INTO [dbo].[CalendarioUsuario]([cod_user],[Cau_inicio],[Cau_fin],[Cau_descripcion],[Cau_vigencia],[Cau_mostrarMV],Tie_codigo,Eve_codigo)
					VALUES (@codUserSupervisor,@Eve_inicio,@Eve_fin,'',1,0,@Tie_codigo,@Eve_codigoNext)
					set @Cau_codigo = @@IDENTITY
					*/
					-- registrando el nuevo calendario del evento
					if len(@Pro_code)>0
					begin
						INSERT INTO [dbo].[CalendarioUsuario]([Use_Code],[Cau_inicio],[Cau_fin],[Cau_descripcion],[Cau_vigencia],[Cau_mostrarMV],Tie_codigo,Eve_codigo)
						VALUES (@codUserNurse,@Eve_inicio,@Eve_fin,'',1,0,@Tie_codigo,@Eve_codigoNext)
						set @Cau_codigo = @@IDENTITY
					end

					if @codUserSupervisor <> @supervisor_user update CaseInformationSheetHead set Cis_caseSupervisor = @supervisor_user where Cis_code = @Cis_code

					-- verificar si se debe pasar a completado
					--set @Cantidad = (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where Eve_codigo=@Eve_codigoNov and Eta_vigencia = 1 and ETA.Eta_numArchivos>Eta_archivosSubidos)			
					--if @Cantidad = 0 and exists(select ev.Eve_codigo from Evento ev where ev.Eve_codigo=@Eve_codigoNov and (ev.Eve_nov=0 or ev.Eve_codigoNov is not null))
					if(dbo.Fu_ValidarEstadoCompletado(@Eve_codigoNov)=0)
					begin
						update Evento set Eve_done=1, Ese_codigo=5 where Eve_codigo=@Eve_codigoNov		
					end
					else
					begin
						update Evento set Eve_done=0 where Eve_codigo=@Eve_codigoNov
					end

					commit tran

					-- obtener codigo nuevo				
					select eve.Eve_codigoNov codigoNuevo, eve.Eve_done,
						   (select dbo.Fu_ObtenerDateTime(ex.Eve_inicio) + ', ' + patx.Pat_lastName + ' ' + patx.Pat_lastName from Evento ex join CaseInformationSheetHead casx on casx.Cis_code=ex.Cis_code join PATIENT patx on patx.Pat_code=casx.Pat_code where ex.Eve_codigo=eve.Eve_codigoNov) EventNextOffice
					from Evento eve where eve.Eve_codigo = @Eve_codigoNov

				  end try
				 begin catch
		
					rollback tran
					set @e_message = error_message()
					set @e_severity = error_severity()
					set @e_state = error_state()
					raiserror(@e_message, @e_severity, @e_state)

				 end catch

				end
				else
					select -1 codigoNuevo, '' EventNextOffice, cast(0 as bit) Eve_done
			end
			else
				select -2 codigoNuevo, '' EventNextOffice, cast(0 as bit) Eve_done
		end
		else
			select -3 codigoNuevo, '' EventNextOffice, cast(0 as bit) Eve_done
	
	
		
	end try
	begin catch
		
		--rollback tran
		set @e_message = error_message()
		set @e_severity = error_severity()
		set @e_state = error_state()
		raiserror(@e_message, @e_severity, @e_state)

	end catch

end

--===========================================================================================
--===========================================================================================
--==========PROCEDIMIENTO EventoGetTie_codigo ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=10
Begin
	select dbo.fu_replacecomillas(med.Med_phone) as phone_med,eve.Eve_allDay, eve.Eve_override, con.Con_codigo,con.Con_confirmMed as confirmDoctor ,
	con.Con_confirmProv as confirmNurse ,eve.Eve_codigo, eve.Eve_inicio, eve.Eve_fin, eve.Eve_fecha, cas.Cis_accidentDate, 
	dbo.fu_replacecomillas((pat.Pat_FirstName + ' ' + pat.Pat_lastName)) as patient, dbo.fu_replacecomillas(pat.Pat_address) as address_pat, 
	tie.Tie_codigo, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_nombre, tie.Tie_programable,
			dbo.fu_replacecomillas((med.Med_firstName + ' ' + med.Med_lastName)) as medico, med.Med_code, dbo.fu_replacecomillas(med.Med_address) as address_med, 
			dbo.fu_replacecomillas((pro.Pro_firstName + ' ' + pro.Pro_lastName)) as nurse, pro.Pro_code,
			dbo.fu_replacecomillas((ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName)) as supervisor, est.Ese_codigo, est.Ese_abreviatura, est.Ese_nombre, (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status], cas.Cis_code, cas.Cis_caseCode,

			eve.Eve_codExchange, eve.Eve_codigoNext, eve.Use_Code, dbo.fu_replacecomillas(eve.Eve_descripcion) as eve_descripcion,
			(select count(*) from EventoHistorial eh where eh.Eve_codigo = eve.Eve_codigo and Evh_usado = 0) Cantidad,
			(select COUNT(*) from EventoTipoArchivo ETA where ETA.Eve_codigo=eve.Eve_codigo and ETA.Eta_numArchivos>Eta_archivosSubidos and ETA.Eta_vigencia = 1) CantidadFalta,
			cast(cas.Cis_status as varchar) as CasoEstado, cas.Cis_actual, Eve_done,dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1) documents, eve.Eve_codExchangeSec
	from Evento eve
	join MEDICAL med on eve.Med_code = med.Med_code
	left join PROVIDER pro on eve.Pro_code = pro.Pro_code
	join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo	
	join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code and (len(@Cis_code)=0 or ltrim(rtrim(eve.Cis_code))=@Cis_code)
	join PATIENT pat on pat.Pat_code = cas.Pat_code
	join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor
	join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo and tie.Tie_nov=1 and (len(@eventTypes)=0 or tie.Tie_codigo in (select ti.item from [dbo].[fu_Split](@eventTypes, '*') ti))
	join Confirmacion con on con.Con_codigo = eve.Con_codigo
	where eve.Eve_codigo<>@Eve_codigo and (med.Med_firstName + ' ' + med.Med_lastName + '-' + med.Med_address) like '%'+@doctor+'%' and (pat.Pat_FirstName + ' ' + pat.Pat_lastName) like '%'+@patient+'%' and
	(len(@supervisores)=0 or rtrim(ltrim(cas.Cis_caseSupervisor)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split](@supervisores, '*') su)) and
	(len(@nurses)=0 or pro.Pro_code in (select nu.item from [dbo].[fu_Split](@nurses, '*') nu)) and
	(@confirmDoctorSearch = -1 or @confirmDoctorSearch = con.Con_confirmMed) and
	(@confirmNurseSearch = -1 or @confirmNurseSearch = con.Con_confirmProv) and
	(@phone = '' or rtrim(ltrim(@phone))=rtrim(ltrim(med.Med_phone)) or rtrim(ltrim(@phone))=rtrim(ltrim(med.Med_phoneExt)) or rtrim(ltrim(@phone))=rtrim(ltrim(med.Med_alternatePhone))) and
	( (@Eve_inicio is null or cast(eve.Eve_inicio as date)>=cast(@Eve_inicio as date)) and (@Eve_fin is null or cast(eve.Eve_fin as date)<=cast(@Eve_fin as date)) )
	and eve.eve_vigencia=1
	order by eve.Eve_inicio
end
-- actualizar confirmacion y estado de evento (no reprogramacion)
else if @TipoConsulta=11
Begin
	
	select @Eve_codigoNov=isnull(ev.Eve_codigoNov,0), @Eve_bloqueo=isnull(Eve_bloqueo,0), @ese_codigoy=ev.Ese_codigo from Evento ev 
	where ev.Eve_codigo=@Eve_codigo

	DECLARE @MOTCODIGOMED BIGINT = (SELECT Mot_codigoMed from Confirmacion where con_codigo=(select con_codigo from evento where Eve_codigo=@Eve_codigo))
	
	if @Eve_bloqueo=0
	begin
		-- Esta accion se ejecuta para agregar un registro nuevo en la tabla eventohistorial pero con el nuevo con_codigo(codigo de la tabla confirmacion) actualizado.
		INSERT INTO [dbo].[EventoHistorial]
		([Eve_codigo],[Eve_inicio],[Eve_fin],[Eve_fecha],[Eve_descripcion],[Pro_code],[Med_code],[Cis_code],[Tie_codigo],[Ese_codigo],[Eve_codigoNext],[Evh_fecha],[Use_code],[Eve_codExchange],[Eve_descartar],[Con_codigo],[Evh_override], Mot_codigo,
		[Eve_done],[Eve_override],[Eve_allDay],[Cat_codigo],[Evh_undoChangeUser],[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], Eve_codExchangeSec)
		select e.Eve_codigo, e.Eve_inicio, e.Eve_fin, e.Eve_fecha, e.Eve_descripcion, e.Pro_code, e.Med_code, e.Cis_code, e.Tie_codigo, e.Ese_codigo, e.Eve_codigoNext, getdate(), @Use_code, e.Eve_codExchange, e.Eve_descartar,e.Con_codigo,[Eve_override],Mot_codigo
,

		[Eve_done],[Eve_override],[Eve_allDay],[Cat_codigo],[Evh_undoChangeUser],[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], [Eve_codExchangeSec]
		from Evento e
		where e.Eve_codigo = @Eve_codigo

		if (@checkNurse=1 or @checkDoctor=1)
		begin		
			insert into MotivoCambioEstado (Mot_descripcion, Mot_vigencia, Mot_fechaSistema, Use_code) values (@Mot_descripcion, 1, getdate(), @Use_code)
			set @Mot_codigo = @@IDENTITY

			if (@checkNurse=1)		
			begin
				if(@confirmNurse=1)	
				begin
					if(@Mot_codigo is not null)
					begin
						INSERT INTO [dbo].[Confirmacion]
						([Pro_code],[Med_code],[Con_fecha],[Con_vigencia],[Use_code],Con_confirmProv, Con_confirmMed ,Mot_codigoMed,Mot_codigoProv)
						VALUES
						(	@cod_pro,@med_code, getdate(), 1,@Use_code,@confirmNurse,@confirmDoctor,
							(select Mot_codigoMed from Evento Eve inner join Confirmacion Con on Eve.Con_codigo=Con.Con_codigo where Eve.Eve_codigo=@Eve_codigo),
							@Mot_codigo
				
						)
						SET @Con_codigo = @@IDENTITY
					end
					else
					begin
						--select -1 Eve_done
						insert into MotivoCambioEstado (Mot_descripcion, Mot_vigencia, Mot_fechaSistema, Use_code) values (@Mot_descripcion, 1, getdate(), @Use_code)
						set @Mot_codigo2 = @@IDENTITY

						INSERT INTO [dbo].[Confirmacion]
						([Pro_code],[Med_code],[Con_fecha],[Con_vigencia],[Use_code],Con_confirmProv, Con_confirmMed ,Mot_codigoMed,Mot_codigoProv)
						VALUES
						(	@cod_pro,@med_code, getdate(), 1,@Use_code,@confirmNurse,@confirmDoctor,
							(select Mot_codigoMed from Evento Eve inner join Confirmacion Con on Eve.Con_codigo=Con.Con_codigo where Eve.Eve_codigo=@Eve_codigo),
							@Mot_codigo2
				
						)
						SET @Con_codigo = @@IDENTITY

					end
				end 
				else
				begin
					INSERT INTO [dbo].[Confirmacion]
					([Pro_code],[Med_code],[Con_fecha],[Con_vigencia],[Use_code],Con_confirmProv, Con_confirmMed ,Mot_codigoMed,Mot_codigoProv)
					VALUES
					(	@cod_pro,@med_code, getdate(), 1,@Use_code,@confirmNurse,@confirmDoctor,
						(select Mot_codigoMed from Evento Eve inner join Confirmacion Con on Eve.Con_codigo=Con.Con_codigo where Eve.Eve_codigo=@Eve_codigo),
						@Mot_codigo
				
					)
					SET @Con_codigo = @@IDENTITY
				end
					
				
			end
			if (@checkDoctor=1)
			begin
				if(@confirmNurse=1)
				begin
					if((select Mot_codigoProv from Evento Eve inner join Confirmacion Con on Eve.Con_codigo=Con.Con_codigo	where Eve.Eve_codigo=@Eve_codigo)is not null)
					begin
					INSERT INTO [dbo].[Confirmacion]
					([Pro_code],[Med_code],[Con_fecha],[Con_vigencia],[Use_code],Con_confirmProv,Con_confirmMed,Mot_codigoMed,Mot_codigoProv)
					VALUES
					(	@cod_pro,@med_code, getdate(), 1, @Use_code, @confirmNurse,@confirmDoctor,@Mot_codigo,
						(select Mot_codigoProv from Evento Eve inner join Confirmacion Con on Eve.Con_codigo=Con.Con_codigo	where Eve.Eve_codigo=@Eve_codigo)
					)		
					SET @Con_codigo = @@IDENTITY	
					end
					else
					begin
						--select -1 Eve_done
						if (@MOTCODIGOMED is not null)
						begin							 

							insert into MotivoCambioEstado (Mot_descripcion, Mot_vigencia, Mot_fechaSistema, Use_code) values ('S: y. Notified of permission: y', 1, (select mot_fechasistema from MotivoCambioEstado where Mot_codigo=@MOTCODIGOMED), (select Use_code from MotivoCambioEstado where Mot_codigo=@MOTCODIGOMED))
							set @Mot_codigo2 = @@IDENTITY
						
							INSERT INTO [dbo].[Confirmacion]
							([Pro_code],[Med_code],[Con_fecha],[Con_vigencia],[Use_code],Con_confirmProv,Con_confirmMed,Mot_codigoMed,Mot_codigoProv)
							VALUES
							(	@cod_pro,@med_code, getdate(), 1, @Use_code, @confirmNurse,@confirmDoctor,@Mot_codigo,
								@Mot_codigo2
							)		
							SET @Con_codigo = @@IDENTITY	

						end
						else
						begin
							insert into MotivoCambioEstado (Mot_descripcion, Mot_vigencia, Mot_fechaSistema, Use_code) values ('S: y. Notified of permission: y', 1, getdate(), @Use_code)
							set @Mot_codigo2 = @@IDENTITY

							INSERT INTO [dbo].[Confirmacion]
							([Pro_code],[Med_code],[Con_fecha],[Con_vigencia],[Use_code],Con_confirmProv,Con_confirmMed,Mot_codigoMed,Mot_codigoProv)
							VALUES
							(	@cod_pro,@med_code, getdate(), 1, @Use_code, @confirmNurse,@confirmDoctor,@Mot_codigo,
								@Mot_codigo2
							)		
							SET @Con_codigo = @@IDENTITY	
						end 
							
					end
				end
				else
				begin
					INSERT INTO [dbo].[Confirmacion]
					([Pro_code],[Med_code],[Con_fecha],[Con_vigencia],[Use_code],Con_confirmProv,Con_confirmMed,Mot_codigoMed,Mot_codigoProv)
					VALUES
					(	@cod_pro,@med_code, getdate(), 1, @Use_code, @confirmNurse,@confirmDoctor,@Mot_codigo,
						(select Mot_codigoProv from Evento Eve inner join Confirmacion Con on Eve.Con_codigo=Con.Con_codigo	where Eve.Eve_codigo=@Eve_codigo)
					)		
					SET @Con_codigo = @@IDENTITY	
				end
											
			end
			update Evento set Con_codigo = @Con_codigo where Eve_codigo = @Eve_codigo
		end	

		-- Esta accion se ejecuta solo cuando hay un cambio de estado
		if (@Ese_codigo != @ese_codigoy)
		begin
			insert into MotivoCambioEstado (Mot_descripcion, Mot_vigencia, Mot_fechaSistema, Use_code) values (@Mot_descripcion, 1, getdate(), @Use_code)
			set @Mot_codigo = @@IDENTITY
			update Evento set Ese_codigo = @Ese_codigo, Mot_codigo=@Mot_codigo where Eve_codigo=@Eve_codigo
		end
		else
		begin		
			if(dbo.Fu_ValidarEstadoCompletado(@Eve_codigo)=0)	
			begin
				update Evento set Eve_done=1, Ese_codigo=5 where Eve_codigo=@Eve_codigo
			end				
			else
			begin
				update Evento set Eve_done=0 where Eve_codigo=@Eve_codigo
				--if @ese_codigoy = 5 update Evento set Ese_codigo=1 where Eve_codigo=@Eve_codigo
			end
		end

		select (cast(Eve_done as int)) Eve_done from Evento where Eve_codigo=@Eve_codigo
	end
	else
		select -1 Eve_done
end
else if @TipoConsulta=12
Begin
	
	declare @tbResult table(
		Eve_codigo int,
		Eve_inicio datetime,
		Eve_fin datetime
	)

	if not exists(select ev.Eve_codigo from Evento ev where ev.Eve_codigoNov=@Eve_codigo)
	begin
		insert into @tbResult(Eve_codigo, Eve_inicio, Eve_fin)
		select top 1 eve.Eve_codigo, eve.Eve_inicio, eve.Eve_fin 
		from Evento eve
		where eve.Cis_code=@Cis_code and eve.Med_code=@med_code and eve.Eve_codigo<>@Eve_codigo and eve.Eve_nov=1 and eve.Eve_inicio<=@Eve_inicio and Eve_vigencia<>0	
		order by eve.Eve_inicio desc
	end

	select tb.Eve_codigo, tb.Eve_inicio, tb.Eve_fin from @tbResult tb

end

--listar evento por estado
else if @TipoConsulta=13
Begin
	
	Select e.*,con.*, ee.Ese_color, Ese_abreviatura, Ese_nombre, tie.Tie_nombre,
	       cas.Cis_accidentDate, (pat.Pat_FirstName + ' ' + pat.Pat_lastName) patient, pat.Pat_address,   
		   (med.Med_firstName + ' ' + med.Med_lastName) medico, med.Med_code, con.Con_confirmMed confirmDoctor, med.Med_address,
		   (pro.Pro_firstName + ' ' + pro.Pro_lastName) nurse, pro.Pro_code, con.Con_confirmProv confirmNurse,
		   (ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName) supervisor

	from Evento e	
	join MEDICAL med on e.Med_code = med.Med_code
	left join PROVIDER pro on e.Pro_code = pro.Pro_code

	inner join EstadoEvento ee on e.Ese_codigo = ee.Ese_codigo

	join Confirmacion con on con.Con_codigo = e.Con_codigo
	join CaseInformationSheetHead cas on e.Cis_code = cas.Cis_code
	join PATIENT pat on pat.Pat_code = cas.Pat_code	

	join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor	
	join TipoEvento tie on tie.Tie_codigo = e.Tie_codigo
	where (len(@supervisores)=0 or rtrim(ltrim(cas.Cis_caseSupervisor)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split](@supervisores, ',') su)) and
	      (len(@nurses)=0 or rtrim(ltrim(pro.Pro_code)) in (select rtrim(ltrim(nu.item)) from [dbo].[fu_Split](@nurses, ',') nu)) and
		  (len(@eventTypes)=0 or tie.Tie_codigo in (select ti.item from [dbo].[fu_Split](@eventTypes, ',') ti)) and
		  (len(@status)=0 or e.Ese_codigo in (select ti.item from [dbo].[fu_Split](@status, ',') ti)) and 
		  e.eve_vigencia=1
	order by e.Eve_inicio
	
end
-- undo change
else if @TipoConsulta=14
Begin
	begin try
		begin tran
		select @Eve_codigoNov=isnull(ev.Eve_codigoNov,0), @Eve_bloqueo=isnull(Eve_bloqueo,0) from Evento ev where ev.Eve_codigo=@Eve_codigo

		if @Eve_bloqueo=0
		begin
		
			
			-- Esta accion se ejecuta para agregar un registro nuevo en la tabla eventohistorial.
			declare @eve_fechay datetime, @eve_inicioy datetime, @eve_finy datetime, @cod_cisy char(15), @cod_proy char(10), @cod_medy char(10), @con_codigoy int
			select @ese_codigoy = e.Ese_codigo, @eve_fechay = e.Eve_fecha, @eve_inicioy = e.Eve_inicio, @eve_finy = e.Eve_fin, @cod_cisy = e.Cis_code, @tie_codigoy = e.Tie_codigo, @cod_proy = e.Pro_code, @cod_medy = e.Med_code, @con_codigoy=e.Con_codigo
			from Evento e where e.Eve_codigo = @Eve_codigo
		
			if (select count(*) from EventoHistorial eh where eh.Ese_codigo=@ese_codigoy and eh.Eve_fecha=@eve_fechay and eh.Eve_inicio=@eve_inicioy and eh.Eve_fin=@eve_finy and eh.Cis_code=@cod_cisy and eh.Tie_codigo=@tie_codigoy and eh.Pro_code=@cod_proy and eh.Med_code=@cod_medy and eh.Con_codigo=@con_codigoy) = 0
			begin
				INSERT INTO [dbo].[EventoHistorial]
				([Eve_codigo],[Eve_inicio],[Eve_fin],[Eve_fecha],[Eve_descripcion],[Pro_code],[Med_code],[Cis_code],[Tie_codigo],[Ese_codigo],[Eve_codigoNext],[Evh_fecha],
				[Use_Code],[Eve_codExchange],[Eve_descartar],[Con_codigo],[Evh_override], Mot_codigo,Evh_usado,
				[Eve_done],[Eve_override],[Eve_allDay],[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], [Eve_codExchangeSec])
				select e.Eve_codigo, e.Eve_inicio, e.Eve_fin, e.Eve_fecha, e.Eve_descripcion, e.Pro_code, e.Med_code, e.Cis_code, e.Tie_codigo, e.Ese_codigo, e.Eve_codigoNext, getdate(), @Use_code, e.Eve_codExchange, e.Eve_descartar,e.Con_codigo,[Eve_override],Mot_codigo,1,
				[Eve_done],[Eve_override],[Eve_allDay],[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], [Eve_codExchangeSec]
				from Evento e
				where e.Eve_codigo = @Eve_codigo
			end

			--undo change
			UPDATE e
			SET e.Eve_inicio = eh.Eve_inicio,
				e.Eve_fin = eh.Eve_fin,
				e.Eve_fecha = eh.Eve_fecha,
				e.Eve_descripcion= eh.Eve_descripcion,
				e.Pro_code = eh.Pro_code,
				e.Med_code = eh.Med_code,
				e.Cis_code = eh.Cis_code,
				e.tie_codigo = eh.Tie_codigo,
				e.Ese_codigo = eh.Ese_codigo,						
				e.Eve_codigoNext =eh.Eve_codigoNext,
				e.Use_Code = eh.Use_Code,
				e.Eve_codExchange = eh.Eve_codExchange,
				e.Eve_codExchangeSec = eh.Eve_codExchangeSec,
				e.Eve_descartar= eh.Eve_descartar,
				e.Con_codigo = eh.Con_codigo,
				e.Eve_override = eh.Evh_override,
				e.Mot_codigo = eh.Mot_codigo,
				e.Evh_undoChangeUser = @cod_user_Undochange
			from Evento e
			inner join EventoHistorial eh on e.Eve_codigo = eh.Eve_codigo and 
			eh.Evh_codigo = (select top 1 ehx.Evh_codigo from EventoHistorial ehx 
							 where ehx.Eve_codigo = @Eve_codigo and ehx.Evh_usado = 0 order by ehx.Evh_codigo desc
							)
			where eh.Eve_codigo = @Eve_codigo
	
			update EventoHistorial set Evh_usado = 1
			where Evh_codigo = (select top 1 ehx.Evh_codigo from EventoHistorial ehx 
								where ehx.Eve_codigo = @Eve_codigo and ehx.Evh_usado = 0 order by ehx.Evh_codigo desc
								)			

			--if (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where Eve_codigo=@Eve_codigo and ETA.Eta_numArchivos>Eta_archivosSubidos and Eta.Eta_vigencia=1)=0 and exists(select ev.Eve_codigo from Evento ev where ev.Eve_codigo=@Eve_codigo and (ev.Eve_nov=0 or ev.Eve_codigoNov is not null))
			if(dbo.Fu_ValidarEstadoCompletado(@Eve_codigo)=0)
			begin
				set @Eve_done = 1
				update Evento set Ese_codigo=5, Eve_done=1 where Eve_codigo=@Eve_codigo
			end
			else
			begin
				set @Eve_done = 0				
				--update Evento set Eve_done=0, Ese_codigo=(case when Ese_codigo=5 then 1 else Ese_codigo end) where Eve_codigo=@Eve_codigo
				update Evento set Eve_done=0 where Eve_codigo=@Eve_codigo
			end

			
			select cast(@Eve_done as int) Eve_done
		end
		else
			select -1 Eve_done

	   commit tran
	end try
	begin catch
		
		rollback tran
		set @e_message = error_message()
		set @e_severity = error_severity()
		set @e_state = error_state()
		raiserror(@e_message, @e_severity, @e_state)

	end catch

end
---Verificacion de existencia de historias de evento para retroceder con el boton UNDOCHANGE
else if @TipoConsulta=15
begin
	select * from EventoHistorial eh where eh.Eve_codigo = @Eve_codigo and eh.Evh_usado=0
end
--actualizar codigo de exchange
--Ray Diaz
else if @TipoConsulta=16
begin
	UPDATE Evento
		SET Eve_codExchange = @Eve_codExchange			
	where eve_codigo = @Eve_codigo
end

else if @TipoConsulta=17
begin
	select COUNT(*) as Cantidad from EventoTipoArchivo ETA where Eve_codigo=@Eve_codigo and ETA.Eta_numArchivos>Eta_archivosSubidos
end

--OVERRIDE
else if @TipoConsulta=18
begin			
	INSERT INTO [dbo].[EventoHistorial]
		([Eve_codigo],[Eve_inicio],[Eve_fin],[Eve_fecha],[Eve_descripcion],[Pro_code],[Med_code],[Cis_code],[Tie_codigo],[Ese_codigo],[Eve_codigoNext],[Evh_fecha],[Use_Code],[Eve_codExchange],[Eve_descartar],[Con_codigo],[Evh_override],Mot_codigo,
		[Eve_done],[Eve_override],[Eve_allDay],[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], [Eve_codExchangeSec])
	select e.Eve_codigo, e.Eve_inicio, e.Eve_fin, e.Eve_fecha, dbo.fu_replacecomillas(e.Eve_descripcion) as eve_descripcion, e.Pro_code, e.Med_code, e.Cis_code, e.Tie_codigo, e.Ese_codigo, e.Eve_codigoNext, getdate(), @Use_code, e.Eve_codExchange, e.Eve_descartar,e.Con_codigo,e.Eve_override,Mot_codigo,
	[Eve_done],[Eve_override],[Eve_allDay],[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], [Eve_codExchangeSec]
	from Evento e 
	where e.Eve_codigo = @Eve_codigo

	if (select COUNT(*) from Evento where Eve_done=0 and Ese_codigo=1 and Eve_codigo=@Eve_codigo)=0
	begin
		UPDATE CaseInformationSheetHead SET Cis_actual=0
		where Cis_code=(select e.Cis_code from Evento e where e.Eve_codigo = @Eve_codigo )
	end

	UPDATE Evento SET Eve_done=1, Eve_override=1,Ese_codigo=5
	where Eve_codigo = @Eve_codigo

end
else if @TipoConsulta=19
begin
	if @withAgenda=1
	begin
		select dbo.fu_replacecomillas(med.Med_phone) as phone_med,eve.Eve_allDay, eve.Eve_override, con.Con_codigo,con.Con_confirmMed confirmDoctor,con.Con_confirmProv confirmNurse, eve.Eve_codigo, eve.Eve_inicio, 
		eve.Eve_fin, eve.Eve_fecha, cas.Cis_accidentDate, dbo.fu_replacecomillas((pat.Pat_FirstName + ' ' + pat.Pat_lastName)) as patient, dbo.fu_replacecomillas(pat.Pat_address) as address_pat,
			   tie.Tie_codigo, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_Nombre, tie.Tie_programable, dbo.fu_replacecomillas((med.Med_firstName + ' ' + med.Med_lastName)) as medico, med.Med_code, dbo.fu_replacecomillas(med.Med_address) as address_med, dbo.fu_replacecomillas((med.Med_address + ', ' + med.Med_city + ' ' + med.Med_state + ', ' + med.Med_zipCode)) as address_medfull,
			  dbo.fu_replacecomillas((pro.Pro_firstName + ' ' + pro.Pro_lastName)) as nurse, pro.Pro_code, dbo.fu_replacecomillas((ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName)) as supervisor, est.Ese_codigo, est.Ese_abreviatura, est.Ese_nombre, (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status],
			   cas.Cis_code, cas.Cis_caseCode, eve.Eve_codigoNov, eve.Eve_nov, eve.Eve_codExchange, eve.Eve_codExchangeSec,  eve.Eve_codigoNext, eve.Use_Code, dbo.fu_replacecomillas(eve.Eve_descripcion) as eve_descripcion,
			  (select count(*) from EventoHistorial eh where eh.Eve_codigo = eve.Eve_codigo and Evh_usado = 0) Cantidad,
			  (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where ETA.Eve_codigo=eve.Eve_codigo and ETA.Eta_numArchivos>Eta_archivosSubidos and ETA.Eta_vigencia = 1) CantidadFalta,
			   cast(cas.Cis_status as varchar) as CasoEstado, cas.Cis_actual, Eve_done, dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1) documents
		from Evento eve
		join MEDICAL med on eve.Med_code = med.Med_code
		left join PROVIDER pro on eve.Pro_code = pro.Pro_code
		join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo
		join Confirmacion con on con.Con_codigo = eve.Con_codigo
		join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
		join PATIENT pat on pat.Pat_code = cas.Pat_code
		join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor
		join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo

		where (isnull(@Cis_code,'')='' or eve.Cis_code=@Cis_code) and (med.Med_firstName + ' ' + med.Med_lastName) like '%'+@doctor+'%' and rtrim(ltrim(pat.Pat_FirstName + ' ' + pat.Pat_lastName)) like '%' + @patient + '%' and
		(len(@supervisores)=0 or rtrim(ltrim(cas.Cis_caseSupervisor)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split](@supervisores, '*') su)) and
		(len(@eventTypes)=0 or tie.Tie_codigo in (select ti.item from [dbo].[fu_Split](@eventTypes, '*') ti)) and
		(len(@nurses)=0 or (eve.Pro_code is null and exists(select nu.id from [dbo].[fu_Split](@nurses, '*') nu where nu.item=0)) or pro.Pro_code in (select nu.item from [dbo].[fu_Split](@nurses, '*') nu)) and
		(len(@items)=0 or (dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1)='' and exists(select nu.id from [dbo].[fu_Split](@items, '*') nu where nu.item=0)) or (select count(*) from EventoTipoArchivo eta where eta.Eta_vigencia = 1 and eta.Eve_codigo = eve.Eve_codigo


 and eta.Tia_codigo in (select it.item from [dbo].[fu_Split](@items, '*') it))>0) and
		(len(@status)=0 or est.Ese_codigo in (select es.item from [dbo].[fu_Split](@status, '*') es)) and
	
		(@confirmDoctorSearch=-1 or @confirmDoctorSearch=con.Con_confirmMed) and
		(@confirmNurseSearch=-1 or @confirmNurseSearch=con.Con_confirmProv) and
		(@phone='' or rtrim(ltrim(@phone))=rtrim(ltrim(med.Med_phone)) or rtrim(ltrim(@phone))=rtrim(ltrim(med.Med_phoneExt)) or rtrim(ltrim(@phone))=rtrim(ltrim(med.Med_alternatePhone))) and
		( (@Eve_inicio is null or cast(eve.Eve_inicio as date)>=cast(@Eve_inicio as date)) and (@Eve_fin is null or cast(eve.Eve_fin as date)<=cast(@Eve_fin as date)) ) and
		(len(@novs)=0 or ( (eve.Eve_nov=0 and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='sinNov')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is null and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='sinNovSchedule')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is not null and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='conNovSchedule')) ) )
		and eve.eve_vigencia=1
		and (@case_status=-1 or @case_status=cas.Cis_status)
		union all
		select  '' phone_med, cast(0 as bit) Eve_allDay, cast(0 as bit) Eve_override, 0 Con_codigo, cast(0 as bit) confirmDoctor, cast(0 as bit) confirmNurse, 0 Eve_codigo, cau.Cau_inicio Eve_inicio, cau.Cau_fin Eve_fin, null Eve_fecha, null Cis_accidentDate, (ltrim(rtrim(usys.Use_firstName)) + ' ' + usys.Use_lastName) patient, '' address_pat,
				tie.Tie_codigo, tie.Tie_nombre, tie.Tie_programable, '-' medico, '' Med_code, '' address_med, '-' address_medfull,
				'-' nurse, '' Pro_code, '-' supervisor, cast(0 as tinyint) Ese_codigo, '' Ese_abreviatura, '' Ese_nombre, cau.Cau_descripcion [status],
				'' Cis_code, '' case_cod, 0 Eve_codigoNov, cast(0 as bit) Eve_nov, '' Eve_codExchange, '' Eve_codExchangeSec, 0 Eve_codigoNext, '' Use_Code, '' Eve_descripcion,
				0 Cantidad, 0 CantidadFalta, '' CasoEstado, cast(0 as bit) Cis_actual, cast(0 as bit) Eve_done, '' documents
		from CalendarioUsuario cau
		join TipoEvento tie on tie.Tie_codigo = cau.Tie_codigo
		join [User] usys on usys.Use_Code = cau.Use_Code
		where cau.Cau_vigencia=1 and cau.Cau_mostrarMV=1 and
			 (len(@nurses)=0 or (cau.Use_Code is null and exists(select nu.id from [dbo].[fu_Split](@nurses, '*') nu where nu.item=0)) or cau.Use_Code in (select prx.Use_Code from [dbo].[fu_Split](@nurses, '*') nu join PROVIDER prx on ltrim(rtrim(prx.Pro_code))=nu.item)) and
			 ( (@Eve_inicio is null or cast(cau.Cau_inicio as date)>=cast(@Eve_inicio as date)) and (@Eve_fin is null or cast(cau.Cau_fin as date)<=cast(@Eve_fin as date)) )
		order by Eve_inicio
	end
	else
	begin
		select dbo.fu_replacecomillas(med.Med_phone) as phone_med,eve.Eve_allDay, eve.Eve_override, con.Con_codigo,con.Con_confirmMed confirmDoctor ,con.Con_confirmProv confirmNurse ,eve.Eve_codigo, eve.Eve_inicio, eve.Eve_fin, eve.Eve_fecha, cas.Cis_accidentDate, dbo.fu_replacecomillas((pat.Pat_FirstName + ' ' + pat.Pat_lastName)) patient, dbo.fu_replacecomillas(pat.Pat_address) as address_pat,
			   tie.Tie_codigo, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_nombre, tie.Tie_programable, dbo.fu_replacecomillas((med.Med_firstName + ' ' + med.Med_lastName)) as medico, med.Med_code, dbo.fu_replacecomillas(med.Med_address) as Med_address, 
			   dbo.fu_replacecomillas((med.Med_address + ', ' + med.Med_city + ' ' + med.Med_state + ', ' + med.Med_zipCode)) as address_medfull,
			  dbo.fu_replacecomillas((pro.Pro_firstName + ' ' + pro.Pro_lastName)) as nurse, pro.Pro_code, dbo.fu_replacecomillas((ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName)) as supervisor, est.Ese_codigo, est.Ese_abreviatura, est.Ese_nombre, (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status],
			   cas.Cis_code, cas.Cis_caseCode, eve.Eve_codigoNov, eve.Eve_nov, eve.Eve_codExchange, eve.Eve_codExchangeSec, eve.Eve_codigoNext, eve.Use_Code, dbo.fu_replacecomillas(eve.Eve_descripcion) as eve_descripcion,
			  (select count(*) from EventoHistorial eh where eh.Eve_codigo = eve.Eve_codigo and Evh_usado = 0) Cantidad,
			  (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where ETA.Eve_codigo=eve.Eve_codigo and ETA.Eta_numArchivos>Eta_archivosSubidos and ETA.Eta_vigencia = 1) CantidadFalta,
			   cast(cas.Cis_status as varchar) as CasoEstado, cas.Cis_actual, Eve_done,dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1) documents
		from Evento eve
		join MEDICAL med on eve.Med_code = med.Med_code
		left join PROVIDER pro on eve.Pro_code = pro.Pro_code
		join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo
		join Confirmacion con on con.Con_codigo = eve.Con_codigo
		join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
		join PATIENT pat on pat.Pat_code = cas.Pat_code
		join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor
		join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo

		where (isnull(@Cis_code,'')='' or eve.Cis_code=@Cis_code) and (med.Med_firstName + ' ' + med.Med_lastName) like '%'+@doctor+'%' and rtrim(ltrim(pat.Pat_FirstName + ' ' + pat.Pat_lastName)) like '%' + @patient + '%' and
		(len(@supervisores)=0 or rtrim(ltrim(cas.Cis_caseSupervisor)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split](@supervisores, '*') su)) and
		(len(@eventTypes)=0 or tie.Tie_codigo in (select ti.item from [dbo].[fu_Split](@eventTypes, '*') ti)) and
		(len(@nurses)=0 or (eve.Pro_code is null and exists(select nu.id from [dbo].[fu_Split](@nurses, '*') nu where nu.item=0)) or pro.Pro_code in (select nu.item from [dbo].[fu_Split](@nurses, '*') nu)) and
		(len(@items)=0 or (dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1)='' and exists(select nu.id from [dbo].[fu_Split](@items, '*') nu where nu.item=0)) or (select count(eta.Eve_codigo) from EventoTipoArchivo eta where eta.Eta_vigencia=1 and eta.Eve_codigo=eve.Eve_codigo and isnull(eta.Eta_archivosSubidos,0)=0 and eta.Tia_codigo in (select it.item from [dbo].[fu_Split](@items, '*') it))>0) and
		(len(@status)=0 or est.Ese_codigo in (select es.item from [dbo].[fu_Split](@status, '*') es)) and
	
		(@confirmDoctorSearch=-1 or @confirmDoctorSearch=con.Con_confirmMed) and
		(@confirmNurseSearch=-1 or @confirmNurseSearch=con.Con_confirmProv) and
		(@phone='' or rtrim(ltrim(@phone))=rtrim(ltrim(med.Med_phone)) or rtrim(ltrim(@phone))=rtrim(ltrim(med.Med_phoneExt)) or rtrim(ltrim(@phone))=rtrim(ltrim(med.Med_alternatePhone))) and
		( (@Eve_inicio is null or cast(eve.Eve_inicio as date)>=cast(@Eve_inicio as date)) and (@Eve_fin is null or cast(eve.Eve_fin as date)<=cast(@Eve_fin as date)) ) and
		(len(@novs)=0 or ( (eve.Eve_nov=0 and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='sinNov')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is null and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='sinNovSchedule')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is not null and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='conNovSchedule')) ) )
		and eve.eve_vigencia=1
		and (@case_status=-1 or @case_status=cas.Cis_status)
		order by eve.Eve_inicio
	end
end
else if @TipoConsulta=20
begin
	update Evento set Eve_descartar = 1 where Eve_codigo = @Eve_codigo
end
else if @TipoConsulta=21
begin

	select e.Eve_codigo, e.Eve_inicio, e.Eve_fin, e.Cat_codigo, Ese_abreviatura, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_nombre, cas.Cis_accidentDate as accident_date , dbo.fu_replacecomillas((pat.Pat_firstName + ' ' + pat.Pat_lastName)) patient,
		   dbo.fu_replacecomillas(pat.Pat_address) as address_pat, dbo.fu_replacecomillas((med.Med_firstName + ' ' + med.Med_lastName)) as medico, con.Con_confirmMed confirmDoctor, dbo.fu_replacecomillas(med.Med_address) as address_med,
		   dbo.fu_replacecomillas((pro.Pro_firstName + ' ' + pro.Pro_lastName)) as nurse, pro.Pro_code , con.Con_confirmProv confirmNurse, e.Ese_codigo,
		   dbo.fu_replacecomillas((ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName)) as supervisor, 0 Cau_codigo, '' Cau_descripcion, (case cas.Cis_status when '1' then 'Open' else 'Close' end) CasoEstado
	from Evento e
	left join PROVIDER pro on e.Pro_code = pro.Pro_code
	inner join EstadoEvento ee on e.Ese_codigo = ee.Ese_codigo and (len(@status)=0 or exists(select ti.id from [dbo].[fu_Split](@status, ',') ti where ti.item=e.Ese_codigo))
	join TipoEvento tie on tie.Tie_codigo = e.Tie_codigo and (len(@eventTypes)=0 or exists(select ti.id from [dbo].[fu_Split](@eventTypes, ',') ti where ti.item=tie.Tie_codigo))
	join MEDICAL med on e.Med_code = med.Med_code
	join Confirmacion con on con.Con_codigo = e.Con_codigo
	join CaseInformationSheetHead cas on e.Cis_code = cas.Cis_code	
	join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor
	join PATIENT pat on pat.Pat_code = cas.Pat_code
	where (len(@supervisores)=0 or rtrim(ltrim(cas.Cis_caseSupervisor)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split](@supervisores, ',') su)) and
		  (len(@nurses)=0 or (e.Pro_code is null and exists(select nu.id from [dbo].[fu_Split](@nurses, ',') nu where nu.item=0)) or exists(select nu.id from [dbo].[fu_Split](@nurses, ',') nu where nu.item=convert(varchar(100),e.Pro_code))) and
		  (@month=MONTH(e.Eve_inicio) or @month=MONTH(e.Eve_fin)) and (@year=year(e.Eve_inicio) or @year=year(e.Eve_fin))
		  and e.eve_vigencia=1
	union all
	select 0 Eve_codigo, cau.Cau_inicio Eve_inicio, cau.Cau_fin Eve_fin, 0 Cat_codigo, '' Ese_abreviatura, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_nombre, cast(GETDATE() as date) accident_date ,
	       '' patient, '' address_pat, '' medico, cast(0 as bit) confirmDoctor, '' address_med, '' nurse, '' Pro_code, cast(0 as bit) confirmNurse, cast(0 as tinyint) Ese_codigo,
		   dbo.fu_replacecomillas((ltrim(rtrim(usys.Use_firstName)) + ' ' + usys.Use_lastName)) AS supervisor, cau.Cau_codigo, dbo.fu_replacecomillas(cau.Cau_descripcion) as cau_descripcion,
		   'Open' CasoEstado
	from CalendarioUsuario cau
	join TipoEvento tie on tie.Tie_codigo = cau.Tie_codigo
	join [User] usys on usys.Use_Code = cau.Use_Code
	where cau.Cau_vigencia=1 and cau.Cau_mostrarMV=1 and
	     (@month=MONTH(cau.Cau_inicio) or @month=MONTH(cau.Cau_fin)) and (@year=year(cau.Cau_inicio) or @year=year(cau.Cau_fin))

	order by e.Eve_inicio
	--cambio arriba
end
else if @TipoConsulta=22
begin
	
	update MotivoCambioEstado set Mot_descripcion = @Mot_descripcion where Mot_codigo = @Mot_codigo
	
end
else if @TipoConsulta=23
begin
	set @codUserNurse = (select Use_Code from PROVIDER where Pro_code = (select top 1 ehx.Pro_code from EventoHistorial ehx where ehx.Eve_codigo = @Eve_codigo and ehx.Evh_usado = 0 order by ehx.Evh_codigo desc))
	set @Eve_inicio = (select top 1 ehx.Eve_inicio from EventoHistorial ehx where ehx.Eve_codigo = @Eve_codigo and ehx.Evh_usado = 0 order by ehx.Evh_codigo desc)
	set @Eve_fin = (select top 1 ehx.Eve_fin from EventoHistorial ehx where ehx.Eve_codigo = @Eve_codigo and ehx.Evh_usado = 0 order by ehx.Evh_codigo desc)
		
	if (select count(*) from CalendarioUsuario cu 
		where (@Eve_codigo=0 or isnull(cu.Eve_codigo,0) <> @Eve_codigo) and cu.Cau_vigencia = 1 and @codUserNurse=cu.Use_Code and
		      (isnull(cu.Eve_codigo,0)=0 or (select count(*) from Evento ev where ev.Eve_codigo=cu.Eve_codigo and ev.Ese_codigo in (1,5))>0) and
			  (  (@Eve_inicio between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or (@Eve_fin between dateadd(mi,1,cu.Cau_inicio) and dateadd(mi,-1,cu.Cau_fin)) or
				 (dateadd(mi,1,cu.Cau_inicio) between @Eve_inicio and @Eve_fin)
			  )
		) = 0 /*verifica fechas de nurse*/			
	begin					
		select cast(1 as bit) as Verify --Puede proceder con la accion undochange
	end
	else
	begin
		select cast(0 as bit) as Verify	--No se puede proceder con la accion undochange
	end

end
else if @TipoConsulta=24
begin
	if @withAgenda = 1
	begin
		select con.Con_confirmMed confirmDoctor, con.Con_confirmProv confirmNurse, eve.Eve_codigo, eve.Eve_inicio, eve.Eve_fin, cas.Cis_accidentDate, dbo.fu_replacecomillas((pat.Pat_FirstName + ' ' + pat.Pat_lastName)) patient, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_nombre,
				dbo.fu_replacecomillas((med.Med_firstName + ' ' + med.Med_lastName)) medico, med.Med_code, dbo.fu_replacecomillas(med.Med_address) as address_med, 
				dbo.fu_replacecomillas((med.Med_address + ', ' + med.Med_city + ' ' + med.Med_state + ', ' + med.Med_zipCode)) as address_medfull, dbo.fu_replacecomillas((pro.Pro_firstName + ' ' + pro.Pro_lastName)) as nurse, pro.Pro_code,
				dbo.fu_replacecomillas((ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName)) as supervisor, est.Ese_abreviatura, est.Ese_nombre, dbo.fu_replacecomillas(pat.Pat_address) as address_pat, (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status], cas.Cis_code, cas.Cis_caseCode,
				eve.Use_Code, dbo.fu_replacecomillas(eve.Eve_descripcion) as eve_descripcion, cast(cas.Cis_status as varchar) as CasoEstado, cas.Cis_actual, dbo.Fu_ObtenerDocuments(eve.Eve_codigo,0) documents
		from Evento eve

		join MEDICAL med on eve.Med_code = med.Med_code
		left join PROVIDER pro on eve.Pro_code = pro.Pro_code
		join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo
		join Confirmacion con on con.Con_codigo = eve.Con_codigo
		join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
		join PATIENT pat on pat.Pat_code = cas.Pat_code
		join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor

		join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo
		where (len(@supervisores)=0 or rtrim(ltrim(cas.Cis_caseSupervisor)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split](@supervisores, ',') su)) and	      
			  (len(@nurses)=0 or (eve.Pro_code is null and exists(select nu.id from [dbo].[fu_Split](@nurses, ',') nu where nu.item=0)) or pro.Pro_code in (select nu.item from [dbo].[fu_Split](@nurses, ',') nu)) and
			  (len(@eventTypes)=0 or tie.Tie_codigo in (select ti.item from [dbo].[fu_Split](@eventTypes, ',') ti)) and
			  (len(@status)=0 or eve.Ese_codigo in (select ti.item from [dbo].[fu_Split](@status, ',') ti)) and
			  ( (cast(eve.Eve_inicio as date) between cast(@Eve_inicio as date) and cast(@Eve_fin as date)) or (cast(eve.Eve_fin as date) between cast(@Eve_inicio as date) and cast(@Eve_fin as date)) )
			  and eve.eve_vigencia=1
		union all
		select cast(0 as bit) confirmDoctor, cast(0 as bit) confirmNurse, 0 Eve_codigo, cau.Cau_inicio Eve_inicio, cau.Cau_fin Eve_fin, null accident_date, (ltrim(rtrim(usys.Use_firstName)) + ' ' + usys.Use_lastName) patient, tie.Tie_nombre,
			   '-' medico, '' Med_code, '' address_med, '-' address_medfull, '-' nurse, '' Pro_code,
			   '-' supervisor, '' Ese_abreviatura, '' Ese_nombre, '' address_pat, cau.Cau_descripcion [status], '' Cis_code, '' case_cod,
			   '' Use_Code, '' Eve_descripcion, '' CasoEstado, cast(0 as bit) Cis_actual, '' documents
		from CalendarioUsuario cau
		join TipoEvento tie on tie.Tie_codigo = cau.Tie_codigo
		join [User] usys on usys.Use_Code = cau.Use_Code
		where cau.Cau_vigencia=1 and cau.Cau_mostrarMV=1 and
			  ( (cast(cau.Cau_inicio as date) between cast(@Eve_inicio as date) and cast(@Eve_fin as date)) or (cast(cau.Cau_fin as date) between cast(@Eve_inicio as date) and cast(@Eve_fin as date)) )
		order by 4
	end
	else
	begin
		select con.Con_confirmMed as confirmDoctor, con.Con_confirmProv as confirmNurse ,eve.Eve_codigo, eve.Eve_inicio, eve.Eve_fin, cas.Cis_accidentDate, dbo.fu_replacecomillas((pat.Pat_FirstName + ' ' + pat.Pat_lastName)) patient, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_nombre,
				dbo.fu_replacecomillas((med.Med_firstName + ' ' + med.Med_lastName)) medico, med.Med_code, dbo.fu_replacecomillas(med.Med_address) as address_med, dbo.fu_replacecomillas((med.Med_address + ', ' + med.Med_city + ' ' + med.Med_state + ', ' + med.Med_zipCode)) address_medfull, dbo.fu_replacecomillas((pro.Pro_firstName + ' ' + pro.Pro_lastName)) nurse, pro.Pro_code,
				(ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName) supervisor, est.Ese_abreviatura, est.Ese_nombre, pat.Pat_address, (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status], cas.Cis_code, cas.Cis_caseCode,
				eve.Use_Code, dbo.fu_replacecomillas(eve.Eve_descripcion) as eve_descripcion, cast(cas.Cis_status as varchar) as CasoEstado, cas.Cis_actual, dbo.Fu_ObtenerDocuments(eve.Eve_codigo,0) documents
		from Evento eve
		join MEDICAL med on eve.Med_code = med.Med_code
		left join PROVIDER pro on eve.Pro_code = pro.Pro_code
		join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo
		join Confirmacion con on con.Con_codigo = eve.Con_codigo
		join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
		join PATIENT pat on pat.Pat_code = cas.Pat_code
		join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor

		join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo
		where (len(@supervisores)=0 or rtrim(ltrim(cas.Cis_caseSupervisor)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split](@supervisores, ',') su)) and
			  (len(@nurses)=0 or (eve.Pro_code is null and exists(select nu.id from [dbo].[fu_Split](@nurses, ',') nu where nu.item=0)) or pro.Pro_code in (select nu.item from [dbo].[fu_Split](@nurses, ',') nu)) and
			  (len(@eventTypes)=0 or tie.Tie_codigo in (select ti.item from [dbo].[fu_Split](@eventTypes, ',') ti)) and
			  (len(@status)=0 or eve.Ese_codigo in (select ti.item from [dbo].[fu_Split](@status, ',') ti)) and
			  ( (cast(eve.Eve_inicio as date) between cast(@Eve_inicio as date) and cast(@Eve_fin as date)) or (cast(eve.Eve_fin as date) between cast(@Eve_inicio as date) and cast(@Eve_fin as date)) )
			  and eve.eve_vigencia=1
		order by Eve_inicio, Pat_lastName
	end
end
else if @TipoConsulta=25
begin
	
	declare @tbEventsPrint table(
		--Id int identity(1,1),
		Eve_codigo int,
		phone_med varchar(15),
		confirmDoctor bit,
		confirmNurse bit,
		Eve_inicio datetime,
		Eve_fin datetime,
		accident_date datetime,
		patient varchar(200),
		Tie_nombre varchar(150),
		medico varchar(200),
		address_med varchar(255),
		nurse varchar(200),
		supervisor varchar(100),
		Ese_nombre varchar(150),
		status varchar(40),
		documents varchar(2000),
		Eve_codigoNov int,
		Eve_nov bit
	)

	insert into @tbEventsPrint(Eve_codigo, phone_med, confirmDoctor, confirmNurse, Eve_inicio, Eve_fin, accident_date, patient, Tie_nombre, medico, address_med, nurse, supervisor, Ese_nombre, status, documents, Eve_codigoNov, Eve_nov)

	select eve.Eve_codigo, dbo.fu_replacecomillas(med.Med_phone) phone_med, con.Con_confirmMed, con.Con_confirmProv, eve.Eve_inicio, eve.Eve_fin, cas.Cis_accidentDate, dbo.fu_replacecomillas((pat.Pat_FirstName + ' ' + pat.Pat_lastName)),
		   dbo.fu_replacecomillas(tie.Tie_nombre) as tie_nombre, dbo.fu_replacecomillas((med.Med_firstName + ' ' + med.Med_lastName)) medico, dbo.fu_replacecomillas((med.Med_address + ', ' + med.Med_city + ' ' + med.Med_state + ', ' + med.Med_zipCode)) address_medfull,--, med.address_med, 
		   isnull((pro.Pro_firstName + ' ' + pro.Pro_lastName),'') nurse,
		   dbo.fu_replacecomillas((ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName)) supervisor, est.Ese_nombre, (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status],
		   dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1) documents, isnull(eve.Eve_codigoNov,0), eve.Eve_nov
	from Evento eve

	join MEDICAL med on eve.Med_code = med.Med_code
	left join PROVIDER pro on eve.Pro_code = pro.Pro_code
	join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo
	join Confirmacion con on con.Con_codigo = eve.Con_codigo
	join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
	join PATIENT pat on pat.Pat_code = cas.Pat_code
	join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor

	join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo

		where (isnull(@Cis_code,'')='' or eve.Cis_code=@Cis_code) and (med.Med_firstName + ' ' + med.Med_lastName) like '%'+@doctor+'%' and rtrim(ltrim(pat.Pat_FirstName + ' ' + pat.Pat_lastName)) like '%' + @patient + '%' and
		(len(@supervisores)=0 or rtrim(ltrim(cas.Cis_caseSupervisor)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split](@supervisores, '*') su)) and
		(len(@eventTypes)=0 or tie.Tie_codigo in (select ti.item from [dbo].[fu_Split](@eventTypes, '*') ti)) and
		(len(@nurses)=0 or (eve.Pro_code is null and exists(select nu.id from [dbo].[fu_Split](@nurses, '*') nu where nu.item=0)) or pro.Pro_code in (select nu.item from [dbo].[fu_Split](@nurses, '*') nu)) and
		(len(@items)=0 or (dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1)='' and exists(select nu.id from [dbo].[fu_Split](@items, '*') nu where nu.item=0)) or (select count(eta.Eve_codigo) from EventoTipoArchivo eta where eta.Eta_vigencia=1 and eta.Eve_codigo=eve.Eve_codigo and isnull(eta.Eta_archivosSubidos,0)=0 and eta.Tia_codigo in (select it.item from [dbo].[fu_Split](@items, '*') it))>0) and
		(len(@status)=0 or est.Ese_codigo in (select es.item from [dbo].[fu_Split](@status, '*') es)) and
	
		(@confirmDoctorSearch=-1 or @confirmDoctorSearch=con.Con_confirmMed) and
		(@confirmNurseSearch=-1 or @confirmNurseSearch=con.Con_confirmProv) and
		(@phone='' or rtrim(ltrim(@phone))=rtrim(ltrim(med.Med_phone)) or rtrim(ltrim(@phone))=rtrim(ltrim(med.Med_phoneExt)) or rtrim(ltrim(@phone))=rtrim(ltrim(med.Med_alternatePhone))) and
		( (@Eve_inicio is null or cast(eve.Eve_inicio as date)>=cast(@Eve_inicio as date)) and (@Eve_fin is null or cast(eve.Eve_fin as date)<=cast(@Eve_fin as date)) ) and
		(len(@novs)=0 or ( (eve.Eve_nov=0 and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='sinNov')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is null and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='sinNovSchedule')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is not null and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='conNovSchedule')) ) )
		and eve.eve_vigencia=1
		and (@case_status=-1 or cas.Cis_status=@case_status)
		order by eve.Eve_inicio

	declare @tbPrint table(
		Eve_codigo int,
		Fieldname varchar(2000),
		Fieldvalue varchar(2000),
		FieldOrder int,
		[status] varchar(20)
	)

	-- verificar eventInicio
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'eventInicio') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'Start Date', convert(varchar(20),tb.Eve_inicio,22), 1, tb.status from @tbEventsPrint tb

	-- verificar eventFin
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'eventFin') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'End Date', convert(varchar(20),tb.Eve_fin,22), 2, tb.status from @tbEventsPrint tb

	-- verificar doi
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'doi') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'Patient / DOI', (tb.patient + ', ' + convert(varchar(10),tb.accident_date,101)), 3, tb.status from @tbEventsPrint tb
				
	-- verificar medico
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'medico') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'Doctor / Facility', tb.medico + (case when tb.confirmDoctor=1 then ' (C)' else '' end), 4, tb.status from @tbEventsPrint tb
	
	-- verificar address_med
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'address_med') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'Doctor Address', tb.address_med, 5, tb.status from @tbEventsPrint tb

	-- verificar phone_med
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'phone_med') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'Phone Number', tb.phone_med, 6, tb.status from @tbEventsPrint tb

	-- verificar Tie_nombre
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'Tie_nombre') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'Event Type', tb.Tie_nombre, 7, tb.status from @tbEventsPrint tb

	-- verificar nurse
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'nurse') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'Nurse', case when len(tb.nurse)>0 then tb.nurse + (case when tb.confirmNurse=1 then ' (C)' else '' end) else 'NO NURSE' end, 8, tb.status from @tbEventsPrint tb

	-- verificar supervisor
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'supervisor') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'Supervisor', tb.supervisor, 9, tb.status from @tbEventsPrint tb
	
	-- verificar documents
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'documents') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'Required documents', tb.documents, 10, tb.status from @tbEventsPrint tb
	
	-- verificar nov
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'nov') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'NOV', (case when tb.Eve_nov=0 then 'X' when tb.Eve_nov=1 and tb.Eve_codigoNov>0 then 'Yes' else 'No' end), 11, tb.status from @tbEventsPrint tb

	-- verificar Ese_nombre
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'Ese_nombre') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'Event''s status', tb.Ese_nombre, 12, tb.status from @tbEventsPrint tb

	-- verificar status
	if exists(select field.item from fu_Split(@fields, ',') field where field.item = 'status') insert into @tbPrint(Eve_codigo, Fieldname, Fieldvalue, FieldOrder, status) select tb.Eve_codigo, 'Case''s status', tb.status, 13, tb.status from @tbEventsPrint tb




	-- mostrar resultados
	select tp.Eve_codigo, tp.Fieldname, tp.Fieldvalue, tp.FieldOrder, tp.status from @tbPrint tp
end
else if @TipoConsulta=26
begin
	
	select med.Med_phone,eve.Eve_allDay, eve.Eve_override, con.Con_codigo,con.Con_confirmMed as confirmDoctor ,con.Con_confirmProv as confirmNurse ,
	eve.Eve_codigo, eve.Eve_inicio, eve.Eve_fin, eve.Eve_fecha, cas.Cis_accidentDate, dbo.fu_replacecomillas((pat.Pat_FirstName + ' ' + pat.Pat_lastName)) patient, dbo.fu_replacecomillas(pat.Pat_address) address_pat, 
		    tie.Tie_codigo, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_nombre, tie.Tie_programable, dbo.fu_replacecomillas((med.Med_firstName + ' ' + med.Med_lastName)) medico, med.Med_code, dbo.fu_replacecomillas(med.Med_address) address_med, 
			dbo.fu_replacecomillas((pro.Pro_firstName + ' ' + pro.Pro_lastName)) nurse, pro.Pro_code,
			dbo.fu_replacecomillas((ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName)) supervisor, est.Ese_codigo, est.Ese_abreviatura, est.Ese_nombre, (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status], cas.Cis_code, cas.Cis_caseCode,
			eve.Eve_codExchange, eve.Eve_codExchangeSec,  eve.Eve_codigoNext, eve.Use_Code, dbo.fu_replacecomillas(eve.Eve_descripcion) as eve_descripcion,
			(select count(*) from EventoHistorial eh where eh.Eve_codigo = eve.Eve_codigo and Evh_usado = 0) Cantidad,
			(select COUNT(*) as Cantidad from EventoTipoArchivo ETA where ETA.Eve_codigo=eve.Eve_codigo and ETA.Eta_numArchivos>Eta_archivosSubidos and ETA.Eta_vigencia = 1) CantidadFalta,
			cast(cas.Cis_status as varchar) as CasoEstado, cas.Cis_actual, Eve_done,dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1) documents 
	from Evento eve
	join MEDICAL med on eve.Med_code = med.Med_code
	left join PROVIDER pro on eve.Pro_code = pro.Pro_code
	join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo
	join Confirmacion con on con.Con_codigo = eve.Con_codigo
	join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
	join PATIENT pat on pat.Pat_code = cas.Pat_code
	join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor
	join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo
	where eve.Cis_code = @Cis_code
	order by eve.Eve_inicio

end
else if @TipoConsulta=27
begin
	
	begin try
		begin tran

		declare @eve_inicioE datetime=(select eve_inicio from evento where eve_codigo=@Eve_codigo)  ---IVON TORRES
		
		update Evento set Eve_nov=@NextOfficeVisit where Eve_codigo=@Eve_codigo

		insert into EventoNextOffice(Eno_descripcion, Eno_vigencia, Eno_fecha, Use_Code, Eve_codigo, Eno_nov)
		values(@Eve_descripcion, 1, getdate(), @Use_code, @Eve_codigo, @NextOfficeVisit)

		set @Cantidad = (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where Eve_codigo=@Eve_codigo and Eta_vigencia = 1 and ETA.Eta_numArchivos>Eta_archivosSubidos)
		if @Cantidad = 0 and exists(select ev.Eve_codigo from Evento ev where ev.Eve_codigo=@Eve_codigo and (ev.Eve_nov=0 or ev.Eve_codigoNov is not null))
		and @eve_inicioE < getdate() 	
		begin
			update Evento set Eve_done=1, Ese_codigo=5 where Eve_codigo=@Eve_codigo
			set @Eve_done = 1
		end
		else
		begin			
			set @Eve_done = 0
			update Evento set Eve_done=0, Ese_codigo=(case when Ese_codigo=5 then 1 else Ese_codigo end) where Eve_codigo=@Eve_codigo
		end

		select @Eve_done Eve_done, (select top 1 dbo.Fu_ObtenerDateTime(eno.Eno_fecha) + (' ' + usx.Use_firstName + ' ' + usx.Use_lastName + ' ') 
		+ (case eno.Eno_nov when 0 then 'stopped' else 'started' end) + ' NOV. ' + rtrim(eno.Eno_descripcion) from EventoNextOffice eno 

		join [User] usx on usx.Use_Code=eno.Use_Code where eno.Eve_codigo=@Eve_codigo order by eno.Eno_codigo desc) lastActionNov

		commit tran
	end try
	begin catch
		
		rollback tran

		set @e_message = error_message()
		set @e_severity = error_severity()
		set @e_state = error_state()
		raiserror(@e_message, @e_severity, @e_state)

	end catch

end
else if @TipoConsulta=28
begin
	declare @modelgroup table(
		id varchar(10),
		name varchar(200),		
		color varchar(20),
		[type] varchar(20)
	)

	insert into @modelgroup
	select us.Use_Code, us.Use_firstName + ' ' + us.Use_lastName, '', 'supervisor'
	from [User] us
	where (@RoleName='' or (select count(*) from aspnet_Roles ar join aspnet_UsersInRoles aur on aur.RoleId = ar.RoleId 
							where aur.UserId = us.UserId and ar.RoleName in (select ro.item from dbo.fu_Split(@RoleName,',') ro) )>0) and
	      us.Use_status = '0'
	order by us.Use_lastName, us.Use_firstName

	insert into @modelgroup
	select cat.Cat_codigo, cat.Cat_nombre, cat.Cat_color, 'category'
	from Categoria Cat where Cat.Cat_vigencia=1
	order by cat.Cat_nombre

	insert into @modelgroup
	Select te.Tie_codigo, te.Tie_nombre, '', 'tipoevento'
	from TipoEvento te
	WHERE te.Tie_programable=1 and te.Tie_vigencia=1

	select mg.id, mg.name, mg.color, mg.type
	from @modelgroup mg
end

else if @TipoConsulta=29 -- DELETE EVENTO
begin
/*
	update evento set Eve_vigencia=0,Eve_codExchange=NULL  where Eve_codigo=@Eve_codigo		 
	insert into EventoDelete (eve_codigo,evd_fecha,cod_user,evd_motivo) values(@Eve_codigo,getdate(),@cod_user,@Eve_descripcion)
*/
	--RAY DIAZ 24/11/2015

	if (@tipoDelete = 1) -- elimina solo codigoExch 1
		update evento set Eve_vigencia=0 ,Eve_codExchange=NULL  
		where Eve_codigo=@Eve_codigo
	if (@tipoDelete = 2) -- elimina solo codigoExch 2
		update evento set Eve_vigencia=0 ,Eve_codExchangeSec=NULL  
		where Eve_codigo=@Eve_codigo
	if (@tipoDelete = 3) -- elimina codigoExch 1 y 2
		update evento set Eve_vigencia=0 ,Eve_codExchange=NULL, Eve_codExchangeSec=NULL  
		where Eve_codigo=@Eve_codigo
	
	insert into EventoDelete (eve_codigo,evd_fecha,Use_Code, Use_code_old,evd_motivo) values(@Eve_codigo,getdate(),@Use_code,null,@Eve_descripcion)

end
else if @TipoConsulta = 30 -- eventos sin codigo exchange
begin
Select eve.Eve_codigo,[Eve_inicio],[Eve_fin],[Eve_fecha],[Eve_descripcion],eve.Pro_code,[Med_code],eve.Cis_code,eve.Tie_codigo,[Ese_codigo]
      ,[Eve_codigoNext],eve.Use_Code,isnull(Eve_codExchange,'') as Eve_codExchange,[Eve_descartar],[Con_codigo],[Eve_done],[Eve_override],[Eve_allDay],[Mot_codigo]
      ,[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], isnull(Eve_codExchangeSec,'') as Eve_codExchangeSec,
	  (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status], Tie_nombre from Evento eve 
	  join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
	  join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo
	  where Eve_vigencia = 1 and (isnull(Eve_codExchange,'') = '' OR isnull(Eve_codExchangeSec,'') = '')
	  AND CAST(Eve_inicio AS DATE) >= CAST('11/23/2015' AS DATE)
	  order by Eve_inicio

end


else if @TipoConsulta=31 -- advanced search
begin

set @sqlstring = ' '
set @sqlstring2 = ' '
set @sqlstring3 = ' '
set @sqlstring4 = ' '
set @sqlstring5 = ' '

SET @sqlstring = 'select dbo.fu_replacecomillas(med.Med_phone) as phone_med,eve.Eve_allDay, eve.Eve_override, con.Con_codigo,con.Con_confirmMed confirmDoctor,con.Con_confirmProv confirmNurse, eve.Eve_codigo, eve.Eve_inicio, 
		eve.Eve_fin, eve.Eve_fecha, cas.Cis_accidentDate, dbo.fu_replacecomillas((pat.Pat_firstName + '' '' + pat.Pat_lastName)) as patient, dbo.fu_replacecomillas(pat.Pat_address) as address_pat,
			   tie.Tie_codigo, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_Nombre, tie.Tie_programable, dbo.fu_replacecomillas((med.Med_firstName + '' '' + med.Med_lastName)) as medico, med.Med_code, dbo.fu_replacecomillas(med.Med_address) as address_med, dbo.f
u_replacecomillas((med.Med_address + '', '' + med.Med_city + '' '' + med.Med_state + '', '' + med.Med_zipCode)) as address_medfull,
			  dbo.fu_replacecomillas((pro.Pro_firstName + '' '' + pro.Pro_lastName)) as nurse, pro.Pro_code, dbo.fu_replacecomillas((ltrim(rtrim(sup.Use_firstName)) + '' '' + sup.Use_lastName)) as supervisor, est.Ese_codigo, est.Ese_abreviatura, est.Ese_nombre, (c
ase cas.Cis_status when ''1'' then ''Open'' else ''Close'' end) [status],
			   cas.Cis_code, cas.Cis_caseCode, eve.Eve_codigoNov, eve.Eve_nov, eve.Eve_codExchange, eve.Eve_codExchangeSec, eve.Eve_codigoNext, eve.Use_Code, dbo.fu_replacecomillas(eve.Eve_descripcion) as eve_descripcion,
			  (select count(*) from EventoHistorial eh where eh.Eve_codigo = eve.Eve_codigo and Evh_usado = 0) Cantidad,
			  (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where ETA.Eve_codigo=eve.Eve_codigo and ETA.Eta_numArchivos>Eta_archivosSubidos and ETA.Eta_vigencia = 1) CantidadFalta,
			   cast(cas.Cis_status as varchar) as CasoEstado, cas.Cis_actual, Eve_done, dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1) documents, cast((dbo.Fu_ObtenerLastCall(eve.Eve_codigo)) as varchar(14)) as lastCall from Evento eve
		join MEDICAL med on eve.Med_code = med.Med_code
		left join PROVIDER pro on eve.Pro_code = pro.Pro_code
		join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo
		join Confirmacion con on con.Con_codigo = eve.Con_codigo
		join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
		join PATIENT pat on pat.Pat_code = cas.Pat_code
		join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor
		join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo 
		where eve.eve_vigencia=1 '

		if(@case_status=0) 
		begin
		set @case_status=1
		end
		else if(@case_status=1) 
		begin
		set @case_status=0
		end 
	
	
		if rtrim(ltrim(@case_status)) <> '-1'
		begin
			SET @sqlstring = @sqlstring + ' and ' + cast(@case_status as varchar(15)) + ' = cas.Cis_status'
		end
		if rtrim(ltrim(@Cis_code)) <> 0
		begin
			SET @sqlstring = @sqlstring + ' and (isnull(''' + cast(@Cis_code as varchar(15)) + ''','''')='''' or eve.Cis_code=''' + cast(@Cis_code as varchar(15))  + ''')'
		end
		if rtrim(ltrim(@supervisores)) <> ''
		begin
			SET @sqlstring = @sqlstring + ' and rtrim(ltrim(cas.Cis_caseSupervisor)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split]( ''' + @supervisores + ''' , ''*'') su) '
		end
		if rtrim(ltrim(@eventTypes)) <> ''
		begin
			SET @sqlstring = @sqlstring + ' and tie.Tie_codigo in (select ti.item from [dbo].[fu_Split](''' + @eventTypes + '''  , ''*'') ti)'
		end
		if rtrim(ltrim(@nurses)) <> ''
		begin
			SET @sqlstring2 = @sqlstring2 + ' and ((eve.Pro_code is null and exists(select nu.id from [dbo].[fu_Split](''' + @nurses + ''', ''*'') nu where nu.item=''0'')) or pro.Pro_code in (select nu.item from [dbo].[fu_Split](''' + @nurses + ''', ''*'') nu)) '



		end
		if rtrim(ltrim(@items)) <> ''
		begin
			SET @sqlstring2 = @sqlstring2 + '  and ((dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1)='''' 
			and exists(select nu.id from [dbo].[fu_Split](''' + @items + ''', ''*'') nu where nu.item=0))
			 or (select count(*) from EventoTipoArchivo eta where eta.Eta_vigencia = 1 
			 and eta.Eve_codigo = eve.Eve_codigo and eta.Tia_codigo in (select it.item from [dbo].[fu_Split](''' + @items + ''', ''*'') it) and eta.Eta_archivosSubidos<eta.Eta_numArchivos)>0)'
			 
		end
		if rtrim(ltrim(@status)) <> ''
		begin
			SET @sqlstring2 = @sqlstring2 + ' and est.Ese_codigo in (select es.item from [dbo].[fu_Split](''' + @status + ''', ''*'') es)'
		end

		if rtrim(ltrim(@confirmDoctorSearch)) <> '-1'
		begin
			SET @sqlstring2 = @sqlstring2 + '  and (' + CAST(@confirmDoctorSearch AS VARCHAR(4)) + ' =con.Con_confirmMed) ' 
		end

		if rtrim(ltrim(@phone)) <> ''
		begin
			SET @sqlstring2 = @sqlstring2 + ' and (rtrim(ltrim(''' + @phone + ''' ))=rtrim(ltrim(med.Med_phone)) or rtrim(ltrim(''' + @phone + ''' ))=rtrim(ltrim(med.Med_phoneExt)) or rtrim(ltrim(''' + @phone + ''' ))=rtrim(ltrim(med.Med_alternatePhone)))'
		end
		if rtrim(ltrim(@novs)) <> ''
		begin
			SET @sqlstring2 = @sqlstring2 + ' and (len(''' + @novs + ''' )=0 or ( (eve.Eve_nov=0 and exists(select nov.id from dbo.fu_Split(''' + @novs + ''' ,''*'') nov where nov.item=''sinNov'')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is null and exists(select nov.id from dbo.fu_Split(''' + @novs + ''',''*'') nov where nov.item=''sinNovSchedule'')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is not null and exists(select nov.id from dbo.fu_Split(''' + @novs + ''' ,''*'') nov where nov.item=''conNovSchedule'')) ) )'

		end	
		
			
		if rtrim(ltrim(@doctor)) <> ''
		begin
			SET @sqlstring2 = @sqlstring2 + ' and (med.Med_firstName + '' '' + med.Med_lastName) like ''%' +  @doctor +'%'''
		end	
		if rtrim(ltrim(@patient)) <> ''
		begin
			SET @sqlstring2 = @sqlstring2 + ' and rtrim(ltrim(pat.Pat_firstName + '' '' + pat.Pat_lastName)) like ''%' + @patient + '%'''
		end	
		if @confirmNurseSearch <> -1
		begin
			SET @sqlstring2 = @sqlstring2 + ' and ' + CAST(@confirmNurseSearch AS VARCHAR(4))+ ' = con.Con_confirmProv '
		end	

		if @Eve_inicio is not null
		begin
			SET @sqlstring2 = @sqlstring2 + ' and (''' + (CAST(@Eve_inicio AS VARCHAR(50))) + ''' is null or 
			cast(eve.Eve_inicio as date)>=cast(''' + CAST(@Eve_inicio AS VARCHAR(50)) + ''' as date)) '
		end

		if @Eve_fin is not null
		begin
			SET @sqlstring2 = @sqlstring2 + ' and (''' + CAST(@Eve_fin AS VARCHAR(50)) + ''' is null or cast(eve.Eve_fin as date)<=cast(''' + CAST(@Eve_fin AS VARCHAR(50)) + ''' as date))'
		end
		
		if @withAgenda=1
		begin
			SET @sqlstring3 = @sqlstring3 + ' union all
			select  '''' phone_med, cast(0 as bit) Eve_allDay, cast(0 as bit) Eve_override, 0 Con_codigo, cast(0 as bit) confirmDoctor, cast(0 as bit) confirmNurse, 0 Eve_codigo, cau.Cau_inicio Eve_inicio, cau.Cau_fin Eve_fin, null Eve_fecha, null accident_date, (ltrim(rtrim(usys.Use_firstName)) + '' '' + usys.Use_lastName) patient, '''' address_pat,
					tie.Tie_codigo, tie.Tie_nombre, tie.Tie_programable, ''-'' medico, '''' Med_code, '''' address_med, ''-'' address_medfull,
					''-'' nurse, '''' Pro_code, ''-'' supervisor, cast(0 as tinyint) Ese_codigo, '''' Ese_abreviatura, '''' Ese_nombre, cau.Cau_descripcion [status],
					'''' Cis_code, '''' case_cod, 0 Eve_codigoNov, cast(0 as bit) Eve_nov, '''' Eve_codExchange, '''' Eve_codExchangeSec, 0 Eve_codigoNext, '''' Use_Code, '''' Eve_descripcion,
					0 Cantidad, 0 CantidadFalta, '''' CasoEstado, cast(0 as bit) Cis_actual, cast(0 as bit) Eve_done, '''' documents, '''' lastCall
			from CalendarioUsuario cau
			join TipoEvento tie on tie.Tie_codigo = cau.Tie_codigo
			join [User] usys on usys.Use_Code = cau.Use_Code
			where cau.Cau_vigencia=1 and cau.Cau_mostrarMV=1 '
			if rtrim(ltrim(@nurses)) <> ''
			begin
				SET @sqlstring3 = @sqlstring3 + ' and (cau.Use_Code is null and exists(select nu.id from [dbo].[fu_Split](''' + @nurses + ''', ''*'') nu where nu.item=''0'')) 
				or cau.Use_Code in (select prx.Use_Code from [dbo].[fu_Split](''' + @nurses + ''' , ''*'') nu 
				join PROVIDER prx on ltrim(rtrim(prx.Pro_code))=nu.item) '
			end	
			if @Eve_inicio is not null
			begin
				SET @sqlstring3 = @sqlstring3 + ' and cast(cau.Cau_inicio as date)>=cast(''' + (CAST(@Eve_inicio AS VARCHAR(50))) + ''' as date)'
			end	 
			if @Eve_fin is not null
			begin
				SET @sqlstring3 = @sqlstring3 + ' and cast(cau.Cau_fin as date)<=cast(''' + (CAST(@Eve_fin AS VARCHAR(50))) + ''' as date)'
			end
		end
	
		SET @sqlstring3 = @sqlstring3 + ' ' + @orderBy
		--PRINT (@sqlstring + @sqlstring2 + @sqlstring3) -- + @sqlstring + @sqlstring) --+ @sqlstring3 + @sqlstring)
		exec (@sqlstring + @sqlstring2 + @sqlstring3)

/*
	if @withAgenda=1
	begin
		select dbo.fu_replacecomillas(med.phone_med) as phone_med,eve.Eve_allDay, eve.Eve_override, con.Con_codigo,con.Con_confirmMed confirmDoctor,con.Con_confirmProv confirmNurse, eve.Eve_codigo, eve.Eve_inicio, 
		eve.Eve_fin, eve.Eve_fecha, cas.accident_date, dbo.fu_replacecomillas((pat.name_pat + ' ' + pat.last_pat)) as patient, dbo.fu_replacecomillas(pat.address_pat) as address_pat,
			   tie.Tie_codigo, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_Nombre, tie.Tie_programable, dbo.fu_replacecomillas((med.name_med + ' ' + med.last_med)) as medico, med.cod_med, dbo.fu_replacecomillas(med.address_med) as address_med, dbo.fu_replacecomi
llas((med.address_med + ', ' + med.city + ' ' + med.state + ', ' + med.zipcode)) as address_medfull,
			  dbo.fu_replacecomillas((pro.name_pro + ' ' + pro.Pro_lastName)) as nurse, pro.cod_pro, dbo.fu_replacecomillas((ltrim(rtrim(sup.name)) + ' ' + sup.lastname)) as supervisor, est.Ese_codigo, est.Ese_abreviatura, est.Ese_nombre, (case cas.status when '0'
 then 'Open' else 'Close' end) [status],
			   cas.cod_cis, cas.case_cod, eve.Eve_codigoNov, eve.Eve_nov, eve.Eve_codExchange, eve.Eve_codigoNext, eve.cod_user, dbo.fu_replacecomillas(eve.Eve_descripcion) as eve_descripcion,
			  (select count(*) from EventoHistorial eh where eh.Eve_codigo = eve.Eve_codigo and Evh_usado = 0) Cantidad,
			  (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where ETA.Eve_codigo=eve.Eve_codigo and ETA.Eta_numArchivos>Eta_archivosSubidos and ETA.Eta_vigencia = 1) CantidadFalta,
			   cas.status as CasoEstado, cas.Cis_actual, Eve_done, dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1) documents
		from Evento eve
		join MEDICAL med on eve.cod_med = med.cod_med
		left join PROVIDER pro on eve.cod_pro = pro.cod_pro
		join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo
		join Confirmacion con on con.Con_codigo = eve.Con_codigo
		join CaseInformationSheetHead cas on eve.cod_cis = cas.cod_cis
		join PATIENT pat on pat.cod_pat = cas.cod_pat
		join [User] sup on sup.cod_user = cas.supervisor_user
		join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo

		where (isnull(@cod_cis,'')='' or eve.cod_cis=@cod_cis) and (med.name_med + ' ' + med.last_med) like '%'+@doctor+'%' and rtrim(ltrim(pat.name_pat + ' ' + pat.last_pat)) like '%' + @patient + '%' and
		(len(@supervisores)=0 or rtrim(ltrim(cas.supervisor_user)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split](@supervisores, '*') su)) and
		(len(@eventTypes)=0 or tie.Tie_codigo in (select ti.item from [dbo].[fu_Split](@eventTypes, '*') ti)) and
		(len(@nurses)=0 or (eve.cod_pro is null and exists(select nu.id from [dbo].[fu_Split](@nurses, '*') nu where nu.item=0)) or pro.cod_pro in (select nu.item from [dbo].[fu_Split](@nurses, '*') nu)) and
		(len(@items)=0 or (dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1)='' and exists(select nu.id from [dbo].[fu_Split](@items, '*') nu where nu.item=0)) or (select count(*) from EventoTipoArchivo eta where eta.Eta_vigencia = 1 and eta.Eve_codigo = eve.Eve_codigo and eta.Tia_codigo in (select it.item from [dbo].[fu_Split](@items, '*') it))>0) and
		(len(@status)=0 or est.Ese_codigo in (select es.item from [dbo].[fu_Split](@status, '*') es)) and
	
		(@confirmDoctorSearch=-1 or @confirmDoctorSearch=con.Con_confirmMed) and
		(@confirmNurseSearch=-1 or @confirmNurseSearch=con.Con_confirmProv) and
		(@phone='' or rtrim(ltrim(@phone))=rtrim(ltrim(med.phone_med)) or rtrim(ltrim(@phone))=rtrim(ltrim(med.phone_ext)) or rtrim(ltrim(@phone))=rtrim(ltrim(med.phone_alternative))) and
		( (@Eve_inicio is null or cast(eve.Eve_inicio as date)>=cast(@Eve_inicio as date)) and (@Eve_fin is null or cast(eve.Eve_fin as date)<=cast(@Eve_fin as date)) ) and
		(len(@novs)=0 or ( (eve.Eve_nov=0 and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='sinNov')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is null and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='sinNovSchedule')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is not null and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='conNovSchedule')) ) )
		and eve.eve_vigencia=1
		and (@case_status=-1 or @case_status=cas.status)
		union all
		select  '' phone_med, cast(0 as bit) Eve_allDay, cast(0 as bit) Eve_override, 0 Con_codigo, cast(0 as bit) confirmDoctor, cast(0 as bit) confirmNurse, 0 Eve_codigo, cau.Cau_inicio Eve_inicio, cau.Cau_fin Eve_fin, null Eve_fecha, null accident_date, (ltrim(rtrim(usys.name)) + ' ' + usys.lastname) patient, '' address_pat,
				tie.Tie_codigo, tie.Tie_nombre, tie.Tie_programable, '-' medico, '' cod_med, '' address_med, '-' address_medfull,
				'-' nurse, '' cod_pro, '-' supervisor, cast(0 as tinyint) Ese_codigo, '' Ese_abreviatura, '' Ese_nombre, cau.Cau_descripcion [status],
				'' cod_cis, '' case_cod, 0 Eve_codigoNov, cast(0 as bit) Eve_nov, '' Eve_codExchange, 0 Eve_codigoNext, '' cod_user, '' Eve_descripcion,
				0 Cantidad, 0 CantidadFalta, '' CasoEstado, cast(0 as bit) Cis_actual, cast(0 as bit) Eve_done, '' documents
		from CalendarioUsuario cau
		join TipoEvento tie on tie.Tie_codigo = cau.Tie_codigo
		join [User] usys on usys.cod_user = cau.cod_user
		where cau.Cau_vigencia=1 and cau.Cau_mostrarMV=1 and
			 (len(@nurses)=0 or (cau.cod_user is null and exists(select nu.id from [dbo].[fu_Split](@nurses, '*') nu where nu.item=0)) or cau.cod_user in (select prx.cod_user from [dbo].[fu_Split](@nurses, '*') nu join PROVIDER prx on ltrim(rtrim(prx.cod_pro))=nu.item)) and
			 ( (@Eve_inicio is null or cast(cau.Cau_inicio as date)>=cast(@Eve_inicio as date)) and (@Eve_fin is null or cast(cau.Cau_fin as date)<=cast(@Eve_fin as date)) )
		order by Eve_inicio
	end
	else
	begin
		select dbo.fu_replacecomillas(med.phone_med) as phone_med,eve.Eve_allDay, eve.Eve_override, con.Con_codigo,con.Con_confirmMed confirmDoctor ,con.Con_confirmProv confirmNurse ,eve.Eve_codigo, eve.Eve_inicio, eve.Eve_fin, eve.Eve_fecha, cas.accident_date, dbo.fu_replacecomillas((pat.name_pat + ' ' + pat.last_pat)) patient, dbo.fu_replacecomillas(pat.address_pat) as address_pat,
			   tie.Tie_codigo, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_nombre, tie.Tie_programable, dbo.fu_replacecomillas((med.name_med + ' ' + med.last_med)) as medico, med.cod_med, dbo.fu_replacecomillas(med.address_med) as address_med, 
			   dbo.fu_replacecomillas((med.address_med + ', ' + med.city + ' ' + med.state + ', ' + med.zipcode)) as address_medfull,
			  dbo.fu_replacecomillas((pro.name_pro + ' ' + pro.Pro_lastName)) as nurse, pro.cod_pro, dbo.fu_replacecomillas((ltrim(rtrim(sup.name)) + ' ' + sup.lastname)) as supervisor, est.Ese_codigo, est.Ese_abreviatura, est.Ese_nombre, (case cas.status when '0' then 'Open' else 'Close' end) [status],
			   cas.cod_cis, cas.case_cod, eve.Eve_codigoNov, eve.Eve_nov, eve.Eve_codExchange, eve.Eve_codigoNext, eve.cod_user, dbo.fu_replacecomillas(eve.Eve_descripcion) as eve_descripcion,
			  (select count(*) from EventoHistorial eh where eh.Eve_codigo = eve.Eve_codigo and Evh_usado = 0) Cantidad,
			  (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where ETA.Eve_codigo=eve.Eve_codigo and ETA.Eta_numArchivos>Eta_archivosSubidos and ETA.Eta_vigencia = 1) CantidadFalta,
			   cas.status as CasoEstado, cas.Cis_actual, Eve_done,dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1) documents
		from Evento eve
		join MEDICAL med on eve.cod_med = med.cod_med
		left join PROVIDER pro on eve.cod_pro = pro.cod_pro
		join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo
		join Confirmacion con on con.Con_codigo = eve.Con_codigo
		join CaseInformationSheetHead cas on eve.cod_cis = cas.cod_cis
		join PATIENT pat on pat.cod_pat = cas.cod_pat
		join [User] sup on sup.cod_user = cas.supervisor_user
		join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo

		where (isnull(@cod_cis,'')='' or eve.cod_cis=@cod_cis) and (med.name_med + ' ' + med.last_med) like '%'+@doctor+'%' and rtrim(ltrim(pat.name_pat + ' ' + pat.last_pat)) like '%' + @patient + '%' and
		(len(@supervisores)=0 or rtrim(ltrim(cas.supervisor_user)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split](@supervisores, '*') su)) and
		(len(@eventTypes)=0 or tie.Tie_codigo in (select ti.item from [dbo].[fu_Split](@eventTypes, '*') ti)) and
		(len(@nurses)=0 or (eve.cod_pro is null and exists(select nu.id from [dbo].[fu_Split](@nurses, '*') nu where nu.item=0)) or pro.cod_pro in (select nu.item from [dbo].[fu_Split](@nurses, '*') nu)) and
		(len(@items)=0 or (dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1)='' and exists(select nu.id from [dbo].[fu_Split](@items, '*') nu where nu.item=0)) or (select count(eta.Eve_codigo) from EventoTipoArchivo eta where eta.Eta_vigencia=1 and eta.Eve_codigo=eve.Eve_codigo and isnull(eta.Eta_archivosSubidos,0)=0 and eta.Tia_codigo in (select it.item from [dbo].[fu_Split](@items, '*') it))>0) and
		(len(@status)=0 or est.Ese_codigo in (select es.item from [dbo].[fu_Split](@status, '*') es)) and
	
		(@confirmDoctorSearch=-1 or @confirmDoctorSearch=con.Con_confirmMed) and
		(@confirmNurseSearch=-1 or @confirmNurseSearch=con.Con_confirmProv) and
		(@phone='' or rtrim(ltrim(@phone))=rtrim(ltrim(med.phone_med)) or rtrim(ltrim(@phone))=rtrim(ltrim(med.phone_ext)) or rtrim(ltrim(@phone))=rtrim(ltrim(med.phone_alternative))) and
		( (@Eve_inicio is null or cast(eve.Eve_inicio as date)>=cast(@Eve_inicio as date)) and (@Eve_fin is null or cast(eve.Eve_fin as date)<=cast(@Eve_fin as date)) ) and
		(len(@novs)=0 or ( (eve.Eve_nov=0 and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='sinNov')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is null and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='sinNovSchedule')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is not null and exists(select nov.id from dbo.fu_Split(@novs,'*') nov where nov.item='conNovSchedule')) ) )
		and eve.eve_vigencia=1
		and (@case_status=-1 or @case_status=cas.status)
		order by eve.Eve_inicio
	end
	*/
end
--actualizar codigo de exchange - server secundario
--Ray Diaz
else if @TipoConsulta=32
begin
	UPDATE Evento
		SET Eve_codExchangeSec = @Eve_codExchange			
	where eve_codigo = @Eve_codigo
end

else if @TipoConsulta = 33 -- eventos no vigentes que aun falta eliminar de exchange
begin
/*Select eve.Eve_codigo,[Eve_inicio],[Eve_fin],[Eve_fecha],[Eve_descripcion],eve.cod_pro,[cod_med],eve.cod_cis,eve.Tie_codigo,[Ese_codigo]
      ,[Eve_codigoNext],eve.cod_user,isnull(Eve_codExchange,'') as Eve_codExchange,[Eve_descartar],[Con_codigo],[Eve_done],[Eve_override],[Eve_allDay],[Mot_codigo]
      ,[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], isnull(Eve_codExchangeSec,'') as Eve_codExchangeSec,
	  (case cas.status when '0' then 'Open' else 'Close' end) [status], Tie_nombre from Evento eve 
	  join CaseInformationSheetHead cas on eve.cod_cis = cas.cod_cis
	  join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo
	  where Eve_vigencia = 0 and (isnull(Eve_codExchange,'') <> '' OR isnull(Eve_codExchangeSec,'') <> '')
	  --AND CAST(Eve_fecha AS DATE) >= CAST('11/23/2015' AS DATE)
*/

Select eve.Eve_codigo,[Eve_inicio],[Eve_fin],[Eve_fecha],[Eve_descripcion],eve.Pro_code,[Med_code],eve.Cis_code,eve.Tie_codigo,[Ese_codigo]
      ,[Eve_codigoNext],eve.Use_Code,isnull(Eve_codExchange,'') as Eve_codExchange,[Eve_descartar],[Con_codigo],[Eve_done],[Eve_override],[Eve_allDay],[Mot_codigo]
      ,[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], isnull(Eve_codExchangeSec,'') as Eve_codExchangeSec,
	  (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status], Tie_nombre from Evento eve 
	  join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
	  join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo
	  where --eve_codigo in (select eve_codigo from EVENTOTEMP)
	  eve_codigo in (39753,
39893,
47255,
51460,
43674,
44752,
51470,
42630,
42163)
		/*(
		select * from evento where Eve_codigo not in (select eve_codigo from EventoHistorial) and cast(Eve_fecha as date) >= cast('07/19/2016' as date)
		and Eve_vigencia = 1 --order by Eve_inicio


		union all

		select * from evento where Eve_codigo in (select eve_codigo from EventoHistorial) and cast(Eve_fecha as date) >= cast('07/19/2016' as date)
		and Eve_vigencia = 1 ) as t-- order by Eve_codigo
		)*/

end

else if @TipoConsulta = 34 -- actualizar estado de eventos
begin

--RAY DIAZ 24/11/2015
	update evento set Eve_statusUpdateExc = @tipoDelete
	where Eve_codigo=@Eve_codigo

end	

else if @TipoConsulta = 35 -- eventos vigentes que no han sido actualizados en exchange
begin
Select eve.Eve_codigo,[Eve_inicio],[Eve_fin],[Eve_fecha],[Eve_descripcion],eve.Pro_code,[Med_code],eve.Cis_code,eve.Tie_codigo,[Ese_codigo]
      ,[Eve_codigoNext],eve.Use_Code,isnull(Eve_codExchange,'') as Eve_codExchange,[Eve_descartar],[Con_codigo],[Eve_done],[Eve_override],[Eve_allDay],[Mot_codigo]
      ,[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], isnull(Eve_codExchangeSec,'') as Eve_codExchangeSec,
	  (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status], Tie_nombre, Eve_statusUpdateExc from Evento eve 
	  join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
	  join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo
	  where Eve_vigencia = 1 and Eve_statusUpdateExc in (1,2)
	  --AND CAST(Eve_fecha AS DATE) >= CAST('11/23/2015' AS DATE)

end

--- listado personalizado de eventos
else if @TipoConsulta = 36 -- eventos sin codigo exchange
begin
Select eve.Eve_codigo,[Eve_inicio],[Eve_fin],[Eve_fecha],[Eve_descripcion],eve.Pro_code,[Med_code],eve.Cis_code,eve.Tie_codigo,[Ese_codigo]
      ,[Eve_codigoNext],eve.Use_Code,isnull(Eve_codExchange,'') as Eve_codExchange,[Eve_descartar],[Con_codigo],[Eve_done],[Eve_override],[Eve_allDay],[Mot_codigo]
      ,[Cat_codigo],Evh_undoChangeUser,[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia], isnull(Eve_codExchangeSec,'') as Eve_codExchangeSec,
	  (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status], Tie_nombre from Evento eve 
	  join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
	  join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo
	  where Eve_vigencia = 1 and (isnull(Eve_codExchange,'') = '' OR isnull(Eve_codExchangeSec,'') = '')
	  AND /*CAST(Eve_inicio AS DATE) >= CAST('11/23/2015' AS DATE)
	  order by Eve_inicio*/

	  --eve_codigo in (SELECT EVE_CODIGO FROM EVENTOTEMP)
	   eve_codigo in (39753,
39893,
47255,
51460,
43674,
44752,
51470,
42630,
42163)
end


else if @TipoConsulta = 37 -- Para envio de correos
begin
--select dbo.fu_replacecomillas(med.Med_phone) as phone_med,eve.Eve_allDay, eve.Eve_override, con.Con_codigo,con.Con_confirmMed confirmDoctor,con.Con_confirmProv confirmNurse, eve.Eve_codigo, eve.Eve_inicio, 
--		eve.Eve_fin, eve.Eve_fecha, cas.Cis_accidentDate, dbo.fu_replacecomillas((pat.Pat_firstName + ' ' + pat.Pat_lastName)) as patient, dbo.fu_replacecomillas(pat.Pat_address) as address_pat,
--			   tie.Tie_codigo, dbo.fu_replacecomillas(tie.Tie_nombre) as tie_Nombre, tie.Tie_programable, dbo.fu_replacecomillas((med.Med_firstName + ' ' + med.Med_lastName)) as medico, med.Med_code, dbo.fu_replacecomillas(med.Med_address) as address_med, dbo.fu_replacecomillas((med.Med_address + ', ' + med.Med_city + ' ' + med.Med_state + ', ' + med.Med_zipCode)) as address_medfull,
--			  dbo.fu_replacecomillas((pro.Pro_firstName + ' ' + pro.Pro_lastName)) as nurse, pro.Pro_code, dbo.fu_replacecomillas((ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName)) as supervisor, est.Ese_codigo, est.Ese_abreviatura, est.Ese_nombre, (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status],
--			   cas.Cis_code, cas.Cis_caseCode, eve.Eve_codigoNov, eve.Eve_nov, eve.Eve_codExchange, eve.Eve_codExchangeSec, eve.Eve_codigoNext, eve.Use_Code, dbo.fu_replacecomillas(eve.Eve_descripcion) as eve_descripcion,
--			  (select count(*) from EventoHistorial eh where eh.Eve_codigo = eve.Eve_codigo and Evh_usado = 0) Cantidad,
--			  (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where ETA.Eve_codigo=eve.Eve_codigo and ETA.Eta_numArchivos>Eta_archivosSubidos and ETA.Eta_vigencia = 1) CantidadFalta,
--			   cast(cas.Cis_status as varchar) as CasoEstado, cas.Cis_actual, Eve_done, dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1) documents, cast((dbo.Fu_ObtenerLastCall(eve.Eve_codigo)) as varchar(14)) as lastCall, us.Use_email  
--			   from Evento eve
--		join MEDICAL med on eve.Med_code = med.Med_code
--		left join PROVIDER pro on eve.Pro_code = pro.Pro_code
--		join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo
--		join Confirmacion con on con.Con_codigo = eve.Con_codigo
--		join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
--		join PATIENT pat on pat.Pat_code = cas.Pat_code
--		join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor
--		join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo 
--		left join [User] us on pro.Use_code=us.Use_code
--		where eve.eve_vigencia=1  and 1 = cas.Cis_status and rtrim(ltrim(cas.Cis_caseSupervisor)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split]( '26*46*51*53*80*97*131*136' , '*') su)  and tie.Tie_codigo in (select ti.item from [dbo].[fu_Split]('45*50*60*61*62*63*66'  , '*') ti)  
--		--and ((eve.Pro_code is null and exists(select nu.id from [dbo].[fu_Split](@nurses, '*') nu where nu.item='0')) 
--		--or pro.Pro_code in (select nu.item from [dbo].[fu_Split](@nurses, '*') nu))  
--		and est.Ese_codigo in (select es.item from [dbo].[fu_Split]('1', '*') es) and (len('sinNov*conNovSchedule*sinNovSchedule' )=0 or ( (eve.Eve_nov=0 and exists(select nov.id from dbo.fu_Split('sinNov*conNovSchedule*sinNovSchedule' ,'*') nov where nov.item='sinNov')) 
--		or (eve.Eve_nov=1 and eve.Eve_codigoNov is null and exists(select nov.id from dbo.fu_Split('sinNov*conNovSchedule*sinNovSchedule','*') nov where nov.item='sinNovSchedule')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is not null and exists(select nov.id from dbo.fu_Split('sinNov*conNovSchedule*sinNovSchedule' ,'*') nov where nov.item='conNovSchedule')) ) ) 
--		and (@Eve_inicio is null or cast(eve.Eve_inicio as date)>=cast(@Eve_inicio as date))  
--		and (@Eve_fin is null or cast(eve.Eve_fin as date)<=cast(@Eve_fin as date))   
--		and eve.Pro_code is not null
--		order by 21,8 asc

if(@nurses='Updates')
		begin
			select eve.Eve_codigo,eve.Eve_inicio, dbo.fu_replacecomillas((pat.Pat_firstName + ' ' + pat.Pat_lastName)) as patient, dbo.fu_replacecomillas((med.Med_firstName + ' ' + med.Med_lastName)) as medico, dbo.fu_replacecomillas(med.Med_address) as address_med,dbo.fu_replacecomillas((med.Med_address + ', ' + med.Med_city + ' ' + med.Med_state + ', ' + med.Med_zipCode)) as address_medfull,
			dbo.fu_replacecomillas(med.Med_phone) as phone_med,	dbo.fu_replacecomillas(tie.Tie_nombre) as tie_Nombre, dbo.fu_replacecomillas((pro.Pro_firstName + ' ' + pro.Pro_lastName)) as nurse, pro.Pro_code, dbo.fu_replacecomillas((ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName)) as supervisor,
			est.Ese_nombre, (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status], dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1) documents, us.Use_email  
			from Evento eve
			join MEDICAL med on eve.Med_code = med.Med_code
			left join PROVIDER pro on eve.Pro_code = pro.Pro_code
			join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo
			join Confirmacion con on con.Con_codigo = eve.Con_codigo
			join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
			join PATIENT pat on pat.Pat_code = cas.Pat_code
			join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor
			join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo 
			left join [User] us on pro.Use_code=us.Use_code
			where eve.eve_vigencia=1  and 1 = cas.Cis_status and rtrim(ltrim(cas.Cis_caseSupervisor)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split]( '26*46*51*53*80*97*131*136' , '*') su)  and tie.Tie_codigo in (select ti.item from [dbo].[fu_Split]('45*50*60*61*62*63*66'  , '*') ti)  
			--and ((eve.Pro_code is null and exists(select nu.id from [dbo].[fu_Split](@nurses, '*') nu where nu.item='0')) 
			--or pro.Pro_code in (select nu.item from [dbo].[fu_Split](@nurses, '*') nu))  
			and est.Ese_codigo in (select es.item from [dbo].[fu_Split]('1', '*') es) and (len('sinNov*conNovSchedule*sinNovSchedule' )=0 or ( (eve.Eve_nov=0 and exists(select nov.id from dbo.fu_Split('sinNov*conNovSchedule*sinNovSchedule' ,'*') nov where nov.item='sinNov')) 
			or (eve.Eve_nov=1 and eve.Eve_codigoNov is null and exists(select nov.id from dbo.fu_Split('sinNov*conNovSchedule*sinNovSchedule','*') nov where nov.item='sinNovSchedule')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is not null and exists(select nov.id from dbo.fu_Split('sinNov*conNovSchedule*sinNovSchedule' ,'*') nov where nov.item='conNovSchedule')) ) ) 
			and (@Eve_inicio is null or cast(eve.Eve_inicio as date)>=cast(@Eve_inicio as date))  
			and (@Eve_fin is null or cast(eve.Eve_fin as date)<=cast(@Eve_fin as date))   
			and eve.Pro_code is not null
			and dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1) like '%NURSE UPDATE (0 of 1)%'
			order by 9,2 asc
		end
	else
		begin 
			select eve.Eve_codigo,eve.Eve_inicio, dbo.fu_replacecomillas((pat.Pat_firstName + ' ' + pat.Pat_lastName)) as patient, dbo.fu_replacecomillas((med.Med_firstName + ' ' + med.Med_lastName)) as medico, dbo.fu_replacecomillas(med.Med_address) as address_med,dbo.fu_replacecomillas((med.Med_address + ', ' + med.Med_city + ' ' + med.Med_state + ', ' + med.Med_zipCode)) as address_medfull,
			dbo.fu_replacecomillas(med.Med_phone) as phone_med,	dbo.fu_replacecomillas(tie.Tie_nombre) as tie_Nombre, dbo.fu_replacecomillas((pro.Pro_firstName + ' ' + pro.Pro_lastName)) as nurse, pro.Pro_code, dbo.fu_replacecomillas((ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName)) as supervisor,
			est.Ese_nombre, (case cas.Cis_status when '1' then 'Open' else 'Close' end) [status], dbo.Fu_ObtenerDocuments(eve.Eve_codigo,1) documents, us.Use_email  
			from Evento eve
			join MEDICAL med on eve.Med_code = med.Med_code
			left join PROVIDER pro on eve.Pro_code = pro.Pro_code
			join EstadoEvento est on eve.Ese_codigo = est.Ese_codigo
			join Confirmacion con on con.Con_codigo = eve.Con_codigo
			join CaseInformationSheetHead cas on eve.Cis_code = cas.Cis_code
			join PATIENT pat on pat.Pat_code = cas.Pat_code
			join [User] sup on sup.Use_Code = cas.Cis_caseSupervisor
			join TipoEvento tie on tie.Tie_codigo = eve.Tie_codigo 
			left join [User] us on pro.Use_code=us.Use_code
			where eve.eve_vigencia=1  and 1 = cas.Cis_status and rtrim(ltrim(cas.Cis_caseSupervisor)) in (select rtrim(ltrim(su.item)) from [dbo].[fu_Split]( '26*46*51*53*80*97*131*136' , '*') su)  and tie.Tie_codigo in (select ti.item from [dbo].[fu_Split]('45*50*60*61*62*63*66'  , '*') ti)  
			--and ((eve.Pro_code is null and exists(select nu.id from [dbo].[fu_Split](@nurses, '*') nu where nu.item='0')) 
			--or pro.Pro_code in (select nu.item from [dbo].[fu_Split](@nurses, '*') nu))  
			and est.Ese_codigo in (select es.item from [dbo].[fu_Split]('1', '*') es) and (len('sinNov*conNovSchedule*sinNovSchedule' )=0 or ( (eve.Eve_nov=0 and exists(select nov.id from dbo.fu_Split('sinNov*conNovSchedule*sinNovSchedule' ,'*') nov where nov.item='sinNov')) 
			or (eve.Eve_nov=1 and eve.Eve_codigoNov is null and exists(select nov.id from dbo.fu_Split('sinNov*conNovSchedule*sinNovSchedule','*') nov where nov.item='sinNovSchedule')) or (eve.Eve_nov=1 and eve.Eve_codigoNov is not null and exists(select nov.id from dbo.fu_Split('sinNov*conNovSchedule*sinNovSchedule' ,'*') nov where nov.item='conNovSchedule')) ) ) 
			and (@Eve_inicio is null or cast(eve.Eve_inicio as date)>=cast(@Eve_inicio as date))  
			and (@Eve_fin is null or cast(eve.Eve_fin as date)<=cast(@Eve_fin as date))   
			and eve.Pro_code is not null
			order by 9,2 asc
		end


end


--Alter table EventoDelete alter column cod_user  char(4) null

--Alter table EventoDelete alter column Use_code  int not null
go

IF (OBJECT_ID(N'pa_EventoBloqueo', N'P') IS NOT NULL)
	DROP procedure pa_EventoBloqueo
GO
CREATE PROCEDURE pa_EventoBloqueo
             @Evb_codigo    int=Null output,
             @Eve_codigo    int=Null,
             @Evb_fechaInicio    datetime=Null,
             @Evb_fechaFin    datetime=Null,
             @cod_user    char(4)=Null,
             @Evb_vigencia    bit=Null,
			 @bloqueo    bit=Null,
			 @Evb_message    varchar(350)=Null output

,@TipoConsulta tinyint
AS 
declare @usuario varchar(100)


if @TipoConsulta=1 
Begin
             UPDATE dbo.[EventoBloqueo]SET 
                          [Eve_codigo]=@Eve_codigo,
                          [Evb_fechaInicio]=@Evb_fechaInicio,
                          [Evb_fechaFin]=@Evb_fechaFin,
                          [Use_code]=@cod_user,
                          [Evb_vigencia]=@Evb_vigencia
             WHERE  Evb_codigo = @Evb_codigo

End

--===========================================================================================
--==========PROCEDIMIENTO EventoBloqueoGetByAll ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=2
begin
Select * from EventoBloqueo
End

--===========================================================================================
--==========PROCEDIMIENTO EventoBloqueoGetByPrimaryKey ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=3
begin
Select * from EventoBloqueo
WHERE  Evb_codigo = @Evb_codigo
End

--===========================================================================================
--==========PROCEDIMIENTO EventoBloqueoInsert ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=4
Begin
	
	if(@bloqueo = 1) --bloquear el evento
	begin
		if (select count(*) from EventoBloqueo where Eve_codigo = @Eve_codigo and Evb_fechaFin is null)=0
		begin
				INSERT INTO [dbo].[EventoBloqueo]
				 ([Eve_codigo],[Evb_fechaInicio],[Evb_fechaFin],[Use_code_old],[Use_code],[Evb_vigencia])
				 VALUES(@Eve_codigo,GETDATE(),@Evb_fechaFin,null,@cod_user,1)
				
				 SET @Evb_codigo= @@IDENTITY
				 SET @Evb_message = ''
		end
		else
		begin
			if (select count(*) from EventoBloqueo where Eve_codigo = @Eve_codigo and Evb_fechaFin is null and ltrim(rtrim(Use_code)) = ltrim(rtrim(@cod_user)))>0
				SET @Evb_message = ''
			else
				set @Evb_message = (select Use_firstName + ' ' + Use_lastName  from [User] where Use_code in (select top 1 Use_code from EventoBloqueo where Eve_codigo = @Eve_codigo and Evb_fechaFin is null))
		end            
	end
	else
	begin -- desbloquear el evento
		if (select count(*) from EventoBloqueo where Eve_codigo = @Eve_codigo and Evb_fechaFin is null and ltrim(rtrim(Use_code)) = ltrim(rtrim(@cod_user)))>0
		begin
			SET @Evb_codigo = ISNULL((select TOP 1 Evb_codigo from EventoBloqueo where Eve_codigo = @Eve_codigo and Evb_fechaFin is null and ltrim(rtrim(Use_code)) = ltrim(rtrim(@cod_user))),0)
		
			UPDATE [dbo].[EventoBloqueo]
				SET Evb_fechaFin = GETDATE()
			WHERE Evb_codigo = @Evb_codigo
		end
		SET @Evb_message = ''
			
	end
End

--===========================================================================================
--==========PROCEDIMIENTO EventoBloqueoDelete ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=5
begin
Delete from EventoBloqueo
WHERE  Evb_codigo = @Evb_codigo
end

--===========================================================================================
else if @TipoConsulta=6
begin
Select * from EventoBloqueo
where Eve_codigo Like @Eve_codigo+ '%'
end

--===========================================================================================
--==========PROCEDIMIENTO EventoBloqueoGetEve_codigo ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=7
Begin
Select * from EventoBloqueo
where Eve_codigo = @Eve_codigo
end

----DESBLOQUEAR TODOS LOS EVENTOS BLOQUEADOS POR UN USUARIO (AL CERRAR O INICIAR SESION)
else if @TipoConsulta=8
Begin
	update EventoBloqueo
	set Evb_fechaFin = getdate()
	where ltrim(rtrim(Use_code)) = ltrim(rtrim(@cod_user)) and Evb_fechaFin is null
end
go

IF (OBJECT_ID(N'pa_EventoFile', N'P') IS NOT NULL)
	DROP procedure pa_EventoFile
GO
create PROCEDURE pa_EventoFile
             @Evf_codigo    int=Null output,
             @Evf_descripcion    varchar(2000)=Null,
             @Evf_vigencia    bit=Null,
             @Evf_nombre    varchar(1000)=Null,
             @Eve_codigo    int=Null,
			 @Tia_codigo    smallint=Null,
			 @FilesXml		text=Null,
			 @usu_codigo    char(4)=Null

,@TipoConsulta tinyint
AS 

declare @Cantidad int, @Eve_codigoNov int

if @TipoConsulta=1 
Begin
        UPDATE dbo.[EventoFile]SET 
            [Evf_descripcion]=@Evf_descripcion,
            [Evf_vigencia]=@Evf_vigencia,
            [Evf_nombre]=@Evf_nombre,
            [Eve_codigo]=@Eve_codigo
        WHERE  Evf_codigo = @Evf_codigo

End

--===========================================================================================
--==========PROCEDIMIENTO EventoFileGetByAll ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=2
begin
	Select * from EventoFile
End

--===========================================================================================
--==========PROCEDIMIENTO EventoFileGetByPrimaryKey ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=3
begin
	Select * from EventoFile
	WHERE  Evf_codigo = @Evf_codigo
End

--===========================================================================================
--==========PROCEDIMIENTO EventoFileInsert ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=4
Begin
        INSERT INTO [dbo].[EventoFile]
        (
            [Evf_descripcion],
            [Evf_vigencia],
			Evf_fecha,
            [Evf_nombre],
            [Eve_codigo],
			Tia_codigo
        )
        VALUES
        (
            @Evf_descripcion,
            1,
			GETDATE(),
            @Evf_nombre,
            @Eve_codigo,
			@Tia_codigo
        )
        SET @Evf_codigo= @@IDENTITY
End

--===========================================================================================
--==========PROCEDIMIENTO EventoFileDelete ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=5
begin
	
	--update EventoFile set Evf_vigencia=0 WHERE  Evf_codigo = @Evf_codigo
	update EventoFile set Evf_vigencia=0,Evf_deleteUser = @usu_codigo,
	Evf_fecha_delete =  getdate() WHERE  Evf_codigo = @Evf_codigo

	--update Evento set Eve_done = 0 where Eve_codigo = @Eve_codigo
	update EventoTipoArchivo set Eta_archivosSubidos = isnull(Eta_archivosSubidos,0) - 1
	WHERE  Tia_codigo = @Tia_codigo And Eve_codigo = @Eve_codigo

	set @Cantidad = (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where Eve_codigo=@Eve_codigo and Eta_vigencia = 1 and ETA.Eta_numArchivos>Eta_archivosSubidos)
	
	--select Con_confirmMed from Confirmacion where con_codigo=(select Con_codigo from Evento where Eve_codigo=@Eve_codigo)
	if(dbo.Fu_ValidarEstadoCompletado(@Eve_codigo)=0)
	begin
		update Evento set Eve_done=1, Ese_codigo=5 where Eve_codigo=@Eve_codigo		
	end
	else
	begin
		update Evento set Eve_done=0 where Eve_codigo=@Eve_codigo
		if(@Cantidad > 0 )
			update Evento set Ese_codigo=1 where Eve_codigo=@Eve_codigo
	end

	select cast(et.Eta_archivosSubidos as tinyint) as Eta_archivosSubidos, et.Eta_numArchivos, '' last_pat, '' name_pat, '' last_med, ti.Tia_nombre, getdate() Eve_inicio, @Cantidad Cantidad, eve.Eve_done
	from EventoTipoArchivo et
	join Evento eve on eve.Eve_codigo = et.Eve_codigo
	join TipoArchivo ti on ti.Tia_codigo = et.Tia_codigo
	WHERE et.Tia_codigo = @Tia_codigo And et.Eve_codigo = @Eve_codigo

end

--===========================================================================================

else if @TipoConsulta=6
begin
    Select ef.*, ta.Tia_nombre,(select ' ' + upper(ltrim(rtrim(left(isnull(Use_firstName,' '),1))) + '' + ltrim(rtrim(left(isnull(Use_lastName,' '),1))))   
	from [USER] where Use_code = ef.Evf_user) as InicialNombre from EventoFile ef
    join TipoArchivo ta on ef.Tia_codigo = ta.Tia_codigo
    where ef.Eve_codigo = @Eve_codigo and (@Tia_codigo=0 or ef.Tia_codigo = @Tia_codigo) and ef.Evf_vigencia=1
end

else if @TipoConsulta=7
begin   
    declare @hDoc int, @Numerofiles int, @Eta_archivosSubidos tinyint, @Eta_numArchivos tinyint, @Con_codigo int
    declare @tbFile table(
        Id int identity(1,1),
        Evf_codigo int,
        Evf_vigencia bit,
        Evf_descripcion varchar(2000),
        Evf_nombre varchar(1000),
        Eve_codigo int,
        Tia_codigo smallint,
        Evf_user char(4)
    )

    exec sp_xml_preparedocument @hDoc output, @FilesXml

    insert into @tbFile (Evf_codigo, Evf_vigencia, Evf_descripcion, Evf_nombre, Eve_codigo, Tia_codigo,Evf_user)
    SELECT tb.Evf_codigo, tb.Evf_vigencia, tb.Evf_descripcion, ltrim(rtrim(tb.Evf_nombre)), tb.Eve_codigo, tb.Tia_codigo, tb.Evf_user
    FROM OPENXML(@hDoc, N'/ROOT/EventoFile')
    with (Eve_codigo int, Tia_codigo int, Evf_codigo int, Evf_vigencia bit, Evf_nombre varchar(1000), Evf_descripcion varchar(2000), Evf_user varchar(2000)) as tb
    
    exec sp_xml_removedocument @hDoc
    
    set @Numerofiles = (SELECT count(*) FROM @tbFile tb where tb.Evf_codigo=0) + 
                       (SELECT count(*) FROM EventoFile ef where ef.Eve_codigo=@Eve_codigo and ef.Tia_codigo=@Tia_codigo and ef.Evf_vigencia=1 and ef.Evf_codigo not in (select tb.Evf_codigo from @tbFile tb where tb.Evf_vigencia=0 and tb.Eve_codigo>0))
        
    select @Eta_archivosSubidos = Eta_archivosSubidos, @Eta_numArchivos = Eta_numArchivos, @Eve_codigoNov=isnull(eve.Eve_codigoNov,0)
    from EventoTipoArchivo eta
    join Evento eve on eve.Eve_codigo=eta.Eve_codigo
    WHERE Tia_codigo = @Tia_codigo And eve.Eve_codigo = @Eve_codigo and Eta_vigencia = 1

    if (@Numerofiles) <= @Eta_numArchivos
    begin
        -- registrando archivos nuevos      
        INSERT INTO EventoFile(Evf_descripcion, Evf_vigencia, Evf_nombre, Eve_codigo, Tia_codigo, Evf_fecha,Evf_user)
        SELECT tb.Evf_descripcion, 1, tb.Evf_nombre, tb.Eve_codigo, tb.Tia_codigo, getdate() ,Evf_user
        from @tbFile tb
        where tb.Evf_codigo=0 and tb.Evf_nombre not in (select ef.Evf_nombre from EventoFile ef where ef.Eve_codigo=@Eve_codigo and ef.Tia_codigo=@Tia_codigo and ef.Evf_vigencia=1)
                
        -- eliminando y activando archivos ya registrados
        update ef set Evf_vigencia=tb.Evf_vigencia from EventoFile ef 
        join @tbFile tb on tb.Evf_codigo=ef.Evf_codigo
        
        -- actualizando el numero de archivos para el tipo de archivo del evento
        update EventoTipoArchivo set Eta_archivosSubidos = @Numerofiles WHERE  Tia_codigo = @Tia_codigo and Eve_codigo = @Eve_codigo

        set @Cantidad = (select COUNT(*) from EventoTipoArchivo ETA where Eve_codigo=@Eve_codigo and Eta_vigencia = 1 and ETA.Eta_numArchivos>Eta_archivosSubidos)
                        
        if(dbo.Fu_ValidarEstadoCompletado(@Eve_codigo)=0)
            begin
            update Evento set Eve_done=1, Ese_codigo=5 where Eve_codigo=@Eve_codigo
            end
        else
            begin
            update Evento set Eve_done=0 where Eve_codigo=@Eve_codigo
            end
        select et.Eta_archivosSubidos, et.Eta_numArchivos, pa.Pat_lastName, pa.Pat_firstName, me.Med_lastName, ti.Tia_nombre, ev.Eve_inicio, @Cantidad Cantidad, ev.Eve_done
        from EventoTipoArchivo et
        join TipoArchivo ti on ti.Tia_codigo = et.Tia_codigo
        join Evento ev on et.Eve_codigo = ev.Eve_codigo
        
        join CaseInformationSheetHead cas on cas.Cis_code = ev.Cis_code
        join Patient pa on pa.Pat_code = cas.Pat_code

        join Medical me on ev.Med_code = me.Med_code
        left join Provider po on po.Pro_code = ev.Pro_code
        WHERE et.Tia_codigo = @Tia_codigo And et.Eve_codigo = @Eve_codigo and et.Eta_vigencia=1
    end
    else
    begin
        select cast(0 as tinyint) Eta_archivosSubidos, cast(0 as tinyint) Eta_numArchivos, '' Pat_lastName, '' Pat_firstName, '' Med_lastName, '' Tia_nombre, getdate() Eve_inicio, 0 Cantidad, cast(0 as bit) Eve_done
    end

end
go

IF (OBJECT_ID(N'pa_EventoTipoArchivo', N'P') IS NOT NULL)
	DROP procedure pa_EventoTipoArchivo
GO
create PROCEDURE pa_EventoTipoArchivo
             @Tia_codigo    smallint=Null,
             @Eve_codigo    int=Null,
             @Eta_numArchivos    tinyint=Null,
			 @Eta_archivosSubidos tinyint=Null output,

			 @Eve_done		  bit=null output,
             @Eta_vigencia    bit=Null,
			 @UploadFile	  bit=Null,

			 @Tie_codigo tinyint=Null

,@TipoConsulta tinyint
AS 

declare @cod_med char(10), @cod_pro char(10), @Con_codigo int, @Cantidad int, @Eve_codigoNov int

if @TipoConsulta=1 
Begin
	UPDATE dbo.[EventoTipoArchivo] SET [Eta_numArchivos]=@Eta_numArchivos
	WHERE  Tia_codigo = @Tia_codigo And Eve_codigo = @Eve_codigo

	set @Cantidad = (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where Eve_codigo=@Eve_codigo and Eta_vigencia = 1 and ETA.Eta_numArchivos>Eta_archivosSubidos)
	
	--if @Cantidad = 0 and exists(select ev.Eve_codigo from Evento ev where ev.Eve_codigo=@Eve_codigo and (ev.Eve_nov=0 or ev.Eve_codigoNov is not null))
	if(dbo.Fu_ValidarEstadoCompletado(@Eve_codigo)=0)
	begin
		update Evento set Eve_done=1, Ese_codigo=5 where Eve_codigo = @Eve_codigo
		set @Eve_done = 1
	end
	else
	begin
		update Evento set Eve_done=0 where Eve_codigo = @Eve_codigo
		set @Eve_done = 0
	end
End

--===========================================================================================
--==========PROCEDIMIENTO EventoTipoArchivoGetByAll ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=2
begin
Select * from EventoTipoArchivo
End

--===========================================================================================
--==========PROCEDIMIENTO EventoTipoArchivoGetByPrimaryKey ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=3
begin
	Select * from EventoTipoArchivo et
	join TipoArchivo ta on et.Tia_codigo =  ta.Tia_codigo
	WHERE et.Tia_codigo = @Tia_codigo And Eve_codigo = @Eve_codigo
End

--===========================================================================================
--==========PROCEDIMIENTO EventoTipoArchivoInsert ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=4
Begin
        INSERT INTO [dbo].[EventoTipoArchivo]
        (
			[Tia_codigo],
			[Eve_codigo],
			[Eta_numArchivos],
			[Eta_vigencia],
			Eta_archivosSubidos
        )
        VALUES
        (
			@Tia_codigo,
			@Eve_codigo,
			@Eta_numArchivos,
			@Eta_vigencia,
			0
        )
        SET @Tia_codigo= @@IDENTITY
End

--===========================================================================================
--==========PROCEDIMIENTO EventoTipoArchivoDelete ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=5
begin
	
	update EventoTipoArchivo set Eta_vigencia = 0
	WHERE  Tia_codigo = @Tia_codigo And Eve_codigo = @Eve_codigo

	set @Cantidad = (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where Eve_codigo=@Eve_codigo and Eta_vigencia = 1 and ETA.Eta_numArchivos>Eta_archivosSubidos)
		
	if(dbo.Fu_ValidarEstadoCompletado(@Eve_codigo)=0)
	begin
		update Evento set Eve_done=1, Ese_codigo=5 where Eve_codigo = @Eve_codigo
		set @Eve_done = 1
	end
	else
	begin
		update Evento set Eve_done=0 where Eve_codigo = @Eve_codigo
		set @Eve_done = 0
	end

end

--===========================================================================================
else if @TipoConsulta=6
begin
	Select TAR.Tia_codigo, TAR.Tia_nombre, ETA.Eve_codigo, ETA.Eta_numArchivos, ETA.Eta_vigencia, ETA.Eta_archivosSubidos
	from EventoTipoArchivo ETA	
	join TipoArchivo TAR on ETA.Tia_codigo=TAR.Tia_codigo
	where ETA.Eve_codigo = @Eve_codigo and ETA.Eta_vigencia = 1
	order by TAR.Tia_fecha desc
end

--===========================================================================================
--==========PROCEDIMIENTO EventoTipoArchivoGetTia_codigo ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=7
Begin
Select * from EventoTipoArchivo
where Tia_codigo = @Tia_codigo
end

--===========================================================================================
--===========================================================================================
--==========PROCEDIMIENTO EventoTipoArchivoGetEve_codigo ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=8
Begin
Select * from EventoTipoArchivo
where Eve_codigo = @Eve_codigo
end

--===========================================================================================
--===========================================================================================
--==========PROCEDIMIENTO EventoTipoArchivoDelete ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=9
begin
	if @UploadFile = 1
	begin
		select @Eta_archivosSubidos = Eta_archivosSubidos, @Eta_numArchivos = Eta_numArchivos, @Eve_codigoNov=isnull(eve.Eve_codigoNov,0)
		from EventoTipoArchivo eta
		join Evento eve on eve.Eve_codigo=eta.Eve_codigo
		WHERE Tia_codigo = @Tia_codigo And eve.Eve_codigo = @Eve_codigo

		if (@Eta_archivosSubidos + 1) <= @Eta_numArchivos
		begin
			update EventoTipoArchivo set Eta_archivosSubidos = isnull(Eta_archivosSubidos,0) + 1		
			WHERE  Tia_codigo = @Tia_codigo And Eve_codigo = @Eve_codigo

			set @Cantidad = (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where Eve_codigo=@Eve_codigo and Eta_vigencia = 1 and ETA.Eta_numArchivos>Eta_archivosSubidos)

			select et.Eta_archivosSubidos, et.Eta_numArchivos, pa.last_pat, pa.name_pat, me.last_med, ti.Tia_nombre, ev.Eve_inicio, @Cantidad Cantidad
			from EventoTipoArchivo et
			join TipoArchivo ti on ti.Tia_codigo = et.Tia_codigo
			join Evento ev on et.Eve_codigo = ev.Eve_codigo
		
			join CASE_INFORMATION_SHEET_HEAD cas on cas.cod_cis = ev.cod_cis
			join PATIENT pa on pa.cod_pat = cas.cod_pat

			join MEDICAL me on ev.cod_med = me.cod_med
			join PROVIDER po on po.cod_pro = ev.cod_pro
			WHERE et.Tia_codigo = @Tia_codigo And et.Eve_codigo = @Eve_codigo			
						
			--if @Cantidad = 0 and exists(select ev.Eve_codigo from Evento ev where ev.Eve_codigo=@Eve_codigo and (ev.Eve_nov=0 or ev.Eve_codigoNov is not null))
			if(dbo.Fu_ValidarEstadoCompletado(@Eve_codigo)=0)
				update Evento set Eve_done=1, Ese_codigo=5 where Eve_codigo = @Eve_codigo
			else
				update Evento set Eve_done=0 where Eve_codigo = @Eve_codigo
		end
		else
		begin
			select cast(0 as tinyint) Eta_archivosSubidos, cast(0 as tinyint) Eta_numArchivos, '' last_pat, '' name_pat, '' last_med, 
			       '' Tia_nombre, getdate() Eve_inicio, 0 Cantidad
		end
	end
	else
	begin
		
		update Evento set Eve_done = 0 where Eve_codigo = @Eve_codigo
		update EventoTipoArchivo set Eta_archivosSubidos = isnull(Eta_archivosSubidos,0) - 1
		WHERE  Tia_codigo = @Tia_codigo And Eve_codigo = @Eve_codigo

		select et.Eta_archivosSubidos, et.Eta_numArchivos, '' last_pat, '' name_pat, '' last_med, ti.Tia_nombre, getdate() Eve_inicio, 
			   (select COUNT(*) as Cantidad from EventoTipoArchivo ETA where Eve_codigo=@Eve_codigo and Eta_vigencia = 1 and ETA.Eta_numArchivos>Eta_archivosSubidos) Cantidad
		from EventoTipoArchivo et
		join TipoArchivo ti on ti.Tia_codigo = et.Tia_codigo
		WHERE et.Tia_codigo = @Tia_codigo And et.Eve_codigo = @Eve_codigo		
	end		
end
go

--===========================================================================================
--==========PROCEDIMIENTO MEDICALUpdate ========================
--===========================================================================================
--===========================================================================================

IF (OBJECT_ID('pa_MEDICAL', N'P') IS NOT NULL)
	DROP PROCEDURE pa_MEDICAL
GO
CREATE PROCEDURE pa_MEDICAL
(
             @cod_med    char(10)=Null,
             @name_med    varchar(100)=Null,
             @last_med    varchar(100)=Null,
             @address_med    varchar(255)=Null,
             @phone_med    varchar(15)=Null,
             @fax_med    varchar(15)=Null,
             @cod_spc    char(3)=Null,
             @status    char(1)=Null,
             @office    varchar(100)=Null,
             @city    varchar(50)=Null,
             @state    varchar(50)=Null,
             @zipcode    varchar(50)=Null,
             @zip_ext    varchar(4)=Null,
             @phone_ext    varchar(5)=Null,
             @phone_alternative    varchar(20)=Null,			 
			 @Med_code int=null,

			 --@cod_cis varchar(15)=Null,	
			 @cis_code int=Null,
			 			 
			 @busqueda varchar(250) = null

,@TipoConsulta tinyint
)
AS 
begin
--if @TipoConsulta=1 
--Begin
--             UPDATE dbo.[MEDICAL]SET 
--                          [name_med]=@name_med,
--                          [last_med]=@last_med,
--                          [address_med]=@address_med,
--                          [phone_med]=@phone_med,
--                          [fax_med]=@fax_med,
--                          [cod_spc]=@cod_spc,
--                          [status]=@status,
--                          [office]=@office,
--                          [city]=@city,
--                          [state]=@state,
--                          [zipcode]=@zipcode,
--                          [zip_ext]=@zip_ext,
--                          [phone_ext]=@phone_ext,
--                          [phone_alternative]=@phone_alternative
--             WHERE  cod_med = @cod_med

--End

----===========================================================================================
----==========PROCEDIMIENTO MEDICALGetByAll ========================
----===========================================================================================
----===========================================================================================
--else if @TipoConsulta=2
--begin
--Select * from MEDICAL
--End

----===========================================================================================
----==========PROCEDIMIENTO MEDICALGetByPrimaryKey ===============
----===========================================================================================
----===========================================================================================
--else if @TipoConsulta=3
--begin
--Select * from MEDICAL
--WHERE  cod_med = @cod_med
--End

----===========================================================================================
----==========PROCEDIMIENTO MEDICALInsert ========================
----===========================================================================================
----===========================================================================================
--else if @TipoConsulta=4
--Begin
--        INSERT INTO [dbo].[MEDICAL]
--        (
--            [cod_med],
--            [name_med],
--            [last_med],
--            [address_med],
--            [phone_med],
--            [fax_med],
--            [cod_spc],
--            [status],
--            [office],
--            [city],
--            [state],
--            [zipcode],
--            [zip_ext],
--            [phone_ext],
--            [phone_alternative]
--        )
--        VALUES
--        (
--            @cod_med,
--            @name_med,
--            @last_med,
--            @address_med,
--            @phone_med,
--            @fax_med,
--            @cod_spc,
--            @status,
--            @office,
--            @city,
--            @state,
--            @zipcode,
--            @zip_ext,
--            @phone_ext,
--            @phone_alternative
--        )
--        SET @cod_med= @@IDENTITY
--End

----===========================================================================================
----==========PROCEDIMIENTO MEDICALDelete ========================
----===========================================================================================
----===========================================================================================
--else if @TipoConsulta=5
--begin
--Delete from MEDICAL
--WHERE  cod_med = @cod_med
--end

----===========================================================================================
--else if @TipoConsulta=6
--begin
--	Select dbo.fu_replacecomillas(cod_med)cod_med, dbo.fu_replacecomillas(name_med)name_med, dbo.fu_replacecomillas(last_med)last_med , dbo.fu_replacecomillas(address_med)address_med, dbo.fu_replacecomillas(phone_med)phone_med
--	from MEDICAL
--	--where rtrim(ltrim(name_med + ' ' + last_med)) like '%' + @busqueda + '%' and status='0'
--	where rtrim(ltrim(last_med)) like '%' + @busqueda + '%' and status='0'
--end

----===========================================================================================
----==========PROCEDIMIENTO MEDICALGetcod_spc ===============
----===========================================================================================
----===========================================================================================
--else if @TipoConsulta=7
--Begin
--	Select * from MEDICAL
--	where cod_spc = @cod_spc
--end

--Ray Diaz
--doctors in case
 if @TipoConsulta=8
begin
---ivon
		SELECT Distinct e.Med_code,dbo.fu_replacecomillas(upper(Med_firstName)) name_med, dbo.fu_replacecomillas(upper(Med_lastName)) last_med,
	dbo.fu_replacecomillas(upper(Med_address)) as address_med,dbo.fu_replacecomillas(Med_city) city,
		   dbo.fu_replacecomillas(Med_state) state,dbo.fu_replacecomillas(Med_zipCode) zipcode,
	dbo.fu_replacecomillas(Med_zipCodeExt) zip_ext,dbo.fu_replacecomillas(Med_phone) phone_med,
	dbo.fu_replacecomillas(Med_phoneExt) phone_ext,dbo.fu_replacecomillas(Med_alternatePhone)phone_alternative,
	dbo.fu_replacecomillas(Med_fax) fax_med,dbo.fu_replacecomillas(upper(Med_office)) as office,dbo.fu_replacecomillas(Spe_name) name_spc
		from Evento e inner join MEDICAL m on e.Med_code=m.Med_code inner join Specialty s on m.Spe_code=s.Spe_code 
		where Cis_code=@cis_code and Eve_vigencia=1 and ese_codigo in (1,5) 
	union
	select c.Med_code,dbo.fu_replacecomillas(upper(Med_firstName)) name_med, dbo.fu_replacecomillas(upper(Med_lastName)) last_med,
	dbo.fu_replacecomillas(upper(Med_address)) as address_med,dbo.fu_replacecomillas(Med_city) city,
		   dbo.fu_replacecomillas(Med_state) state,dbo.fu_replacecomillas(Med_zipCode) zipcode,
	dbo.fu_replacecomillas(Med_zipCodeExt) zip_ext,dbo.fu_replacecomillas(Med_phone) phone_med,
	dbo.fu_replacecomillas(Med_phoneExt) phone_ext,dbo.fu_replacecomillas(Med_alternatePhone)phone_alternative,
	dbo.fu_replacecomillas(Med_fax) fax_med,dbo.fu_replacecomillas(upper(Med_office)) as office,dbo.fu_replacecomillas(Spe_name) name_spc
	from CaseInformationSheetBodyMed c, medical m ,  Specialty s
	where m.Spe_code=s.Spe_code and c.Med_code=m.Med_code and cis_code=@cis_code and c.Csm_status=1 
	order by 2
	--order by upper(last_med)

End

--Ray Diaz
--LISTA DE DOCTORES POR PARAMETRO
else if @TipoConsulta=9
begin	
	if @cis_code = 0
	begin
		SELECT Med_code, dbo.fu_replacecomillas(upper(Med_firstName)) name_med, dbo.fu_replacecomillas(upper(Med_lastName)) last_med,
		dbo.fu_replacecomillas(upper(Med_address)) as address_med, dbo.fu_replacecomillas(Med_city) city, 
		       dbo.fu_replacecomillas(Med_state) state,dbo.fu_replacecomillas(Med_zipCode) zipcode, 
			   dbo.fu_replacecomillas(Med_zipCodeExt) zip_ext, dbo.fu_replacecomillas(Med_phone) phone_med, 
			   dbo.fu_replacecomillas(Med_phoneExt) phone_ext, dbo.fu_replacecomillas(Med_alternatePhone)phone_alternative, 
			   dbo.fu_replacecomillas(Med_fax) fax_med, dbo.fu_replacecomillas(upper(Med_office)) as office, dbo.fu_replacecomillas(s.spe_name) name_spc
		FROM MEDICAL m
		join Specialty s on s.Spe_code=m.Spe_code
		WHERE rtrim(ltrim(Med_lastName)) like @busqueda + '%' and Med_status=1
		order by upper(Med_lastName)
	end
	else
	begin

		SELECT c.Med_code, dbo.fu_replacecomillas(upper(Med_firstName)) name_med, dbo.fu_replacecomillas(upper(Med_lastName)) last_med,
		dbo.fu_replacecomillas(upper(Med_address)) as address_med, dbo.fu_replacecomillas(Med_city) city, 
		       dbo.fu_replacecomillas(Med_state) state,dbo.fu_replacecomillas(Med_zipCode) zipcode, 
			   dbo.fu_replacecomillas(Med_zipCodeExt) zip_ext, dbo.fu_replacecomillas(Med_phone) phone_med, 
			   dbo.fu_replacecomillas(Med_phoneExt) phone_ext, dbo.fu_replacecomillas(Med_alternatePhone)phone_alternative, 
			   dbo.fu_replacecomillas(Med_fax) fax_med, dbo.fu_replacecomillas(upper(Med_office)) as office, dbo.fu_replacecomillas(s.spe_name) name_spc

		
		from CaseInformationSheetBodyMed c, medical m, Specialty s
		where m.Spe_code=s.Spe_code and c.Med_code=m.Med_code and Cis_code=@cis_code and c.Csm_status=1 

		union

		SELECT Med_code, dbo.fu_replacecomillas(upper(Med_firstName)) name_med, dbo.fu_replacecomillas(upper(Med_lastName)) last_med,
		dbo.fu_replacecomillas(upper(Med_address)) as address_med, dbo.fu_replacecomillas(Med_city) city, 
		       dbo.fu_replacecomillas(Med_state) state,dbo.fu_replacecomillas(Med_zipCode) zipcode, 
			   dbo.fu_replacecomillas(Med_zipCodeExt) zip_ext, dbo.fu_replacecomillas(Med_phone) phone_med, 
			   dbo.fu_replacecomillas(Med_phoneExt) phone_ext, dbo.fu_replacecomillas(Med_alternatePhone)phone_alternative, 
			   dbo.fu_replacecomillas(Med_fax) fax_med, dbo.fu_replacecomillas(upper(Med_office)) as office, dbo.fu_replacecomillas(s.spe_name) name_spc		
		FROM MEDICAL m
		join Specialty s on s.Spe_code=m.Spe_code
		where rtrim(ltrim(Med_lastName)) like @busqueda + '%' and Med_status=1 and
		      Med_code not in (select cisMed.Med_code from CaseInformationSheetBodyMed cisMed where cisMed.Cis_code = @cis_code)

		order by dbo.fu_replacecomillas(upper(Med_lastName))
	end

END
else if @TipoConsulta=10
begin
SELECT Med_code, dbo.fu_replacecomillas(upper(Med_firstName)) name_med, dbo.fu_replacecomillas(upper(Med_lastName)) last_med,
		dbo.fu_replacecomillas(upper(Med_address)) as address_med, dbo.fu_replacecomillas(Med_phone) phone_med, 
		dbo.fu_replacecomillas(Med_fax) fax_med, spe.Spe_code, dbo.fu_replacecomillas(spe.Spe_name) name_spc, Med_status,dbo.fu_replacecomillas(upper(Med_office)) as office,
		dbo.fu_replacecomillas(Med_city) city, dbo.fu_replacecomillas(Med_state) state, dbo.fu_replacecomillas(Med_zipCode) zipcode, 
			   dbo.fu_replacecomillas(Med_zipCodeExt) zip_ext, 
			   dbo.fu_replacecomillas(Med_phoneExt) phone_ext, dbo.fu_replacecomillas(Med_alternatePhone)phone_alternative
		
	from MEDICAL MED
	inner join Specialty SPE on MED.Spe_code=SPE.Spe_code
	where rtrim(ltrim(MED.Med_code)) = rtrim(ltrim(@Med_code))
end
--else if @TipoConsulta=11
--begin
--	(select dbo.fu_replacecomillas(phone_med) phone_med from MEDICAL) union 
--	(select dbo.fu_replacecomillas(phone_ext) phone_ext from MEDICAL) 
--	union (select dbo.fu_replacecomillas(phone_alternative)phone_alternative from MEDICAL)
--end

--else if @TipoConsulta=12
--begin
--	if(rtrim(ltrim(@cod_spc)) = '082' OR rtrim(ltrim(@cod_spc)) = '001')
--		select cod_med,name_med,last_med,address_med,city,state,
--		zipcode,zip_ext,phone_med,phone_ext,phone_alternative,fax_med,name_spc,
--		office,m.cod_spc from medical m left JOIN speciality s ON m.cod_spc=s.cod_spc
--		where  name_med<>'---------------'
--		and last_med like '%' + @last_med + '%'
--		order by city
--	else
--		select cod_med,name_med,last_med,address_med,city,state,
--		zipcode,zip_ext,phone_med,phone_ext,phone_alternative,fax_med,name_spc,
--		office,m.cod_spc from medical m left JOIN speciality s ON m.cod_spc=s.cod_spc
--		where  name_med<>'---------------'
--		and --ltrim(rtrim(name_med)) + ' ' + 
--		ltrim(rtrim(last_med)) like ltrim(rtrim(@last_med)) + '%' 
--		AND ltrim(rtrim(s.cod_spc)) = ltrim(rtrim(@cod_spc))
--		order by city

--end
end
go

IF (OBJECT_ID(N'pa_ModelGroup', N'P') IS NOT NULL)
	DROP procedure pa_ModelGroup
GO
create PROCEDURE pa_ModelGroup
	@TipoConsulta tinyint,
	@RoleName	  varchar(100)=Null
AS

if @TipoConsulta=1
 

begin
	declare @modelgroup1 table(
		id varchar(60),
		name varchar(200),
		color varchar(20),
		programable bit,
		[type] varchar(20),
		nov bit
	)

	insert into @modelgroup1
	select us.Use_code, us.Use_firstName + ' ' + us.Use_lastName, '', cast(0 as bit), 'supervisor',''
	from [USER] us
	where (@RoleName='' or (select count(*) from aspnet_Roles ar join aspnet_UsersInRoles aur on aur.RoleId = ar.RoleId 
							where aur.UserId = us.UserId and ar.RoleName in (select ro.item from dbo.fu_Split(@RoleName,',') ro) )>0) and
	      us.Use_status = 1
	order by us.Use_lastName, us.Use_firstName

	-- lista de categorias vigentes
	insert into @modelgroup1
	select cat.Cat_codigo, cat.Cat_nombre, cat.Cat_color, cast(0 as bit), 'category',''
	from Categoria Cat where Cat.Cat_vigencia=1
	order by cat.Cat_nombre

	-- lista de tipos de evento --programables
	insert into @modelgroup1
	Select te.Tie_codigo, te.Tie_nombre, '', te.Tie_programable, 'tipoevento',te.Tie_nov
	from TipoEvento te
	WHERE te.Tie_vigencia=1 --and te.Tie_programable=1

	

	-- lista de roles
	insert into @modelgroup1
	select ar.RoleId, ar.RoleName, '', cast(0 as bit), 'role',''
	from aspnet_Roles ar where ar.Vigencia=1
	order by ar.Orden

	select mg.id, mg.name, mg.color, mg.programable, mg.type,mg.nov
	from @modelgroup1 mg
 end
else if @TipoConsulta=2
begin	
	declare @modelgroup2 table(
		id varchar(20),
		name varchar(200),
		abreviatura varchar(10),
		[type] varchar(20)		
	)

	-- lista de tipos de evento usados
	insert into @modelgroup2
	select distinct tie.Tie_codigo, Tie_nombre, '', 'tipoevento'
	from Evento eve
	join TipoEvento tie on eve.Tie_codigo=tie.Tie_codigo	
	order by Tie_nombre

	-- lista de enfermeras
	insert into @modelgroup2
	select p.Pro_code, p.Pro_firstName + ' ' + p.Pro_lastName, '', 'provider'
	from PROVIDER p where p.Pro_status = 1 and rtrim(ltrim(p.Pro_code_old))<>'De09R00001'
	order by p.Pro_firstName, p.Pro_lastName

	-- lista de tipos de archivo
	insert into @modelgroup2
	SELECT ta.Tia_codigo, ta.Tia_nombre, '', 'tipoarchivo'
	FROM TipoArchivo ta where ta.Tia_vigencia=1
	order by ta.Tia_nombre

	-- lista de estados
	insert into @modelgroup2
	Select ee.Ese_codigo, ee.Ese_nombre, ee.Ese_abreviatura, 'estadoevento'
	from EstadoEvento ee where ee.Ese_vigencia=1

	select mg.id, mg.name, mg.abreviatura, mg.type
	from @modelgroup2 mg
end
else if @TipoConsulta=3
begin	
	declare @modelgroup3 table(
		id varchar(10),
		name varchar(200),
		abreviatura varchar(10),
		[type] varchar(20)		
	)

	-- lista de tipos de evento usados
	insert into @modelgroup3
	select distinct tie.Tie_codigo, Tie_nombre, '', 'tipoevento'
	from Evento eve
	join TipoEvento tie on eve.Tie_codigo=tie.Tie_codigo	
	order by Tie_nombre

	-- lista de tipos de evento no programables
	/*insert into @modelgroup3
	Select te.Tie_codigo, te.Tie_nombre, '', 'tiponoprogramable' from TipoEvento te
	WHERE te.Tie_programable=0 and te.Tie_vigencia=1*/

	-- lista de enfermeras
	insert into @modelgroup3
	select p.Pro_code, p.Pro_firstName + ' ' + p.Pro_lastName, '', 'provider'
	from PROVIDER p where p.Pro_status = 1 and rtrim(ltrim(p.Pro_code_old))<>'De09R00001'
	order by p.Pro_firstName, p.Pro_lastName

	-- lista de estados
	insert into @modelgroup3
	Select ee.Ese_codigo, ee.Ese_nombre, ee.Ese_abreviatura, 'estadoevento'
	from EstadoEvento ee where ee.Ese_vigencia=1

	select mg.id, mg.name, mg.abreviatura, mg.type
	from @modelgroup3 mg
end
go

IF (OBJECT_ID(N'pa_PROVIDER', N'P') IS NOT NULL)
	DROP procedure pa_PROVIDER
GO
CREATE PROCEDURE pa_PROVIDER
             @cod_pro    char(10)=Null,
			 @pro_code    int=Null,
             @name_pro    varchar(100)=Null,
             @last_pro    varchar(100)=Null,
             @address_pro    varchar(255)=Null,
             @phone_pro    varchar(15)=Null,
             @fax_pro    varchar(15)=Null,
             @status_pro    char(1)=Null,
             @number_pro    varchar(20)=Null,
             @fein_pro    char(9)=Null,
             @city    varchar(50)=Null,
             @state    varchar(50)=Null,
             @zipcode    varchar(5)=Null,
			 
			 @Eve_codigo  int=Null,
			 @available   bit=Null,
			 @Usu_over   bit=Null,

			 @busqueda varchar(250) = null,
			 @fechaInicio datetime=null,
			 @fechaFin datetime=null
,@TipoConsulta tinyint
AS 
--if @TipoConsulta=1 
--Begin
--        UPDATE dbo.[PROVIDER]SET 
--            [name_pro]=@name_pro,
--            [last_pro]=@last_pro,
--            [address_pro]=@address_pro,
--            [phone_pro]=@phone_pro,
--            [fax_pro]=@fax_pro,
--            [status_pro]=@status_pro,
--            [number_pro]=@number_pro,
--            [fein_pro]=@fein_pro,
--            [city]=@city,
--            [state]=@state,
--            [zipcode]=@zipcode
--        WHERE  cod_pro = @cod_pro

--End

----===========================================================================================
----==========PROCEDIMIENTO PROVIDERGetByAll ========================
----===========================================================================================
----===========================================================================================
 if @TipoConsulta=2
begin
Select * from PROVIDER where Pro_status = 1 and rtrim(ltrim(Pro_code_old))<>'De09R00001'
order by Pro_firstName, Pro_lastName
End

--===========================================================================================
--==========PROCEDIMIENTO PROVIDERGetByPrimaryKey ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=3
begin
Select * from PROVIDER
WHERE  pro_code = @pro_code
End

--===========================================================================================
--==========PROCEDIMIENTO PROVIDERInsert ========================
--===========================================================================================
--===========================================================================================
--else if @TipoConsulta=4
--Begin
--        INSERT INTO [dbo].[PROVIDER]
--        (
--            [cod_pro],
--            [name_pro],
--            [last_pro],
--            [address_pro],
--            [phone_pro],
--            [fax_pro],
--            [status_pro],
--            [number_pro],
--            [fein_pro],
--            [city],
--            [state],
--            [zipcode]
--        )
--        VALUES
--        (
--            @cod_pro,
--            @name_pro,
--            @last_pro,
--            @address_pro,
--            @phone_pro,
--            @fax_pro,
--            @status_pro,
--            @number_pro,
--            @fein_pro,
--            @city,
--            @state,
--            @zipcode
--        )
--        SET @cod_pro= @@IDENTITY
--End

----===========================================================================================
----==========PROCEDIMIENTO PROVIDERDelete ========================
----===========================================================================================
----===========================================================================================
--else if @TipoConsulta=5
--begin
--Delete from PROVIDER
--WHERE  cod_pro = @cod_pro
--end

----===========================================================================================
else if @TipoConsulta=6
begin
	Select Pro_code, Pro_firstName, Pro_lastName , Pro_address, Pro_phone
	from PROVIDER
	where rtrim(ltrim(Pro_firstName + ' ' + Pro_lastName)) like '%' + @busqueda + '%' and Pro_status = 1 and rtrim(ltrim(Pro_code_old))<>'De09R00001'
end
----LISTA DE ENFERMERAS POR PARAMETRO
else if @TipoConsulta=9
begin
	
	if @fechaInicio is null
	begin
		SELECT us.Use_email, Pro_code, Pro_firstName, Pro_lastName , us.Use_address, us.Use_phone phone_pro, cast(1 as bit) available, '' infobusy, cast(1 as bit) Usu_over
		FROM PROVIDER pro
		join [User] us on us.Use_code = pro.Use_code
		where rtrim(ltrim(Pro_firstName + ' ' + Pro_lastName)) like '%' + @busqueda + '%' and Pro_status = 1 and rtrim(ltrim(Pro_code_old))<>'De09R00001'
	end
	else
	begin
		
		declare @tbEnfermeras table(
			mail varchar(50),
			Pro_code int,
			Pro_FirstName varchar(100),
			Pro_lastName varchar(100),
			Pro_address varchar(255),
			Pro_phone varchar(15),
			infobusy varchar(1000),
			available bit,
			Usu_over bit
		)

		insert into @tbEnfermeras(Usu_over,mail,Pro_code, Pro_firstName, Pro_lastName, Pro_address, Pro_phone, infobusy, available)
		SELECT cast(1 as bit) Usu_over,us.Use_email, Pro_code, pro.Pro_firstName, Pro_lastName , us.Use_address, us.Use_phone Pro_phone, dbo.Fu_ObtenerInfoBusy(@fechaInicio, @fechaFin, pro.Use_code, @Eve_codigo) infobusy, cast(1 as bit)
		FROM PROVIDER pro
		join [User] us on us.Use_code = pro.Use_code
		where rtrim(ltrim(Pro_firstName + ' ' + Pro_lastName)) like '%' + @busqueda + '%' and Pro_status = 1 and rtrim(ltrim(Pro_code_old))<>'De09R00001'

		update @tbEnfermeras set available = 0 where len(ltrim(infobusy))>0

		select * from @tbEnfermeras tb where (@available=0 or tb.available = @available)

	end

END
go



--===========================================================================================
--==========PROCEDIMIENTO RecordatorioUpdate ========================
--===========================================================================================
--===========================================================================================
IF (OBJECT_ID(N'pa_Recordatorio', N'P') IS NOT NULL)
	DROP procedure pa_Recordatorio
GO
CREATE PROCEDURE pa_Recordatorio
        @Rec_codigo    int=Null output,
        @Ret_codigo    int=Null,
        @Rec_descripcion    text=Null,
        @Rec_tipo    bit=Null,
        @Rec_fechaInicio    datetime=Null,
        @Rec_every    bit=Null,
        @Rec_everydays    smallint=Null,
        @Rec_repetir    bit=Null,
        @Rec_repetirCada    tinyint=Null,
        @Rec_repetirDuracion    tinyint=Null,
        @Rec_expira    bit=Null,
        @Rec_fechaExpiracion    datetime=Null,
        @Rec_vigencia    bit=Null,

		@eventos varchar(400)=null,
		@reminders	 varchar(400)=null,
		--@cod_user	char(4)=null,
		@Use_code    int=null,
		@Eve_codigo int=Null

,@TipoConsulta tinyint
AS 
if @TipoConsulta=1 
Begin	

	if (select count(*) from Recordatorio re
		WHERE re.Rec_codigo = @Rec_codigo and
			  cast(@Rec_descripcion as varchar(3000))=cast(re.Rec_descripcion as varchar(3000)) and @Rec_tipo=re.Rec_tipo and @Rec_fechaInicio=re.Rec_fechaInicio and @Rec_every=re.Rec_every and @Rec_everydays=re.Rec_everydays and
			  @Rec_repetir=re.Rec_repetir and @Rec_repetirCada=re.Rec_repetirCada and @Rec_repetirDuracion=re.Rec_repetirDuracion and @Rec_expira=re.Rec_expira and
			  @Rec_fechaExpiracion=re.Rec_fechaExpiracion
	   ) = 0
	begin
		-- agregando log
		insert into RecordatorioLog(Rec_codigo,Rec_descripcion,Rec_tipo,Rec_fechaInicio,Rec_every,Rec_everydays,Rec_repetir,Rec_repetirCada,Rec_repetirDuracion,Rec_expira,Rec_fechaExpiracion,Rec_vigencia,Rel_fecha,Use_code_old)
		select re.Rec_codigo, re.Rec_descripcion, re.Rec_tipo, re.Rec_fechaInicio, re.Rec_every, re.Rec_everydays, re.Rec_repetir, re.Rec_repetirCada, re.Rec_repetirDuracion, re.Rec_expira, re.Rec_fechaExpiracion, re.Rec_vigencia, getdate(), @Use_code
		from Recordatorio re where re.Rec_codigo = @Rec_codigo

		-- actualizando el recordatorio
		UPDATE dbo.[Recordatorio]SET
			[Rec_descripcion]=@Rec_descripcion,
			[Rec_tipo]=@Rec_tipo,
			[Rec_fechaInicio]=@Rec_fechaInicio,
			[Rec_every]=@Rec_every,
			[Rec_everydays]=@Rec_everydays,
			[Rec_repetir]=@Rec_repetir,
			[Rec_repetirCada]=@Rec_repetirCada,
			[Rec_repetirDuracion]=@Rec_repetirDuracion,
			[Rec_expira]=@Rec_expira,
			[Rec_fechaExpiracion]=@Rec_fechaExpiracion,
			Rec_ultimaAparicion = null
		WHERE Rec_codigo = @Rec_codigo
		
		if GETDATE() > @Rec_fechaInicio
			Update Recordatorio set Rec_nextAparicion = DATEADD(hour, dbo.Fu_ObtenerHorasToIncrementar(Rec_repetirCada, Rec_fechaInicio), Rec_fechaInicio)
			where Ret_codigo = @Rec_codigo and Rec_repetir = 1
		else
			Update Recordatorio set Rec_nextAparicion = @Rec_fechaInicio where Ret_codigo = @Rec_codigo and Rec_repetir = 1
	end

End

--===========================================================================================
--==========PROCEDIMIENTO RecordatorioGetByAll ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=2
begin
Select * from Recordatorio
End

--===========================================================================================
--==========PROCEDIMIENTO RecordatorioGetByPrimaryKey ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=3
begin
Select * from Recordatorio
WHERE  Rec_codigo = @Rec_codigo
End

--===========================================================================================
--==========PROCEDIMIENTO RecordatorioInsert ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=4
Begin
        INSERT INTO [dbo].[Recordatorio]
        (
            [Ret_codigo],
            [Rec_descripcion],
            [Rec_tipo],
            [Rec_fechaInicio],
            [Rec_every],
            [Rec_everydays],
            [Rec_repetir],
            [Rec_repetirCada],
            [Rec_repetirDuracion],
            [Rec_expira],
            [Rec_fechaExpiracion],
            Rec_nextAparicion,
			[Rec_vigencia]			
        )
        VALUES
        (
            @Ret_codigo,
            @Rec_descripcion,
            @Rec_tipo,
            @Rec_fechaInicio,
            @Rec_every,
            @Rec_everydays,
            @Rec_repetir,
            @Rec_repetirCada,
            @Rec_repetirDuracion,
            @Rec_expira,
            @Rec_fechaExpiracion,
			@Rec_fechaInicio,
            1
        )
        SET @Rec_codigo= @@IDENTITY
End

--===========================================================================================
--==========PROCEDIMIENTO RecordatorioDelete ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=5
begin
	Select re.*, rt.Ret_fecha, dbo.Fu_ObtenerUsersInReminder(rt.Ret_codigo) Users
	from Recordatorio re
	join RecordatorioTrigger rt on rt.Ret_codigo = re.Ret_codigo
	where rt.Eve_codigo = @Eve_codigo and re.Rec_vigencia = 1 and rt.Ret_vigencia = 1
	order by rt.Ret_fecha
end

--===========================================================================================
else if @TipoConsulta=6
begin
	Select * from Recordatorio
	where Ret_codigo Like @Ret_codigo+ '%'
end

--===========================================================================================
--==========PROCEDIMIENTO RecordatorioGetRet_codigo ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=7
Begin
	Select * from Recordatorio
	where Ret_codigo = @Ret_codigo
end
else if @TipoConsulta=8
Begin

	Update Recordatorio set Rec_ultimaAparicion = getdate(), Rec_nextAparicion = DATEADD(hour, dbo.Fu_ObtenerHorasToIncrementar(Rec_repetirCada, isnull(Rec_ultimaAparicion, Rec_fechaInicio)), isnull(Rec_ultimaAparicion, Rec_fechaInicio))
	where Ret_codigo in (select re.item from dbo.fu_Split(@reminders, ',') re)

	select e.Eve_codigo, e.Eve_inicio, e.Eve_fin, e.Con_codigo, e.Eve_descripcion, e.Cis_code, ee.Ese_codigo, ee.Ese_color, ee.Ese_abreviatura, ee.Ese_nombre, 
		   e.Tie_codigo, tie.Tie_nombre, e.Use_code, cas.Cis_accidentDate, (pat.Pat_firstName + ' ' + pat.Pat_lastName) patient, pat.Pat_address,
		   (med.Med_firstName + ' ' + med.Med_lastName) medico, med.Med_code, con.Con_confirmMed confirmDoctor, med.Med_address,
		   (pro.Pro_firstName + ' ' + pro.Pro_lastName) nurse, pro.Pro_code, con.Con_confirmProv confirmNurse,
		   (ltrim(rtrim(sup.Use_firstName)) + ' ' + sup.Use_lastName) supervisor, re.Rec_codigo, re.Rec_tipo, re.Rec_expira, re.Rec_fechaExpiracion, re.Rec_every, re.Rec_everydays,
		   re.Rec_repetir, re.Rec_repetirCada, re.Rec_repetirDuracion, re.Rec_fechaInicio, re.Rec_ultimaAparicion, re.Rec_nextAparicion, re.Rec_descripcion

	from Evento e
	
	join MEDICAL med on e.Med_code = med.Med_code
	join PROVIDER pro on e.Pro_code = pro.Pro_code

	inner join EstadoEvento ee on e.Ese_codigo = ee.Ese_codigo

	join Confirmacion con on con.Con_codigo = e.Con_codigo
	join CaseInformationSheetHead cas on e.Cis_code = cas.Cis_code
	join PATIENT pat on pat.Pat_code = cas.Pat_code	

	join [User] sup on sup.Use_code = cas.Cis_caseSupervisor	
	join TipoEvento tie on tie.Tie_codigo = e.Tie_codigo

	join RecordatorioTrigger rt on rt.Eve_codigo = e.Eve_codigo
	join Recordatorio re on rt.Ret_codigo = re.Ret_codigo
	where e.Eve_descartar=0 and (select count(*) from RecordatorioUsuario ru where ru.Ret_codigo=rt.Ret_codigo and ru.Use_code=@Use_code)>0 and re.Rec_vigencia=1 and rt.Ret_vigencia=1 /*and
	      getdate()>=re.Rec_fechaInicio and (re.Rec_expira=0 or (re.Rec_expira=1 and getdate()<=re.Rec_fechaExpiracion)) and
		  ( 
			re.Rec_tipo=0 or
			( re.Rec_tipo=1 and (re.Rec_every=0 or (re.Rec_every=1 and DATEDIFF(day, re.Rec_fechaInicio, getdate())%re.Rec_everydays=0)) )
		  )*/
end
else if @TipoConsulta=9
begin		
	
	delete from RecordatorioUsuario
	where Use_code = @Use_code and Ret_codigo in (select tb.item from dbo.fu_Split(@reminders,',') tb)
												  
	insert into RecordatorioUsuarioLog
	select re.Ret_codigo, @Use_code, GETDATE(), 'D', @Use_code, @Use_code, @Use_code from Recordatorio re
	join RecordatorioTrigger rt on rt.Ret_codigo = re.Ret_codigo
	where rt.Ret_codigo in (select tb.item from dbo.fu_Split(@reminders,',') tb)

end
go

IF (OBJECT_ID(N'pa_RecordatorioTrigger', N'P') IS NOT NULL)
	DROP procedure pa_RecordatorioTrigger
GO
create PROCEDURE pa_RecordatorioTrigger
             @Ret_codigo    int=Null output,
             @Eve_codigo    int=Null,
             @Ret_fecha    datetime=Null,
             
			 @Use_code    int=Null,
			 @Users		varchar(100)=Null,

             @Ret_vigencia    bit=Null,
             @Ret_descartar    bit=Null

,@TipoConsulta tinyint
AS

declare @e_message varchar(500), @e_severity int, @e_state int

if @TipoConsulta=1 
Begin
	declare @tbUser table(
		Id int identity(1,1),
		use_code char(4)
	)	

	insert into @tbUser(use_code) select us.item from dbo.fu_Split(@Users, ',') us
	
	if (select count(*) from RecordatorioUsuario re where re.Ret_codigo = @Ret_codigo) <> (select count(*) from @tbUser)
	begin			

		declare @tbUserEliminados table(
			Id int identity(1,1),
			use_code char(4)
		)
		insert into @tbUserEliminados(use_code)
		select ru.use_code from RecordatorioUsuario ru
		where ru.Ret_codigo=@Ret_codigo and ru.use_code not in (select use_code from @tbUser)

		declare @tbUserAgregados table(
			Id int identity(1,1),
			use_code char(4)
		)
		insert into @tbUserAgregados(use_code)
		select us.use_code from @tbUser us
		where us.use_code not in (select ru.use_code from RecordatorioUsuario ru where ru.Ret_codigo=@Ret_codigo)

		delete from RecordatorioUsuario where Ret_codigo=@Ret_codigo and use_code in (select tbe.use_code from @tbUserEliminados tbe)
		
		if (select count(*) from @tbUserAgregados) > 0
		begin
			insert into RecordatorioUsuario(Ret_codigo, use_code)
			select @Ret_codigo, tba.use_code from @tbUserAgregados tba
		end
		
		-- insertar log
		if (select count(*) from @tbUserEliminados) > 0
		begin
			insert into RecordatorioUsuarioLog(Ret_codigo,use_code,Rul_fecha,Rul_accion,Usu_codigoReg)
			select @Ret_codigo, te.use_code, getdate(), 'D', @Use_code from @tbUserEliminados te
		end

		if (select count(*) from @tbUserAgregados) > 0
		begin
			insert into RecordatorioUsuarioLog(Ret_codigo,use_code,Rul_fecha,Rul_accion,Usu_codigoReg)
			select @Ret_codigo, ta.use_code, getdate(), 'I', @Use_code from @tbUserAgregados ta
		end

		select 1 Result
	end
	else
	begin
		select 0 Result
	end
End

--===========================================================================================
--==========PROCEDIMIENTO RecordatorioTriggerGetByAll ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=2
begin
Select * from RecordatorioTrigger
End

--===========================================================================================
--==========PROCEDIMIENTO RecordatorioTriggerGetByPrimaryKey ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=3
begin
Select * from RecordatorioTrigger
WHERE  Ret_codigo = @Ret_codigo
End

--===========================================================================================
--==========PROCEDIMIENTO RecordatorioTriggerInsert ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=4
Begin
    INSERT INTO [dbo].[RecordatorioTrigger]
    (
        [Eve_codigo],
        [Ret_fecha],            
		[use_code],
        [Ret_vigencia],
        [Ret_descartar]
    )
    VALUES
    (
        @Eve_codigo,
        getdate(),
        @Use_code,
        1,
        0
    )
    SET @Ret_codigo= @@IDENTITY

	insert into RecordatorioUsuario(Ret_codigo, use_code)
	select @Ret_codigo, us.item from dbo.fu_Split(@Users, ',') us
End

--===========================================================================================
--==========PROCEDIMIENTO RecordatorioTriggerDelete ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=5
begin
	update RecordatorioTrigger set Ret_vigencia = 0
	WHERE  Ret_codigo = @Ret_codigo
end

--===========================================================================================
else if @TipoConsulta=6
begin
	Select * from RecordatorioTrigger
	where Eve_codigo Like @Eve_codigo+ '%'
end

--===========================================================================================
--==========PROCEDIMIENTO RecordatorioTriggerGetEve_codigo ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=7
Begin
	Select * from RecordatorioTrigger
	where Eve_codigo = @Eve_codigo
end
go


--===========================================================================================
--==========PROCEDIMIENTO TipoArchivoUpdate ========================
--===========================================================================================
--===========================================================================================
IF (OBJECT_ID(N'pa_TipoArchivo', N'P') IS NOT NULL)
	DROP procedure pa_TipoArchivo
GO
create PROCEDURE pa_TipoArchivo
             @Tia_codigo    int=Null output,
             @Tia_nombre    varchar(150)=Null,
             @Tia_descripcion    varchar(250)=Null,
             @Tia_vigencia    bit=Null,
             @Tia_numArchivos    tinyint=Null,
             @Tia_fecha    smalldatetime=Null,
             @Use_code    int=Null,

             @Tie_codigo    int=Null,
			 @Eve_codigo	int=Null --smallint=Null

,@TipoConsulta tinyint
AS 
if @TipoConsulta=1 
Begin
        UPDATE dbo.[TipoArchivo]SET 
            [Tia_nombre]=@Tia_nombre,
            [Tia_descripcion]=@Tia_descripcion,
            [Tia_vigencia]=@Tia_vigencia,
            [Tia_numArchivos]=@Tia_numArchivos
        WHERE  Tia_codigo = @Tia_codigo
End

--===========================================================================================
--==========PROCEDIMIENTO TipoArchivoGetByAll ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=2
begin
	SELECT * FROM TipoArchivo ta where ta.Tia_vigencia=1
	order by ta.Tia_nombre	
End

--===========================================================================================
--==========PROCEDIMIENTO TipoArchivoGetByPrimaryKey ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=3
begin
	Select ta.*, 
	(case when exists(select Tie_codigo from TipoArchivoEvento where ta.Tia_codigo = Tia_codigo and Tie_codigo = @Tie_codigo) then cast(1 as bit) else cast(0 as bit) end) Pertenece
	from TipoArchivo ta
	where ta.Tia_vigencia = 1 and
	      (@Eve_codigo=0 or not exists(select eta.Tia_codigo from EventoTipoArchivo eta where eta.Eve_codigo=@Eve_codigo and eta.Tia_codigo=ta.Tia_codigo and eta.Eta_vigencia=1))
	order by ta.Tia_nombre
End

--===========================================================================================
--==========PROCEDIMIENTO TipoArchivoInsert ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=4
Begin
	if (select count(*) from TipoArchivo where ltrim(rtrim(Tia_nombre)) = ltrim(rtrim(@Tia_nombre)) and Tia_vigencia = 1) = 0
	begin
        INSERT INTO [dbo].[TipoArchivo]
        (
            [Tia_nombre],
            [Tia_descripcion],
            [Tia_vigencia],
            [Tia_numArchivos],
            [Tia_fecha],
            [Use_code]
        )
        VALUES
        (
            @Tia_nombre,
            @Tia_descripcion,
            @Tia_vigencia,
            @Tia_numArchivos,
            @Tia_fecha,
            @Use_code
        )
        SET @Tia_codigo= @@IDENTITY
	end
End

--===========================================================================================
--==========PROCEDIMIENTO TipoArchivoDelete ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=5
begin
UPDATE TipoArchivo SET [Tia_vigencia]=0 WHERE  Tia_codigo = @Tia_codigo
end

--===========================================================================================
else if @TipoConsulta=6
begin
	Select * from TipoArchivo
	where Tia_nombre Like @Tia_nombre+ '%'
	order by Tia_nombre
end
else if @TipoConsulta=7
begin	
	if (select count(*) from TipoArchivo where ltrim(rtrim(Tia_nombre)) = ltrim(rtrim(@Tia_nombre)) and Tia_vigencia = 1) = 0
	begin
		INSERT INTO [dbo].[TipoArchivo]
		(
			[Tia_nombre],
			[Tia_descripcion],
			[Tia_vigencia],
			[Tia_numArchivos],
			[Tia_fecha],
			[Use_code]
		)
		VALUES
		(
			@Tia_nombre,
			'',
			1,
			@Tia_numArchivos,
			GETDATE(),
			null
		)
		SET @Tia_codigo= @@IDENTITY	

		insert into EventoTipoArchivo(Tia_codigo, Eve_codigo, Eta_numArchivos, Eta_vigencia, Eta_archivosSubidos)
		values (@Tia_codigo, @Eve_codigo, @Tia_numArchivos, 1, 0)

		if (@Tie_codigo > 0)
		begin
			insert into TipoArchivoEvento (Tia_codigo, Tie_codigo) 
			values (@Tia_codigo, @Tie_codigo)
		end
	end
end

--===========================================================================================
--==========PROCEDIMIENTO TipoArchivoGetByPrimaryKey ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=8
begin
	select TA.*,ISNULL(ETA.Eta_archivosSubidos,0) AS Eta_archivosSubidos,
	(case when ETA.Eta_archivosSubidos =TA.Tia_numArchivos then cast(1 as bit) else cast(0 as bit) end ) as Pertenece
	from EventoTipoArchivo ETA
	inner join TipoArchivo TA on TA.Tia_codigo=ETA.Tia_codigo
	where ETA.Eve_codigo=@Eve_codigo and eta.Eta_vigencia=1
end
else if @TipoConsulta=9
begin
	
	if not exists(select Tia_codigo from EventoTipoArchivo where Eve_codigo=@Eve_codigo and Tia_codigo=@Tia_codigo and Eta_vigencia=1)
	begin
		if not exists(select Tia_codigo from EventoTipoArchivo where Eve_codigo=@Eve_codigo and Tia_codigo=@Tia_codigo)
		begin
			insert into EventoTipoArchivo(Tia_codigo, Eve_codigo, Eta_numArchivos, Eta_vigencia, Eta_archivosSubidos)
			values (@Tia_codigo, @Eve_codigo, @Tia_numArchivos, 1, 0)
			----Activar evento
			if((select Ese_codigo from evento where eve_codigo=@Eve_codigo)=5)
			begin
				update evento set Ese_codigo=1 where eve_codigo=@Eve_codigo
			end
		end
		else
		begin
			update EventoTipoArchivo set Eta_numArchivos=@Tia_numArchivos, Eta_vigencia=1, Eta_archivosSubidos=0
			where Tia_codigo=@Tia_codigo and Eve_codigo=@Eve_codigo
			----Activar evento
			if((select Ese_codigo from evento where eve_codigo=@Eve_codigo)=5)
			begin
				update evento set Ese_codigo=1 where eve_codigo=@Eve_codigo
			end
		end

		if (@Tie_codigo > 0)
		begin
			insert into TipoArchivoEvento (Tia_codigo, Tie_codigo) 
			values (@Tia_codigo, @Tie_codigo)
		end
	end
	
end
else if @TipoConsulta=10
begin
	
	SELECT * FROM TipoArchivo ta where ta.Tia_codigo=@Tia_codigo
	
end
else if @TipoConsulta=11
begin
	
	Select ta.*
	from TipoArchivo ta
	join TipoArchivoEvento tae on tae.Tia_codigo=ta.Tia_codigo
	where ta.Tia_vigencia = 1 and tae.Tie_codigo=@Tie_codigo and
	      (@Eve_codigo=0 or not exists(select eta.Tia_codigo from EventoTipoArchivo eta where eta.Eve_codigo=@Eve_codigo and eta.Tia_codigo=ta.Tia_codigo))
	order by ta.Tia_nombre
end
go

IF (OBJECT_ID(N'pa_TipoEvento', N'P') IS NOT NULL)
	DROP procedure pa_TipoEvento
GO
create PROCEDURE pa_TipoEvento
             @Tie_codigo    tinyint=Null output,
             @Tie_nombre    varchar(150)=Null,
             @Tie_descripcion    varchar(250)=Null,
             @Tie_vigencia    bit=Null,
             @Tie_fecha    smalldatetime=Null,
             @Use_code    int=Null,
             @Tie_programable bit=Null,
			 @Tie_nov		  bit=Null,
			 @Tie_needNurse		bit=Null,
			 @Tie_saveExchange		bit=Null,
			 @CodigosFileType varchar(500)=Null
,@TipoConsulta tinyint
AS 
if @TipoConsulta=1 
Begin
             UPDATE dbo.[TipoEvento]SET 
                          [Tie_nombre]=@Tie_nombre,
                          [Tie_descripcion]=@Tie_descripcion,
                          [Tie_vigencia]=@Tie_vigencia,
                          [Tie_programable]=@Tie_programable,
						  Tie_nov = @Tie_nov,
						  Tie_needNurse = @Tie_needNurse,
						  Tie_showOnExchange = @Tie_saveExchange
             WHERE  Tie_codigo = @Tie_codigo

End

--===========================================================================================
--==========PROCEDIMIENTO TipoEventoGetByAll ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=2
begin
/*Select * from TipoEvento where Tie_vigencia = @Tie_vigencia
order by Tie_nombre*/

select *, (select count (*) from evento e where  e.Eve_codigoNov >0 and e.Tie_codigo=t.Tie_codigo ) as nro_nov  from TipoEvento t 
order by Tie_nombre
End

--===========================================================================================
--==========PROCEDIMIENTO TipoEventoGetByPrimaryKey ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=3
begin
Select * from TipoEvento
WHERE  Tie_codigo = @Tie_codigo
End

--===========================================================================================
--==========PROCEDIMIENTO TipoEventoInsert ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=4
Begin
    INSERT INTO [dbo].[TipoEvento]
    (
        [Tie_nombre],
        [Tie_descripcion],
        [Tie_vigencia],
        [Tie_fecha],
        [Use_code],
        [Tie_programable],
		Tie_nov,
		Tie_needNurse
    )
    VALUES
    (
        @Tie_nombre,
        @Tie_descripcion,
        1,
        getdate(),
        @Use_code,
        @Tie_programable,
		@Tie_nov,
		@Tie_needNurse
    )
    SET @Tie_codigo= @@IDENTITY
End

--===========================================================================================
--==========PROCEDIMIENTO TipoEventoDelete ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=5
begin
	UPDATE dbo.[TipoEvento]SET                          
		[Tie_vigencia]=0                       
	WHERE  Tie_codigo = @Tie_codigo
end

--===========================================================================================
else if @TipoConsulta=6
begin
Select * from TipoEvento
where Tie_nombre Like @Tie_nombre+ '%'
end

else if @TipoConsulta=7
begin
	UPDATE dbo.[TipoEvento]SET                          
		[Tie_vigencia]=1                       
	WHERE  Tie_codigo = @Tie_codigo
end

else if @TipoConsulta=8
begin

	delete from TipoArchivoEvento where Tie_codigo = @Tie_codigo

	insert into TipoArchivoEvento (Tie_codigo, Tia_codigo)
	select @Tie_codigo, filetypes.item 
	from [dbo].[fu_Split](@CodigosFileType, ',') filetypes	

end
else if @TipoConsulta=9
begin
	
	Select te.* from TipoEvento te
	WHERE te.Tie_programable = @Tie_programable and te.Tie_vigencia = 1

end
else if @TipoConsulta=10
begin
	
	Select distinct tie.Tie_codigo,Tie_nombre from Evento eve
	join TipoEvento tie on eve.Tie_codigo=tie.Tie_codigo	
	order by Tie_nombre
end
go

IF (OBJECT_ID(N'pa_Usuario', N'P') IS NOT NULL)
	DROP procedure pa_Usuario
GO
CREATE PROCEDURE pa_Usuario
			 @Usu_codigo	int=Null output,
             --@Use_code    char(4)=Null,
			 @Use_code    int=null,
             @name_user    char(100)=Null,
             @cod_menu    char(2)=Null,
             @password    varchar(100)=Null,
             @name    varchar(50)=Null,
             @lastname    varchar(50)=Null,
			 @address    varchar(100)=Null,
             @mail    varchar(100)=Null,
             @phone    varchar(15)=Null,
             @status    varchar(2)=Null,
             @number    varchar(30)=Null,
             @provider    char(10)=Null,             
             @Usu_tipo    char(1)=Null,
			 @ShowonAgenda bit=null,

			 @Usu_over bit=null,

			 @Cau_codigo	int=Null,
			 @Ret_codigo	int=null,
			 @isProvider	bit=null,
			 @idProvider    varchar(20)=Null,
			 @UserId		uniqueidentifier=Null,
			 @RoleName		varchar(100)=Null

,@TipoConsulta tinyint
AS 

declare @cod_userNurse char(4)

if @TipoConsulta=1 
Begin
	if @UserId is null
	begin
        UPDATE dbo.[USER]SET 
            [Use_userName]=@name_user,            
            [Use_password]=@password,
            [Use_firstName]=@name,
            [Use_lastName]=@lastname,
			[Use_address]=@address,
            [Use_email]=@mail,
            [Use_phone]=@phone,
            [Use_status]=@status,
            [Use_number]=@number,                        
            [Use_tipo]=@Usu_tipo,
			[ShowonAgenda]=@ShowonAgenda			
        WHERE Use_code = @Use_code
	end
	else
	begin
		UPDATE dbo.[USER]SET 
            [Use_userName]=@name_user,            
            [Use_password]=@password,
            [Use_firstName]=@name,
            [Use_lastName]=@lastname,
			[Use_address]=@address,
            [Use_email]=@mail,
            [Use_phone]=@phone,
            [Use_status]=@status,
            [Use_number]=@number,
			[ShowonAgenda]=@ShowonAgenda,
            [Use_tipo]=@Usu_tipo,
			UserId=@UserId			
        WHERE Use_code = @Use_code
	end

	update PROVIDER set Pro_firstName=@name, Pro_lastName=@lastname, Pro_phone=@phone, Pro_address=@address, Pro_number=@idProvider where Use_code=@Use_code

End

--===========================================================================================
--==========PROCEDIMIENTO USER_SYSGetByAll ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=2
begin
Select * from [USER]
End

--===========================================================================================
--==========PROCEDIMIENTO USER_SYSGetByPrimaryKey ===============
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=3
begin
	Select us.*, dbo.Fu_ObtenerRoles(us.UserId) roles 
	from [USER] us
	WHERE us.Use_code = @Use_code
End

--===========================================================================================
--==========PROCEDIMIENTO USER_SYSInsert ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=4
Begin

	-- registrando al usuario
	declare  @cont1 int
	set @cont1=(select count(*) from [USER] where Use_userName=@name_user and Use_status=1)

	if @cont1=0 
	begin 
      		insert into [USER] (Use_userName, Use_password, Use_firstName, Use_lastName,Use_address, Use_phone, Use_email, Use_status,UserId, Use_number)
			values (@name_user,@password,@name,@lastname,@address,@phone,@mail,1,@UserId, @number)
			set @Use_code = @@identity
			set @Usu_codigo = @Use_code
	END
	
	-- registrando a la enfermera
	if @isProvider = 1
	begin	
		declare @fax_pro varchar(15) = '', @city varchar(50) = '', @state varchar(50) = '', @zipcode varchar(5) = '', @num_pro varchar(20) = '', @Fein_pro char(9) = ''	
		set @cont1=(select count(*) from provider where Pro_firstName=@name and Pro_address=@address and Pro_phone=@phone)

		if @cont1=0 
		begin 
      			insert into provider([Pro_firstName],[Pro_lastName],[Pro_address],[Pro_phone],[Pro_fax],[Pro_status],[Pro_number],[Pro_fein],[Pro_city],[Pro_state],[Pro_zipCode],[Use_code]) 
				values (@name,@lastname,@address,@phone,@fax_pro,1,@num_pro,@Fein_pro,@city,@state,@zipcode,@Use_code)
      			declare @pro_code int = @@identity
				select @pro_code			
		end
	end
End

--===========================================================================================
--==========PROCEDIMIENTO USER_SYSDelete ========================
--===========================================================================================
--===========================================================================================
else if @TipoConsulta=5
begin
	update [USER] set Use_status = '0' WHERE Use_code = @Use_code
	update provider set Pro_status='0' where Use_code = @Use_code
end

--===========================================================================================
else if @TipoConsulta=6
begin
	Select * from [USER]
	where Use_userName Like @name_user+ '%'
end
else if @TipoConsulta=7
begin
	update [USER] set UserId=@UserId WHERE Use_code = @Use_code
end
--//Ray Diaz 
--19/10/2013
else if @TipoConsulta=8
Begin
	Select us.Use_code, rtrim(ltrim(us.Use_firstName + ' ' + us.Use_lastName)) as usuario, ltrim(rtrim(us.Use_userName)) as name_user, us.Use_firstName, us.Use_lastName, ltrim(rtrim(us.Use_address)) [address_pro], us.Use_email, us.Use_phone, 
		   us.Use_tipo, us.Use_status, us.Use_password, dbo.Fu_ObtenerRoles(us.UserId) roles, us.ShowonAgenda, cast (1 as bit) Usu_over,
		   (select top 1 ex.Exc_codigo from Exchange ex where ex.Use_code = us.Use_code and ex.Exc_vigencia = 1) Exc_codigo,
		   (select top 1 ex.Exc_email from Exchange ex where ex.Use_code = us.Use_code and ex.Exc_vigencia = 1) Exc_email,
		   (select top 1 ex.Exc_password from Exchange ex where ex.Use_code = us.Use_code and ex.Exc_vigencia = 1) Exc_password,
		   (select Pro_number from provider pro where pro.Use_code=us.Use_code) number_pro
	from [USER] us 
	where (@RoleName='' or @RoleName in (select ar.RoleName from aspnet_Roles ar join aspnet_UsersInRoles aur on aur.RoleId = ar.RoleId where aur.UserId = us.UserId)) and
	      (@status = '-1' or us.Use_status = @status)
		  order by (us.Use_lastName + ' ' + us.Use_firstName)
end
else if @TipoConsulta=9
Begin
	Select us.Use_code, us.Use_firstName + ' ' + us.Use_lastName as usuario, us.Use_userName, us.Use_firstName, us.Use_lastName, ltrim(rtrim(us.Use_address)) [Use_address], us.Use_email, us.Use_phone,
		   us.Use_tipo, us.Use_status, us.Use_password, dbo.Fu_ObtenerRoles(us.UserId) roles,
		   (case when (select count(*) from CalendarioAgenda ca where ca.Cau_codigo=@Cau_codigo and ca.Use_code=us.Use_code)=0 then cast(0 as bit) else cast(1 as bit) end) InCalendar
	from [USER] us
	where (@RoleName='' or (select count(*) from aspnet_Roles ar join aspnet_UsersInRoles aur on aur.RoleId = ar.RoleId 
							where aur.UserId = us.UserId and ar.RoleName in (select ro.item from dbo.fu_Split(@RoleName,',') ro) )>0) and
	      us.Use_status = '1'
	order by us.Use_firstName, us.Use_lastName
end
else if @TipoConsulta=10
begin
	select Use_code_old ,u.Use_code,Use_userName, '' cod_menu, u.Use_password, Use_firstName, Use_lastName, u.Use_address, Use_email, Use_phone, u.Use_status, Use_number, '' provider, ms.Password as PasswordMS, ms.PasswordSalt,u.ShowonAgenda,
		   dbo.Fu_ObtenerRoles(u.UserId) roles
	from [USER] u
	left join aspnet_Membership ms on ms.UserId = u.UserId
	WHERE u. UserId = @UserId and u.Use_status = '1'

	
	/*select Use_code_old ,u.Use_code,Use_userName, '01' as cod_menu, u.Use_password, Use_firstName, Use_lastName, u.Use_address, Use_email, Use_phone, u.Use_status, Use_number, '' provider, ms.Password as PasswordMS, ms.PasswordSalt,u.ShowonAgenda,
		   dbo.Fu_ObtenerRoles(u.UserId) roles
	from [USER] u
	left join aspnet_Membership ms on ms.UserId = u.UserId
	left join aspnet_UsersInRoles aur on u.UserId = aur.UserId
	left join aspnet_Roles ar on aur.RoleId=ar.RoleId
	WHERE u. UserId = '57227660-140b-40de-9cbe-6eaf7f0e8c89' and u.Use_status = '1'
	*/
end
else if @TipoConsulta=11
Begin
	Select us.Use_code,us.Use_code_old, us.Use_firstName + ' ' + us.Use_lastName as usuario, us.Use_userName, us.Use_firstName, us.Use_lastName,ltrim(rtrim(us.Use_address)) [address_pro], us.Use_email, us.Use_phone, 
		   us.Use_tipo, us.Use_status, us.Use_password, dbo.Fu_ObtenerRoles(us.UserId) roles,
		   (case when (select count(*) from RecordatorioUsuario ru where ru.Ret_codigo=@Ret_codigo and ru.Use_code=us.Use_code)=0 then cast(0 as bit) else cast(1 as bit) end) InReminder
	from [USER] us
	where (@RoleName='' or (select count(*) from aspnet_Roles ar join aspnet_UsersInRoles aur on aur.RoleId = ar.RoleId 
							where aur.UserId = us.UserId and ar.RoleName in (select ro.item from dbo.fu_Split(@RoleName,',') ro) )>0) and
	      us.Use_status = '1' and us.Use_inoffice=1
	order by us.Use_firstName, us.Use_lastName
end
else if @TipoConsulta=12
Begin
	Select us.Use_code_old, us.Use_firstName + ' ' + us.Use_lastName as usuario, us.Use_userName, us.Use_firstName, us.Use_lastName,ltrim(rtrim(us.Use_address)) [address_pro], us.Use_email, us.Use_phone,  
		   us.Use_tipo, us.Use_status, us.Use_password, dbo.Fu_ObtenerRoles(us.UserId) roles, Use_code
	from [USER] us
	where (@RoleName='' or (select count(*) from aspnet_Roles ar join aspnet_UsersInRoles aur on aur.RoleId = ar.RoleId 
							where aur.UserId = us.UserId and ar.RoleName in (select ro.item from dbo.fu_Split(@RoleName,',') ro) )>0) and
	      us.Use_status = '1'
	order by us.Use_lastName, us.Use_firstName
end
else if @TipoConsulta=13
begin

Select us.Use_code_old, rtrim(ltrim(us.Use_firstName + ' ' + us.Use_lastName)) as usuario, ltrim(rtrim(us.Use_userName)) as Use_userName, us.Use_firstName, us.Use_lastName, ltrim(rtrim(us.Use_address)) [Use_address], us.Use_email, us.Use_phone, 
		   us.Use_tipo, us.Use_status, us.Use_password, dbo.Fu_ObtenerRoles(us.UserId) roles, us.ShowonAgenda,
		   (select top 1 ex.Exc_codigo from Exchange ex where ex.Use_code = us.Use_code and ex.Exc_vigencia = 1) Exc_codigo,
		   (select top 1 ex.Exc_email from Exchange ex where ex.Use_code = us.Use_code and ex.Exc_vigencia = 1) Exc_email,
		   (select top 1 ex.Exc_password from Exchange ex where ex.Use_code = us.Use_code and ex.Exc_vigencia = 1) Exc_password,
		   (select Pro_number from provider pro where pro.Use_code=us.Use_code) number_pro, Use_code
	from [USER] us 
	where (@RoleName='' or @RoleName in (select ar.RoleName from aspnet_Roles ar join aspnet_UsersInRoles aur on aur.RoleId = ar.RoleId where aur.UserId = us.UserId)) and
	      (@status = '-1' or us.Use_status = @status) and
		  us.ShowonAgenda = 1 
		  order by (us.Use_lastName + ' ' + us.Use_firstName)
end

else if @TipoConsulta=14
Begin
	Select * from exchange where Use_code  = @Use_code and exc_vigencia=1
end
go

IF (OBJECT_ID(N'sp_close_case', N'P') IS NOT NULL)
	DROP procedure sp_close_case
GO
create procedure sp_close_case
(
@cis_code int,
@open_close char(1)
)
as
declare @e_message varchar(500), @e_severity int, @e_state int
	Begin try
		  begin tran

				declare @eventos table
				(
					id int identity,
					eve_codigo int
				)
					
				update CaseInformationSheetHead
				set Cis_status=@open_close
				,Cis_closedDate=null
				where Cis_code=@cis_code

			if (@open_close = '1')
			begin 
				insert into @eventos
				select eve_codigo from evento where Cis_code=@cis_code

				DECLARE @nRegistros Int, @nWhile Int
				SET @nRegistros = (SELECT COUNT(*) FROM @eventos)
				SET @nWhile=1

				declare @eve_codigo INT, @cat_codigo smallint
				WHILE(@nRegistros>0 AND @nWhile<=@nRegistros)
				begin
					set @eve_codigo = (select eve_codigo from @eventos where id = @nWhile)
					set @cat_codigo = (select top 1 isnull(cat_codigo,0) from EventoHistorial where Eve_codigo = @eve_codigo and cat_codigo<>37 order by Evh_codigo desc)
				
					if(@cat_codigo>0)
					begin
						UPDATE Evento
						set Cat_codigo = @cat_codigo
						where eve_codigo = @eve_codigo
					end		
					SET @nWhile=@nWhile+1
				end
			end
			select 1 -- ok
		  commit tran

	end try
	begin catch		
			rollback tran
			set @e_message = error_message()
			set @e_severity = error_severity()
			set @e_state = error_state()
			select 0 -- MAL
			--raiserror(@e_message, @e_severity, @e_state)
	end catch
go

IF (OBJECT_ID(N'sp_close_case_date', N'P') IS NOT NULL)
	DROP procedure sp_close_case_date
GO
create procedure sp_close_case_date
(
@cis_code int,
@open_close char(1),
@date varchar(12)
)
as
	declare @e_message varchar(500), @e_severity int, @e_state int, @Cat_codigoConfig smallint, @cod_user char(4)
	Begin try
		  begin tran

			update CaseInformationSheetHead
			set Cis_status=@open_close,
				Cis_closedDate=@date
			where cis_code=@cis_code

			set @cod_user = (select Use_Code from CaseInformationSheetHead where cis_code=@cis_code) --- usuario del caso

			if (@open_close = '0') -- cerrado
			begin 
				set @Cat_codigoConfig = (select cast((isnull((select cof_valor from Configuracion where Cof_identificador = 'caseclose_category'),'37')) as smallint))
				--copio en historial 
				INSERT INTO [dbo].[EventoHistorial]
					([Eve_codigo],[Eve_inicio],[Eve_fin],[Eve_fecha],[Eve_descripcion],[Pro_code],[Med_code],[Cis_code],[Tie_codigo],[Ese_codigo],[Eve_codigoNext],[Evh_fecha],[Use_Code],[Eve_codExchange],[Eve_descartar],[Con_codigo],Mot_codigo,
					[Eve_done],[Eve_override],[Eve_allDay],[Cat_codigo],[Evh_undoChangeUser],[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia])
					select e.Eve_codigo, e.Eve_inicio, e.Eve_fin, e.Eve_fecha, e.Eve_descripcion, e.Pro_code, e.Med_code, e.Cis_code, e.Tie_codigo, e.Ese_codigo, e.Eve_codigoNext, getdate(), @cod_user, e.Eve_codExchange, e.Eve_descartar,e.Con_codigo,Mot_codigo,
					[Eve_done],[Eve_override],[Eve_allDay],[Cat_codigo],[Evh_undoChangeUser],[Eve_codigoNov],[Eve_bloqueo],[Eve_nov],[Eve_vigencia]
					from Evento e
					where e.cis_code = @cis_code

				--UPDATE 
				update Evento
				set Cat_codigo = @Cat_codigoConfig
				where cis_code = @cis_code

				select 1 -- operacion OK
			end
		   commit tran

	end try
	begin catch		
			rollback tran
			set @e_message = error_message()
			set @e_severity = error_severity()
			set @e_state = error_state()
			select 0 -- operacion OK
			--raiserror(@e_message, @e_severity, @e_state)
	end catch
go