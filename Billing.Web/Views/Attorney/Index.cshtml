@model IEnumerable<Billing.Web.Models.PAttorney>

@{
    ViewBag.Title = "Attorney";
}

<div >
    <div class="row">
        <!--///////////////////FORMULARIO///////////////////////-->
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-title  header_formulario">
                    <h5>REGISTER ATTORNEYS </h5>
                </div>

                <div class="ibox-content" id="frmRegistroAbogado" style="display: none;">
                    <form method="get" class="form-horizontal">
                        <input type="hidden" id="hdCodigo" />
                        <div class="form-group">
                            <label class="col-sm-3 control-label">First Name <span style="color:red; font-size:15px;"> (*)</span></label>
                            <div class="col-sm-6">
                                <input type="text" class="form-control letterNombre" id="Nombre" autofocus tabindex="1" />
                            </div>
                        </div>
                        @*<div class="hr-line-dashed"></div>*@
                        <div class="form-group">
                            <label class="col-sm-3 control-label">Last Name <span style="color:red; font-size:15px;"> (*)</span></label>
                            <div class="col-sm-6">
                                <input type="text" class="form-control letterNombre" id="Apellido" tabindex="2"/> 
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-3 control-label">Street</label>
                            <div class="col-sm-6">
                                <input type="text" class="form-control" id="Direccion"  tabindex="3"/>
                            </div>
                        </div>           
                        <div class="form-group">
                            <label class="col-sm-3 control-label">State <span style="color:red; font-size:15px;"> (*)</span></label>
                            <div class="col-sm-6">
                                <span style="font-size: 0.8em; font-style: normal;">type a word to find matches</span>
                                <span style="color:red; font-size: 0.8em; font-style: italic;">(if you do not belong to any state, select the "NONE" option from the list)</span>
                                <input type="hidden" id="hdAbreviaturaEstadoPais"  />
                                <input type="text" class="form-control" id="EstadoPais" tabindex="4"/>
                            </div>
                        </div>                                                                              
                        <div class="form-group">
                            <label class="col-sm-3 control-label">City <span style="color:red; font-size:15px;"> (*)</span></label>
                            <div class="col-sm-6">
                                <span style="font-size: 0.8em; font-style: normal;">type a word to find matches</span>
                                <input type="hidden" id="hdCiudad"  />
                                <input type="text" class="form-control" id="Ciudad" tabindex="5" />
                            </div>
                        </div>    
                        <div class="form-group">
                            <label class="col-sm-3 control-label">Zip Code</label>
                            <div class="col-sm-6">
                                <input type="text" maxlength ="5" class="form-control"  id="CodigoPostal" tabindex="6"/>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-3 control-label">Ext</label>
                            <div class="col-sm-6">
                                <input type="text" maxlength ="4" class="form-control" id="ExtensionCodigoPostal" tabindex="7" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-3 control-label">Phone</label>
                            <div class="col-sm-6">
                                <input type="text" class="form-control" id="Telefono"  data-mask ="999-999-9999" placeholder="" tabindex="8"/>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-3 control-label">Fax</label>
                            <div class="col-sm-6">
                                <input type="text" class="form-control" id="Fax" data-mask ="999-999-9999" tabindex="9" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-3 control-label">Assistant</label>
                            <div class="col-sm-6">
                                <input type="text" class="form-control" id="Asistente" tabindex="10" />
                            </div>
                        </div>   
                        <div class="form-group">
                            <label class="col-sm-3 control-label">Speciality</label>
                            <div class="col-sm-6">
                                @*<input type="text" class="form-control" id="Ciudad" />*@
                                <select id="cmbEspecialidades" class="form-control m-b" tabindex="11">
                                    @*<option selected value=''>-- SELECTED --</option>*@
                                </select>
                            </div>
                        </div>    
                                
                        <div class="hr-line-dashed"></div>
                        <div class="form-group">
                            <div class="col-sm-8 col-sm-offset-2 text-center">
                                <button id="btnRegistrar" class="btn btn-primary" type="submit" tabindex="12">Register</button>
                                <button id="btnActualizar" class="btn btn-white" type="button" disabled tabindex="12">Update</button>
                                <button id="btnCancelar" class="btn btn-danger" type="button" tabindex="13">Cancel</button>
                                <input type="hidden" id="apos" value="0" >
                                <input type="hidden" id="atable" value="0" >
                            </div>
                        </div>                                  
                    </form>
                </div>
            </div>
        </div>
            
        <!--///////////////////LISTA///////////////////////-->
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    @*<h5>Basic Data Tables example with responsive plugin</h5>*@
                    <button class="btn btn-danger"   id="EnlaceCrearNuevo" type="button" >
                        <i class="fa fa-paste"></i> Create New
                    </button>                  

                                        
                    
                    <button type="button" class="btn btn-primary"  id="btnModal" data-toggle="modal" data-target="#myModal4" style="display:none;"></button>
                    <div class="ibox-tools">
                        <a class="collapse-link">
                            <i class="fa fa-chevron-up"></i>
                        </a>
                    </div>
                </div>

                <div class="ibox-content">
                   @Html.Partial("Attorney_List")
                </div>
            </div>
        </div>
    </div>    
</div>

@Html.Partial("footer")

<!--/////////////////////MODAL//////////////////-->

  <div class="modal inmodal" id="myModal4" tabindex="-1" role="dialog"  aria-hidden="true">
                            <div class="modal-dialog">
                                    <div class="modal-content animated fadeIn">
                                        <div class="modal-header">
                                            <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                                            <i class="fa fa-fa fa-warning modal-icon"></i>
                                            <h4 class="modal-title">Matches Found</h4>
                                            <!--<small>Patients were found with similiar names and surnames!.</small>-->
                                        </div>
                                        <div class="modal-body">
                                            <p><strong>Attorney were found with similiar names and surnames!.</strong> If the Provider attemps to register this in the following list, click Cancel to not register duplicate data, if you are sure that there is no Provider record, click to continue.</p>



                            <table class="table table-bordered" id="tblModalAttonery">
                                <thead >
                                <tr>
                                    <th class="th_tabla"></th>
                                    <th class="th_tabla">First Name</th>
                                    <th class="th_tabla">Last Name</th>
                                    <th class="th_tabla">ZipCode</th>
                                    <th class="th_tabla">Adreess</th>
                                    <th class="th_tabla">City</th>
                                    <th class="th_tabla">State</th>
                                    <th class="th_tabla">Status</th>
                                    <th class="th_tabla">Select</th>
                                </tr>
                                </thead>
                                <tbody>
                              
                                </tbody>
                            </table>

                       
                                        </div>
                                        <div class="modal-footer">
                                            <button id="btnCancelarModal"  type="button" class="btn btn-white" data-dismiss="modal" >Cancel</button>
                                            <button  id="btnRegistrarModal" type="button" class="btn btn-primary" >Continue</button>
                                            <input  id="accion" type="hidden" value="registra" />
                                            <input  id="seleccionado" type="hidden" value="0" />                                                    
                                            <input  id="estadoSeleccion" type="hidden" value="0" />                                                    
                                             
                                        </div>
                                    </div>
                            </div>
</div>



<!----------------------------------------------->




<script>
    var EstadosPais;
    var Ciudades;
    var ValorOriginalEstadoPais;
    var ValorOriginalCiudad;



    var websocket = io.connect(ServidorPuertoNode);
    websocket.on('funcionAttorneyDesdeNode', function (data) {
        funcionAttorneyDesdeNode_llamada(data);
    });


    $('input:text').on('keypress', function (e) {

        if (e.which == 13 || e.which == 9) {
            currentTabIndex = parseInt($(this).attr("tabindex"));

            currentTabIndex = currentTabIndex + 1;
            $("input[tabindex=" + currentTabIndex + "]").select();
            e.preventDefault();
        }

    });

    var websocket = io.connect(ServidorPuertoNode);

    $(Inicio);

    // Función que libera el caso del usuario logueado actualmente.
    function LiberaCasoDeUsuarioActual(CodigoUsuarioActual) {
        // console.log(CodigoUsuarioActual);

        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify({ "CodigoUsuarioActual": CodigoUsuarioActual }),
            url: '@Url.Action("LiberaCasoDeUsuarioActual", "CaseInformation")',
            contentType: "application/json",
            dataType: 'json'
        });
    }

    function Inicio()
    {
        // Actualiza la variable globlal "ProcesoActual" declarada en index.cshtml de MasterViewer con el nombre del proceso donde se está actualmente (Para los mantenedores se actualiza con una cadena vacía ya que no se requiere mostrar una advertencia cuando se abandona alguno de ellos).
        ProcesoActual = "";
        // console.log(ProcesoActual);
        LiberaCasoDeUsuarioActual(CodigoUsuarioGlobal);
        ValidacionLetrasNumeros();
        //PaginarTabla();
        OntenerEstadosPais();
        OntenerCiudades();
        console.log("hola");
        AutocompletarEstadosPais();
        AutocompletarCiudades();
        
        console.log("hola");
        $("#EnlaceCrearNuevo").on("click", NuevoAbogado);
        $("#btnRegistrar").on("click", RegistrarAbogado); // Dispara la función que registra un abogado, cuando se hace click en el botón registrar del formulario de registro.
        $("#tblAbogados > tbody").on("click", "tr > td > .EditarAbogado", EditarAbogado); // Cuando se hace click en ícono de lápiz de cada fila de la tabla se expande el formulario de registro con los datos cargados para poder modificarlos.        
        $("#tblAbogados > tbody").on("click", "tr > td > .EliminarAbogado", EliminaAbogadoModal); // Cuando se hace click en ícono de la papelera de cada fila de la tabla se muestra una confirmación para eliminar el registro actual.
        $("#btnActualizar").on("click", ActualizarDatos);
        $("#btnCancelar").on("click", CancelarRegistro); // Dispara la función de cancelacion.
        $("#btnRegistrarModal").on("click", registraActualizaModalAttorney);

        $("#cierratTest").on("click", CancelarRegistro);
            
        $("#CodigoPostal").on("keypress", validaNumerosSinPunto);
        controlaTab();
    }
    
    function controlaTab() {

        $('.form-control').on('keydown', function (e) {
            //
            console.log("control_keydown");
            if (e.keyCode == 9) {
                e.preventDefault();
                var tabindex = $(this).attr('tabindex');
                console.log(tabindex);
                tabindex++;
                console.log(tabindex);
                $("[tabindex='" + tabindex + "']").focus();
            }

        });
    }
    function CancelarRegistro()
    {
        console.log("cancela");
        
        if (VerificarContraccionFormularioRegistro() == true) // "VerificarContraccionFormularioRegistro" es una función que retorna true si el formulario de registro está contraído.
            $("#frmRegistroAbogado").css("display", "block");
        else
            $("#frmRegistroAbogado").css("display", "none");

        LimpiarControlesRegistro();
        $("#btnRegistrar").attr("disabled", false); // Habilita el botón registrar.
        $("#btnActualizar").attr("disabled", true); // Deshabilita el botón actualizar.
    }

    function validaNumerosSinPunto(e)
    {

        if (!((e.which >= 48 && e.which <= 57) || (e.which == 40 || e.which == 41) || (e.which == 32 || e.which == 8 || e.which == 0)))//
        {
            e.preventDefault();
            return false;
        }
    }
    function ValidacionLetrasNumeros()
    {
        $('input.letter').on('keypress', function (e)
        {
            if ((e.which == 209 || e.which == 241) || (e.which == 225 || e.which == 233 || e.which == 237 || e.which == 243 || e.which == 250) || (e.which == 46 || e.which == 193 || e.which == 190 || e.which == 201 || e.which == 205 || e.which == 211 || e.which == 218))
            {

            }
            else
            {
                if (!((e.which >= 65 && e.which <= 90) || (e.which == 32 || e.which == 8 || e.which == 0) || (e.which >= 97 && e.which <= 122)))
                {
                    e.preventDefault();
                    return false;
                }
            }
        });


        $('input.letterNombre').on('keypress', function (e) {
            if ((e.which == 209 || e.which == 241) || (e.which == 225 || e.which == 233 || e.which == 237 || e.which == 243 || e.which == 250) || (e.which == 46 || e.which == 193 || e.which == 190 || e.which == 201 || e.which == 205 || e.which == 211 || e.which == 218)) {

            }
            else {
                if (!((e.which >= 65 && e.which <= 90) || (e.which == 32 || e.which == 8 || e.which == 0 || e.which == 45) || (e.which >= 97 && e.which <= 122))) {
                    e.preventDefault();
                    return false;
                }
            }
        });

    }

    


    function OntenerEstadosPais()
    {
        $.ajax({
            type: "POST",
            async: false,
            url: '@Url.Action("ListaEstados", "State")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data) {
                EstadosPais = Data;
            }
        });
    }

    function OntenerCiudades()
    {
        $.ajax({
            type: "POST",
            async: true,
            url: '@Url.Action("ListaCiudades", "City")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data)
            {
                Ciudades = Data;
            }
        });
    }

    function AutocompletarEstadosPais()
    {
        var CodigoEstadoPais;

        $("#EstadoPais").autocomplete({
            source: function (request, response) {
                var results = $.map(EstadosPais, function (tag) {
                    if (tag.Sta_name.toUpperCase().indexOf(request.term.toUpperCase()) >= 0) {
                        return {
                            label: tag.Sta_name,
                            value: tag.Sta_name,
                            id: tag.Sta_abbreviation
                        };
                    }
                });

                response(results.slice(0, 10));
            },
            select: function (event, ui)
            {
                CodigoEstadoPais = ui.item.id;
                $("#hdAbreviaturaEstadoPais").val(CodigoEstadoPais);

                ValorOriginalEstadoPais = $(this).val().trim();

                //$(this).blur();
                $("#Ciudad").focus();
            },
            change: function (event, ui)
            {
                if (ui.item == null)
                    $(this).val(ValorOriginalEstadoPais);
            }            
        });
    }

    function AutocompletarCiudades()
    {
        var CodigoCiudad;

        $("#Ciudad").autocomplete(        {
            source: function (request, response) {
                var results = $.map(Ciudades, function (tag) {
                    if (tag.Cit_name.toUpperCase().indexOf(request.term.toUpperCase()) >= 0) {
                        return {
                            label: tag.Cit_name,
                            value: tag.Cit_name,
                            id: tag.Cit_name
                        };
                    }
                });

                response(results.slice(0, 10));
            },
            select: function (event, ui)
            {
                CodigoCiudad = ui.item.id;
                $("#hdCiudad").val(CodigoCiudad);

                ValorOriginalCiudad = $(this).val().trim();

               // $(this).blur();
                $("#CodigoPostal").focus();
            },
            change: function (event, ui)
            {
                //if (ui.item == null)
                    //$(this).val(ValorOriginalCiudad);
            }
        });
    }
     

@*    function AutocompletarCiudades() {
        var CodigoCiudad;
        console.log("AutocompletarCiudades");
        $("#Ciudad").autocomplete({
            source: function (request, response) {
                $.ajax({

                    url: '@Url.Content("~/Scripts/ciudades.js")',
                    contentType: "application/json",
                    dataType: 'json',
                    success: function (data) {
                        console.log("dataa result");
                        //console.log(data);
                        Ciudades = data.City;
                        var results = $.map(Ciudades, function (tag) {
                            if (tag.Cit_name.toUpperCase().indexOf(request.term.toUpperCase()) >= 0) {
                                return {
                                    label: tag.Cit_name,
                                    value: tag.Cit_name,
                                    id: tag.Cit_name
                                };
                            }
                        });

                        response(results.slice(0, 10));
                    },
                    select: function (event, ui) {
                        CodigoCiudad = ui.item.id;
                        $("#hdCiudad").val(CodigoCiudad);

                        ValorOriginalCiudad = $(this).val().trim();

                        $(this).blur();
                        $("#CodigoPostal").focus();
                    },
                    change: function (event, ui) {
                        if (ui.item == null)
                            $(this).val(ValorOriginalCiudad);
                    }
                })
            }
        });
    }

*@

    function CargarEspecialidades()
    {
        var CodigoEspecialidad;
        var NombreEspecialidad;
        var Especialidades;

        $("#cmbEspecialidades").addClass("form-control m-b");
        $("#cmbEspecialidades").empty();

        $.ajax({
            async: false,
            url: '@Url.Action("ListaEspecialidadesAbogado", "Specialty")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data) {
                Especialidades = Data;
            }
        });

        $.map(Especialidades, function (val, i)
        {
            CodigoEspecialidad = val.Spe_code;
            NombreEspecialidad = val.Spe_name;

            if (NombreEspecialidad == "---------------")
                $("#cmbEspecialidades").append("<option selected value='" + CodigoEspecialidad + "'>" + NombreEspecialidad + "</option>");
            else
                $("#cmbEspecialidades").append("<option value='" + CodigoEspecialidad + "'>" + NombreEspecialidad + "</option>");
        });
    }

    function NuevoAbogado(e)
    {
        e.preventDefault();

        LimpiarControlesRegistro();
        CargarEspecialidades();

        $("#btnRegistrar").attr("disabled", false); // Habilita el botón registrar.
        $("#btnActualizar").attr("disabled", true); // Deshabilita el botón actualizar.
        
        if (VerificarContraccionFormularioRegistro() == true) // "VerificarContraccionFormularioRegistro" es una función que retorna true si el formulario de registro está contraído.
            $("#frmRegistroAbogado").css("display", "block");

        $("#Nombre").focus();
    }

    function LimpiarControlesRegistro()
    {
        ValorOriginalEstadoPais = "";
        ValorOriginalCiudad = "";

        $("#Nombre").val("");
        $("#Apellido").val("");
        $("#Direccion").val("");
        
        $("#hdCiudad").val("");
        $("#Ciudad").val("");
        
        $("#hdAbreviaturaEstadoPais").val("");
        $("#EstadoPais").val("");
        
        $("#CodigoPostal").val("");
        $("#ExtensionCodigoPostal").val("");
        $("#Telefono").val("");
        $("#Fax").val("");
        $("#Asistente").val("");
        $("#cmbEspecialidades").val("");
        $("#frmRegistroAbogado").css("display", "none");
    }

    function RegistrarAbogado(e)
    {

        if ($("#Nombre").val().trim() == "") // Valida la obligatoriedad del nombre 
        {
            e.stopPropagation();

            $("#Nombre").focus();
            $("#Nombre").addClass("has-error");

            mensaje = "Error!";
            error = "Required First name!!...";
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#Apellido").val().trim() == "") // Valida la obligatoriedad del apellido
        {
            e.stopPropagation();
            $("#Apellido").focus();
            $("#Apellido").addClass("has-error");
            mensaje = "Error!";
            error = "Required Last name!!...";
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#hdAbreviaturaEstadoPais").val() == "") // Valida la obligatoriedad del estado
        {
            e.stopPropagation();
            mensaje = "Error!";
            error = "Select a state from the list!!...";
            MensajeError(mensaje, error);
            $("#EstadoPais").focus();
            return false;
        }
        else if ($("#hdCiudad").val() == "" && $("#Ciudad").val() == "") // Valida la obligatoriedad de la ciudad (valida que se seleccione una ciudad del autocompletado o que se escriba una ciudad en la caja de texto)
        {
            e.stopPropagation();
            mensaje = "Error!";
            error = "Select or type a city from the list!!...";
            MensajeError(mensaje, error);
            $("#Ciudad").focus();
            return false;
        }
        //else if ($("#cmbEspecialidades").val() == "")
        //{
        //    e.preventDefault();

        //    $("#cmbEspecialidades").focus();
        //    $("#cmbEspecialidades").addClass("has-error");

        //    mensaje = "Error!";
        //    error = "Select a Specialty!!...";
        //    MensajeError(mensaje, error);
        //}
        else
        {
            e.preventDefault();

            var NombreCiudad;

            // Obtiene la el nombre de la ciudad seleccionada o ingresada
            if ($("#hdCiudad").val().trim() == "") // Si no se ha seleccionado una ciudad del autocompletado el valor que se registrará será el valor de la caja de texto
                NombreCiudad = $("#Ciudad").val().trim();
            else // Si se ha seleccionado una ciudad del autocompletado el valor que se registrará será el id seleccionado (nombre de la ciudad).
                NombreCiudad = $("#hdCiudad").val().trim()
            // ----------------------------------------------------------

            var Abogado = LlenarAbogado(null
                                        , $("#Nombre").val().trim()
                                        , $("#Apellido").val().trim()
                                        , $("#Direccion").val().trim()
                                        , NombreCiudad
                                        , $("#hdAbreviaturaEstadoPais").val().trim()
                                        , $("#CodigoPostal").val().trim()
                                        , $("#ExtensionCodigoPostal").val().trim()
                                        , $("#Telefono").val().trim()
                                        , $("#Fax").val().trim()
                                        , $("#Asistente").val().trim()
                                        , $("#cmbEspecialidades").val())
            
            // Primero verifica que no exista un paciente homónimo.
            $.ajax({
                type: "POST",
                async: false,
                data: JSON.stringify(Abogado),
                url: '@Url.Action("BuscarHomonimos", "Attorney")',
                contentType: "application/json",
                dataType: 'json',
                success: function (Data)
                {
                    //console.clear();
                    console.log(Data);
                    console.log(Data.Resultado);
                    if (!Data.Resultado) // Si no se encuentran homónimos
                    {
                        
                        // Llamará al código que registrará al attorney.
                        textoComboSeleccionado = $("#cmbEspecialidades option:selected").html();
                        codigoComboSeleccionado = $("#cmbEspecialidades").val();

                        metodoRegistraAttorney(e, Abogado, codigoComboSeleccionado, textoComboSeleccionado);
                        LimpiarControlesRegistro();
                    }
                    else // Si se encontraron homónimos.
                    {
                        
                        // Muestra las coincidencias de hómónimos.
                        console.log("xxxxx");
                        llenaModal(Data, 'registra');
                    }
                }
            });



        }
    }


    function EditarAbogado(e)
    {
        e.preventDefault();

        var otable = $("#tblAbogados").dataTable();
        var target_row = $(this).closest("tr").get(0);
        var aPos = otable.fnGetPosition(target_row);

        $("#btnRegistrar").attr("disabled", true); // Deshabilita el botón registrar.
        $("#btnActualizar").attr("disabled", false); // Habilita el botón actualizar.
         
        /* 
        La siguiente línea obtiene el código del doctor seleccionado.
        El primer parent obtiene la columna padre del botón editar que se ha presionado,
        el segundo parent obtiene la fila padre de la columna padre del botón editar que se ha presionado,
        para finalmente con el método "find" en esa misma fila buscar la columna "0" que es donde se encuentra 
        el código del doctor seleccionado. 
        */

        var CodigoAbogado = $(this).parent().parent().find("td:eq(0)").html();

        var Abogado;

        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify({ "Codigo": parseInt(CodigoAbogado) }),
            url: '@Url.Action("ObtenerDatosParaEditar", "Attorney")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data) {

                Abogado = (Data);
            }
        });

        LimpiarControlesRegistro();
        CargarEspecialidades();
        CargarDatosFormulario(Abogado); // Muestra los datos de la fila seleccionada con el lapicito en el formulario de registro para poder cambiarlos.

        $("#apos").val(aPos);        
    }

    function EliminaAbogadoModal(e)
    {
        e.preventDefault();

        var codAtt = $(this).parent().parent().find("td:eq(0)").html();
        var nomAtt = $(this).parent().parent().find("td:eq(1)").html();
        var apeAtt = $(this).parent().parent().find("td:eq(2)").html();

        dato = nomAtt.trim() + " " + apeAtt.trim();

        ////var otable = $("#tblAbogados").dataTable();
        ////var target_row = $(this).closest("tr").get(0);
        ////var aPos = otable.fnGetPosition(target_row);

        ///limpia formulario
        LimpiarControlesRegistro();

        if (VerificarContraccionFormularioRegistro() != true) // "VerificarContraccionFormularioRegistro" es una función que retorna true si el formulario de registro está contraído.
            ExpandirFormularioRegistro($("#frmRegistroAbogado").parent().find("div:eq(0)").find("div:eq(0)").find("a:eq(0)"));

        swal({
            title: "Do you want to delete this attorney?",
            text: "You will not be able to recover the information from " + dato + "!",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes",
            cancelButtonText: "No",
            closeOnConfirm: false,
            closeOnCancel: true
        },
        function (isConfirm)
        {
            if (isConfirm)
            {
                swal("Deleted!", "Your file information has been deleted.", "success");
                //EliminarAbogado(codAtt, aPos, otable);
                EliminarAbogado(codAtt);

                // En "EliminaAbogadoModal".
                actualizaTrazabilidad(codAtt, nomAtt, apeAtt)
            }
            else
            {
                swal("Cancelled", "The information was not eliminated :)", "error");
                return 0;
            }
        });
    }



    function EliminarAbogado(CodigoAbogado) {
        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify({ "Codigo": parseInt(CodigoAbogado) }),
            url: '@Url.Action("Delete", "Attorney")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data)
            {
                if (Data[0].AttorneyErrorCode == 50000) // 50000 es el nro de error general 
                { 
                    mensaje = Data[0].ErrorMessage;
                    MensajeError("Error!", mensaje);
                }
                else
                {
                    Doctor = (Data);
                    //otable.fnDeleteRow(pos);
                    dato = "";
                    recargaInformacionTabla(dato);
                    controlaTab();


                    websocket.emit('funcionActualizacionTablaAttorneyNode', 'Mantenedor_Attorney');
                    websocket.on('funcionAttorneyDesdeNode', function (data) {
                        funcionAttorneyDesdeNode_llamada(data);
                    });
                }
            }
        });
    }

    function ActualizarDatos(e) {
        if ($("#Nombre").val().trim() == "") // Valida la obligatoriedad del nombre 
        {
            e.stopPropagation();

            $("#Nombre").focus();
            $("#Nombre").addClass("has-error");

            mensaje = "Error!";
            error = "Required First name!!...";
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#Apellido").val().trim() == "") // Valida la obligatoriedad del apellido
        {
            e.stopPropagation();
            $("#Apellido").focus();
            $("#Apellido").addClass("has-error");
            mensaje = "Error!";
            error = "Required Last name!!...";
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#hdAbreviaturaEstadoPais").val() == "") // Valida la obligatoriedad del estado
        {
            e.stopPropagation();
            mensaje = "Error!";
            error = "Select a state from the list!!...";
            MensajeError(mensaje, error);
            $("#EstadoPais").focus();
            return false;
        }
        else if ($("#hdCiudad").val() == "" && $("#Ciudad").val() == "") // Valida la obligatoriedad de la ciudad (valida que se seleccione una ciudad del autocompletado o que se escriba una ciudad en la caja de texto)
        {
            e.stopPropagation();
            mensaje = "Error!";
            error = "Select or type a city from the list!!...";
            MensajeError(mensaje, error);
            $("#Ciudad").focus();
            return false;
        }
        //else if ($("#cmbEspecialidades").val() == "") {
        //    e.preventDefault();

        //    $("#cmbEspecialidades").focus();
        //    $("#cmbEspecialidades").addClass("has-error");

        //    mensaje = "Error!";
        //    error = "Select a Specialty!!...";
        //    MensajeError(mensaje, error);
        //}
        else {
            e.preventDefault(); 

            var NombreCiudad;

            // Obtiene la el nombre de la ciudad seleccionada o ingresada
            if ($("#hdCiudad").val().trim() == "") // Si no se ha seleccionado una ciudad del autocompletado el valor que se registrará será el valor de la caja de texto
                NombreCiudad = $("#Ciudad").val().trim();
            else // Si se ha seleccionado una ciudad del autocompletado el valor que se registrará será el id seleccionado (nombre de la ciudad).
                NombreCiudad = $("#hdCiudad").val().trim()
            // ----------------------------------------------------------

            aPos = $("#apos").val();
            comboSeleccionado = $("#cmbEspecialidades").val();
         
            if (comboSeleccionado == "0") {
                console.log(comboSeleccionado);
                comboSeleccionado = "";
            }

            var Abogado = LlenarAbogado($("#hdCodigo").val()
                                        , $("#Nombre").val().trim()
                                        , $("#Apellido").val().trim()
                                        , $("#Direccion").val().trim()
                                        , NombreCiudad
                                        , $("#hdAbreviaturaEstadoPais").val().trim()
                                        , $("#CodigoPostal").val().trim()
                                        , $("#ExtensionCodigoPostal").val().trim()
                                        , $("#Telefono").val().trim()
                                        , $("#Fax").val().trim()
                                        , $("#Asistente").val().trim()
                                        , comboSeleccionado);

            // Primero verifica que no exista un paciente homónimo.
            $.ajax({
                type: "POST",
                async: false,
                data: JSON.stringify(Abogado),
                url: '@Url.Action("BuscarHomonimos", "Attorney")',
                contentType: "application/json",
                dataType: 'json',
                success: function (Data)
                {
                    //console.clear();
                    console.log(Data);

                    if (!Data.Resultado) // Si no se encontraron homónimos.
                    {
                        // Llamará al código que registrará al paciente.
                        textoComboSeleccionado = $("#cmbEspecialidades option:selected").html();
                        codigoComboSeleccionado = $("#cmbEspecialidades").val();
                        metodoActualizaAttorney(e, Abogado, codigoComboSeleccionado, textoComboSeleccionado, "activo");
                    }
                    else // Si se encontraron homónimos.
                    {
                        console.log(Data); // Muestra las coincidencias de hómónimos.
                        llenaModal(Data, 'actualiza');
                    }
                }
            });

     
        }
    }


////////////////////////////////////////////////////////////////////////// METODOS MODALES
       

    function registraActualizaModalAttorney(e) {

        accion = $("#accion").val();
        seleccionado = $("#seleccionado").val();
        estadoSeleccion = $("#estadoSeleccion").val();

        if (seleccionado > 0)
            $("#hdCodigo").val(seleccionado);//doy valor al codigo de cliente, codigo tomado desde modal, para que asi se pueda modificar

        
        

        var NombreCiudad;

        // Obtiene la el nombre de la ciudad seleccionada o ingresada
        if ($("#hdCiudad").val().trim() == "") // Si no se ha seleccionado una ciudad del autocompletado el valor que se registrará será el valor de la caja de texto
            NombreCiudad = $("#Ciudad").val().trim();
        else // Si se ha seleccionado una ciudad del autocompletado el valor que se registrará será el id seleccionado (nombre de la ciudad).
            NombreCiudad = $("#hdCiudad").val().trim()


        //comboSeleccionado = $("#cmbEspecialidades option:selected").html();
        comboSeleccionado = $("#cmbEspecialidades").val();

        if (comboSeleccionado == "0") {
            console.log(comboSeleccionado);
            comboSeleccionado = "";
        }
        

        var Abogado = LlenarAbogado($("#hdCodigo").val()
                            , $("#Nombre").val().trim()
                            , $("#Apellido").val().trim()
                            , $("#Direccion").val().trim()
                            , NombreCiudad
                            , $("#hdAbreviaturaEstadoPais").val().trim()
                            , $("#CodigoPostal").val().trim()
                            , $("#ExtensionCodigoPostal").val().trim()
                            , $("#Telefono").val().trim()
                            , $("#Fax").val().trim()
                            , $("#Asistente").val().trim()
                            , comboSeleccionado)

        if (seleccionado > 0)//si selecciono alguna fila
        {
            if (estadoSeleccion == "Inactive") // si el estado de la fila seleccionada es inactivo
            {
                ////////////////// Pregunta cuando esta inactivo
                swal({
                    title: "Do you want to active attorney?",
                    text: "You will not be able to recover the information !",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Yes, activate it!",
                    closeOnConfirm: false,
                    closeOnCancel: false
                },
               function (isConfirm) {
                   if (isConfirm) {
                       //swal("Ok!", "Your information has been saved.", "success");

                       metodoActualizaAttorney(e, Abogado, seleccionado,comboSeleccionado, "inactivo");
                       $("#btnCancelarModal").trigger("click");
                       $("#btnCancelar").trigger("click");
                   }
                   else {
                       swal("Cancelled", "The information was not saved !!", "error");
                       return 0;
                   }
               });

            } // cuando el estado de la fila es activo
            else {
                metodoActualizaAttorney(e, Abogado, seleccionado, comboSeleccionado,"activo");
                error = "Data saved Successfully!!!";
                mensaje = "Success!";
                MensajeError(mensaje, error);
                $("#btnCancelarModal").trigger("click");
                $("#btnCancelar").trigger("click");
            }


        }
        else// cuando no selecciono nada
        {
            
            $("#btnCancelar").trigger("click");
            //$("#frmRegistroAbogado").hide();
            if (accion == 'registra')
                metodoRegistraAttorney(e, Abogado, "", comboSeleccionado);
            else
                metodoActualizaAttorney(e, Abogado, seleccionado, comboSeleccionado,"activo" );
           

            $("#btnCancelarModal").trigger("click");
            
        }
    }

    // Esta función se ejecuta para actualizar el mantenedor de auditoría a través de node.
    function actualizaTrazabilidad(codigoAbogado, nombreAbogado, apellidoAbogado)
    {
        var parametros

        parametros = {
             'codigoAbogadoActualizado': codigoAbogado
           , 'nombreAbogadoActualizado': nombreAbogado
           , 'apellidoAbogadoActualizado': apellidoAbogado
        }

        websocket.emit('actualizaTrazabilidadAbogado', parametros)
    }

    function metodoRegistraAttorney(e, Abogado, codigoComboSeleccionado, textoComboSeleccionado)
    {
        e.preventDefault();

        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify(Abogado),
            url: '@Url.Action("Create", "Attorney")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data)
            {                
                if (Data[0].ErrorMessage == "")
                {                    
                    //AgregaFila(Abogado, Data[0].AttorneyErrorCode, codigoComboSeleccionado, textoComboSeleccionado);
                    AgregaFila(Abogado);
                    mensaje = "Success!";
                    error = "Data saved Successfully!!!";
                    MensajeError(mensaje, error);
                    //$("#frmRegistroAbogado").css("display", "none");
                    OntenerCiudades();
                    // En "metodoRegistraAttorney".
                    actualizaTrazabilidad(Abogado.Att_code, Abogado.Att_firstName, Abogado.Att_lastName)
                }
                else
                {
                    mensaje = "Success!";
                    error = Data[0].ErrorMessage;
                    MensajeError(mensaje, error);
                }
            }
        });
    }

    function metodoActualizaAttorney(e, Abogado, codigoComboSeleccionado, textoComboSeleccionado, activo)
    {
        e.preventDefault();

        aPos = $("#apos").val();

        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify(Abogado),
            url: '@Url.Action("ActualizarDatos", "Attorney")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data)
            {
                AbogadoX = Abogado;
                Abogado = (Data);
             
                if (Data[0].ErrorMessage == "")
                {
                    if (activo == "inactivo")
                        AgregaFila(AbogadoX);                    
                    if (activo == "activo")
                        EditaFila(AbogadoX);                        

                    mensaje = "Successful!";
                    error = "Data saved Successfully!!!";
                    LimpiarControlesRegistro();
                    //$("#frmRegistroAbogado").css("display", "none");

                    OntenerCiudades();
                    // En "metodoActualizaAttorney".
                    actualizaTrazabilidad(AbogadoX.Att_code, AbogadoX.Att_firstName, AbogadoX.Att_lastName)
                }
                else
                {
                    mensaje = "Error!";
                    error = Data[0].ErrorMessage + "...";                 
                }

                MensajeError(mensaje, error);
            }
        });
    }

    function llenaModal(Data, accion)
    {
        $("#seleccionado").val(0);
        ///////////////////////////////////////////////////////////////        
        //console.log(Data);
        console.log("llenaModal");
        $("#tblModalAttonery").DataTable().clear();
        $.each(Data.Resultado, function (i, val) {
            if (val.Att_firstName != null || val.Att_lastName != null) {
                if (val.Att_status == true)
                    status = "Active";
                else
                    status = "Inactive";

                $('#tblModalAttonery').dataTable().fnAddData([
                    val.Att_code, val.Att_firstName, val.Att_lastName, val.Att_zipCode, val.Att_address, val.Att_city, val.Att_state, status, "<input type='radio'  name='idRadio' value='" + val.Att_code + "'>"]);
            }
        });


        var otable = $("#tblModalAttonery").dataTable().fnDestroy();
        otable = $('#tblModalAttonery').DataTable({
            columnDefs: [{ className: "hidden", "targets": [0] }]
        });

        $("#accion").val(accion);
        $("#btnModal").trigger("click");

    }

    $("#tblModalAttonery tbody").on('click', 'tr', function ()  //selecciona fila de tabla  
    {

      
        var status; // Ins_status
        var codigo; // Ins_code
        var seleccionado;


        var aPos = $("#tblModalAttonery").dataTable().fnGetPosition(this);
        var aData = $("#tblModalAttonery").dataTable().fnGetData(aPos);

        console.log(aData);
        codigo = aData[0];
        status = aData[7];



        console.log(status);
        console.log(codigo);

        var $radios = $("input:radio[name=idRadio]");
        $radios.filter('[value=' + codigo + ']').prop('checked', true);
        $("#seleccionado").val(codigo);
        $("#estadoSeleccion").val(status);


    });

///////////////////////////////////////////////////////////////////////////////

    function LlenarAbogado(Codigo, Nombre, Apellido, Direccion, NombreCiudad, AbreviaturaEstadoPais, CodigoPostal, ExtensionCodigoPostal,Telefono, Fax, Asistente, CodigoEspecialidad) 
    {
        var AbogadoJson = {  "Att_code"         :   Codigo
                           , "Att_firstName"    :   Nombre.toUpperCase()
                           , "Att_lastName"     :   Apellido.toUpperCase() 
                           , "Att_address"      :   Direccion.toUpperCase()
                           , "Att_phone"        :   Telefono 
                           , "Att_fax"          :   Fax 
                           , "Att_assistant"    :   Asistente.toUpperCase()
                           , "Spe_code"         :   CodigoEspecialidad
                           , "Att_city"         :   NombreCiudad 
                           , "Att_state"        :   AbreviaturaEstadoPais
                           , "Att_zipCode"      :   CodigoPostal 
                           , "Att_zipCodeExt"   : ExtensionCodigoPostal
                           , "Att_operatorUser" : CodigoUsuarioGlobal
                         }

        return AbogadoJson;
    }

    function VerificarContraccionFormularioRegistro()
    {
        if ($("#frmRegistroAbogado").css("display") == "none") // Verifica si el formulario de registro está contraído y si es así retorna true.
            return true;
    }

    function MensajeError(mensaje, error)
    {
        swal({
            title: mensaje,
            text: error
        });
    }

    function AgregaFila(Abogado)
    {
        //Paciente.Cit_code = "--";
        //Paciente.Sta_code = "--";   
        console.log("AgregaFila");

        //////console.log(Abogado);
        //////console.log(codigoComboSeleccionado);
        //////console.log(textoComboSeleccionado);


        //////console.log(codigoComboSeleccionado);
        //////console.log(textoComboSeleccionado);
        //////if (codigoComboSeleccionado == 0 || codigoComboSeleccionado == '' || codigoComboSeleccionado == 'undefined' || codigoComboSeleccionado == null) {
        //////    textoComboSeleccionado = '--';
        //////}
        //////$('#tblAbogados').dataTable().fnAddData([CodAboNew, Abogado.Att_firstName, Abogado.Att_lastName, Abogado.Att_address, Abogado.Att_city, Abogado.Att_state, Abogado.Att_zipCode, Abogado.Att_zipCodeExt, Abogado.Att_phone, Abogado.Att_fax, Abogado.Att_assistant, textoComboSeleccionado, '<a class="btn EditarAbogado btn-white btn-bitbucket"><i class="fa fa-pencil text-danger"></i></a> &nbsp; <a class="btn EliminarAbogado  btn-white btn-bitbucket"><i class="fa fa-trash-o text-danger"></i> </a>']);

        
           
        dato = Abogado.Att_firstName + " " + Abogado.Att_lastName;
        //otable = $('.dataTables-example').dataTable().fnFilter(dato);
        recargaInformacionTabla(dato);
        //////////////////////////////////
        websocket.emit('funcionActualizacionTablaAttorneyNode', 'Mantenedor_Attonerys');
        websocket.on('funcionAttorneyDesdeNode', function (data) {
            funcionAttorneyDesdeNode_llamada(data);
        });
    }




    function CargarDatosFormulario(Abogado) 
    {
        ValorOriginalEstadoPais = Abogado.Att_state;
        ValorOriginalCiudad = Abogado.Att_city;

        //console.clear();
        console.log(Abogado);

        //if (VerificarContraccionFormularioRegistro() == true) // "VerificarContraccionFormularioRegistro" es una función que retorna true si el formulario de registro está contraído.
        //ExpandirFormularioRegistro($("#frmRegistroAbogado").parent().find("div:eq(0)").find("div:eq(0)").find("a:eq(0)"));

        $("#frmRegistroAbogado").css("display", "block");

        $("#hdCodigo").val(Abogado.Att_code);
        $("#Nombre").val(Abogado.Att_firstName);
        $("#Apellido").val(Abogado.Att_lastName);
        $("#Direccion").val(Abogado.Att_address);

        console.log($("#hdCodigo").val());

        // Cargar el estado del país
        if (Abogado.Att_state == "" || Abogado.Att_state == null)
        {
            $("#hdAbreviaturaEstadoPais").val("");
            $("#EstadoPais").val("");
        }
        else {
            $("#hdAbreviaturaEstadoPais").val(Abogado.Sta_abbreviation);
            $("#EstadoPais").val(Abogado.Att_state);
        }

        // Carga la ciudad
        if (Abogado.Att_city == "" || Abogado.Att_city == null) {
            $("#hdCiudad").val("");
            $("#Ciudad").val("");
        }
        else {
            $("#hdCiudad").val(Abogado.Att_city);
            $("#Ciudad").val(Abogado.Att_city);
        }

        $("#CodigoPostal").val(Abogado.Att_zipCode);
        $("#ExtensionCodigoPostal").val(Abogado.Att_zipCodeExt);
        $("#Telefono").val(Abogado.Att_phone);
        $("#Fax").val(Abogado.Att_fax);
        $("#Asistente").val(Abogado.Att_assistant);
        
        if (Abogado.Specialty.Spe_code > 0)
            {
            $("#cmbEspecialidades").val(Abogado.Specialty.Spe_code);
            $("#cmbEspecialidades option[value='0']").remove();
            }
        else {
            $("#cmbEspecialidades option[value='0']").remove();
            $("#cmbEspecialidades").append('<option value="0">--NON SELECTED--</option>');
            $("#cmbEspecialidades").val(Abogado.Specialty.Spe_code);            
        }

        $("#Nombre").focus();
    }



    function EditaFila(Abogado)
    {
    console.log("EDITAFILA");
    ////////console.log(Abogado);
    //////console.log(codigoComboSeleccionado);
    //////console.log(textoComboSeleccionado);
    //////if (codigoComboSeleccionado == 0 || codigoComboSeleccionado == '' || codigoComboSeleccionado == 'undefined' || codigoComboSeleccionado == null)
    //////{
    //////    textoComboSeleccionado = '--';
    //////}
    //////otable.fnUpdate([
    //////Abogado.Att_code, Abogado.Att_firstName, Abogado.Att_lastName, Abogado.Att_address, Abogado.Att_city, Abogado.Att_state, Abogado.Att_zipCode, Abogado.Att_zipCodeExt,
    //////Abogado.Att_phone, Abogado.Att_fax, Abogado.Att_assistant, textoComboSeleccionado, '<a class="btn EditarAbogado btn-white btn-bitbucket"><i class="fa fa-pencil text-danger"></i></a>&nbsp; <a class="btn EliminarAbogado  btn-white btn-bitbucket"><i class="fa fa-trash-o text-danger"></i> </a>'], pos, undefined, true);

    

    dato = Abogado.Att_firstName + " " + Abogado.Att_lastName;
        //    otable = $('.dataTables-example').dataTable().fnFilter(dato);
    recargaInformacionTabla(dato);
        //////////////////////////////////

        websocket.emit('funcionActualizacionTablaAttorneyNode', 'Mantenedor_Attorney');
        websocket.on('funcionAttorneyDesdeNode', function (data) {
        funcionAttorneyDesdeNode_llamada(data); });
    
}

    function recargaInformacionTabla(dato_busca) {
        console.log("recargaInformacionTabla");
        $.ajax({
            type: "POST",
            async: false,
            url: '@Url.Action("ListarAbogadoTabla", "Attorney")',
            contentType: false,
            contentType: false,
            success: function (Data) {
                console.log("correcto");
                $('#tblAbogados').DataTable().ajax.reload();
                if (dato_busca != "")
                    setTimeout(function () { otable = $('#tblAbogados').dataTable().fnFilter(dato_busca) }, "1000");
                else 
                    setTimeout(function () { otable = $('#tblAbogados').dataTable().fnFilter("") }, "1000");
            }
        });
    }





    function funcionAttorneyDesdeNode_llamada(data) {
        // debugger;
        console.log("funcion_n_Attorney");
        console.log(data);
        dato_busca = ""; // este campo se usa para filtro en tabla        
        recargaInformacionTabla(dato_busca);
    }


</script>


