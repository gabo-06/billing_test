
@*<script src="@Url.Content("~/scripts/js/plugins/dataTables/datatables.min.js")" async="async"></script>*@
<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">        
        <div class="col-lg-12" id="divCaso">
            <div class="ibox float-e-margins">
                <div class="ibox-title header_formulario">
                    <h5>SEARCH CASE INFORMATION</h5> 
                </div>


                <div class="ibox-content">
                  <form method="get" class="form-horizontal" id="frmBusquedaCaso">
                    <div class="form-group text-center">
                            <label class="col-sm-4 control-label">Search by Patient's Last Name </label>
                            <div class="col-sm-5">
                                <input type="text" class="form-control ui-autocomplete-input" id="txtBuscaCaso" autocomplete="off">                                        
                            </div>
                            <div class="col-sm-2">
                                <a class="btn btn-danger" href="#txtBuscaCaso" onclick="refrescaData();" data-toggle="tooltipB" data-placement="top"  title="Get updated information from Calendar System"> <i class="fa fa-refresh"></i> &nbsp;&nbsp;Refresh Data</a>
                                <br>
                                
                                
                            </div>

                    </div>
                  </form>  
                </div>
                <div class="ibox-content" id="EnvolturatblCasos">
                    <div class="form-group" >  
                          <!--///////////////////LISTA///////////////////////-->
                             @Html.Partial("CasosParaBusquedaAvanzada_list")
                    </div>
                </div>
        </div>
    </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                    <div class="ibox-title header_formulario">
                    <h5>CASE INFORMATION</h5>
                    </div>
                    <div class="ibox-content" id="detalleCase">
                      <form role="form" method="get"  class="form-horizontal">
                        <div class="row">
                            
                            <div class="col-sm-6 b-r">
                                @*<h3 class="m-t-none m-b">Sign in</h3>      *@                          
                                <input type="hidden" id="hdCodigoCaso" value ="0" />
                                <div class="form-group">
                                        <label class="col-lg-3 control-label">Patient´s Name<span style="color:red; font-size:15px;"> (*)</span></label>
                                    <input type="hidden" id="hdCodigoPaciente" value ="0"/>
                                    <input type="hidden" id="apellidoPaciente" value =""/>
                                    <div class="col-lg-7">
                                        @*<input type="text" class="form-control" id="txtPaciente" />*@                                                                                
                                        <select class="form-control control_tabs" id="cmbPaciente" tabindex ="1">
                                            <option selected value="0"></option>
                                        </select>
                                    </div>
                                    <div class="col-lg-2">
                                      <button id="btnRegistrarPaciente" class="btn btn-primary hidden" data-toggle="modal" data-target="#myModalPatient" type="button"  data-placement="top" title="Register a new patient" tabindex ="2">
                                         Add
                                      </button>
                                      <button id="btnEditarPaciente" class="btn btn-primary hidden" data-toggle="modal" data-target="#myModalPatient" type="button"  data-placement="top" title="Edit patient" >
                                         Edit
                                      </button>
                                      <button id="btnModalPacienteHom" class="btn btn-primary" type="button" data-toggle="modal" data-target="#myModalPatientHom" style="display:none;"></button>
                                    </div>
                                </div>
                                    <div class="form-group">
                                         <label class="col-lg-3 control-label">SS Number</label>
                                         <div class="col-lg-5">
                                             <input type="text" class="form-control" id="txtNumeroSeguroSocial" readonly>
                                        </div>
                                         <label class="col-lg-1 control-label">DOB</label>
                                         <div class="col-lg-3">
                                             <input type="text" class="form-control" id="txtFechaNacimiento" disabled="disabled">
                                         </div>
                                    </div>
                                    <div class="form-group">
                                         <label class="col-lg-3 control-label">Street</label> 
                                         <div class="col-lg-9">
                                         <input type="text" class="form-control" id="txtDireccion" readonly/>     
                        </div>
                            </div>
                                   <div class="form-group">
                                         <label class="col-lg-3 control-label">City</label> 
                                         <div class="col-lg-9">
                                <input type="text" class="form-control" id="txtCiudad" readonly />                                        
                            </div>
                        </div>
                                    <div class="form-group">
                                         <label class="col-lg-3 control-label">State</label> 
                                         <div class="col-lg-9">
                                         <input type="text" class="form-control" id="txtEstadoPais" readonly/>     
                            </div>
                        </div>
                                    <div class="form-group">
                                         <label class="col-lg-3 control-label">Zip Code</label> 
                                         <div class="col-lg-5">
                                            <input type="text" class="form-control" id="txtCodigoPostal" maxlength="5" readonly />                                        
                                        </div>

                                        <label class="col-lg-1 control-label">Ext</label> 
                                         <div class="col-lg-3">
                                <input type="text" class="form-control" id="txtExtensionCodigoPostal" maxlength="4" readonly />                                        
                            </div>
                        </div>
                                    <div class="form-group">
                                         <label class="col-lg-3 control-label">Phone</label> 
                                         <div class="col-lg-9">
                                         <input type="text" class="form-control" id="txtTelefono" readonly/>     
                            </div>
                        </div>
                                    <div class="form-group">
                                         <label class="col-lg-3 control-label">Alternative Phone</label> 
                                         <div class="col-lg-9">
                                <input type="text" class="form-control" id="txtTelefonoAlternativo" readonly />                                        
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="col-lg-3 control-label">SEX</label>
                            <div class="col-lg-9">
                                <input type="radio" name="Sexo" class="OpcionSexo" id="rdbMasculino" disabled="disabled" style="cursor: pointer;" /> &nbsp Male
                                <input type="radio" name="Sexo" class="OpcionSexo" id="rdbFemenino" disabled="disabled"  style="cursor: pointer;" /> &nbsp Female
                                &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp
                                <!--<button id="btnActualizarSexo" class="btn btn-primary" data-toggle="modal" data-target="#myModalSex" disabled="disabled" type="button">
                                <i class="fa fa-pencil"></i>
                                </button> Se usaba antes-->
                                <button id="btnActualizarSexo" class="btn btn-primary"  disabled="disabled" type="button">
                                     Update
                                </button>
                            </div>
                        </div>

                        @*<div class="form-group" id="FechaDOI">
                                    <label class="col-lg-3 control-label">DOI<span style="color:red; font-size:15px;"> (*)</span></label>
                                    <div class="col-lg-8 input-group date addon_fechaDOI">
                                         &nbsp;&nbsp;<span class="input-group-addon "><i class="fa fa-calendar"></i></span>
                                         <input type="text" class="form-control control_tabs dtpFecha" id="txtFechaAccidente" value="" placeholder= "##/##/####" data-mask="99/99/9999" tabindex="3">                                       
                                    </div>
                        </div>*@

<div class="form-group text-center" id="FechaDOI">
<label class="col-lg-3 control-label">DOI<span style="color:red; font-size:15px;"> (*)</span></label>
<div class="input-group date col-sm-6" >
    &nbsp;&nbsp;<span class="input-group-addon"><i class="fa fa-calendar"></i></span>
    <input class="form-control dtpFecha" type="text" id="txtFechaAccidente" autocomplete="off" style="background: #ffffff; width: 100%;" maxlength="10" data-mask="99/99/9999"  tabindex="3">
</div>
</div>


                        <div class="form-group" >
                                        <label class="col-lg-3 control-label">Injury</label>
                                     <div class="col-lg-9">
                                         <textarea class="form-control control_tabs" id="txtDaño" style="height: 157px;" tabindex="4"></textarea>
                            </div>
                        </div>

                                
                            </div>
                       <div class="col-sm-6">
                          @* <h3 class="m-t-none m-b">Sign in</h3>*@

                        <div class="form-group" >
                             <label class="col-lg-3 control-label">Status</label>
                             <div class="col-lg-9">
                                <input type="text" class="form-control control_tabs" id="txtStatus"  readonly  tabindex="16"/>                                        
                            </div>
                        </div>

                        <div class="form-group" >
                            <label class="col-lg-3 control-label">Claim#</label>
                            <div class="col-lg-9">
                                <input type="text" class="form-control control_tabs" id="txtClaim" maxlength="25" tabindex="17"/>                                        
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="col-lg-3 control-label">Adjuster<span style="color:red; font-size:15px;"> (*)</span></label>
                            <div class="col-lg-7">
                                <input type="hidden" id="hdCodigoAjustador" value="0" />
                                @*<input type="text" class="form-control" id="txtAjustador" />*@                                        
                                <select class="form-control control_tabs" id="cmbAjustador" tabindex="18">
                                    <option selected value="0"></option>
                                </select>
                            </div>
                            <div class="col-lg-2">
                                <button id="btnRegistrarAdjuster" class="btn btn-primary control_tabs" data-toggle="modal" data-target="#myModalAdjuster" type="button" data-placement="top" title="Register a new patient" tabindex="19">
                                    Add
                                </button>
                                
                                <button style="display:none;" data-target="#myModalAdjusterHom" data-toggle="modal" id="btnModalAdjusterHom" class="btn btn-primary" type="button"></button>
                            </div>
                        </div>

                        <div class="form-group" >
                            <label class="col-lg-3 control-label">Phone</label>
                            <div class="col-lg-4">
                                <input type="text" class="form-control control_tabs" id="txtAdjusterPhone" readonly tabindex="20"/>                                        
                            </div>

                            <label class="col-lg-2 control-label">Ext</label>
                            <div class="col-lg-3">
                                <input type="text" class="form-control control_tabs" id="txtAdjusterPhoneExt" readonly  tabindex="21"/>                                        
                            </div>
                        </div>


                        <div class="form-group">
                            <label class="col-lg-3 control-label">Insurer<span style="color:red; font-size:15px;"> (*)</span></label>
                            <div class="col-lg-7">
                                <input type="hidden" id="hdCodigoAseguradora" value="0" />
                                @*<input type="text" class="form-control" id="txtAseguradora" />*@                                        
                                <select class="form-control" id="cmbAseguradora" tabindex="22">
                                    <option selected value="0"></option>
                                </select>
                            </div>
                            <div class="col-lg-2">
                                <button id="btnRegistrarInsurer" class="btn btn-primary control_tabs" data-toggle="modal"  data-target="#myModalInsurer" type="button" data-placement="top" title="Register a new insurer" tabindex="23">
                                    Add
                                </button>
                                <button type="button" class="btn btn-primary"  id="btnModalInsurerHom" data-toggle="modal" data-target="#myModalInsurerHom" style="display:none;"></button>
                                
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-lg-3 control-label">Street</label>
                            <div class="col-lg-9">
                                <input type="text" class="form-control control_tabs" id="txtDireccionAseguradora" readonly="" tabindex="24">                                        
                            </div>
                        </div>
                        <div class="form-group" >
                            <label class="col-lg-3 control-label">City</label>
                            <div class="col-lg-9">
                                <input type="text" class="form-control control_tabs" id="txtCiudadAseguradora" readonly tabindex="25" />                                        
                            </div>
                        </div>
                        <div class="form-group" >
                            <label class="col-lg-3 control-label">State</label>
                            <div class="col-lg-9">
                                <input type="text" class="form-control control_tabs" id="txtEstadoAseguradora" readonly tabindex="26"/>                                        
                            </div>
                        </div>
                        <div class="form-group" >
                            <label class="col-lg-3 control-label">Zip Code</label>
                            <div class="col-lg-4">
                                <input type="text" class="form-control control_tabs" id="txtCodigoPostalAseguradora" maxlength="5"  readonly  tabindex="27"/>                                        
                            </div>
                             <label class="col-lg-2 control-label">Ext</label>
                            <div class="col-lg-3">
                                <input type="text" class="form-control control_tabs" id="txtExtensionCodigoPostalAseguradora" maxlength="4" readonly tabindex="28"/>                                        
                            </div>
                        </div>

                        <div class="form-group" >
                             <label class="col-lg-3 control-label">Phone</label>
                            <div class="col-lg-4">
                                <input type="text" class="form-control control_tabs" id="txtTelefonoAseguradora" readonly tabindex="29"/>                                        
                            </div>
                             <label class="col-lg-2 control-label">Ext</label>
                            <div class="col-lg-3">
                                <input type="text" class="form-control control_tabs" id="txtExtensionTelefonoAseguradora" maxlength="4" readonly tabindex="30"/>                                        
                            </div>
                        </div>

                       
                        <div class="form-group" >
                            <label class="col-lg-3 control-label">Fax</label>
                            <div class="col-lg-9">
                                <input type="text" class="form-control control_tabs" id="txtFaxAseguradora"  readonly tabindex="31" />                                        
                            </div>
                        </div>

                        <div class="form-group" >
                            <label class="col-lg-3 control-label">CC</label>
                            <div class="col-lg-9">
                                <input type="text" class="form-control control_tabs" id="txtContacto1" tabindex="32"/>                                        
                            </div>
                        </div>
                        <div class="form-group" >
                            <label class="col-lg-3 control-label">CC</label>
                            <div class="col-lg-9">
                                <input type="text" class="form-control control_tabs" id="txtContacto2" tabindex="33"/>                                        
                            </div>
                        </div>                        


                        </div>                        
                  </div> <!--// fin row-->

<div class="row">
    <h3 class="m-t-none m-b titulo_linea" style="background-color:white;">&nbsp;</h3>
</div>

                  <div class="row"> <!--Nuevo row-->
                                <!--//////////////////////////////BRENHER////////////////////////////////////////////////-->
                                <div class="col-sm-6 b-r">
                                    @*<h3 class="m-t-none m-b">Information</h3>  *@
                                    <div class="form-group" id="Price_per_hour">                                        
                                         <label class="col-lg-3 control-label">Price per Hour<span style="color:red; font-size:15px;"> (*)</span></label>
                                         <div class="col-lg-9">
                                          <input type="text" class="form-control control_tabs" id="txtPrice" maxlength="7" tabindex="5">    
                                         </div>
                                    </div>
                                    <div class="form-group " id="FechaReferencia">
                                         <label class="col-lg-3 control-label">Date of Referral <!--<span style="color:red; font-size:15px;"> (*)</span>--></label>
                                         <div class="col-lg-9 input-group date" style="width: 72.5%;">
                                               &nbsp;&nbsp;<span class="input-group-addon addon_fechaReferencia"><i class="fa fa-calendar"></i></span>
                                               <input type="text" class="form-control control_tabs dtpFecha" id="txtFechaReferencia" value="" placeholder= "##/##/####" data-mask="99/99/9999" tabindex="6">       
                                        </div>
                                    </div>





                        <div class="form-group">
                                       <label class="col-lg-3 control-label">Provider<span style="color:red; font-size:15px;"> (*)</span></label>
                                       <div class="col-lg-7">
                                           <input type="hidden" id="hdCodigoProveedor" value="0">
                                           @*<input type="text" class="form-control ui-autocomplete-input" id="txtProveedor" autocomplete="off">*@                                        
                                        <select class="form-control control_tabs" id="cmbProveedor" tabindex="7">   
                                            <option selected value="0"></option>
                                        </select>
                            </div>
                                <div class="col-lg-2">
                                <button type="button" data-target="#myModalProvider" data-toggle="modal" class="btn btn-primary control_tabs hidden" id="btnRegistrarProveedor"  tabindex="8"  data-placement="top" title="Register a new provider">
                                    Add
                                </button>
                                 <button type="button" class="btn btn-primary"  id="btnModalProviderHom" data-toggle="modal" data-target="#myModalProveedorHom" style="display:none;"></button>   
                            </div>
                        </div>


                                   <div class="form-group">
                                         <label class="col-lg-3 control-label">Case Supervisor<span style="color:red; font-size:15px;">(*)</span></label> 
                                         <div class="col-lg-9">
                                <input type="hidden" id="hdCodigoCaseSupervisor" value="0"/>
                                @*<input type="text" class="form-control" id="txtCaseSupervisor" />*@                                        
                                        <select class="form-control" id="cmbCaseSupervisor" tabindex="9" >
                                            <option selected value="0"></option>
                                        </select>
                            </div>
                        </div>

                        <div class="ibox">                              
                          <div class="ibox-content" style="border-width: 1px 1px 1px 1px;border:1px solid #91999e;"> 
                            <div class="form-group " >
								    <label class="col-lg-3 control-label">Longshore</label>
								    <div class="col-lg-2">
                                    <input type="checkbox" class="LongshoreCompanyStatusOther control_tabs" id="cbLongshore" style="cursor: pointer;"  tabindex ="10"/>                                        
                                     </div>
                            </div>
                            <div class="form-group">
                                       <label class="col-lg-3 control-label" style="text-align: right;">State Company</label>
                                       <div class="col-lg-5">
                                        <input type="checkbox" class="LongshoreCompanyStatusOther control_tabs" id="cbEstadoEmpresa" style="cursor: pointer;" tabindex ="11" />                                      
                                       </div>
                            </div>     
                            <div class="form-group">
								    <label class="col-lg-3 control-label">Other</label>
								    <div class="col-lg-2">
                                    <input type="checkbox" class="LongshoreCompanyStatusOther control_tabs" id="cbOtro" style="cursor: pointer;" tabindex ="12"/>                                        
                                </div>
								    <div class="col-lg-7">
                                    <input type="text" class="form-control control_tabs" id="txtOtroTexto"  tabindex ="13"/>
                                </div>                                                                            
                            </div> 
                          </div>
                         </div>



                            <div class="form-group ">
                                      <label class="col-lg-3 control-label">Presumption</label>
                                       <div class="col-lg-5">
                                       <input type="checkbox" class="control_tabs" id="cbPresuncion " style="cursor: pointer;" tabindex ="14">                                        
                                       </div>
                            </div>                        
                        <div class="form-group" >
                            <input type="hidden" id="hdCodigoAcuity" name="hdCodigoAcuity">
                                 <label class="col-lg-3 control-label">Acuity</label>
                            
                                 <div class="col-lg-9">
                                <select class="form-control control_tabs" id="cmbAcuity" tabindex ="15">
                                    <option value="0">------------</option>
                                    <option value="1">EASIEST</option>
                                    <option value="2">MEDIUM</option>
                                    <option value="3">HARDEST</option>
                                </select>
                            </div>
                                </div>
                               
                            </div>


                      <div class="col-sm-6">
                                
                               <div class="form-group">
                                <label class="col-lg-3 control-label">&nbsp;&nbsp;&nbsp;</label>
                                <div class="col-lg-1">Yes</div>
                                <div class="col-lg-1">No</div>
                                <div class="col-lg-6 text-center">Company</div>                                                                            
                            </div>                           
                            <div class="form-group">
                                <label class="col-lg-3 control-label">Translation</label>
                                <div class="col-lg-1">
                                    <input type="checkbox" class="Traslado control_tabs" id="cbTrasladoSi" style="cursor: pointer;" tabindex="34">                                                                              
                                </div>
                                <div class="col-lg-1">
                                    <input type="checkbox" class="Traslado control_tabs" id="cbTrasladoNo" style="cursor: pointer;" tabindex="35">
                                </div>
                                <div class="col-lg-6">
                                    <input type="text" class="form-control control_tabs" id="txtEmpresaTraslado" tabindex="36">
                        </div>
                                </div>
                            <div class="form-group">
                                <label class="col-lg-3 control-label">Transportation</label>
                                <div class="col-lg-1">
                                    <input type="checkbox" class="Transporte control_tabs" id="cbTransporteSi" style="cursor: pointer;" tabindex="37">                                                                                                                   
                                </div>                                                                            
                                <div class="col-lg-1">
                                <input type="checkbox" class="Transporte control_tabs" id="cbTransporteNo" style="cursor: pointer;" tabindex="38">
                            </div>
                                <div class="col-lg-6">
                                    <input type="text" class="form-control control_tabs" id="txtEmpresaTransporte" tabindex="39">
                                </div>
                                </div>                                                                            
                            <div class="form-group">
                                <label class="col-lg-3 control-label">Physical therapy</label>
                                <div class="col-lg-1">
                                    <input type="checkbox" class="TerapiaFisica control_tabs" id="cbTerapiaFisicaSi" style="cursor: pointer;" tabindex="40">                                                                                                                  
                            </div>
                                <div class="col-lg-1">
                                <input type="checkbox" class="TerapiaFisica control_tabs" id="cbTerapiaFisicaNo" style="cursor: pointer;" tabindex="41">  
                                </div>
                                <div class="col-lg-6">
                                    <input type="text" class="form-control control_tabs" id="txtEmpresaTerapiaFisica" tabindex="42">
                                </div>                                                                            
                            </div>
                            <div class="form-group">
                                <label class="col-lg-3 control-label">Permission to Contact</label>
                                <div class="col-lg-1">
                                    <input type="checkbox" class="PermisoContacto control_tabs" id="cbPermisoContactoSi" style="cursor: pointer;" tabindex="43">                                        
                                </div>
                                <div class="col-lg-1">
                                    <input type="checkbox" class="PermisoContacto control_tabs" id="cbPermisoContactoNo" style="cursor: pointer;" tabindex="44">                                        
                                </div>                                                                            
                                <div class="col-lg-6">
                                    <input type="text" class="form-control control_tabs" id="txtEmpresaPermisoContacto" tabindex="45">
                            </div>
                        </div>
                        <div class="form-group" >
                            <label class="col-lg-3 control-label">Notes</label>
                            <div class="col-lg-9">
                                <textarea class="form-control control_tabs" id="txtNotas" style="height: 122px;" tabindex="46"></textarea>
                            </div>
                            </div>

                      </div>

                <div class="ibox-content text-center" >     
                        <p  style="text-align: left;"><span style="color: red; font-weight: bold;">NOTE: ALL FIELDS WITH * ARE REQUIRED</span></p>
                        <div class="form-group" >
                            <button id="btnNuevo" class="btn btn-primary" type="button"  data-toggle="tooltipB" data-placement="top" title="Create a New case"  tabindex="47">
                                 &nbsp;&nbsp;&nbsp; New &nbsp;&nbsp;&nbsp;
                            </button>
                            <button id="btnRegistrar" class="btn btn-primary" type="submit"   data-toggle="tooltipB" data-placement="top" title="Save the information" data_accion="nuevo"  tabindex="48">
                                &nbsp;&nbsp;&nbsp; Save &nbsp;&nbsp;&nbsp;
                            </button>
                            @*<input id="tipo_permiso" type="hidden"  value="@ViewBag.tipoPermiso" >*@
                            <!--<button id="btnActualizar" class="btn btn-primary" type="button" disabled  data-toggle="tooltipB" data-placement="top" title="Edit case">
                                Edit
                            </button>-->
                        </div>
                </div>
                    
                </div>
                </form>
            </div>
        </div>
            </div>
    
    </div>    

    <div id ="div_doctor_atorney">
       <div class="row">
                <div class="col-lg-12">
                    <div class="tabs-container">
                            <ul class="nav nav-tabs">
                                <li class="active"><a data-toggle="tab" href="#tab-1" id="tbDoctoresDeCaso"> DOCTORS</a></li>
                                <li class=""><a data-toggle="tab" href="#tab-2" id="tbAbogadosDeCaso"> ATTORNEYS</a></li>
                            </ul>
                            <div class="tab-content">
                                <div id="tab-1" class="tab-pane active">
                                    @{ Html.RenderPartial("_vistaDoctor"); }
                                </div>
                             
                                <div id="tab-2" class="tab-pane">                                     
                                   @{ Html.RenderPartial("_vistaAbogado");}
                                </div>
                            </div>
                    </div>
                </div>
            </div>
    </div>

    <div class="ibox-content text-center">
        <div class="form-group" >
            <!--<button id="generaPdf" class="btn btn-primary"  type="button" ><i class="fa fa-file"></i>&nbsp;Generate Pdf</button>-->
            <button id="generaPdf" class="btn btn-primary"  type="button" >Generate Pdf</button>
            <a  href='#' id="linkPdf" data-url="@Url.Content("~/CaseInformation/DownloadPDF")" class="btn btn-primary" target="_blank" style="display:none;"><i class="fa fa-file"></i>&nbsp;Generate link</a>
        </div>
     </div>
</div>

<div id ="dis_modales">
    @{ Html.RenderPartial("_vistaModales");}
</div>


<div id="pie">
@Html.Partial("footer")
</div>


<script>

    var Pacientes;
    var Ajustadores;
    var Aseguradoras;
    var Proveedores;
    var Supervisores;
    var Doctores;
    var Abogados;
    var EstadosPais;
    var Ciudades;
    var ValorOriginalNombrePaciente; // Variable global donde se almacena el nombre del paciente seleccionado en su autocompletar.
    var ValorOriginalNombreAjustador; // Variable global donde se almacena el nombre del ajustador seleccionado en su autocompletar.
    var ValorOriginalNombreAseguradora; // Variable global donde se almacena el nombre de la aseguradora seleccionada en su autocompletar.
    var ValorOriginalNombreProveedor; // Variable global donde se almacena el nombre del proveedor seleccionado en su autocompletar.
    var ValorOriginalNombreSupervisor; // Variable global donde se almacena el nombre del supervisor seleccionado en su autocompletar.
    var ValorOriginalNombreDoctor; // Variable global donde se almacena el nombre del doctor seleccionado en su autocompletar.
    var ValorOriginalNombreAbogado; // Variable global donde se almacena el nombre del doctor seleccionado en su autocompletar.

    var ValorOriginalEstadoPaisPaciente;
    var ValorOriginalEstadoPaisAseguradora;
    var ValorOriginalEstadoPaisDoctor;
    var ValorOriginalEstadoPaisAbogado;

    var ValorOriginalCiudadPaciente; 
    var ValorOriginalCiudadAseguradora;
    var ValorOriginalCiudadDoctor;
    var ValorOriginalCiudadAbogado;

    $(Inicio);

    // Función que libera el caso del usuario logueado actualmente.
    function Hola(CodigoUsuarioActual) {
        // console.log(CodigoUsuarioActual);

        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify({ "CodigoUsuarioActual": CodigoUsuarioActual }),
            url: '@Url.Action("LiberaCasoDeUsuarioActual", "CaseInformation")',
            contentType: "application/json",
            dataType: 'json'
        });
    }

    ///////////////////////////////////////////////////////////////////////////////////////
    var websocket = io.connect(ServidorPuertoNode);
    websocket.on('funcionCaseInformationDesdeNode', function (data) {
        funcionCaseInformacionDesdeNode_llamada(data);
    });

    websocket.on('funcionEnviadaDesdeNode', function (data) {
        funcionEnviadaDesdeNode_llamada(data);
    });

    websocket.on('funcionPacienteDesdeNode', function (data) {
        funcionPacienteDesdeNode_llamada(data);
    });
    
	websocket.on('funcionPacienteDesdeNode', function (data) {
        funcionPacienteDesdeNode_llamada(data);
    });
	
    websocket.on('funcionAdjusterDesdeNode', function (data) {
        funcionAdjusterDesdeNode_llamada(data);
    });

    websocket.on('funcionProveedorDesdeNode', function (data) {
        funcionProveedorDesdeNode_llamada(data);
    });

    websocket.on('funcionInsurerDesdeNode', function (data) {
        funcionInsurerDesdeNode_llamada(data);
    });

    websocket.on('funcionInsurerDesdeNode', function (data) {
        funcionInsurerDesdeNode_llamada(data);
    });

    websocket.on('funcionMedicalDesdeNode', function (data) {
        funcionMedicalDesdeNode_llamada(data);
    });
    websocket.on('funcionAttorneyDesdeNode', function (data) {
        funcionAttorneyDesdeNode_llamada(data);
    });

    ///////////////////////////////////////////////////////////////////////////////////////
    function funcionEnviadaDesdeNode_llamada(data) {
        // ;
        console.log("funcion_n_paciente");
        ObtenerPacientes;
        CargarPacientesEnCombo(Pacientes);
    }
    function funcionAdjusterDesdeNode_llamada(data) {
        // ;
        console.log("funcion_n_Adjuster");
        ObtenerAjustadores();
        CargarAjustadoresEnCombo(Ajustadores);
    }

    function funcionProveedorDesdeNode_llamada(data) {
        // ;
        console.log("funcion_n_Proveedor");
        ObtenerProveedores();
        CargarProveedoresEnCombo(Proveedores);
    }

    function funcionInsurerDesdeNode_llamada(data) {
        // ;
        console.log("funcion_n_Insurer");
        ObtenerAseguradoras();
        CargarAseguradorasEnCombo(Aseguradoras);
    }

    function funcionMedicalDesdeNode_llamada(data) {
        // ;
        console.log("funcion_n_Medical");
        ObtenerDoctores();
        CargarDoctoresEnCombo(Doctores);
    }
    function funcionAttorneyDesdeNode_llamada(data) {
        // ;
        console.log("funcion_n_Attorney");
        ObtenerAbogados();
        CargarAbogadosEnCombo(Abogados);
    }

	function funcionPacienteDesdeNode_llamada(data) {
        ObtenerPacientes();
        CargarPacientesEnCombo(Pacientes);
    }
	
    //////////////////////////////////////////////////////////////////////////////////////////////
    function Inicio() {
        // Actualiza la variable globlal "ProcesoActual" declarada en index.cshtml de MasterViewer con el nombre del proceso donde se está actualmente (Para los mantenedores se actualiza con una cadena vacía ya que no se requiere mostrar una advertencia cuando se abandona alguno de ellos).
        ProcesoActual = "CaseInformation";
         //console.log("ray23333");
       
        Hola(CodigoUsuarioGlobal);

        controlaTab();
        $("#cmbPaciente").select2();
        $("#cmbAjustador").select2();
        $("#cmbAseguradora").select2();
        $("#cmbProveedor").select2();
        $("#cmbCaseSupervisor").select2();
        $("#cmbAcuity").select2();
        $("#cmbDoctor").select2();
        $("#cmbAbogado").select2();

        

        var RegExpDecimal = /^\d+(?:\.\d{1,2})?$/ig; // Expresión regular para forzar el punto decimal.

        $("#txtPrice").on("focusout", function (e) {
            if ((e.target.value.trim() != "") && !e.target.value.match(RegExpDecimal)) // Si campo está lleno y no tiene el formato correcto.
        {
                $("#txtPrice").val("");
                $("#txtPrice").focus();

                //mensaje = "'Price per Hour ' does not have the correct format";
                mensaje = "Required Field Please Only Number";
                error = "Error";
                MensajeError(mensaje, error);

                return false;
            }
            else if (e.target.value.trim() == "" || e.target.value.match(RegExpDecimal)) // si el "Unit" está vacío o tiene el formato correcto.
            {
                
                
            }
        });
        /////////////////////////////////////////////////////////////////////////////////////////


        /////////////////////////////////////////////////////////////////////////////////////////



        ///////////////////////DECLARACION FECHAS ///////////////

        //////$('#FechaDOI .addon_fechaDOI').datepicker({
        //////    todayBtn: "linked",
        //////    keyboardNavigation: false,
        //////    forceParse: false,
        //////    calendarWeeks: true,
        //////    autoclose: true
        //////});

        //$(".addon_fechaDOI").on("click", function () {
        //    $(this).datepicker("hide");
        //    //$("#txtFechaAccidente").trigger("click");
        //});



        $(".dtpFecha").parent(".input-group").find(".input-group-addon").on("click", function () {
            // console.log($(this).parent(".input-group").find(".dtpFecha"));
            console.log("dtpFecha");
            $(this).parent(".input-group").find(".dtpFecha").trigger("click");
            $(this).parent(".input-group").find(".dtpFecha").focus();
        });




        $('#txtFechaAccidente').datepicker({
            todayBtn: "linked",
            keyboardNavigation: false,
            forceParse: false,
            calendarWeeks: true,
            autoclose: true
        });



        $('#txtFechaReferencia').datepicker({
            todayBtn: "linked",
            keyboardNavigation: false,
            forceParse: false,
            calendarWeeks: true,
            autoclose: true
        });

        //////$('#FechaReferencia .input-group.date').datepicker({
        //////    todayBtn: "linked",
        //////    keyboardNavigation: false,
        //////    forceParse: false,
        //////    calendarWeeks: true,
        //////    autoclose: true
        //////});

        //$(".addon_fechaReferencia").on("click", function () {
        //    $(this).datepicker("hide");
        //    $("#txtFechaReferencia").trigger("click");
        //});

        $('#FechaNacimientoModal .input-group.date').datepicker({
            todayBtn: "linked",
            keyboardNavigation: false,
            forceParse: false,
            calendarWeeks: true,
            autoclose: true
        });
        //$(".addon_fechaPacienteModal").on("click", function () {
        //    $(this).datepicker("hide");
        //    $("#FechaNacimientoPacienteModal").trigger("click");
        //});
        //////////////////////////////////////////////////////////



        

        $(".dtpFecha").datepicker().on("changeDate", function (e) {
            // BanderaCambioProceso = true;
            // console.log("aca");

            $(this).datepicker("hide");
        }); // Establece el control datepicker a los campos de fecha.
        
        // $(".col-lg-7").on("click", function (e)
        // {
        //     // e.stopPropagation();
        //     console.log("entra al combo");
        //     return false;
        // });

        // Obtiene el código del paciente seleccionado en su campo oculto correspondiente.
        $("#cmbPaciente").on("change", function (e) {
            var CodigoPacienteSeleccionado;
            var Paciente;

            CodigoPacienteSeleccionado = $(this).val();

            $("#hdCodigoPaciente").val(CodigoPacienteSeleccionado);
            console.log("eeeeeeeeeeeeee");
            Paciente = ObtenerDatosPaciente(CodigoPacienteSeleccionado);
            console.log("eeeeeeeeeeeeeexxxxxxxxx");
            CargarPaciente(Paciente);
            console.log("eeeeeeeeeeeeee");
            LimpiarControlesCaso();

            //$("#txtStatus").val("Open");
        });
        

        // Obtiene el código del ajustador seleccionado en su campo oculto correspondiente.
        $("#cmbAjustador").on("change", function () {
            var CodigoAjustadorSeleccionado;
            var Ajustador;

            CodigoAjustadorSeleccionado = $(this).val();

            $("#hdCodigoAjustador").val($(this).val());

            Ajustador = ObtenerDatosAjustador(CodigoAjustadorSeleccionado);
            CargarAjustador(Ajustador);
        });

        // Obtiene el código de la aseguradora seleccionado en su campo oculto correspondiente.
        $("#cmbAseguradora").on("change", function () {
            var CodigoAseguradoraSeleccionada;
            var Aseguradora;

            CodigoAseguradoraSeleccionada = $(this).val();

            $("#hdCodigoAseguradora").val($(this).val());

            Aseguradora = ObtenerDatosAseguradora(CodigoAseguradoraSeleccionada);

            CargarAseguradora(Aseguradora);  

        });
         
        // Obtiene el código del proveedor seleccionado en su campo oculto correspondiente.
        $("#cmbProveedor").on("change", function () {
            $("#hdCodigoProveedor").val($(this).val());
        });

        // Obtiene el código del supervisor seleccionado en su campo oculto correspondiente.
        $("#cmbCaseSupervisor").on("change", function () {
            $("#hdCodigoCaseSupervisor").val($(this).val());
        });

        $("#cmbDoctor").on("change", function () {
            $("#hdCodigoDoctorParaAsignar").val($(this).val());
            /////oculta tabla detalle doctor///
            $("#muestraDetalleDoctor").html(" >> Show Doctor Info");
            $("#div_detalle_doctor").css("display", "none");
            //////////////////////////////
        });

        //$("#cmbDoctor").on("change", function () {
        //    $("#hdCodigoDoctorParaAsignar").val($(this).val());
        //});

        $("#cmbAbogado").on("change", function () {
            $("#hdCodigoAbogadoParaAsignar").val($(this).val());
            /////oculta tabla detalle abogado///
            $("#muestraDetalleAbogado").html(" >> Show Attorney Info");
            $("#div_detalle_abogado").css("display", "none");
            //////////////////////////////
        });

        $("#detalleCase").on("keypress", "#txtPrice", function (e) {
            BanderaCambioProceso = true;
            console.log("aca");
            validaNumeros(e);
        });

        $("#myModalPatient").on("keypress", "#CodigoPostalPacienteModal", validaNumerosSinPunto);
        $("#myModalInsurer").on("keypress", "#txtZipInsurerModal", validaNumerosSinPunto);
        $("#myModal4").on("keypress", "#txtCodigoPostalDoctor", validaNumerosSinPunto);
        $("#myModal55").on("keypress", "#txtCodigoPostalAbogado", validaNumerosSinPunto);
        
        $('input:text').on('keypress', function (e) {

        if (e.which == 13 || e.which == 9) {
            currentTabIndex = parseInt($(this).attr("tabindex"));

            currentTabIndex = currentTabIndex + 1;
            $("input[tabindex=" + currentTabIndex + "]").select();
            e.preventDefault();
        }

        });

        $('[data-toggle="tooltipB"]').tooltip();

        $("#txtBuscaCaso").focus();
        
        // Cuando se presiona TAB el botón para seleccionar un caso obtiene el foco (Temporal)
        $("#txtBuscaCaso").on("keydown", function (e) {
            if (e.keyCode == 9) {
                e.preventDefault();
                $(".SeleccionarCaso").focus();
            }
        });

        // Cuando se busca un caso, se van mostrando los resultados en la tabla de casos.
        $("#txtBuscaCaso").keyup(function (e) {
            $('#tblCasos').dataTable().fnFilter($("#txtBuscaCaso").val());

            if ($(this).val().trim() == "") { // para ocultar tabla
                $("#tblCasos > tbody").css({ "display": "none" });
                $("#tblCasos_paginate").css("display", "none");
                }
            else {
                $("#tblCasos > tbody").css({ "display": "table-row-group" });
                $("#tblCasos_paginate").css("display", "block");
            }
        });

        //CargarTablaCasos();

        //$("#tblCasos > tbody").on("click", "tr > td > .SeleccionarCaso", SeleccionarCaso);
        //$(".SeleccionarCaso").on("click", SeleccionarCaso);

      
        // -----------------------------------------------------------------------------
        ObtenerAutocompletarGeneral();
        //ObtenerAutocompletarGeneralEstados_Especialidades();
        setTimeout(ObtenerAutocompletarGeneralEstados_Especialidades, 100);
        // -----------------------------------------------------------------------------

        //$("#FechaNacimientoPacienteModal").datepicker("setDate", new Date());

        //$("#txtFechaAccidente").datepicker("setDate", new Date());
        $("#tblCasos_filter > label > input[type='text']");

        //var otable = $("#tblPacientes").dataTable().fnDestroy();
        //otable = $('#tblPacientes').DataTable({        });


        //$("#txtFechaReferencia").datepicker("setDate", new Date());
        
        ControlarCambioChecking($(".LongshoreCompanyStatusOther"), ".LongshoreCompanyStatusOther");
        ControlarCambioChecking($(".Traslado"), ".Traslado");
        ControlarCambioChecking($(".Transporte"), ".Transporte");
        ControlarCambioChecking($(".TerapiaFisica"), ".TerapiaFisica");
        ControlarCambioChecking($(".PermisoContacto"), ".PermisoContacto");

       // $("#txtPaciente").prop("readonly", true);

        $("#btnNuevo").on("click", NuevoCaso);
        $("#generaPdf").on("click", generaPdf); //edher
        $("#btnRegistrar").on("click", registraActualizaCaso);
        //$("#btnRegistrar").on("click", RegistrarCaso);
        //$("#btnActualizar").on("click", ActualizarCaso);

        $("#frmBusquedaCaso").on("submit", function (e) { 
            e.preventDefault();
        });

        $("#btnAsignaDoctor").on("click", AsignaDoctorACaso); // Asigna un doctor autocompletado a un caso
        $("#btnAsignaAbogado").on("click", AsignaAbogadoACaso); // Asigna un abogado autocompletado a un caso
                        
       
        //setTimeout(ObtenerAutocompletarGeneralEstados_Especialidades, 100);


        //OntenerEstadosPais();
        //OntenerCiudades();
        AutocompletarEstadosPaisPaciente();
        AutocompletarEstadosPaisAseguradora();
        AutocompletarEstadosPaisDoctor();
        AutocompletarEstadosPaisAbogado();        


        ObtenerCiudades();
        //AutocompletarCiudadesPaciente();
        //AutocompletarCiudadesAseguradora();
        //AutocompletarCiudadesDoctor();
        //AutocompletarCiudadesAbogado();

        //CargarEspecialidadesDoctor();
        //CargarEspecialidadesAbogado();



        $("#tblDoctor > tbody").on("click", "tr > td > .EliminarDoctor", EliminaDoctorModal); // Para eliminar un doctor
        $("#tblAbogado > tbody").on("click", "tr > td > .EliminarAbogado", EliminarAbogadoModal); // Para eliminar un abogado
        
        

        // Cuando se abren los formularios modales de doctor y abogado los controles deben estar limpios
        $("#btnNuevoDoctor").on("click", LimpiarControlesRegistroNuevoDoctor);
        $("#btnNuevoAbogado").on("click", LimpiarControlesRegistroNuevoAbogado);

        $("#btnAsignarNuevoPatientModal").on("click", RegistraPaciente) // Registra datos para el modal de "Paciente".
        $("#btnEditarPatientModal").on("click", ActualizaPaciente) // Ediat datos para el modal de "Paciente".

        $("#btnAsignarNuevoAdjusterModal").on("click", RegistraAjustador) // Registra datos para el modal de "Adjuster".AKIEDHER
        $("#btnAsignarNuevoInsurerModal").on("click", RegistraAseguradora) // Registra datos para el modal de "Insurer".
        $("#btnAsignarNuevoProviderModal").on("click", RegistraProveedor) // Registra datos para el modal de "Provider".
        $("#btnAsignarNuevoDoctorCaso").on("click", AsignarNuevoDoctorCaso); // Esta llamada primero debe hacer que se agregue el doctor y luego asignarlo al caso
        $("#btnAsignarNuevoAbogadoCaso").on("click", AsignarNuevoAbogadoCaso); // Esta llamada primero debe hacer que se agregue el abogado y luego asignarlo al caso

        ////////////// botones de Modales /////////////
        $("#btnRegistrarModalInsurerHom").on("click", registraActualizaModalAseguradora);
        $("#btnRegistrarModalProviderHom").on("click", registraActualizaModalProveedor);
        $("#btnRegistrarModalAdjusterHom").on("click", registraActualizaModalAjustador);
        $("#btnRegistrarModalPatientHom").on("click", registraActualizaModalPaciente);
        $("#btnRegistrarModalDoctorHom").on("click", registraActualizaModalDoctor);
        $("#btnRegistrarModalAttorneyHom").on("click", registraActualizaModalAbogado);
        $("#btnRegistraEspecialidad").on("click", registraActualizaEspecialidad);
        /////////ESpecialidad Doctor
        $("#btnRegistraAgregaEspecialidad").on("click", agregaEspecialidad);
        $("#btnCancelEspecialidad").on("click", LimpiarControlesEspecialidad);
        $("#btnRegistrarModalEspecialidadHom").on("click", LimpiarControlesEspecialidad);
        /////////ESpecialidad abogado
        //$("#btnRegistraEspecialidadAbogado").on("click", registraActualizaEspecialidadAbogado);
        $("#btnRegistraAgregaEspecialidadAbogado").on("click", agregaEspecialidadAbogado);
        $("#btnCancelEspecialidadAbogado").on("click", LimpiarControlesEspecialidadAbogado);
        $("#btnRegistrarModalEspecialidadHomAbogado").on("click", LimpiarControlesEspecialidadAbogado);
        ///////////////////////////////////////////////

        //$("#btnActualizarSexo").on("click", CargaSexoParaActualizar); // Cuando se abre el modal de sexo se cargan los datos de sexo del paciente que se van a actualizar.
        $("#btnActualizarSexo").on("click", ActualizaSexoPaciente); // Cuando se abre el modal de sexo se cargan los datos de sexo del paciente que se van a actualizar.
        $("#btnActualizarSexoPacienteModal").on("click", ActualizaSexoPaciente); // Actualiza los datos de sexo del paciente en el modal.

        $("#btnRegistrarPaciente").on("click", LimpiarControlesRegistroNuevoPaciente); // Limpia los controles de su modal cada vez que este se abre
        $("#btnRegistrarAdjuster").on("click", LimpiarControlesRegistroNuevoAjustador); // Limpia los controles de su modal cada vez que este se abre
        $("#btnRegistrarInsurer").on("click", LimpiarControlesRegistroNuevaAseguradora); // Limpia los controles de su modal cada vez que este se abre
        $("#btnRegistrarProveedor").on("click", LimpiarControlesRegistroNuevoProveedor); // Limpia los controles de su modal cada vez que este se abre

      
        ocultaTablaCaso();

        
        ocultaBotones();
       
        LimpiarAutocompletar();
        
        
        $("#cmbAbogado").parent(".col-lg-9").find(".select2").css({ "width": "100%" });

        $("#txtDaño").on("keypress", function (e) { BanderaCambioProceso = true; console.log("aca"); });
        $("#txtOtroTexto").on("keypress", function (e) { BanderaCambioProceso = true; console.log("aca"); });
        $("#txtClaim").on("keypress", function (e) { BanderaCambioProceso = true; console.log("aca"); });
        $("#txtContacto1").on("keypress", function (e) { BanderaCambioProceso = true; console.log("aca"); });
        $("#txtContacto2").on("keypress", function (e) { BanderaCambioProceso = true; console.log("aca"); });
        $("#txtEmpresaTraslado").on("keypress", function (e) { BanderaCambioProceso = true; console.log("aca"); });
        $("#txtEmpresaTransporte").on("keypress", function (e) { BanderaCambioProceso = true; console.log("aca"); });
        $("#txtEmpresaTerapiaFisica").on("keypress", function (e) { BanderaCambioProceso = true; console.log("aca"); });
        $("#txtEmpresaPermisoContacto").on("keypress", function (e) { BanderaCambioProceso = true; console.log("aca"); });
        $("#txtNotas").on("keypress", function (e) { BanderaCambioProceso = true; console.log("aca"); });
        ////////////////////////////////
        /////tabla case agregado recientemente
        $("#tblCasos > tbody").on("click", "tr > td > .SeleccionarCaso", SeleccionarCaso); // => agregado recientmente, estaba en vista parcial
        ///////deshabilita input segun permiso
        

        if ($("#permiso").val() == "digit") {

            $("#NumeroSeguroSocialDPacienteModal").prop("readonly", true);
            $("#txtPrice").prop("readonly", true);
            $("#Price_per_hour").css("display", "none");
        }

        // Actualiza cada 30 segundos el campo "Status" del formulario del "CaseInformation"
    /*    setInterval(function () {
            var estadoDeCaso

            if ($('#hdCodigoPaciente').val() == undefined)
                return false

            estadoDeCaso = obtenerEstadoDeCaso($('#hdCodigoPaciente').val())
					
            if (estadoDeCaso)
                $('#txtStatus').val("OPEN");
            else
                $('#txtStatus').val("CLOSED");



                
        }, 30000)*/
    }

    function obtenerEstadoDeCaso(codigoDeCaso)
    {
        var estadoDeCaso
        
        $.ajax({
            type: "POST",
            async: false,            
            data: JSON.stringify({ "codigoDeCaso": codigoDeCaso }),
            url: '@Url.Action("obtenerEstadoDeCaso", "CaseInformation")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data) {
                estadoDeCaso = Data
            }
        })

        return estadoDeCaso
    }

    function controlaTab() {


        $('.control_tabs').on('keydown', function (e) {
                BanderaCambioProceso = true;

                //
                console.log("control_keydown");
                if (e.keyCode == 9) {
                    e.preventDefault();
                    var tabindex = $(this).attr('tabindex');
                    console.log(tabindex);
                    tabindex++;
                    console.log(tabindex);

                    //if ($("#txtFechaReferencia").va

                    if (tabindex == 7) {
                        console.log("AKI ENTRo");
                        $("#cmbProveedor").focus();
                     //   return false
                    }
                    if (tabindex == 8) {
                        $("#btnRegistrarProveedor").focus();
                        return false
                    }
                if (tabindex == 15) {
                        $("#cmbAcuity").focus();
                        return false
                    }
                    $("[tabindex='" + tabindex + "']").focus();
                }
        });

        $('.select2-selection').on('keydown', function (e) {
            console.log("control_keydown");
            if (e.keyCode == 9) {
                e.preventDefault();
                var tabindex = $(this).attr('tabindex');
                tabindex++;

                console.log(tabindex);
                $("[tabindex='" + tabindex + "']").focus();
            }
        });
      


        
    }
    function RegistraPaciente(e)//edherb
    {

        masculino = $("#rdbMasculinoPacienteModal").prop("checked");
        femenino = $("#rdbFemeninoPacienteModal").prop("checked");


        if ($("#NombrePacienteModal").val().trim() == "") // Valida la obligatoriedad del nombre.
        {
            e.stopPropagation();

            $("#NombrePacienteModal").focus();
            $("#NombrePacienteModal").addClass("has-error");

            error = "Error!";
            mensaje = "Required First name!!...";
            MensajeError(mensaje, error);
            return false;
        }
        if ($("#ApellidoPacienteModal").val().trim() == "") // Valida la obligatoriedad del apellido. 
        {
            e.stopPropagation();

            $("#ApellidoPacienteModal").focus();
            $("#ApellidoPacienteModal").addClass("has-error");

            error = "Error!";
            mensaje = "Required Patient's Last Name!!...";
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#hdCiudadPacienteModal").val() == "" && $("#CiudadPacienteModal").val() == "") // Valida la obligatoriedad de la ciudad (valida que se seleccione una ciudad del autocompletado o que se escriba una ciudad en la caja de texto)
        {
            e.stopPropagation();
            error = "Error!";
            mensaje = "Select or type a City from the list!!...";
            MensajeError(mensaje, error);
            $("#CiudadPacienteModal").focus();
            return false;
        }
        else if ($("#hdAbreviaturaEstadoPaisPacienteModal").val() == "") // Valida la obligatoriedad del estado
        {
            e.stopPropagation();

            error = "Error!";
            mensaje = "Select a State from the list!!...";
            MensajeError(mensaje, error);

            $("#EstadoPaisPacienteModal").focus();
            return false;
        }

        else if (masculino == false && femenino == false) // valida sexo
        {
            e.stopPropagation();
            error = "Error!";
            mensaje = "Select sex!!...";
            MensajeError(mensaje, error);
            return false;
        }
        else {
            e.preventDefault();

            var NombreCiudad;
            var Sexo = null; // almacena el sexo del paciente que se va a registrar

            // Obtiene la el nombre de la ciudad seleccionada o ingresada
            if ($("#hdCiudadPacienteModal").val() == "") // Si no se ha seleccionado una ciudad del autocompletado el valor que se registrará será el valor de la caja de texto
                NombreCiudad = $("#CiudadPacienteModal").val();
            else // Si se ha seleccionado una ciudad del autocompletado el valor que se registrará será el id seleccionado (nombre de la ciudad).
                NombreCiudad = $("#CiudadPacienteModal").val()
            // ----------------------------------------------------------

            Sexo = ($("#rdbMasculinoPacienteModal").prop("checked") == true ? "M" : "F") // obtiene el sexo

            var Paciente = LlenarPaciente(null 
                                          , ($("#NombrePacienteModal").val().trim() == '' ? null : $("#NombrePacienteModal").val().trim().toUpperCase())
                                          , ($("#ApellidoPacienteModal").val().trim() == '' ? null : $("#ApellidoPacienteModal").val().trim().toUpperCase())
                                          , ($("#FechaNacimientoPacienteModal").val().trim() == '' ? null : $("#FechaNacimientoPacienteModal").val().trim())
                                          , ($("#NumeroSeguroSocialDPacienteModal").val().trim() == '' ? null : $("#NumeroSeguroSocialDPacienteModal").val().trim())
                                          , ($("#DireccionPacienteModal").val().trim() == '' ? null : $("#DireccionPacienteModal").val().trim().toUpperCase())
                                          , ($("#hdAbreviaturaEstadoPaisPacienteModal").val().trim() == '' ? null : $("#hdAbreviaturaEstadoPaisPacienteModal").val().trim().toUpperCase())
                                          , NombreCiudad
                                          , ($("#CodigoPostalPacienteModal").val().trim() == '' ? null : $("#CodigoPostalPacienteModal").val().trim())
                                          , ($("#ExtensionCodigoPostalPacienteModal").val().trim() == '' ? null : $("#ExtensionCodigoPostalPacienteModal").val().trim())
                                          , ($("#TelefonoPacienteModal").val().trim() == '' ? null : $("#TelefonoPacienteModal").val().trim())
                                          , ($("#TelefonoAlternativoPacienteModal").val().trim() == '' ? null : $("#TelefonoAlternativoPacienteModal").val().trim())
                                          , Sexo)

            // console.log("RegistraPaciente");
            // console.log($("#FechaNacimientoPacienteModal").val().trim());
            // console.log($("#FechaNacimientoPacienteModal").val());
            // Primero verifica que no exista un paciente homónimo.x
            $.ajax({
                type: "POST",
                async: false,
                data: JSON.stringify(Paciente),
                url: '@Url.Action("BuscarHomonimos", "Patient")',
                contentType: "application/json",
                dataType: 'json',
                success: function (Data) {
                    if (!Data.Resultado) // Si no se encontraron homónimos.
                    {
                        // console.log("RegistraPaciente-a");
                        if (metodoRegistraPaciente(Paciente)) // Si la llamada al registro del paciente es exitosa.
                        {
                            LimpiarControlesRegistroNuevoPaciente();
                           // ValorOriginalNombrePaciente = $("#txtPaciente").val().trim(); // (Gabo) Actualiza el valor de la variable ValorOriginalNombrePaciente con el nombre y apellido del paciente seleccionado.

                            // Aquí se mostrará la aseguradora recién registrada en la caja de texto de autocompletar.
                        }
                    }
                    else // Si se encontraron homónimos.
                    {
                        // console.log("RegistraPaciente-b");
                        // Muestra las coincidencias de homónimos.
                        if (Data.Resultado[0].Pat_code != 0) {

                            llenaModalPaciente(Data);
                        }
                        else {
                            error = "Error!";
                            mensaje = Data.Resultado[0].Pat_firstName;
                            MensajeError(mensaje, error);
                        }

                        
                    }



                }
            });
        }
    }


    function ActualizaPaciente(e)//edherb
    {
        masculino = $("#rdbMasculinoPacienteModal").prop("checked");
        femenino = $("#rdbFemeninoPacienteModal").prop("checked");
        
        if ($("#NombrePacienteModal").val().trim() == "") // Valida la obligatoriedad del nombre.
        {
            
            e.stopPropagation();
            $("#NombrePacienteModal").focus();
            $("#NombrePacienteModal").addClass("has-error");

            error = "Error!";
            mensaje = "Required First name!!...";
            MensajeError(mensaje, error);
            return false;
        }
        if ($("#ApellidoPacienteModal").val().trim() == "") // Valida la obligatoriedad del apellido. 
        {
            
            e.stopPropagation();
            $("#ApellidoPacienteModal").focus();
            $("#ApellidoPacienteModal").addClass("has-error");

            error = "Error!";
            mensaje = "Required Patient's Last Name!!...";
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#hdCiudadPacienteModal").val() == "" && $("#CiudadPacienteModal").val() == "") // Valida la obligatoriedad de la ciudad (valida que se seleccione una ciudad del autocompletado o que se escriba una ciudad en la caja de texto)
        {

            e.stopPropagation();
            error = "Error!";
            mensaje = "Select or type a City from the list!!...";
            MensajeError(mensaje, error);
            $("#CiudadPacienteModal").focus();
            return false;
        }
        else if ($("#hdAbreviaturaEstadoPaisPacienteModal").val() == "") // Valida la obligatoriedad del estado
        {
            
            e.stopPropagation();
            error = "Error!";
            mensaje = "Select a State from the list!!...";
            MensajeError(mensaje, error);

            $("#EstadoPaisPacienteModal").focus();
            return false;
        }
    else if (masculino == false && femenino == false) // valida sexo
        {
            e.stopPropagation();
            error = "Error!";
            mensaje = "Select sex!!...";
            MensajeError(mensaje, error);
            return false;
        }
        else {
            e.preventDefault();
            
            var NombreCiudad;
            var Sexo = null; // almacena el sexo del paciente que se va a registrar

            // Obtiene la el nombre de la ciudad seleccionada o ingresada
            if ($("#hdCiudadPacienteModal").val() == "") // Si no se ha seleccionado una ciudad del autocompletado el valor que se registrará será el valor de la caja de texto
                NombreCiudad = $("#CiudadPacienteModal").val();
            else // Si se ha seleccionado una ciudad del autocompletado el valor que se registrará será el id seleccionado (nombre de la ciudad).
                NombreCiudad = $("#CiudadPacienteModal").val()
            // ----------------------------------------------------------

            Sexo = ($("#rdbMasculinoPacienteModal").prop("checked") == true ? "M" : "F") // obtiene el sexo

        var Paciente = LlenarPaciente($("#hdCodigoPaciente").val()
                                          , ($("#NombrePacienteModal").val().trim() == '' ? null : $("#NombrePacienteModal").val().trim().toUpperCase())
                                          , ($("#ApellidoPacienteModal").val().trim() == '' ? null : $("#ApellidoPacienteModal").val().trim().toUpperCase())
                                          , ($("#FechaNacimientoPacienteModal").val().trim() == '' ? null : $("#FechaNacimientoPacienteModal").val().trim())
                                          , ($("#NumeroSeguroSocialDPacienteModal").val().trim() == '' ? null : $("#NumeroSeguroSocialDPacienteModal").val().trim())
                                          , ($("#DireccionPacienteModal").val().trim() == '' ? null : $("#DireccionPacienteModal").val().trim().toUpperCase())
                                          , ($("#hdAbreviaturaEstadoPaisPacienteModal").val().trim() == '' ? null : $("#hdAbreviaturaEstadoPaisPacienteModal").val().trim())
                                          , NombreCiudad
                                          , ($("#CodigoPostalPacienteModal").val().trim() == '' ? null : $("#CodigoPostalPacienteModal").val().trim())
                                          , ($("#ExtensionCodigoPostalPacienteModal").val().trim() == '' ? null : $("#ExtensionCodigoPostalPacienteModal").val().trim())
                                          , ($("#TelefonoPacienteModal").val().trim() == '' ? null : $("#TelefonoPacienteModal").val().trim())
                                          , ($("#TelefonoAlternativoPacienteModal").val().trim() == '' ? null : $("#TelefonoAlternativoPacienteModal").val().trim())
                                          , Sexo)

            // Primero verifica que no exista un paciente homónimo.x
            $.ajax({
                type: "POST",
                async: false,
                data: JSON.stringify(Paciente),
                url: '@Url.Action("BuscarHomonimos", "Patient")',
                contentType: "application/json",
                dataType: 'json',
                success: function (Data) {


                    if (!Data.Resultado) // Si no se encontraron homónimos.
                    {
                        
                        metodoActualizaPaciente(e, Paciente, "activo");
                        $("#btnCancelarModalPatientHom").trigger("click");
                        $("#btnCancelarPacienteModal").trigger("click");
                    }
                    else // Si se encontraron homónimos.
                    {
                        // Muestra las coincidencias de homónimos.
                        if (Data.Resultado[0].Pat_code != 0)
                            llenaModalPaciente(Data);
                        else {
                            error = "Error!";
                            mensaje = Data.Resultado[0].Pat_firstName;
                            MensajeError(mensaje, error);
                        }
                    }



                }
            });
        }
    }


function RegistraAjustador(e) {
        if ($("#txtNombreAdjusterModal").val().trim() == "") // Valida la obligatoriedad del nombre.
        {
            e.stopPropagation();

            $("#txtNombreAdjusterModal").focus();
            $("#txtNombreAdjusterModal").addClass("has-error");

            error = "Error!";
            mensaje = "Required First name!!...";
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#txtApellidoAdjusterModal").val().trim() == "") // Valida la obligatoriedad del apellido. 
        {
            e.stopPropagation();

            $("#txtApellidoAdjusterModal").focus();
            $("#txtApellidoAdjusterModal").addClass("has-error");

            error = "Error!";
            mensaje = "Required Last name!!...";
            MensajeError(mensaje, error);
            return false;
        }
    else {
            e.preventDefault();

            var Ajustador = LlenarAjustador(null
                                          , ($("#txtNombreAdjusterModal").val().trim() == '' ? null : $("#txtNombreAdjusterModal").val().trim().toUpperCase())
                                          , ($("#txtApellidoAdjusterModal").val().trim() == '' ? null : $("#txtApellidoAdjusterModal").val().trim().toUpperCase())
                                          , ($("#txtPhoneAdjusterModal").val().trim() == '' ? null : $("#txtPhoneAdjusterModal").val().trim())
                                          , ($("#txtExtAdjusterModal").val().trim() == '' ? null : $("#txtExtAdjusterModal").val().trim()))

            // Primero verifica que no exista un ajustador homónimo.
            $.ajax({
                type: "POST",
                async: false,
                data: JSON.stringify(Ajustador),
                url: '@Url.Action("BuscarHomonimos", "Adjuster")',
                contentType: "application/json",
                dataType: 'json',
                success: function (Data) {
                    // console.log(Data);
                    if (!Data.Resultado) // Si no se encontraron homónimos.
                    {
                        if (metodoRegistraAjustador(Ajustador)) // Si la llamada al registro del ajustador es exitosa.
                        {
                            // console.log("RegistraAjustador-a");
                            LimpiarControlesRegistroNuevoAjustador();
                            
                            //ValorOriginalNombreAjustador = $("#txtAjustador").val().trim(); // (Gabo) Actualiza el valor de la variable ValorOriginalNombreAjustador con el nombre y apellido del ajustador seleccionado.
                            

                        }
                    }
                    else // Si se encontraron homónimos.
                    {
                        // console.log("RegistraAjustador-b");
                        // Muestra las coincidencias de homónimos.
                        llenaModalAjustador(Data, 'registra');
                    }
                }
            });
        }
    }

function RegistraAseguradora(e) {
        if ($("#txtNombreInsurerModal").val().trim() == "") // Valida la obligatoriedad del nombre 
        {
            e.stopPropagation();

            $("#txtNombreInsurerModal").focus();
            $("#txtNombreInsurerModal").addClass("has-error");

            error = "Error!";
            mensaje = "Required name!!...";
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#hdCiudadInsurerModal").val() == "" && $("#txtCiudadInsurerModal").val() == "") // Valida la obligatoriedad de la ciudad (valida que se seleccione una ciudad del autocompletado o que se escriba una ciudad en la caja de texto)
        {
            e.stopPropagation();
            error = "Error!";
            mensaje = "Select or type a City from the list!!...";
            MensajeError(mensaje, error);
            $("#txtCiudadInsurerModal").focus();
            return false;
        }
        else if ($("#hdAbreviaturaEstadoPaisInsurerModal").val() == "") // Valida la obligatoriedad del estado
        {
            e.stopPropagation();

            error = "Error!";
            mensaje = "Select a State from the list!!...";
            MensajeError(mensaje, error);

            $("#txtEstadoInsurerModal").focus();
            return false;
        }
        else {
            e.preventDefault();

            var NombreCiudad;

            // Obtiene la el nombre de la ciudad seleccionada o ingresada
            if ($("#hdCiudadInsurerModal").val() == "") // Si no se ha seleccionado una ciudad del autocompletado el valor que se registrará será el valor de la caja de texto
                NombreCiudad = $("#txtCiudadInsurerModal").val();
            else // Si se ha seleccionado una ciudad del autocompletado el valor que se registrará será el id seleccionado (nombre de la ciudad).
                NombreCiudad = $("#hdCiudadInsurerModal").val()
            // ----------------------------------------------------------

            var Aseguradora = LlenarAseguradora(null
                                          , ($("#txtNombreInsurerModal").val().trim() == "" ? null : $("#txtNombreInsurerModal").val().trim().toUpperCase())
                                          , ($("#txtTelefonoInsurerModal").val().trim() == "" ? null : $("#txtTelefonoInsurerModal").val().trim())
                                          , ($("#txtExtInsurerModal").val().trim() == "" ? null : $("#txtExtInsurerModal").val().trim())
                                          , ($("#FaxInsurerModal").val().trim() == "" ? null : $("#FaxInsurerModal").val().trim())
                                          , ($("#txtCalleAseguradoraModal").val().trim() == "" ? null : $("#txtCalleAseguradoraModal").val().trim())
                                          , NombreCiudad
                                          , $("#hdAbreviaturaEstadoPaisInsurerModal").val().trim()
                                          , ($("#txtZipInsurerModal").val().trim() == "" ? null : $("#txtZipInsurerModal").val().trim())
                                          , ($("#txtExtCodeInsurerModal").val().trim() == "" ? null : $("#txtExtCodeInsurerModal").val().trim())
                                          , ($("#txtTpaInsurerModal").val().trim() == "" ? null : $("#txtTpaInsurerModal").val().trim())
                                          , ($("#txtFeinSCInsurerModal").val().trim() == "" ? null : $("#txtFeinSCInsurerModal").val().trim())
                                          , ($("#txtCarrierInsurerModal").val().trim() == "" ? null : $("#txtCarrierInsurerModal").val().trim())
                                          , ($("#txtFeinCCInsurerModal").val().trim() == "" ? null : $("#txtFeinCCInsurerModal").val().trim()))

            // Primero verifica que no exista un paciente homónimo.x
            $.ajax({
                type: "POST",
                async: false,
                data: JSON.stringify(Aseguradora),
                url: '@Url.Action("BuscarHomonimos", "Insurer")',
                contentType: "application/json",
                dataType: 'json',
                success: function (Data) {
                    if (!Data.Resultado) // Si no se encontraron homónimos.
                    {
                        if (metodoRegistraAseguradora(Aseguradora)) // Si la llamada al registro de la aseguradora es exitosa.
                        {
                            // console.log("RegistraAseguradora-a");
                            LimpiarControlesRegistroNuevaAseguradora();
                            //ValorOriginalNombreAseguradora = $("#txtAseguradora").val().trim(); // (Gabo) Actualiza el valor de la variable ValorOriginalNombreAseguradora con el nombre de la aseguradora seleccionada.                            

                            // $("#myModalInsurer").css({ "display": "none" });
                             // $(".modal-backdrop").css({ "display": "none" });

                            // Aquí se mostrará la aseguradora recién registrada en la caja de texto de autocompletar.
                        }
                    }
                    else // Si se encontraron homónimos.
                    {
                        // console.log("RegistraAseguradora-b");
                        // Muestra las coincidencias de homónimos.
                        llenaModalAseguradora(Data, 'registra');
                    }
                }
            });
        }
    }

   

function RegistraProveedor(e) {
        
        if ($("#txtNombreProviderModal").val().trim() == "") // Valida la obligatoriedad del nombre.
        {
            e.stopPropagation();

            $("#txtNombreProviderModal").focus();
            $("#txtNombreProviderModal").addClass("has-error");

            error = "Error!";
            mensaje = "Required First name!!...";
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#txtApellidoProviderModal").val().trim() == "") // Valida la obligatoriedad del apellido. 
        {
            e.stopPropagation();

            $("#txtApellidoProviderModal").focus();
            $("#txtApellidoProviderModal").addClass("has-error");

            error = "Error!";
            mensaje = "Required Last name!!...";
            MensajeError(mensaje, error);
            return false;
        }
    else {
            e.preventDefault();

            var Proveedor = LlenarProveedor(0
                                          , $("#txtNombreProviderModal").val().trim().toUpperCase()
                                          , $("#txtApellidoProviderModal").val().trim().toUpperCase()
                                          , $("#txtNumberProviderModal").val().trim());

            // Primero verifica que no exista un ajustador homónimo.
            $.ajax({
                type: "POST",
                async: false,
                data: JSON.stringify(Proveedor),
                url: '@Url.Action("BuscarHomonimos", "Provider")',
                contentType: "application/json",
                dataType: 'json',
                success: function (Data) {
                    if (!Data.Resultado) // Si no se encontraron homónimos.
                    {
                        if (metodoRegistraProveedor(Proveedor)) // Si la llamada al registro del proveedor es exitosa.
                        {
                            // console.log("RegistraProveedor-a");
                            LimpiarControlesRegistroNuevoProveedor();

                            //ValorOriginalNombreProveedor = $("#txtProveedor").val().trim(); // (Gabo) Actualiza el valor de la variable ValorOriginalNombreProveedor con el nombre del proveedor seleccionada.


                            // Aquí se mostrará el ajustador recién registradaoen la caja de texto de autocompletar.
                        }
                    }
                    else // Si se encontraron homónimos.
                    {
                        // Muestra las coincidencias de homónimos.
                        // console.log("RegistraProveedor-b");
                        llenaModalProveedor(Data, 'registra');
                    }
                }
            });
        }
    }


    function metodoActualizaProvider(e, Proveedor, activo) {
        e.preventDefault();
        //aPos = $("#apos").val();

        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify(Proveedor),
            url: '@Url.Action("ActualizarDatos", "Provider")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data) {
                ProveedorX = Proveedor;
                Proveedor = (Data);

                // console.log(Data);
                if (Data[0].ErrorMessage == "") {

                    // console.log("metodoActualizaProvider-a");
                    var codNew = Data[0].ProviderErrorCode;//aqui envia  codigo del actualizado                    
                    $("#hdCodigoProveedor").val(codNew);
                    error = "Successful!";
                    mensaje = "Data save correctly...";
                    MensajeError(mensaje, error);
                    $("#btnCancelarModalProviderHom").trigger("click");
                    $("#btnCancelarProviderModal").trigger("click");
                    LLenaProveedorFormularioCase(ProveedorX);
                    ObtenerProveedores();//brenher
                    CargarProveedoresEnCombo(Proveedores);
                    $("#cmbProveedor").val(Data[0].ProviderErrorCode).trigger("change");
                    Exito = true;
                }
                else {
                    // console.log("metodoActualizaProvider-b");
                    
                    error = "Error!";
                    mensaje = Data[0].ErrorMessage + "...";
                    //$("#NumeroSeguroSocialD").focus();//el error solo se muestra en SSD
                }


                MensajeError(mensaje, error);

            }
        });

    }


    function metodoRegistraAjustador(Ajustador) {
        var Exito;

        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify(Ajustador),
            url: '@Url.Action("Create", "Adjuster")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data) {
                if (Data[0].ErrorMessage == "") {
                    // Se rescata el código del ajustador registrado para mostrarlo como seleccionado.                     
                    
                    error = "Successful!";
                    mensaje = "Data save correctly...";
                    MensajeError(mensaje, error);
                    $("#btnCancelarModalAdjusterHom").trigger("click");
                    $("#btnCancelarAjustadorModal").trigger("click");
                    LLenaAjustadorFormularioCase(Ajustador);
                    ObtenerAjustadores();
                    CargarAjustadoresEnCombo(Ajustadores);
                    $("#hdCodigoAjustador").val(Data[0].AdjusterErrorCode);
                    $("#cmbAjustador").val(Data[0].AdjusterErrorCode).trigger("change");
                    Exito = true;

                    ///////////////////////Node Adjuster//////////////////////////////////////////////////////
                    websocket.emit('funcionActualizacionTablaAdjusterNode', 'caseInformation_Adjuster');

                }
                else {
                    error = "Error";
                    mensaje = Data[0].ErrorMessage;
                    MensajeError(mensaje, error);
                    $("#txtNombreAdjusterModal").focus();

                    Exito = false;
                }
            }
        });

        return Exito;
    }


    function metodoRegistraPaciente(Paciente) {
        var Exito;
        //
        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify(Paciente),
            url: '@Url.Action("Create", "Patient")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data) {
                if (Data[0].ErrorMessage == "") {
                    // Se rescata el código del paciente registrado para mostrarlo como seleccionado.
                    $("#hdCodigoPaciente").val(Data[0].PatientErrorCode);

                    error = "Successful!";
                    mensaje = "Data save correctly...";
                    MensajeError(mensaje, error);
                    $("#btnCancelarModalPacienteHom").trigger("click");
                    $("#btnCancelarPacienteModal").trigger("click");
                    $("#txtPaciente").prop("readonly", false); // línea importante agregada por Gabo.                    
                    // console.log("metodoRegistraPaciente");
                    LLenaPacienteFormularioCase(Paciente);
                    ObtenerPacientes();//para llenar autocompletar                    
                    CargarPacientesEnCombo(Pacientes);

                    $("#cmbPaciente").val($("#hdCodigoPaciente").val()).trigger("change");
                    Exito = true;
                }
                else {
                    error = "Error!";
                    mensaje = Data[0].ErrorMessage;
                    MensajeError(mensaje, error);
                    Exito = false;
                }
            }
        });

        return Exito;
    }

    function metodoRegistraAseguradora(Aseguradora) {
        var Exito;

        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify(Aseguradora),
            url: '@Url.Action("Create", "Insurer")',
             contentType: "application/json",
             dataType: 'json',
            success: function (Data) {
                if (Data[0].ErrorMessage == "") {
                     // Se rescata el código de la aseguradora registrada para mostrarla como seleccionada.
                     $("#hdCodigoAseguradora").val(Data[0].InsurerErrorCode);
                     error = "Successful!";
                     mensaje = "Data save correctly...";
                     MensajeError(mensaje, error);
                     $("#btnCancelarInsurerModal").trigger("click");
                     LLenaAseguradoraFormularioCase(Aseguradora);
                     ObtenerAseguradoras();
                     CargarAseguradorasEnCombo(Aseguradoras);
                     $("#cmbAseguradora").val($("#hdCodigoAseguradora").val()).trigger("change");
                     // console.log("xxxxxxxxxxxxxxxxxxAAAAAAAAAA");
                     Exito = true;

                     ///////////////////////Node Insurer////////////////////////////////////////////////////
                     websocket.emit('funcionActualizacionTablaInsurerNode', 'caseInformation_Insurer');
                 }
                else {
                     error = "Error";
                     mensaje = Data[0].ErrorMessage;
                     MensajeError(mensaje, error);
                     
                     $("#txtNombreInsurerModal").focus();

                     Exito = false;
                 }
             }
        });

        return Exito;
    }

    function metodoRegistraProveedor(Proveedor) {
        var Exito;
             
        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify(Proveedor),
            url: '@Url.Action("Create", "Provider")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data) {
                if (Data[0].ErrorMessage == "") {
                    Proveedor.Pro_code = Data[0].ProviderErrorCode;
                    // Se rescata el código del proveedor registrado para mostrarlo como seleccionado.                     
                    //$("#hdCodigoProveedor").val(Data[0].ProviderErrorCode);
                    error = "Successful!";
                    mensaje = "Data save correctly...";
                    MensajeError(mensaje, error);
                    $("#btnCancelarProviderModal").trigger("click");
                    $("#btnCancelarModalProviderHom").trigger("click");                                        
                    ObtenerProveedores();
                    CargarProveedoresEnCombo(Proveedores);//Proveedores es la variable global que se llena en ObtenerProveedores();
                    LLenaProveedorFormularioCase(Proveedor);//galy
                    //$("#cmbProveedor").val($("#hdCodigoProveedor").val()).trigger("change");
                    Exito = true;

                    ///////////////////////Node Provider////////////////////////////////////////////////////
                    websocket.emit('funcionActualizacionTablaProveedorNode', 'caseInformation_Provider');
                }
                else {
                    error = "Error";
                    mensaje = Data[0].ErrorMessage;
                    MensajeError(mensaje, error);
                    $("#btnCancelarModalProviderHom").trigger("click");
                    $("#txtNombreProviderModal").focus();
                    Exito = false;
                }
            }
        });

        return Exito;
    }



    function metodoRegistraMedico(Doctor) {//guevara
        var Exito;

        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify(Doctor),
            url: '@Url.Action("create", "Medical")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data) {
                // console.log(Data);
                if (Data[0].ErrorMessage == "") { 
                    // console.log(Data[0].MedicalErrorCode);
                    $("#btnCancelarDoctorModal").trigger("click");
                    $("#btnCancelarModalDoctorHom").trigger("click");
                    $("#hdCodigoDoctorParaAsignar").val(Data[0].MedicalErrorCode);//aqui solo le doy valor al imput, luego cargo el autocompletar, para que no demore

                    // console.log("metodoRegistraMedico-a");

                   
                    error = "Successful!";
                    mensaje = "Data save correctly...";
                    MensajeError(mensaje, error);
                    Exito = true;
                    ///////////////////////Node Medical////////////////////////////////////////////////////
                    websocket.emit('funcionActualizacionTablaMedicalNode', 'caseInformation_Medical');
                }
                else {
                    // console.log("metodoRegistraMedico-b");
                    error = "Error";
                    mensaje = Data[0].ErrorMessage;
                    MensajeError(mensaje, error);
                    $("#btnCancelarModalDoctorHom").trigger("click");
                    $("#txtNombreDoctor").focus();
                    Exito = false;
                    }
            }
        });

        return Exito;
    }

    function metodoRegistraAbogado(Abogado) {
        var Exito;

        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify(Abogado),
            url: '@Url.Action("create", "Attorney")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data) {
                if (Data[0].ErrorMessage == "") {
                    $("#hdCodigoAbogadoParaAsignar").val(Data[0].AttorneyErrorCode);
                    $("#btnCancelarAbogadoModal").trigger("click");

                    error = "Successful!";
                    mensaje = "Data save correctly...";
                    MensajeError(mensaje, error);
                    LimpiarControlesRegistroNuevoAbogado();
                    Exito = true;
                    ///////////////////////Node Attorney//////////////////////////////////////////////////////
                    websocket.emit('funcionActualizacionTablaAttorneyNode', 'caseInformation_Attorney');
                }
                else {
                    error = "Error!";
                    error = Data[0].MensajeError + "...";
                    Exito = false;
                }
            }
        });

        return Exito;
    }  


    

    function metodoActualizaPaciente(e, Paciente, activo) {
        e.preventDefault();
        aPos = $("#apos").val();


        

        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify(Paciente),
            url: '@Url.Action("Actualizar", "Patient")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data) {
                PacienteX = Paciente;
                Paciente = (Data);

                if (Data[0].ErrorMessage == "") {
                    error = "Successful!";
                    mensaje = "Data save correctly...";
                    MensajeError(mensaje, error);
                    $("#btnCancelarModalPatientHom").trigger("click");
                    $("#btnCancelarPacienteModal").trigger("click");
                    LLenaPacienteFormularioCase(PacienteX);
                    ObtenerPacientes();                    
                    CargarPacientesEnCombo(Pacientes);//Pacientes variable global q se llena en ObtenerPacientes();  

                    $("hdCodigoPaciente").val(Data[0].PatientErrorCode);
                    $("#cmbPaciente").val(Data[0].PatientErrorCode).trigger("change");
                    
                }
                else {
                    error = "Error!";
                    mensaje = Data[0].ErrorMessage + "...";
                    //$("#NumeroSeguroSocialD").focus();//el error solo se muestra en SSD
                    MensajeError(mensaje, error);
                }
            }
        });
    }

    function metodoActualizaAjustador(e, Ajustador, activo) {//maga
        e.preventDefault();
        aPos = $("#apos").val();


        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify(Ajustador),
            url: '@Url.Action("ActualizarDatos", "Adjuster")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data) {
                AjustadorX = Ajustador;
                Ajustador = (Data);
                // console.log(Data);  
                if (Data[0].ErrorMessage == "") {
                    // console.log("metodoActualizaAjustador-a");
                    error = "Successful!";
                    mensaje = "Data save correctly...";
                    MensajeError(mensaje, error);
                    $("#btnCancelarModalAdjusterHom").trigger("click");
                    $("#btnCancelarAjustadorModal").trigger("click");                    
                    ObtenerAjustadores();
                    CargarAjustadoresEnCombo(Ajustadores);//Ajustadores es la variable global que se llena en ObtenerAjustadores();
                    LLenaAjustadorFormularioCase(AjustadorX);
                    $("hdCodigoAjustador").val(Data[0].AdjusterErrorCode);
                    $("#cmbAjustador").val(Data[0].AdjusterErrorCode).trigger("change");

                    ///////////////////////Node Adjuster//////////////////////////////////////////////////////
                    websocket.emit('funcionActualizacionTablaAdjusterNode', 'caseInformation_Adjuster');
                 }
                else {
                    // console.log("metodoActualizaAjustador-b");
                    error = "Error!";
                    mensaje = Data[0].ErrorMessage + "...";
                    //$("#NumeroSeguroSocialD").focus();//el error solo se muestra en SSD
                 }


                MensajeError(mensaje, error);

            }
        });

    }

    function metodoActualizaAseguradora(e, Aseguradora, activo) {
        e.preventDefault();
        aPos = $("#apos").val();

        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify(Aseguradora), // insurer
            url: '@Url.Action("ActualizarDatos", "Insurer")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data) {


                if (Data[0].ErrorMessage == "") {

                    error = "Successful!";
                    mensaje = "Data save correctly...";
                    MensajeError(mensaje, error);        
                    ObtenerAseguradoras();
                    // console.log(Aseguradora.Ins_code);                    
                    CargarAseguradorasEnCombo(Aseguradoras);//Aseguradoras es la variable global que se llena en ObtenerAseguradoras();
                    LLenaAseguradoraFormularioCase(Aseguradora);//aquiedherInsurer

                    $("hdCodigoAseguradora").val(Aseguradora.Ins_code);
                    $("#cmbAseguradora").val(Aseguradora.Ins_code).trigger("change");
                    $("#btnCancelarModalInsurerHom").trigger("click");
                    $("#btnCancelarInsurerModal").trigger("click");
                    
                    ///////////////////////Node Insurer///////////////////////////////////////////////////
                    websocket.emit('funcionActualizacionTablaInsurerNode', 'caseInformation_Insurer');



                }
                else {
                    error = "Error!";
                    mensaje = Data[0].ErrorMessage;
                }
                MensajeError(mensaje, error);
            }
        });
    }

    function metodoActualizaProveedor(e, Proveedor, activo) {
        e.preventDefault();
        aPos = $("#apos").val();
        // console.log("metodoActualizaProveedor");
        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify(Proveedor),
            url: '@Url.Action("ActualizarDatos", "Provider")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data) {
                ProveedorX = Proveedor;
                Proveedor = (Data);
                // console.log(ProveedorX);
                // console.log(Data);

                if (Data[0].ErrorMessage == "") {

                    // console.log("metodoActualizaProveedor-a");

                    error = "Successful!";
                    mensaje = "Data update correctly...";
                    $("#btnCancelarProviderModal").trigger("click");
                    $("#btnCancelarModalProviderHom").trigger("click");//ivon
                    ObtenerProveedores();
                    CargarProveedoresEnCombo(Proveedores);//este metodo recarga el combo, PROVEEDORES es la variable global y que la llena en ObtenerProveedores().
                    // console.log(ProveedorX.Pro_code);
                    LLenaProveedorFormularioCase(ProveedorX);            
                    // console.log("fin-metodoActualizaProveedor-a");

                    ///////////////////////Node Provider/////////////////////////////////////////////////
                    websocket.emit('funcionActualizacionTablaProveedorNode', 'caseInformation_Provider');
                }
                else {

                    error = "Error!";
                    mensaje = Data[0].ErrorMessage + "...";
                    $("#NumeroSeguroSocialD").focus();//el error solo se muestra en SSD
                }


                MensajeError(mensaje, error);

            }
        });

    }
    function metodoActualizaDoctor(e, Doctor, activo) {
        e.preventDefault();
        aPos = $("#apos").val();


        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify(Doctor), // insurer
            url: '@Url.Action("ActualizarDatos", "Medical")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data) {

                // console.log("metodoActualizaDoctor");
                // console.log(Data);
                // console.log(Doctor);
                //AseguradoraX = Aseguradora;
                //Insurer = (Data);

                if (Data[0].ErrorMessage == "") {

                    error = "Successful!";
                    mensaje = "Data save correctly...";
                    //MensajeError(mensaje, error);

                    ObtenerDoctores();                    
                    CargarDoctoresEnCombo(Doctores);//Aseguradoras es la variable global que se llena en ObtenerAseguradoras();
                    //LLenaDoctorFormularioCase(Doctor);no llena por que soo actualiza combo, que lo realizo lineas abajo
                    CargarDoctores($("#hdCodigoCaso").val());
                    $("hdCodigoDoctorParaAsignar").val(Doctor.med_code);
                    $("#cmbDoctor").val(Doctor.Med_code).trigger("change");

                    $("#btnCancelarModalDoctorrHom").trigger("click");
                    $("#btnCancelarDoctorModal").trigger("click");

                    ///////////////////////Node Provider/////////////////////////////////////////////////
                    websocket.emit('funcionActualizacionTablaMedicalNode', 'caseInformation_Medical');
                
                }
                else {
                    error = "Error!";
                    mensaje = Data[0].ErrorMessage;
                }
                MensajeError(mensaje, error);
            }
        });
    }







    function LlenarPaciente(Codigo
                            , Nombre
                            , Apellido
                            , FechaNacimiento
                            , NumeroSeguroSocial
                            , Direccion
                            , AbreviaturaEstadoPais
                            , NombreCiudad
                            , CodigoPostal
                            , ExtensionCodigoPostal
                            , Telefono
                            , TelefonoAlternativo
                            , Sexo) {
        var PacienteJson =
            {
                "Pat_code": Codigo
                , "Pat_firstName": Nombre.toUpperCase()
                , "Pat_lastName": Apellido.toUpperCase()
                , "Pat_birthday": FechaNacimiento
                , "Pat_socialSecurityNumberD": ((NumeroSeguroSocial == "") ? null : NumeroSeguroSocial)
                , "Pat_address": ((Direccion == "") ? null : Direccion)
                , "Pat_state": ((AbreviaturaEstadoPais == "") ? null : AbreviaturaEstadoPais)
                , "Pat_city": ((NombreCiudad == "") ? null : NombreCiudad)
                , "Pat_zipCode": ((CodigoPostal == "") ? null : CodigoPostal)
                , "Pat_zipCodeExt": ((ExtensionCodigoPostal == "") ? null : ExtensionCodigoPostal)
                , "Pat_phone": ((Telefono == "") ? null : Telefono)
                , "Pat_fax": ((TelefonoAlternativo == "") ? null : TelefonoAlternativo)
                , "Pat_sex": Sexo
                , "Pat_operatorUser": CodigoUsuarioGlobal
            }

        return PacienteJson;
    }

    function LlenarAjustador(Codigo, Nombre, Apellido, Telefono, ExtensionTelefono) {
        var AjustadorJson =
            {
                "Adj_code": Codigo
                , "Adj_firstName": Nombre.toUpperCase()
                , "Adj_lastName": Apellido.toUpperCase()
                , "Adj_phone": Telefono
                , "Adj_phoneExt": ExtensionTelefono
                , "Adj_operatorUser": CodigoUsuarioGlobal
            }

        return AjustadorJson;
    }
    
    function LlenarAseguradora(Codigo, Nombre, Telefono, ExtensionTelefono, Fax, Direccion, NombreCiudad, AbreviaturaEstadoPais, CodigoPostal, ExtensionCodigoPostal, SCTpa, FeinSC, Carrier, FeinCC) {
        var AseguradoraJson =
            {
                "Ins_code": Codigo,
                "Ins_name": Nombre,
                "Ins_phone": Telefono,
                "Ins_phoneExt": ExtensionTelefono,
                "Ins_fax": Fax,
                "Ins_address": Direccion,
                "Ins_city": NombreCiudad,
                "Ins_state": AbreviaturaEstadoPais,
                "Ins_zipCode": CodigoPostal,
                "Ins_zipExt": ExtensionCodigoPostal,
                "Ins_scTpaCode": SCTpa,
                "Ins_feinSc": FeinSC,
                "Ins_carrierCode": Carrier,
                "Ins_feinCc": FeinCC
                , "Ins_operatorUser": CodigoUsuarioGlobal
            }

        return AseguradoraJson;
    }

    function LlenarProveedor(Codigo, Nombre, Apellido, idNumber) {
        var ProveedorJson =
            {
                "Pro_code": Codigo,
                "Pro_firstName": Nombre,
                "Pro_lastName": Apellido,
                "Pro_number": idNumber
            }

        return ProveedorJson;
    }


    function LLenaPacienteFormularioCase(Paciente) {
        // brenher
        CargarPaciente(Paciente);
    }
    function LLenaAjustadorFormularioCase(Ajustador) {
        //brenher
        CargarAjustador(Ajustador);
    }
    function LLenaAseguradoraFormularioCase(Aseguradora) {
        //brenher
        CargarAseguradora(Aseguradora);
    }
    function LLenaProveedorFormularioCase(Proveedor) {
        CargarProveedor(Proveedor);
    }

    function LLenaDoctorFormularioCase(Doctor) {
        //$("#txtDoctor").val(Doctor.Med_firstName + " " + Doctor.Med_lastName );
    }

    function EliminarAbogadoModal(e) {
        e.preventDefault();

        var CodigoAbogado = $(this).parent().parent().find("td:eq(0)").html();
        var nomAbog = $(this).parent().parent().find("td:eq(1)").html();


        dato = nomAbog.trim();

        var otable = $("#tblAbogado").dataTable();
        var target_row = $(this).closest("tr").get(0);
        var aPos = otable.fnGetPosition(target_row);



        swal({
            title: "Are you sure?",
            text: "Do you want to delete " + dato + "!",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes, delete it!",
            closeOnConfirm: false,
            closeOnCancel: false
        },
        function (isConfirm) {
            if (isConfirm) {
               //swal("Deleted!", "Your file information has been deleted.", "success");
                mensajeAviso = EliminarAbogadoDeCaso(e, CodigoAbogado, otable, aPos);//Elimina sin restriccion alguna
                if (mensajeAviso == 1)
                    swal("Cancelled", "This Doctor is assigned to an event!", "error");
                else
                    swal("Deleted!", "Your file information has been deleted.", "success");
            }
            else {
                swal("Cancelled", "The information was not eliminated!", "error");
                return 0;
            }
        });
    }

    function EliminaDoctorModal(e) {
            e.preventDefault();

            var CodigoDoctor = $(this).parent().parent().find("td:eq(0)").html();
            var nomPac = $(this).parent().parent().find("td:eq(1)").html();
     

            dato = nomPac.trim();

            var otable = $("#tblDoctor").dataTable();
            var target_row = $(this).closest("tr").get(0);
            var aPos = otable.fnGetPosition(target_row);

            swal({
                title: "Are you sure?",
                text: "Do you want to delete " + dato + "!",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "Yes, delete it!",
                closeOnConfirm: false,
                closeOnCancel: false
            },
        function (isConfirm) {
            if (isConfirm) {
                    
                    mensajeAviso = EliminarDoctorDeCaso(e, CodigoDoctor, otable, aPos);
                    if (mensajeAviso == 1)
                        swal("Cancelled", "This Doctor is assigned to an event!", "error");
                    else
                        swal("Deleted!", "Your file information has been deleted.", "success");


                }
                else {
                    swal("Cancelled", "The information was not eliminated!", "error");
                    return 0;
                }
            });
    }

    function EliminarDoctorDeCaso(e, CodigoDoctor, otable, pos) {
        e.preventDefault();
        
        //var CodigoDoctor= $(this).parent().parent().find("td:eq(0)").html();
        var CodigoCaso = $("#hdCodigoCaso").val();
        
        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify({ "CodigoCaso": CodigoCaso, "CodigoDoctor": CodigoDoctor }),
            url: '@Url.Action("EliminarDoctorDeCaso", "CaseMed")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data) {
             
                /*
                Data contiene => 
                            "Indicator": 0 (Indica que se eliminó el doctor del caso.)
                            "ErrorMessage": "Doctor assigned correctly."

                            "Indicator": 1 (Indica que no se puede eliminar por que está relacionado a un evento.)
                            "ErrorMessage": "You can´t remove the doctor because it is related to a event."
                */

                mensaje = Data.Indicator;
                if (Data.Indicator == 0) {
                    otable.fnDeleteRow(pos);
                    mensajeAviso = 0;
                }
                else
                    mensajeAviso = 1;

                //mensajeAviso = mensaje;






            }
        }); 
        return mensajeAviso;
    }

    function EliminarAbogadoDeCaso(e, CodigoAbogado, otable, pos) {
        e.preventDefault();
        
        var CodigoCaso = $("#hdCodigoCaso").val();


        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify({ "CodigoCaso": CodigoCaso, "CodigoAbogado": CodigoAbogado }),
            url: '@Url.Action("EliminarAbogadoDeCaso", "CaseAtt")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data) {

                /*
                Data contiene => 
                            "Indicator": 0 (Indica que se eliminó el doctor del caso.)
                            "ErrorMessage": "Doctor assigned correctly."

                            "Indicator": 1 (Indica que no se puede eliminar por que está relacionado a un evento.)
                            "ErrorMessage": "You can´t remove the doctor because it is related to a event."
                */
                mensaje = Data.Indicator;
                if (Data.Indicator == 0) {
                    otable.fnDeleteRow(pos);
                    mensajeAviso = 0;
                }
                else
                    mensajeAviso = 1;
            }
        });

        return mensajeAviso;
    }

    function AsignaDoctorACaso(e) {
        
        // console.log("AsignaDoctorACaso");
        if ($("#hdCodigoCaso").val().trim() == "") {
            //alert("Seleccione un caso");
            $("#txtBuscaCaso").focus();
            error = "Error!";
            mensaje = "Select a case!";
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#hdCodigoDoctorParaAsignar").val().trim() == "630") {
            $("#txtDoctor").focus();
            error = "Error!";
            mensaje = "Select a doctor!";
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#hdCodigoDoctorParaAsignar").val() == "") {
            //alert("Seleccione un doctor");
            $("#txtDoctor").focus();
            error = "Error!";
            mensaje = "Select a doctor!";
            MensajeError(mensaje, error);
            return false;
        }
        else {
            var CodigoCaso = $("#hdCodigoCaso").val();
            var CodigoDoctor = $("#hdCodigoDoctorParaAsignar").val();
            var ProcedenciaDoctor = (e.currentTarget.id == "btnAsignaDoctor" ? "Billing_AutocompleteDoctor" : "Billing_NewDoctor")
            var CodigoUsuario = ObtenerUsuarioLogueado();

            

            var DatosAsignacionDoctor =
            {
                "CodigoCaso": CodigoCaso
                , "CodigoDoctor": CodigoDoctor
                , "ProcedenciaDoctor": ProcedenciaDoctor
                , "CodigoUsuario": CodigoUsuario.Use_code
            };
            // console.log(DatosAsignacionDoctor);
            $.ajax({
                type: "POST",
                async: false,
                data: JSON.stringify(DatosAsignacionDoctor),
                url: '@Url.Action("AsignarDoctorACaso", "CaseMed")',
                contentType: "application/json",
                dataType: 'json',
                success: function (Data) {
                    if (Data.Indicator == 0) {
                         error = "Successful!";
                        //AgregaFilaDoctorCaso(DatosAsignacionDoctor); --> no se agrego a tabla solo se muestra en input 
                        //CargarDoctores(CodigoCaso);
                        // Una vez asignado el doctor elegido, se limpia el control oculto que alberga su código durante la asignación.
                        $("#hdCodigoDoctorParaAsignar").val("");
                        $("#cmbDoctor").val("630").trigger("change");
                        CargarDoctores(CodigoCaso);

                    }
                    else
                        error = "Error!";

                    mensaje = Data.ErrorMessage;                    
                    MensajeError(mensaje, error);
                    
                    
                    
               
                }
            });
             

        }
    }

function AsignaAbogadoACaso(e) {
    if ($("#hdCodigoCaso").val().trim() == "") {
            //alert("Seleccione un caso");
            $("#txtBuscaCaso").focus();
            error = "Error!";
            mensaje = "Select a case!";
            MensajeError(mensaje, error);
            return false;
        }
    else if ($("#hdCodigoAbogadoParaAsignar").val().trim() == "") {
            //alert("Seleccione un abogado");
            $("#txtAbogado").focus();
            error = "Error!";
            mensaje = "Select a attorney!";
            MensajeError(mensaje, error);
            return false;

        }
        else if ($("#hdCodigoAbogadoParaAsignar").val() == "85") {
            //alert("Seleccione un abogado");
            $("#txtAbogado").focus();
            error = "Error!";
            mensaje = "Select a attorney!";
            MensajeError(mensaje, error);
            return false;

        }
    else {
            var CodigoCaso = $("#hdCodigoCaso").val();
            var CodigoAbogado = $("#hdCodigoAbogadoParaAsignar").val();

            var DatosAsignacionAbogado =
            {
                "CodigoCaso": CodigoCaso
           , "CodigoAbogado": CodigoAbogado
            };

            $.ajax({
                type: "POST",
                async: false,
                data: JSON.stringify(DatosAsignacionAbogado),
                url: '@Url.Action("AsignarAbogadoACaso", "CaseAtt")',
                contentType: "application/json",
                dataType: 'json',
                success: function (Data) {
                    if (Data.Indicator == 0) {
                        error = "Successful!";
                        CargarAbogados(CodigoCaso);
                        $("#hdCodigoAbogadoParaAsignar").val("");
                        $("#cmbAbogado").val("85").trigger("change");
                    }
                    else
                        error = "Error!";

                    mensaje = Data.ErrorMessage;

                    MensajeError(mensaje, error);
                }
            });

            // Una vez asignado el abogado elegido, se limpia el control oculto que alberga su código durante la asignación.

        }
    }

function AsignarNuevoDoctorCaso(e) {
        if ($("#txtNombreDoctor").val().trim() == "") // Valida la obligatoriedad del nombre 
        {
            e.stopPropagation();

            $("#txtNombreDoctor").focus();
            $("#txtNombreDoctor").addClass("has-error");

            error = "Error!";
            mensaje = "Required First name!!...";
            
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#txtApellidoDoctor").val().trim() == "") // Valida la obligatoriedad del apellido
        {
            e.stopPropagation();
            $("#txtApellidoDoctor").focus();
            $("#txtApellidoDoctor").addClass("has-error");
            error = "Error!";
            mensaje = "Required Last name!!...";
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#hdCiudadDoctor").val() == "" && $("#txtCiudadDoctor").val() == "") // Valida la obligatoriedad de la ciudad (valida que se seleccione una ciudad del autocompletado o que se escriba una ciudad en la caja de texto)
        {
            e.stopPropagation();
            error = "Error!";
            mensaje = "Select or type a City from the list!!...";
            MensajeError(mensaje, error);
            $("#txtCiudadDoctor").focus();
            return false;
        }
        else if ($("#hdAbreviaturaEstadoPaisDoctor").val() == "") // Valida la obligatoriedad del estado
        {
            e.stopPropagation();
            error = "Error!";
            mensaje = "Select a State from the list!!...";
            MensajeError(mensaje, error);
            $("#txtEstadoPaisDoctor").focus();
            return false;
        }

        //else if ($("#cmbEspecialidadesDoctor").val() == "") {
        //    e.preventDefault();

        //    $("#cmbEspecialidadesDoctor").focus();
        //    $("#cmbEspecialidadesDoctor").addClass("has-error");

        //    error = "Error!";
        //    mensaje = "Select a Specialty!!...";
        //    MensajeError(mensaje, error);
        //}
    else {
            e.preventDefault();

            var NombreCiudad;

            // Obtiene la el nombre de la ciudad seleccionada o ingresada
            if ($("#hdCiudadDoctor").val().trim() == "") // Si no se ha seleccionado una ciudad del autocompletado el valor que se registrará será el valor de la caja de texto
                NombreCiudad = $("#txtCiudadDoctor").val().trim();
            else // Si se ha seleccionado una ciudad del autocompletado el valor que se registrará será el id seleccionado (nombre de la ciudad).
                NombreCiudad = $("#hdCiudadDoctor").val().trim()
            // ----------------------------------------------------------

            var Doctor = LlenarDoctor(
                                        null
                                      , $("#txtNombreDoctor").val().trim()
                                      , $("#txtApellidoDoctor").val().trim()
                                      , $("#txtDireccionDoctor").val().trim()
                                      , NombreCiudad
                                      , $("#hdAbreviaturaEstadoPaisDoctor").val()
                                      , $("#txtCodigoPostalDoctor").val().trim()
                                      , $("#txtExtensionCodigoPostalDoctor").val().trim()
                                      , $("#txtTelefonoDoctor").val().trim()
                                      , $("#txtExtensionTelefonoDoctor").val().trim()
                                      , $("#txtTelefonoAlternativoDoctor").val().trim()
                                      , $("#txtFaxDoctor").val().trim()
                                      , $("#cmbEspecialidadesDoctor").val()
                                      , $("#txtOficinaDoctor").val().trim())

            // Primero verifica que no exista un paciente homónimo.
            $.ajax({
                type: "POST",
                async: false,
                data: JSON.stringify(Doctor),
                url: '@Url.Action("BuscarHomonimos", "Medical")',
                contentType: "application/json",
                dataType: 'json',
                success: function (Data) {
                    if (!Data.Resultado) // Si no se encuentran homónimos
                    {
                        if (metodoRegistraMedico(Doctor)) // Si la llamada al registro del doctor es exitosa, lo asignará al caso.
                        {
            
                            
                            ObtenerDoctores();//para combo
                            // console.log($("#hdCodigoDoctorParaAsignar").val().trim());
                            CargarDoctoresEnCombo(Doctores);//Doctores es la variable global que se llena en ObtenerDoctores();                                                        
                            // console.log($("#hdCodigoDoctorParaAsignar").val().trim());
                            LimpiarControlesRegistroNuevoDoctor();//
                            // console.log($("#hdCodigoDoctorParaAsignar").val().trim());
                            $("#cmbDoctor").val($("#hdCodigoDoctorParaAsignar").val()).trigger("change");
                            AsignaDoctorACaso(e) // Asigna el doctor al caso.                                                  
                            CargarDoctores($("#hdCodigoCaso").val());

                        

                        }
                    }
                    else // Si se encontraron homónimos.
                    {
                        // Muestra las coincidencias de hómónimos.
                        llenaModalDoctor(Data, 'registra');
                        
                    }
                }
            });
        }        
    }

function AsignarNuevoAbogadoCaso(e) {
        if ($("#txtNombreAbogado").val().trim() == "") // Valida la obligatoriedad del nombre 
        {
            e.stopPropagation();

            $("#txtNombreAbogado").focus();
            $("#txtNombreAbogado").addClass("has-error");

            error = "Error!";
            mensaje = "Required First name!!...";
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#txtApellidoAbogado").val().trim() == "") // Valida la obligatoriedad del apellido
        {
            e.stopPropagation();
            $("#txtApellidoAbogado").focus();
            $("#txtApellidoAbogado").addClass("has-error");
            error = "Error!";
            mensaje = "Required Last name!!...";
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#hdCiudadAbogado").val() == "" && $("#txtCiudadAbogado").val() == "") // Valida la obligatoriedad de la ciudad (valida que se seleccione una ciudad del autocompletado o que se escriba una ciudad en la caja de texto)
        {
            e.stopPropagation();
            error = "Error!";
            mensaje = "Select or type a City from the list!!...";
            MensajeError(mensaje, error);
            $("#txtCiudadAbogado").focus();
            return false;
        }
        else if ($("#hdAbreviaturaEstadoPaisAbogado").val() == "") // Valida la obligatoriedad del estado
        {
            e.stopPropagation();
            error = "Error!";
            mensaje = "Select a State from the list!!...";
            MensajeError(mensaje, error);
            $("#txtEstadoPaisDoctor").focus();
            return false;
        }
        //else if ($("#cmbEspecialidadesAbogado").val() == "") {
        //    e.preventDefault();

        //    $("#cmbEspecialidadesAbogado").focus();
        //    $("#cmbEspecialidadesAbogado").addClass("has-error");

        //    error = "Error!";
        //    mensaje = "Select a Specialty!!...";
        //    MensajeError(mensaje, error);
        //}
    else {
            e.preventDefault();

            var NombreCiudad;

            // Obtiene la el nombre de la ciudad seleccionada o ingresada
            if ($("#hdCiudadAbogado").val().trim() == "") // Si no se ha seleccionado una ciudad del autocompletado el valor que se registrará será el valor de la caja de texto
                NombreCiudad = $("#txtCiudadAbogado").val().trim();
            else // Si se ha seleccionado una ciudad del autocompletado el valor que se registrará será el id seleccionado (nombre de la ciudad).
                NombreCiudad = $("#hdCiudadAbogado").val().trim()
            // ----------------------------------------------------------

            var Abogado = LlenarAbogado(
                                        null
                                        , $("#txtNombreAbogado").val().trim().toUpperCase()
                                        , $("#txtApellidoAbogado").val().trim().toUpperCase()
                                        , $("#txtDireccionAbogado").val().trim().toUpperCase()
                                        , NombreCiudad
                                        , $("#hdAbreviaturaEstadoPaisAbogado").val().trim().toUpperCase()
                                        , $("#txtCodigoPostalAbogado").val().trim().toUpperCase()
                                        , $("#txtExtensionCodigoPostalAbogado").val().trim().toUpperCase()
                                        , $("#txtTelefonoAbogado").val().trim()
                                        , $("#txtFaxAbogado").val().trim()
                                        , $("#txtAsistenteAbogado").val().trim().toUpperCase()
                                        , $("#cmbEspecialidadesAbogado").val())


            // Primero verifica que no exista un abogado homónimo.
            $.ajax({
                type: "POST",
                async: false,
                data: JSON.stringify(Abogado),
                url: '@Url.Action("BuscarHomonimos", "Attorney")',
                contentType: "application/json",
                dataType: 'json',
                success: function (Data) {
                    if (!Data.Resultado) // Si no se encuentran homónimos
                    {

                        if (metodoRegistraAbogado(Abogado)) // Si la llamada al registro del abogado es exitosa, lo asignará al caso.
                        {
                            AsignaAbogadoACaso(e); // Asigna el abogado al caso.
                            // console.log("metodoRegistraAbogado");
                            ObtenerAbogados();
                            CargarAbogadosEnCombo(Abogados);
                            CodigoCaso = $("#hdCodigoCaso").val();
                            CargarAbogados(CodigoCaso);//tabla
                        }
                    }
                    else // Si se encontraron homónimos.
                    {
                        // console.log("modalAbogado");
                        // Muestra las coincidencias de hómónimos.
                        ///error = "Error";
                        //mensaje = "Already exists attorney in the Database";
                        //MensajeError(mensaje, error);
                        llenaModalAbogado(Data, 'registra');
                    }
                }
            });
        }
    }



function LimpiarControlesRegistroNuevoDoctor() {
        /************ Variables que se utilizan en el autocompletar ************/
        ValorOriginalEstadoPaisDoctor = "";
        ValorOriginalCiudadDoctor = "";
        /***********************************************************************/
        
        $("#txtNombreDoctor").val("");
        $("#txtApellidoDoctor").val("");
        $("#txtDireccionDoctor").val("");

        $("#hdAbreviaturaEstadoPaisDoctor").val("");
        $("#txtEstadoPaisDoctor").val("");

        $("#hdCiudadDoctor").val("");
        $("#txtCiudadDoctor").val("");

        $("#txtCodigoPostalDoctor").val("");
        $("#txtExtensionCodigoPostalDoctor").val("");
        $("#txtTelefonoDoctor").val("");
        $("#txtExtensionTelefonoDoctor").val("");
        $("#txtTelefonoAlternativoDoctor").val("");
        $("#txtFaxDoctor").val("");
        $("#cmbEspecialidadesDoctor").val("1");
        $("#txtOficinaDoctor").val("");
    }    

function LimpiarControlesRegistroNuevoAbogado() {
        /************ Variables que se utilizan en el autocompletar ************/
        ValorOriginalEstadoPaisAbogado = "";
        ValorOriginalCiudadAbogado = "";
        /***********************************************************************/

        $("#txtNombreAbogado").val("");
        $("#txtApellidoAbogado").val("");
        $("#txtDireccionAbogado").val("");

        $("#hdAbreviaturaEstadoPaisAbogado").val("");
        $("#txtEstadoPaisAbogado").val("");

        $("#hdCiudadAbogado").val("");
        $("#txtCiudadAbogado").val("");

        $("#txtCodigoPostalAbogado").val("");
        $("#txtExtensionCodigoPostalAbogado").val("");
        $("#txtTelefonoAbogado").val("");
        $("#txtExtensionTelefonoAbogado").val("");
        $("#txtTelefonoAlternativoAbogado").val("");
        $("#txtFaxAbogado").val("");
        $("#cmbEspecialidadesAbogado").val("2");
        $("#txtOficinaAbogado").val("");
        
        $("#txtAsistenteAbogado").val("");
        $("#txtNombreAbogado").focus();

    }

function LimpiarControlesRegistroNuevoAjustador() {
        // console.log("LimpiarControlesRegistroNuevoAjustador-a");

        $("#txtNombreAdjusterModal").val("");
        $("#txtApellidoAdjusterModal").val("");
        $("#txtPhoneAdjusterModal").val("");
        $("#txtExtAdjusterModal").val("");
    }

    function LimpiarControlesRegistroNuevoPaciente()//MODAL
    {
        
        
        /************ Variables que se utilizan en el autocompletar ************/
        ValorOriginalEstadoPaisPaciente = "";
        ValorOriginalCiudadPaciente = "";
        /***********************************************************************/

        $("#NombrePacienteModal").val("");
        $("#ApellidoPacienteModal").val("");
        $("#NumeroSeguroSocialDPacienteModal").val("");
        $("#DireccionPacienteModal").val("");

        $("#hdAbreviaturaEstadoPaisPacienteModal").val("");
        $("#EstadoPaisPacienteModal").val("");
        $("#hdCiudadPacienteModal").val("");
        $("#CiudadPacienteModal").val("");        
        

        $("#CodigoPostalPacienteModal").val("");
        $("#ExtensionCodigoPostalPacienteModal").val("");
        $("#TelefonoPacienteModal").val("");
        $("#TelefonoAlternativoPacienteModal").val("");
        $("#FechaNacimientoPacienteModal").val("");
      
        $("#rdbMasculinoPacienteModal").prop("checked", false);
        $("#rdbFemeninoPacienteModal").prop("checked", false);

        $("btnEditarPatientModal").addClass("hidden");
        $("btnAsignarNuevoPatientModal").removeClass("hidden");
    }

function LimpiarControlesRegistroNuevaAseguradora() {
        /************ Variables que se utilizan en el autocompletar ************/
        ValorOriginalEstadoPaisAseguradora = "";
        ValorOriginalCiudadAseguradora = "";
        /***********************************************************************/

        $("#txtNombreInsurerModal").val("");
        $("#txtCalleAseguradoraModal").val("");

        $("#hdCiudadInsurerModal").val("");
        $("#txtCiudadInsurerModal").val("");

        $("#hdAbreviaturaEstadoPaisInsurerModal").val("");
        $("#txtEstadoInsurerModal").val("");

        
        $("#FaxInsurerModal").val("");
        $("#txtTelefonoInsurerModal").val("");
        $("#txtExtInsurerModal").val("");
        $("#txtZipInsurerModal").val("");
        $("#txtExtCodeInsurerModal").val("");
        $("#txtTpaInsurerModal").val("");
        $("#txtFeinSCInsurerModal").val("");
        $("#txtCarrierInsurerModal").val("");
        $("#txtFeinCCInsurerModal").val("");
    }

function LimpiarControlesRegistroNuevoProveedor() {
        $("#txtNombreProviderModal").val("");
        $("#txtApellidoProviderModal").val("");
        $("#txtNumberProviderModal").val("");
        $("#txtNombreProviderModal").focus();
    }

    function LimpiarControlesEspecialidad()  //edher cancelaEspecialidad(e)
    {
        $("#txtEspecialidad").val("");
        $("#txtEspecialidadCodigo").val("0");
        $("#btnRegistraAgregaEspecialidad").html("Save");
    }
function LimpiarControlesEspecialidadAbogado() {
        $("#txtEspecialidadAbogado").val("");
        $("#txtEspecialidadCodigoAbogado").val("0");
        $("#btnRegistraAgregaEspecialidadAbogado").html("Save");
    }
    
function LlenarDoctor(Codigo, Nombre, Apellido, Direccion, NombreCiudad, AbreviaturaEstadoPais, CodigoPostal, ExtensionCodigoPostal, Telefono, ExtensionTelefono, TelefonoAlternativo, Fax, CodigoEspecialidad, Oficina) {
        var DoctorJson =
            {
                "Med_code": Codigo
                , "Med_firstName": Nombre
                , "Med_lastName": Apellido
                , "Med_address": Direccion
                , "Med_city": NombreCiudad
                , "Med_state": AbreviaturaEstadoPais
                , "Med_zipCode": CodigoPostal
                , "Med_zipCodeExt": ExtensionCodigoPostal
                , "Med_phone": Telefono
                , "Med_phoneExt": ExtensionTelefono
                , "Med_alternatePhone": TelefonoAlternativo
                , "Med_fax": Fax
                , "Spe_code": CodigoEspecialidad
                , "Med_office": Oficina
                , "Med_operatorUser": CodigoUsuarioGlobal
            }

        return DoctorJson;
    }

function LlenarAbogado(Codigo, Nombre, Apellido, Direccion, NombreCiudad, AbreviaturaEstadoPais, CodigoPostal, ExtensionCodigoPostal, Telefono, Fax, Asistente, CodigoEspecialidad) {
        var AbogadoJson = {
                  "Att_code": Codigo
                , "Att_firstName": Nombre
                , "Att_lastName": Apellido
                , "Att_address": Direccion
                , "Att_phone": Telefono
                , "Att_fax": Fax
                , "Att_assistant": Asistente
                , "Spe_code": CodigoEspecialidad
                , "Att_city": NombreCiudad
                , "Att_state": AbreviaturaEstadoPais
                , "Att_zipCode": CodigoPostal
                , "Att_zipCodeExt": ExtensionCodigoPostal
                , "Att_operatorUser": CodigoUsuarioGlobal
        }

        return AbogadoJson;
    }

function OntenerEstadosPais() {
        $.ajax({
            type: "POST",
            async: false,
            url: '@Url.Action("ListaEstados", "State")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data) {
                EstadosPais = Data;
            }
        });
    }

    function OntenerCiudades() {
        $.ajax({
            type: "POST",
            async: false,
            url: '@Url.Action("ListaCiudades", "City")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data) {
                Ciudades = Data;
            }
        });
    }

    function AutocompletarEstadosPaisDoctor() {
        var CodigoEstadoPais;

        $("#txtEstadoPaisDoctor").autocomplete({
            source: function (request, response) {
                var results = $.map(EstadosPais, function (tag) {
                    if (tag.nombre.toUpperCase().indexOf(request.term.toUpperCase()) >= 0) {
                        return {
                            label: tag.nombre,
                            value: tag.nombre,
                            id: tag.abreviatura
                        };
                    }
                });

                response(results.slice(0, 10));
            },
            select: function (event, ui) {

                CodigoEstadoPais = ui.item.id;
                $("#hdAbreviaturaEstadoPaisDoctor").val(CodigoEstadoPais);
                // console.log(CodigoEstadoPais);
                ValorOriginalEstadoPaisDoctor = $(this).val().trim();
                $("#txtCodigoPostalDoctor").focus();
                
            },
            change: function (event, ui) {
                if (ui.item == null)
                    $(this).val(ValorOriginalEstadoPaisDoctor);
            }
        });
    }

    function AutocompletarEstadosPaisAbogado() {
        var CodigoEstadoPais;

        $("#txtEstadoPaisAbogado").autocomplete({
            source: function (request, response) {
                var results = $.map(EstadosPais, function (tag) {
                    if (tag.nombre.toUpperCase().indexOf(request.term.toUpperCase()) >= 0) {
                        return {
                            label: tag.nombre,
                            value: tag.nombre,
                            id: tag.abreviatura
                        };
                    }
                });

                response(results.slice(0, 10));
            },
            select: function (event, ui) {
                CodigoEstadoPais = ui.item.id;
                $("#hdAbreviaturaEstadoPaisAbogado").val(CodigoEstadoPais);

                ValorOriginalEstadoPaisAbogado = $(this).val().trim();

                $("#txtCodigoPostalAbogado").val();
            },
            change: function (event, ui) {
                if (ui.item == null)
                    $(this).val(ValorOriginalEstadoPaisAbogado);
            }
        });
    }

    function AutocompletarEstadosPaisPaciente() {
        var CodigoEstadoPais;

        $("#EstadoPaisPacienteModal").autocomplete({
            source: function (request, response) {
                var results = $.map(EstadosPais, function (tag) {
                    if (tag.nombre.toUpperCase().indexOf(request.term.toUpperCase()) >= 0) {
                        return {
                            label: tag.nombre,
                            value: tag.nombre,
                            id: tag.abreviatura
                        };
                    }
                });

                response(results.slice(0, 10));
            },
            select: function (event, ui) {
                CodigoEstadoPais = ui.item.id;
                $("#hdAbreviaturaEstadoPaisPacienteModal").val(CodigoEstadoPais);

                ValorOriginalEstadoPaisPaciente = $(this).val().trim();

                //$(this).blur();
                //$("#CiudadPacienteModal").focus();
                $("#CodigoPostalPacienteModal").focus();
                
            },
            change: function (event, ui) {
                if (ui.item == null)
                    $(this).val(ValorOriginalEstadoPaisPaciente);
            }
        });
    }

    function AutocompletarEstadosPaisAseguradora() {
        var CodigoEstadoPais;

        $("#txtEstadoInsurerModal").autocomplete({
            source: function (request, response) {
                var results = $.map(EstadosPais, function (tag) {
                    if (tag.nombre.toUpperCase().indexOf(request.term.toUpperCase()) >= 0) {
                        return {
                            label: tag.nombre,
                            value: tag.nombre,
                            id: tag.abreviatura
                        };
                    }
                });

                response(results.slice(0, 10));
            },
            select: function (event, ui) {
                CodigoEstadoPais = ui.item.id;
                $("#hdAbreviaturaEstadoPaisInsurerModal").val(CodigoEstadoPais);

                ValorOriginalEstadoPaisAseguradora = $(this).val().trim();

                //$(this).blur();
                $("#txtTelefonoInsurerModal").focus();
            },
            change: function (event, ui) {
                if (ui.item == null)
                    $(this).val(ValorOriginalEstadoPaisAseguradora);
            }
        });
    }

    //function AutocompletarCiudadesDoctor()
    //{
    //    var CodigoCiudad;

    //    $("#txtCiudadDoctor").autocomplete({
    //        source: function (request, response) {
    //            var results = $.map(Ciudades, function (tag) {
    //                if (tag.Cit_name.toUpperCase().indexOf(request.term.toUpperCase()) >= 0) {
    //                    return {
    //                        label: tag.Cit_name,
    //                        value: tag.Cit_name,
    //                        id: tag.

    //                    };
    //                }
    //            });

    //            response(results.slice(0, 10));
    //        },
    //        select: function (event, ui) {
    //            CodigoCiudad = ui.item.id;
    //            $("#hdCiudadDoctor").val(CodigoCiudad);

    //            ValorOriginalCiudadDoctor = $(this).val().trim();

    //            $(this).blur();
    //        },
    //        change: function (event, ui) {
    //            if (ui.item == null)
    //                $(this).val(ValorOriginalCiudadDoctor);
    //        }
    //    });
    //}




    function AutocompletarCiudadesDoctor(Ciudades)
    {
        var CodigoCiudad;    
        console.log("AutocompletarCiudadesDoctor");
        $("#txtCiudadDoctor").autocomplete({
            source: function (request, response)
            {
                var results = $.map(Ciudades, function (tag)
                {
                    if (tag.Cit_name.toUpperCase().indexOf(request.term.toUpperCase()) >= 0)
                    {
                        return {                                   
        
                            label: tag.Cit_name,
                            value: tag.Cit_name,
                            id: tag.Cit_name
                        };
                    }
                });
        
                response(results.slice(0, 10));
            },
            select: function (event, ui)
            {
                CodigoCiudad = ui.item.id;
                $("#hdCiudadDoctor").val(CodigoCiudad);
                ValorOriginalCiudadDoctor = $(this).val().trim();
                $("#txtEstadoPaisDoctor").focus();
            },
            change: function (event, ui)
            {
                console.log("CHANGE");
                //   if (ui.item == null)
                //       $(this).val(ValorOriginalCiudad);
            }
        
        });
    }

@*    function AutocompletarCiudadesDoctor() {
        var CodigoCiudad;
        console.log("AutocompletarCiudadesDoctor");
        $("#txtCiudadDoctor").autocomplete({
            source: function (request, response) {
                $.ajax({

                    url: '@Url.Content("~/Scripts/ciudades.js")',
                    contentType: "application/json",
                    dataType: 'json',
                    success: function (data) {
                        console.log("dataa result");
                        //console.log(data);
                        Ciudades = data.City;
                        var results = $.map(Ciudades, function (tag) {
                            if (tag.Cit_name.toUpperCase().indexOf(request.term.toUpperCase()) >= 0) {
                                return {
                                    label: tag.Cit_name,
                                    value: tag.Cit_name,
                                    id: tag.Cit_name
                                };
                            }
                        });

                        response(results.slice(0, 10));
                    },
                    select: function (event, ui) {
                        CodigoCiudad = ui.item.id;
                        $("#hdCiudadDoctor").val(CodigoCiudad);
                        ValorOriginalCiudadDoctor = $(this).val().trim();
                        $("#txtEstadoPaisDoctor").focus();

                    },
                    change: function (event, ui) {
                        if (ui.item == null)
                            $(this).val(ValorOriginalCiudadDoctor);
                    }
                })
            }
        });
    }*@


    //function AutocompletarCiudadesDoctor() {
    //    var CodigoCiudad;

    //    $("#txtCiudadDoctor").autocomplete({
    //        source: function (request, response) {
    //            var results = $.map(Ciudades, function (tag) {
    //                if (tag.nombre.toUpperCase().indexOf(request.term.toUpperCase()) >= 0) {
    //                    return {
    //                        label: tag.nombre,
    //                        value: tag.nombre,
    //                        id: tag.abreviatura
    //                    };
    //                }
    //            });

    //            response(results.slice(0, 10));
    //        },
    //        select: function (event, ui) {
    //            CodigoCiudad = ui.item.id;
    //            $("#hdCiudadDoctor").val(CodigoCiudad);
    //            ValorOriginalCiudadDoctor = $(this).val().trim();
    //            $("#txtEstadoPaisDoctor").focus();
                
    //        },
    //        change: function (event, ui) {
    //            if (ui.item == null)
    //                $(this).val(ValorOriginalCiudadDoctor);
    //        }
    //    });
    //}
    function AutocompletarCiudadesAbogado(Ciudades) {
        var CodigoCiudad;

        $("#txtCiudadAbogado").autocomplete({
            source: function (request, response) 
            {
                var results = $.map(Ciudades, function (tag) 
                {
                    if (tag.Cit_name.toUpperCase().indexOf(request.term.toUpperCase()) >= 0)
                    {
                        return {
                            label: tag.Cit_name,
                            value: tag.Cit_name,
                            id: tag.Cit_name
                        };
                    }
                });

                response(results.slice(0, 10));
            },
            //source: function (request, response) {
            //    var results = $.map(Ciudades, function (tag) {
            //        if (tag.nombre.toUpperCase().indexOf(request.term.toUpperCase()) >= 0) {
            //            return {
            //                label: tag.nombre,
            //                value: tag.nombre,
            //                id: tag.abreviatura
            //            };
            //        }
            //    });

            //    response(results.slice(0, 10));
            //},
            select: function (event, ui) {
                CodigoCiudad = ui.item.id;
                $("#hdCiudadAbogado").val(CodigoCiudad);
                ValorOriginalCiudadAbogado = $(this).val().trim();
                $("#txtEstadoPaisAbogado").focus();
                
            },
            change: function (event, ui) {
                //if (ui.item == null)
                //    $(this).val(ValorOriginalCiudadAbogado);
            }
           })
         }

    function AutocompletarCiudadesPaciente(Ciudades) {
        var CodigoCiudad;
        console.log("AutocompletarCiudadesPaciente");
        $("#CiudadPacienteModal").autocomplete({//mgg
            source: function (request, response) 
            {
                var results = $.map(Ciudades, function (tag) 
                {
                    if (tag.Cit_name.toUpperCase().indexOf(request.term.toUpperCase()) >= 0)
                    {
                        return {
                            label: tag.Cit_name,
                            value: tag.Cit_name,
                            id: tag.Cit_name
                        };
                    }
                });

                response(results.slice(0, 10));
            },

            select: function (event, ui) {
                CodigoCiudad = ui.item.id;
                $("#hdCiudadPacienteModal").val(CodigoCiudad);

                ValorOriginalCiudadPaciente = $(this).val().trim();

                //$(this).blur();
                $("#EstadoPaisPacienteModal").focus();
            },
            change: function (event, ui) {
                //if (ui.item == null)
                //    $(this).val(ValorOriginalCiudadPaciente);
            }
                })
            }
    

    function AutocompletarCiudadesAseguradora(Ciudades) {
        var CodigoCiudad;
        console.log("AutocompletarCiudadesAseguradora");
        $("#txtCiudadInsurerModal").autocomplete({
            source: function (request, response) 
            {
                var results = $.map(Ciudades, function (tag) 
                {
                    if (tag.Cit_name.toUpperCase().indexOf(request.term.toUpperCase()) >= 0)
                    {
                        return {
                            label: tag.Cit_name,
                            value: tag.Cit_name,
                            id: tag.Cit_name
                        };
                    }
                });

                response(results.slice(0, 10));
            },
            select: function (event, ui) {
                CodigoCiudad = ui.item.id;
                $("#hdCiudadInsurerModal").val(CodigoCiudad);

                ValorOriginalCiudadAseguradora = $(this).val().trim();

                //$(this).blur();
                $("#txtEstadoInsurerModal").focus();
            },
            change: function (event, ui) {
                //if (ui.item == null)
                //    $(this).val(ValorOriginalCiudadAseguradora);
            }
         })
      }




    function ObtenerCiudades() {
        $.ajax({
            type: "POST",
            async: true,
            url: '@Url.Action("ListaCiudades", "City")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data) {
                Ciudades = null;
                Ciudades = Data;
                console.log(Ciudades);
                

                AutocompletarCiudadesPaciente(Ciudades);
                AutocompletarCiudadesAseguradora(Ciudades);
                AutocompletarCiudadesDoctor(Ciudades);
                AutocompletarCiudadesAbogado(Ciudades);
            }
        });
    }











    function CargarEspecialidadesDoctor(Especialidades) {
        var CodigoEspecialidad;
        var NombreEspecialidad;
        //var Especialidades;
        // console.log("CargarEspecialidadesDoctor");
        $("#cmbEspecialidadesDoctor").addClass("form-control m-b");
        if (Especialidades == null || Especialidades == "") {
            // console.log("Cargar-nuevo");
            $.ajax({
                async: false,
                url: '@Url.Action("ListaEspecialidadesDoctor", "Specialty")',
                contentType: "application/json",
                dataType: 'json',
                success: function (Data) {
                    Especialidades = Data;
                }
            });
        }

        $("#tblModalEspecialidad").DataTable().clear(); // limpio LlenaTablaModalDoctor
        $("#cmbEspecialidadesDoctor").html("");//limpio Combo
        $.map(Especialidades, function (val, i) {
            CodigoEspecialidad = val.Spe_code;
            NombreEspecialidad = val.Spe_name;
            //LlenaCombo
            $("#cmbEspecialidadesDoctor").append("<option value='" + CodigoEspecialidad + "'>" + NombreEspecialidad + "</option>");

            //LlenaTablaModalDoctor 
            if (CodigoEspecialidad != 1) //1 => -----------------
              $('#tblModalEspecialidad').dataTable().fnAddData([CodigoEspecialidad, NombreEspecialidad, "<a class='btn editaSeleccionaEspecialidad btn-danger btn-bitbucket'>Select </a>"]);
        });

        var otable = $("#tblModalEspecialidad").dataTable().fnDestroy();
        otable = $('#tblModalEspecialidad').DataTable({
            columnDefs: [{ className: "hidden", "targets": [0] }],
            lengthMenu: [[5, 10, 25, 50, -1], [5, 10, 25, 50, "All"]]
        });
    }
    function CargarEspecialidadesAbogado(Especialidades) {
        var CodigoEspecialidad;
        var NombreEspecialidad;
        //var Especialidades;

        // console.log("CargarEspecialidadesAbogado");
        $("#cmbEspecialidadesAbogado").addClass("form-control m-b");

        if (Especialidades == null || Especialidades == "") {
            // console.log("Cargar-nuevo");
            $.ajax({
                async: false,
                url: '@Url.Action("ListaEspecialidadesAbogado", "Specialty")',
                contentType: "application/json",
                dataType: 'json',
                success: function (Data) {
                    Especialidades = Data;
                }
            });
        }

        $("#tblModalEspecialidadAbogado").DataTable().clear(); // limpio LlenaTablaModalDoctor
        $("#cmbEspecialidadesAbogado").html("");//limpio Combo
        $.map(Especialidades, function (val, i) {
            CodigoEspecialidad = val.Spe_code;
            NombreEspecialidad = val.Spe_name;
            //LlenaCombo
            $("#cmbEspecialidadesAbogado").append("<option value='" + CodigoEspecialidad + "'>" + NombreEspecialidad + "</option>");

            //LlenaTablaModalDoctor 
            if (CodigoEspecialidad != 2)
               $('#tblModalEspecialidadAbogado').dataTable().fnAddData([CodigoEspecialidad, NombreEspecialidad, "<a class='btn editaSeleccionaEspecialidadAbogado btn-danger btn-bitbucket'>Select </a>"]);
        });

        var otableA = $("#tblModalEspecialidadAbogado").dataTable().fnDestroy();
        otableA = $('#tblModalEspecialidadAbogado').DataTable({
            columnDefs: [{ className: "hidden", "targets": [0] }],
            lengthMenu: [[5, 10, 25, 50, -1], [5, 10, 25, 50, "All"]]
        });
    }
    function CargarPacientesEnCombo(Pacientes) {
        var CodigoPaciente;
        var NombrePaciente;
        $("#cmbPaciente").empty();
        $.map(Pacientes, function (val, i) {
            CodigoPaciente = val.Codigo;
            NombrePaciente = val.NombreCompleto;

            $("#cmbPaciente").append("<option value='" + CodigoPaciente + "'>" + NombrePaciente + "</option>");
        });        
    }

    function CargarAjustadoresEnCombo(Ajustadores) {
        var CodigoAjustador;
        var NombreAjustador;        
        $("#cmbAjustador").empty();
        $.map(Ajustadores, function (val, i) {
            CodigoAjustador = val.Codigo;
            NombreAjustador = val.NombreCompleto;

            $("#cmbAjustador").append("<option value='" + CodigoAjustador + "'>" + NombreAjustador + "</option>");
        });
    }

    function CargarAseguradorasEnCombo(Aseguradoras) {
        var CodigoAseguradora;
        var NombreAseguradora;
        $("#cmbAseguradora").empty();
        $.map(Aseguradoras, function (val, i) {
            CodigoAseguradora = val.Codigo;
            NombreAseguradora = val.NombreCompleto;

            $("#cmbAseguradora").append("<option value='" + CodigoAseguradora + "'>" + NombreAseguradora + "</option>");
        });
    }

    function CargarProveedoresEnCombo(Proveedores) {
        var CodigoProveedor;
        var NombreProveedor;
        $("#cmbProveedor").empty();
        $.map(Proveedores, function (val, i) {
            CodigoProveedor = val.Codigo;
            NombreProveedor = val.NombreCompleto;

            $("#cmbProveedor").append("<option value='" + CodigoProveedor + "'>" + NombreProveedor.toUpperCase() + "</option>");
        });
    }

    function CargarSupervisoresEnCombo(Supervisores) {
        var CodigoSupervisor;
        var NombreSupervisor;
        $("#cmbCaseSupervisor").empty();
        $.map(Supervisores, function (val, i) {
            CodigoSupervisor = val.Codigo;
            NombreSupervisor = val.NombreCompleto;

            $("#cmbCaseSupervisor").append("<option value='" + CodigoSupervisor + "'>" + NombreSupervisor.toUpperCase() + "</option>");
        });
    }

    function CargarDoctoresEnCombo(Doctores) {
        var CodigoDoctor;
        var NombreDoctor;
        console.log("CargarDoctoresEnCombo");
        $("#cmbDoctor").empty();
        c = 2;
        $.map(Doctores, function (val, i) {
            
            CodigoDoctor = val.Codigo;
            NombreDoctor = val.NombreCompleto;
            DireccionDoctor = val.Direccion;
            //dato_slash = $("strong");
            dato_slash = "/";
            //console.log(dato_slash);
            dato_slash = dato_slash.bold();
            //console.log(dato_slash);
            //if(c==2)
              //console.log(dato_slash);

            if (DireccionDoctor != null)
                $("#cmbDoctor").append("<option value='" + CodigoDoctor + "'>" + NombreDoctor.toUpperCase() + " / " + DireccionDoctor + "</option>");
            else
                $("#cmbDoctor").append("<option value='" + CodigoDoctor + "'>" + NombreDoctor.toUpperCase() + "</option>");



            if (NombreDoctor == "--------------- ---------------" && ($("#hdCodigoDoctorParaAsignar").val() == "" || $("#hdCodigoDoctorParaAsignar").val() == "0")) {
                $("#cmbDoctor").val(CodigoDoctor).trigger("change");
            }
            
        });
        
    }

    function CargarAbogadosEnCombo(Abogados) {
        var CodigoAbogado;
        var NombreAbogado;

        $("#cmbAbogado").empty();

        $.map(Abogados, function (val, i) {
            CodigoAbogado = val.Codigo;
            NombreAbogado = val.NombreCompleto;

            $("#cmbAbogado").append("<option value='" + CodigoAbogado + "'>" + NombreAbogado + "</option>");

            if (NombreAbogado == "--------------- ---------------") {
                $("#cmbAbogado").val(CodigoAbogado).trigger("change");
            }
        });
    }

@*    function CargarEspecialidadesAbogado()
    {
        var CodigoEspecialidad;
        var NombreEspecialidad;
        var Especialidades;

        $("#cmbEspecialidadesAbogado").addClass("form-control m-b");

        $.ajax({
            async: false,
            url: '@Url.Action("ListaEspecialidadesAbogado", "Specialty")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data)
            {
                Especialidades = Data;
            }
        });

        $("#tblModalEspecialidadAbogado").DataTable().clear(); // limpio LlenaTablaModalAbogado        
        $.map(Especialidades, function (val, i) {
            CodigoEspecialidad = val.Spe_code;
            NombreEspecialidad = val.Spe_name;

            $("#cmbEspecialidadesAbogado").append("<option value='" + CodigoEspecialidad + "'>" + NombreEspecialidad + "</option>");
            $('#tblModalEspecialidadAbogado').dataTable().fnAddData([CodigoEspecialidad, NombreEspecialidad, "<a class='btn editaSeleccionaEspecialidad btn-danger btn-bitbucket'>Select </a>"]);
        });

        var otable = $("#tblModalEspecialidad").dataTable().fnDestroy();
        otable = $('#tblModalEspecialidad').DataTable({
            columnDefs: [{ className: "hidden", "targets": [0] }],
            lengthMenu: [[5, 10, 25, 50, -1], [5, 10, 25, 50, "All"]]
        });
    }*@

    function LimpiarControlesRegistro() {
        // console.log("InicioLimpiarControlesRegistro");
        /************ Variables que se utilizan en el autocompletar ************/
        ValorOriginalNombrePaciente = "";       
        ValorOriginalNombreAjustador = "";
        ValorOriginalNombreAseguradora = "";
        ValorOriginalNombreProveedor = "";
        ValorOriginalNombreSupervisor = "";
        ValorOriginalNombreDoctor = "";
        ValorOriginalNombreAbogado = "";
        /***********************************************************************/

        LimpiarControlesPaciente();
        LimpiarControlesCaso();
        LimpiarTablas();
        
    }

    function NuevoCaso(e) {
        // brenher caso
        e.preventDefault();
        swal({
            title: "Are you Sure you want to erase all the information?",
            text: "",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Ok!",
            closeOnConfirm: false,
            closeOnCancel: true
        },
               function (isConfirm) {
                   if (isConfirm) {
                       swal("Success!", "", "success");//edher
                     
                       //habilita controles
                       $("#btnRegistrarPaciente").prop("disabled", false);
                       $("#txtPaciente").prop("readonly", false);
                       $("#btnRegistrarAdjuster").prop("disabled", false);
                       $("#btnRegistrarInsurer").prop("disabled", false);
                       $("#btnRegistrarProveedor").prop("disabled", false);
                       $("#btnAsignarNuevoPatientModal").removeClass("hidden");
                       $("#btnEditarPatientModal").addClass("hidden");

                       ////////////////////////////////////////Valida segun permiso //////////
                       ///////deshabilita input segun permiso
                       if ($("#permiso").val() == "digit") {
                           if ($("#txtPrice").val() == "" || $("#txtPrice").val() == null)
                               $("#txtPrice").val("0");
                       }
                       /////////////////////////////////////////////////////////////////////////

                       //$(this).hide;

                       LimpiarControlesRegistro();
                       //$("#txtStatus").val("Open");
                       $("#txtPaciente").focus();
                      
                       // Limpia la caja de texto de búsqueda 
                       $("#txtBuscaCaso").val("");
                       $("#EnvolturatblCasos > #TablaParaBusquedaAvanzadaCasos > #tblCasos_wrapper > #tblCasos_filter > label > input[type='search']").val("");
                       
                       $("#tblCasos > tbody").css({ "display": "none" });

                       if (VerificarContraccionFormularioRegistro() == true) // "VerificarContraccionFormularioRegistro" es una función que retorna true si el formulario de registro está contraído.
                           ExpandirFormularioRegistro($("#frmFormularioCaso").parent().find("div:eq(0)").find("div:eq(0)").find("a:eq(0)"));

                       $("#btnRegistrar").prop("disabled", false);      // Desactiva el botón registrar.
                       //$("#btnActualizar").prop("disabled", true);    // Activa e botón actualizar 
                       $("#generaPdf").prop("disabled", true);      // Desactiva el botón registrar.
                       
                       ocultaBotones();
                       LimpiarAutocompletar();
                       controlaTab();
                       $("#hdCodigoCaso").val("0");                       
                       $("#btnRegistrar").attr("data_accion", "nuevo");
                       
                   }
                   else {
                       swal("Cancelled", "The information was not saved !!", "error");
                       return 0;
                   }
               });


    }
    function registraActualizaCaso(e)//mg
    {
        e.preventDefault();
        tipo = $("#btnRegistrar").attr("data_accion");
                
        console.log("ahorita");

        if (!ActualizacionDesdeAlerta) // Si la actualización se genera desde el mismo botón entonces va a pasar por el filtro de si quiere realmente guardar o actualizar este caso.
        {
            swal({
                title: "Do you want to save this case?",
                text: "",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "Ok!",
                closeOnConfirm: false,
                closeOnCancel: true
            },
                function (isConfirm) {
                    if (isConfirm) {
                        swal("Success!", "", "success");//edher

                        if (tipo == "nuevo") {
                            console.log("mensaje 1");
                            // return false;

                            RegistrarCaso(e);
                        }
                        else
                            ActualizarCaso(e);
                    }
                    else {
                        swal("Cancelled", "The information was not saved !!", "error");
                        return 0;
                    }
                });
        }
        else // Si la actualización se genera desde la alerta que se genera cuando se pasa de un proceso a otro simplemente actualiza el caso sin preguntar si quiere actualizarlo, por que ya se aceptó la advertencia
        {

            // console.log(ActualizacionDesdeAlerta);
            // return false;

            if (tipo == "nuevo") {
                console.log("mensaje 2");
                // return false;

                RegistrarCaso(e);
            }
            else
                ActualizarCaso(e);
        }

        ActualizacionDesdeAlerta = false;
    }

    function RegistrarCaso(e)//mg
    {
        var usuarioLogueado = ObtenerUsuarioLogueado();

        if ($("#hdCodigoPaciente").val().trim() == "" || $("#hdCodigoPaciente").val() == 0) // Valida la obligatoriedad del paciente
        {
            e.stopPropagation();
            
            BanderaErrorValidacion = true;

            $("#txtPaciente").focus();

            error = "Error";
            mensaje = "Please select patient";
            MensajeError(mensaje, error);
            return false;
        }

        else if ($("#hdCodigoAjustador").val().trim() == "" || $("#hdCodigoAjustador").val() == 0) // Valida la obligatoriedad del ajustador
        {
            e.stopPropagation();

            BanderaErrorValidacion = true;

            $("#txtAjustador").focus();

            error = "Error";
            mensaje = "Please select adjuster";
            MensajeError(mensaje, error);            
            
            BanderaErrorValidacion = true;

            return false;
        }
        else if ($("#hdCodigoAseguradora").val().trim() == "" || $("#hdCodigoAseguradora").val() == 0) // Valida la obligatoriedad del Insurer
        {
            e.stopPropagation();

            console.log("pide aseguradora");

            BanderaErrorValidacion = true;

            $("#txtAseguradora").focus();

            error = "Error";
            mensaje = "Please select insurer";
            MensajeError(mensaje, error);

            return false;
        }
        else if ($("#txtFechaAccidente").val().trim() == "") // Valida la obligatoriedad del Insurer
        {
            e.stopPropagation();

            console.log("debe pedir fecha de accidente");
            BanderaErrorValidacion = true;

            $("#txtFechaAccidente").focus();
             
            error = "Error";
            mensaje = "Please select DOI";
            MensajeError(mensaje, error);

            return false;
        }        
        else if ($("#txtPrice").val().trim() == "" && RolUsuarioGlobal == 'Administrator') // Valida la obligatoriedad del Price
        {
            e.stopPropagation()
            BanderaErrorValidacion = true;

            $("#txtPrice").focus();

            error = "Error";
            mensaje = "Please select Price";
            MensajeError(mensaje, error);

            return false;            
        }
        //else if ($("#txtFechaReferencia").val().trim() == "") // Valida la obligatoriedad del Price
        //{
        //    e.stopPropagation();

        //    $("#txtFechaReferencia").focus();

        //    error = "Error";
        //    mensaje = "Put Date of Referral";
        //    MensajeError(mensaje, error);
        //    return false;
        //}
        else if ($("#hdCodigoProveedor").val().trim() == "" || $("#hdCodigoProveedor").val() == 0) // Valida la obligatoriedad del Proveedor
        {
            e.stopPropagation();

            BanderaErrorValidacion = true;

            $("#txtProveedor").focus();

            error = "Error";
            mensaje = "Please select Provider";
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#hdCodigoCaseSupervisor").val().trim() == "" || $("#hdCodigoCaseSupervisor").val() == 0) // Valida la obligatoriedad del Price
        {
            e.stopPropagation();
             
            BanderaErrorValidacion = true;
            
            $("#txtCaseSupervisor").focus();

            error = "Error";
            mensaje = "Please select Case Supervisor";
            MensajeError(mensaje, error);
            return false; 
        }
        else {
            e.preventDefault();

            BanderaErrorValidacion = false;
            BanderaCambioProceso = false;

            var BanderaCoincidencias;

            var Daño = ($("#txtDaño").val().trim() == "" ? null : $("#txtDaño").val().trim());
            var Claim = ($("#txtClaim").val().trim() == "" ? null : $("#txtClaim").val().trim());
            var Contacto1 = ($("#txtContacto1").val().trim() == "" ? null : $("#txtContacto1").val().trim());
            var Contacto2 = ($("#txtContacto2").val().trim() == "" ? null : $("#txtContacto2").val().trim());
            var Longshore = ($("#cbLongshore").prop("checked") ? true : false);
            var EstadoEmpresa = ($("#cbEstadoEmpresa").prop("checked") ? true : false);
            var Otro = ($("#cbOtro").prop("checked") ? true : false);
            var OtroTexto = ($("#txtOtroTexto").val().trim() == "" ? null : $("#txtOtroTexto").val().trim());
            var Presuncion = ($("#cbPresuncion").prop("checked") ? true : false);
            var Agudeza = ($("#cmbAcuity").val() == "0" ? null : $("#cmbAcuity").val());
            //----------------------------------------------------
            var Traslado;
            if ($("#cbTrasladoSi").prop("checked"))
                Traslado = true;
            else if ($("#cbTrasladoNo").prop("checked"))
                Traslado = false;
            //----------------------------------------------------
            var Transporte;
            if ($("#cbTransporteSi").prop("checked"))
                Transporte = true;
            else if ($("#cbTransporteNo").prop("checked"))
                Transporte = false;
            //----------------------------------------------------
            var TerapiaFisica;
            if ($("#cbTerapiaFisicaSi").prop("checked"))
                TerapiaFisica = true;
            else if ($("#cbTerapiaFisicaNo").prop("checked"))
                TerapiaFisica = false;
            //----------------------------------------------------
            var PermisoContacto;
            if ($("#cbPermisoContactoSi").prop("checked"))
                PermisoContacto = true;
            else if ($("#cbPermisoContactoNo").prop("checked"))
                PermisoContacto = false;
            //----------------------------------------------------
            var EmpresaTraslado = ($("#txtEmpresaTraslado").val().trim() == "" ? null : $("#txtEmpresaTraslado").val().trim());
            var EmpresaTransporte = ($("#txtEmpresaTransporte").val().trim() == "" ? null : $("#txtEmpresaTransporte").val().trim());
            var EmpresaTerapiaFisica = ($("#txtEmpresaTerapiaFisica").val().trim() == "" ? null : $("#txtEmpresaTerapiaFisica").val().trim());
            var EmpresaPermisoContacto = ($("#txtEmpresaPermisoContacto").val().trim() == "" ? null : $("#txtEmpresaPermisoContacto").val().trim());
            var CodigoUsuario = ObtenerUsuarioLogueado();

            var CasoJson = LlenarCaso( 
                             null
                            , parseInt($("#hdCodigoPaciente").val().trim())
                            , $("#txtFechaAccidente").val().trim()
                            , Daño
                            , Claim
                            , parseInt($("#hdCodigoAjustador").val().trim())
                            , parseInt($("#hdCodigoAseguradora").val().trim())
                            , Contacto1
                            , Contacto2
                            , parseFloat($("#txtPrice").val().trim())
                            , ($("#txtFechaReferencia").val().trim() == "") ? null : $("#txtFechaReferencia").val().trim()
                            , parseInt($("#hdCodigoProveedor").val().trim())
                            , parseInt($("#hdCodigoCaseSupervisor").val().trim())
                            , Longshore
                            , EstadoEmpresa
                            , Otro
                            , OtroTexto
                            , Presuncion
                            , Agudeza
                            , Traslado
                            , Transporte
                            , TerapiaFisica
                            , PermisoContacto
                            , EmpresaTraslado
                            , EmpresaTransporte
                            , EmpresaTerapiaFisica
                            , EmpresaPermisoContacto
                            , CodigoUsuario.Use_code
                            , $("#txtNotas").val().trim());

            // Primero verifica que no exista un caso homónimo (en el campo "Claim").
            $.ajax({
                type: "POST",
                async: false,
                data: JSON.stringify(CasoJson),
                url: '@Url.Action("BuscarHomonimos", "CaseInformation")',
                contentType: "application/json",
                dataType: 'json',
                success: function (Data) {
                    // console.log(Data);
                    if (!Data.Resultado) // Si no se encontraron homónimos.
                    {
                       
                        BanderaCoincidencias = false;
                    }
                    else // Si se encontraron homónimos.
                    {
                        
                        BanderaCoincidencias = true;
                        error = "Error";
                        mensaje = "The claim already exists!!";
                    }
                }
            });
            
            if (!BanderaCoincidencias) // No hay coincidencias, entonces va a registrar.
            {
                $.ajax({
                    type: "POST",
                    async: false,
                    data: JSON.stringify(CasoJson),
                    url: '@Url.Action("Insertar", "CaseInformation")',
                    contentType: "application/json",
                    dataType: 'json',
                    success: function (Data) {
                        // console.log(Data);

                        $("#hdCodigoCaso").val(Data[0].CaseErrorCode);


                        mensaje = "Your information has been saved";
                        error = "Success";
                        MensajeError(mensaje, error);
                        $("#btnNuevo").prop("disabled", false);
                        $("#btnActualizar").prop("disabled", false);


                        //nombrePaciente = $("#txtPaciente").val();
                        nombreCompletoPaciente = $("#select2-cmbPaciente-container").text();
                        apellidoPaciente = $("#select2-cmbPaciente-container").text();
                        //txtAseguradora = $("#txtAseguradora").val();
                        txtAseguradora = $("#select2-cmbAseguradora-container").text();
                        txtFechaAccidente = $("#txtFechaAccidente").val().trim()
                        $("#btnRegistrar").attr("data_accion", "editar");
                        AgregaFilaTablaCaso(Claim, parseInt($("#hdCodigoPaciente").val().trim()), nombreCompletoPaciente, apellidoPaciente, txtAseguradora, txtFechaAccidente, "OPEN", Data[0].CaseErrorCode);//edher

                        ////////////////////////////////////////////////////////////////////////////////////////
                        websocket.emit('funcionActualizacionTablaCaseInformationNode', 'Mantenedor_CaseInformation');
                        websocket.on('funcionCaseInformationDesdeNode', function (data) {
                            funcionCaseInformacionDesdeNode_llamada(data);
                        });
                    }
                });

                //LimpiarControlesRegistro();

                $("#txtPaciente").prop("readonly", true);

                if (VerificarContraccionFormularioRegistro() != true) // "VerificarContraccionFormularioRegistro" es una función que retorna true si el formulario de registro está contraído.
                    ExpandirFormularioRegistro($("#frmFormularioCaso").parent().find("div:eq(0)").find("div:eq(0)").find("a:eq(0)"));

                $("#btnRegistrarPaciente").prop("disabled", true);
                $("#txtStatus").val("OPEN");
                $("#generaPdf").prop("disabled", false);
                controlaTab();
                muestraBotones();
            }
            else {
                controlaTab();
                 //hay homonimos
                MensajeError(mensaje, error);
            }

            //$("#txtStatus").val("OPEN");
            //$("#generaPdf").prop("disabled", false);
            //muestraBotones();
        }
    }

function ActualizarCaso(e) {
        console.log("intentando actualizar");

        if ($("#hdCodigoPaciente").val().trim() == "" || $("#hdCodigoPaciente").val() == 0) // Valida la obligatoriedad del paciente
        {
            e.stopPropagation();

            BanderaErrorValidacion = true;

            $("#txtPaciente").focus();

            error = "Error";
            mensaje = "Please select Patient";
            MensajeError(mensaje, error);
            return false;
        }

        else if ($("#hdCodigoAjustador").val().trim() == "" || $("#hdCodigoAjustador").val() == 0) // Valida la obligatoriedad del ajustador
        {
            e.stopPropagation();

            BanderaErrorValidacion = true;

            $("#txtAjustador").focus();

            error = "Error";
            mensaje = "Please select Adjuster";
            MensajeError(mensaje, error);

            return false;
        }
        else if ($("#hdCodigoAseguradora").val().trim() == "" || $("#hdCodigoAseguradora").val() == 0) // Valida la obligatoriedad del Insurer
        {
            e.stopPropagation();

            BanderaErrorValidacion = true;

            $("#txtAseguradora").focus();

            error = "Error";
            mensaje = "Please select Insurer";
            MensajeError(mensaje, error);

            return false;
        }
        else if ($("#txtFechaAccidente").val().trim() == "") // Valida la obligatoriedad del Insurer
        {
            e.stopPropagation();

            BanderaErrorValidacion = true;

            $("#txtFechaAccidente").focus();

            error = "Error";
            mensaje = "Please select DOI";
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#txtPrice").val().trim() == "") // Valida la obligatoriedad del Price
        {
            e.stopPropagation();
            
            BanderaErrorValidacion = true;

            $("#txtPrice").focus();

            error = "Error";
            mensaje = "Please select Price";
            MensajeError(mensaje, error);
            return false;
        }
        //else if ($("#txtFechaReferencia").val().trim() == "") // Valida la obligatoriedad del Price
        //{
        //    e.stopPropagation();

        //    $("#txtFechaReferencia").focus();

        //    error = "Error";
        //    mensaje = "Put Date of Referral";
        //    MensajeError(mensaje, error);
        //    return false;
        //}
        else if ($("#hdCodigoProveedor").val().trim() == "" || $("#hdCodigoProveedor").val() == 0) // Valida la obligatoriedad del Proveedor
        {
            e.stopPropagation();

            BanderaErrorValidacion = true;

            $("#txtProveedor").focus();

            error = "Error";
            mensaje = "Please select Provider";
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#hdCodigoCaseSupervisor").val().trim() == "" || $("#hdCodigoCaseSupervisor").val() == 0) // Valida la obligatoriedad del Price
        {
            e.stopPropagation();

            BanderaErrorValidacion = true; 

            $("#txtCaseSupervisor").focus();

            error = "Error";
            mensaje = "Please select Case Supervisor";
            MensajeError(mensaje, error);
            return false;
        }        
    else {
            e.preventDefault();

            BanderaErrorValidacion = false; 
            BanderaCambioProceso = false;

            var BanderaCoincidencias;

            var Daño = ($("#txtDaño").val().trim() == "" ? null : $("#txtDaño").val().trim());
            var Claim = ($("#txtClaim").val().trim() == "" ? null : $("#txtClaim").val().trim());
            var Contacto1 = ($("#txtContacto1").val().trim() == "" ? null : $("#txtContacto1").val().trim());
            var Contacto2 = ($("#txtContacto2").val().trim() == "" ? null : $("#txtContacto2").val().trim());
            var Longshore = ($("#cbLongshore").prop("checked") ? true : false);
            var EstadoEmpresa = ($("#cbEstadoEmpresa").prop("checked") ? true : false);
            var Otro = ($("#cbOtro").prop("checked") ? true : false);
            var OtroTexto = ($("#txtOtroTexto").val().trim() == "" ? null : $("#txtOtroTexto").val().trim());
            var Presuncion = ($("#cbPresuncion").prop("checked") ? true : false);
            var Agudeza = ($("#cmbAcuity").val() == "0" ? null : $("#cmbAcuity").val());
            //----------------------------------------------------
            var Traslado;
            if ($("#cbTrasladoSi").prop("checked"))
                Traslado = true;
            else if ($("#cbTrasladoNo").prop("checked"))
                Traslado = false;
            //----------------------------------------------------
            var Transporte;
            if ($("#cbTransporteSi").prop("checked"))
                Transporte = true;
            else if ($("#cbTransporteNo").prop("checked"))
                Transporte = false;
            //----------------------------------------------------
            var TerapiaFisica;
            if ($("#cbTerapiaFisicaSi").prop("checked"))
                TerapiaFisica = true;
            else if ($("#cbTerapiaFisicaNo").prop("checked"))
                TerapiaFisica = false;
            //----------------------------------------------------
            var PermisoContacto;
            if ($("#cbPermisoContactoSi").prop("checked"))
                PermisoContacto = true;
            else if ($("#cbPermisoContactoNo").prop("checked"))
                PermisoContacto = false;
            //----------------------------------------------------
            var EmpresaTraslado = ($("#txtEmpresaTraslado").val().trim() == "" ? null : $("#txtEmpresaTraslado").val().trim());
            var EmpresaTransporte = ($("#txtEmpresaTransporte").val().trim() == "" ? null : $("#txtEmpresaTransporte").val().trim());
            var EmpresaTerapiaFisica = ($("#txtEmpresaTerapiaFisica").val().trim() == "" ? null : $("#txtEmpresaTerapiaFisica").val().trim());
            var EmpresaPermisoContacto = ($("#txtEmpresaPermisoContacto").val().trim() == "" ? null : $("#txtEmpresaPermisoContacto").val().trim());

            var CasoJson = LlenarCaso(
                                  parseInt($("#hdCodigoCaso").val().trim())
                                , parseInt($("#hdCodigoPaciente").val().trim())
                                , $("#txtFechaAccidente").val().trim()
                                , Daño
                                , Claim
                                , parseInt($("#hdCodigoAjustador").val().trim())
                                , parseInt($("#hdCodigoAseguradora").val().trim())
                                , Contacto1
                                , Contacto2
                                , parseFloat($("#txtPrice").val().trim())
                                , ($("#txtFechaReferencia").val().trim() == "") ? null : $("#txtFechaReferencia").val().trim()
                                , parseInt($("#hdCodigoProveedor").val().trim())
                                , parseInt($("#hdCodigoCaseSupervisor").val().trim())
                                , Longshore
                                , EstadoEmpresa
                                , Otro
                                , OtroTexto
                                , Presuncion
                                , Agudeza
                                , Traslado
                                , Transporte
                                , TerapiaFisica
                                , PermisoContacto
                                , EmpresaTraslado
                                , EmpresaTransporte
                                , EmpresaTerapiaFisica
                                , EmpresaPermisoContacto
                                , null
                                , $("#txtNotas").val().trim()); 
 
            // Primero verifica que no exista un caso homónimo (en el campo "Claim").
            $.ajax({
                type: "POST",
                async: false,
                data: JSON.stringify(CasoJson),
                url: '@Url.Action("BuscarHomonimos", "CaseInformation")',
                contentType: "application/json",
                dataType: 'json',
                success: function (Data) {
                    controlaTab();
                    // console.log(Data);
                    if (!Data.Resultado) // Si no se encontraron homónimos.
                    {

                        BanderaCoincidencias = false;
                    }
                    else // Si se encontraron homónimos.
                    {


                        BanderaCoincidencias = true;
                        error = "Error";
                        mensaje = "The claim already exists!!";
                    }
                }
            }); 
            
            if (!BanderaCoincidencias) // No hay coincidencias, entonces va a actualizar.
            {

                $.ajax({
                    type: "POST",
                    async: false,
                    data: JSON.stringify(CasoJson),
                    url: '@Url.Action("Actualizar", "CaseInformation")',
                    contentType: "application/json",
                    dataType: 'json',
                    success: function (Data) {

                        mensaje = "Your information has been saved";
                        error = "Success";
                        MensajeError(mensaje, error);
                        controlaTab();

                        nombreCompletoPaciente = $("#select2-cmbPaciente-container").text();
                        apellidoPaciente = $("#select2-cmbPaciente-container").text();
                        txtAseguradora = $("#select2-cmbAseguradora-container").text();
                        txtFechaAccidente = $("#txtFechaAccidente").val().trim();
                        codigo_caso = parseInt($("#hdCodigoCaso").val().trim());

                        // console.log(codigo_caso);
                        // console.log($("#" + codigo_caso).closest('tr')[0]);
                        //aPos = $("#tblCasos").dataTable().fnGetPosition($("#" + codigo_caso).closest('tr')[0]);//mg
                        EditaFilaTablaCaso(Claim, parseInt($("#hdCodigoPaciente").val().trim()), nombreCompletoPaciente, apellidoPaciente, txtAseguradora, txtFechaAccidente, "OPEN", codigo_caso);//edher

                        ////////////////////////////////////////////////////////////////////////////////////////
                        websocket.emit('funcionActualizacionTablaCaseInformationNode', 'Mantenedor_CaseInformation');
                        websocket.on('funcionCaseInformationDesdeNode', function (data) {
                            funcionCaseInformacionDesdeNode_llamada(data);
                        });

                    }
                });
            }
            else {
                controlaTab();
                MensajeError(mensaje, error);
            }
        }
    }

    function LlenarCaso(
                     CodigoCaso
                , CodigoPaciente
                , FechaAccidente
                , Daño
                , Claim
                , CodigoAjustador
                , CodigoAseguradora
                , ContactoUno
                , ContactoDos
                , Price
                , FechaReferencial
                , CodigoProveedor
                , CodigoSupervisor
                , Longshore
                , EstadoEmpresa
                , Otro
                , OtroTexto
                , Presuncion
                , Agudeza
                , Traslado
                , Transporte
                , TerapiaFisica
                , PermisoContacto
                , EmpresaTraslado
                , EmpresaTransporte
                , EmpresaTerapiaFisica
                    , EmpresaPermisoContacto
                , CodigoUsuario
                , Notas) {
        var CasoJson = {
            "Cis_code": CodigoCaso
        , "Pat_code": CodigoPaciente
        , "Cis_accidentDate": FechaAccidente
        , "Cis_Injury": Daño
        , "Cis_caseCode": Claim
        , "Adj_code": CodigoAjustador
        , "Ins_code": CodigoAseguradora
        , "Cis_contact1": ContactoUno
        , "Cis_contact2": ContactoDos
        , "Cis_price": Price
        , "Cis_referralDate": FechaReferencial
        , "Pro_code": CodigoProveedor
        , "Cis_caseSupervisor": CodigoSupervisor
        , "Cis_Longshore": Longshore
        , "Cis_companyStatus": EstadoEmpresa
        , "Cis_other": Otro
        , "Cis_otherText": OtroTexto
        , "Cis_presumption": Presuncion
        , "Cis_acuity": Agudeza
        , "Cis_translation": Traslado
        , "Cis_transportation": Transporte
        , "Cis_physicalTherapy": TerapiaFisica
        , "Cis_permisionContact": PermisoContacto
        , "Cis_translationCompany": EmpresaTraslado
        , "Cis_transportationCompany": EmpresaTransporte
        , "Cis_physicalTherapyCompany": EmpresaTerapiaFisica
            , "Cis_permisionContactCompany": EmpresaPermisoContacto
            , "Use_code": CodigoUsuario
        , "Cis_comment": Notas
    };

        return CasoJson;
    }

function ControlarCambioChecking(Objeto, NombreClase) {
    Objeto.click(function () {
            checkedState = $(this).prop("checked");

        $(this).parent("div").parent("div").parent("div").find(NombreClase + ":checked").each(function () {
                $(this).prop("checked", false);
            });

            $(this).prop("checked", checkedState);
        });
    }

function CargarTablaCasos() {
            $.ajax({
                type: "POST",
                async: true,//asincrona
                url: '@Url.Action("ListaCasosParaBusquedaAvanzada", "CaseInformation")',
                success: function (Data) {
                    $("#EnvolturatblCasos > .form-group").before(Data); // Coloca la tabla de búsqueda antes del botón "Nuevo".
                }
            });

        }

        function VerificarContraccionFormularioRegistro() {
        if ($("#frmFormularioCaso").css("display") == "none") // Verifica si el formulario de registro está contraído y si es así retorna true.
            return true;
        else
            return false;
    }
        function ancla() {
        $("html,body").stop().animate({ scrollTop: $("#detalleCase").offset().top }, 2000);
    }
        function SeleccionarCaso(e) {
            e.preventDefault();
      
            var Paciente;
            var Cargo;
            var CodigoPaciente;
            var CodigoCasoSeleccionado;
            var CodigoUsuarioQueLee;
            var CodigoCasoALiberar = 0;
            var EstadoOcupacionCasoQueSeraLeido;
        
            console.log("seleccionarCaso");

            ancla();
            

            // Limpia la caja de texto de búsqueda 
            $("#EnvolturatblCasos > #TablaParaBusquedaAvanzadaCasos > #tblCasos_wrapper > #tblCasos_filter > label > input[type='search']").val("");
            //$("#txtBuscaCaso").val("");

            $("#btnRegistrar").attr("data_accion", "edita");
            $("#generaPdf").prop("disabled", false);//activa boton generar pdf

           


            if (VerificarContraccionFormularioRegistro() == true) // "VerificarContraccionFormularioRegistro" es una función que retorna true si el formulario de registro está contraído.
                ExpandirFormularioRegistro($("#frmFormularioCaso").parent().find("div:eq(0)").find("div:eq(0)").find("a:eq(0)"));



            CodigoPaciente = parseInt($(this).parent().parent().find("td:eq(2)").html());


            // ***************************************************************************

            // Obtiene código del caso a leer 
            CodigoCasoSeleccionado = parseInt($(this).parent().parent().find("td:eq(0)").html());

            // ***************************************************************************

            // Obtiene código del usuario logueado 
            UsuarioLogueado = ObtenerUsuarioLogueado();        
            CodigoUsuarioQueLee = UsuarioLogueado.Use_code;

            // ***************************************************************************
            

            // si hay un caso cargado actualmente obtiene su código para liberarlo y poder cargar el caso selccionado.
            if ($("#hdCodigoCaso").val() != "")
                CodigoCasoALiberar = $("#hdCodigoCaso").val();

            // */*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/
            // */*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/
            // */*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/
            /* (1) */
            // Obtiene la disponibilidad del caso que será leído.
            EstadoOcupacionCasoQueSeraLeido = VerificarDisponibilidadCaso(CodigoCasoSeleccionado, CodigoUsuarioQueLee)

            if (EstadoOcupacionCasoQueSeraLeido.Busy == true) // Si el caso seleccionado está ocupado, se muestra un mensaje informandolo.
            {
                //alert("Caso ocupado por " + EstadoOcupacionCasoQueSeraLeido.User);

                error = "Error!";
                mensaje = "Case is busy by user  " + EstadoOcupacionCasoQueSeraLeido.User;
                MensajeError(mensaje, error);

            }
            else // Si el caso seleccionado está desocupado, se obtienen los datos correspondientes para mostrarlos en la vista.
            {
                $("#dvLoading").css("display", "block");

                /* (1) */
                
                LimpiarControlesRegistro();
                /* (2) */
                // Obtención y carga de datos de paciente.
                Paciente = ObtenerDatosPaciente(CodigoPaciente);
                CargarPaciente(Paciente);               
                CargarFormularioPacienteModal(Paciente);
                // **************************************

                /* (3) */
                // Obtención y carga de datos de caso.
                Caso = ObtenerDatosCaso(CodigoCasoSeleccionado);
                
                $("#dvLoading").fadeOut(2000);
                $("#hdCodigoCaso").val(Caso.CaseCode);
                setTimeout(function () {
                    CargarCaso(Caso);
                }, 50);

                // **************************************
                /* (4) */
                /* COMENTADO TEMPORALMENTE */
                // Ocupa el caso leído y libera el caso anterior
                // OcupaLiberaCasos(CodigoCasoSeleccionado
                //                  , CodigoUsuarioQueLee
                //                 , CodigoCasoALiberar);
                


                $("#btnRegistrar").prop("disabled", false);      // Activa el botón registrar.
                //$("#btnRegistrar").prop("disabled", true);      // Desactiva el botón registrar.
                //$("#btnActualizar").prop("disabled", false);    // Activa e botón actualizar                 
                $("#btnRegistrar").attr("data_accion", "edita");
                

                $("#btnRegistrarPaciente").prop("disabled", true);
                $("#btnEditarPaciente").addClass("hidden");
                $("#cmbPaciente").prop("disabled", true);
                //$("#btnRegistrarPaciente").addClass("hidden");     // Oculta el botón registrar de paciente. ant
                //$("#btnEditarPaciente").removeClass("hidden");    // Muestra boton editar de paciente  ant

                $("#btnAsignarNuevoPatientModal").addClass("hidden");     // Oculta el botón registrar de paciente Modal.
                $("#btnEditarPatientModal").removeClass("hidden");    // Muestra boton editar de paciente Modal
            }
            // */*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/
            // */*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/
            // */*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/
            // console.log("xxxxxAntmuestraBotones");
            muestraBotones();
            //$('#detalleCase').animate({ scrollTop: $('#detalleCase').height() }, 600); // baja pantalla
            //$('#txtPaciente').focus();            
            $('#detalleCase').scrollTop(150);
            $('#txtPaciente').prop("readonly", true);

            
            ///////deshabilita input segun permiso
            if ($("#permiso").val() == "digit") {
                if ($("#txtPrice").val() == "" || $("#txtPrice").val() == null)
                    $("#txtPrice").val("0");
            }
        }

        function OcupaLiberaCasos(CodigoCasoSeleccionado
                                 , CodigoUsuarioQueLee
                                 , CodigoCasoALiberar) {
            $.ajax({
                type: "POST",
                async: false,
                data: JSON.stringify({
                    "CodigoCasoLeido": CodigoCasoSeleccionado
                                     , "CodigoUsuarioQueLee": CodigoUsuarioQueLee
                                     , "CodigoCasoALiberar": CodigoCasoALiberar
                }),
                url: '@Url.Action("OcupaLiberaCasos", "CaseInformation")',
                contentType: "application/json",

                dataType: 'json',
                success: function (Usuario) {
                    UsuarioLogueado = Usuario;
                }
            });
        }

        function ObtenerUsuarioLogueado() {
            var UsuarioLogueado;

            $.ajax({
                type: "POST",
                async: false,
                url: '@Url.Action("ObtenerUsuarioLogueado", "Account")',
                contentType: "application/json",
                dataType: 'json',
                success: function (Usuario) {
                    UsuarioLogueado = Usuario;
                }
            });

            return UsuarioLogueado;
        }

        function VerificarDisponibilidadCaso(CodigoCasoSeleccionado, CodigoUsuarioQueLee) {
            var EstadoOcupacion;
             
            $.ajax({
                type: "POST",
                async: false,
                data: JSON.stringify({
                    "CodigoCasoSeleccionado": CodigoCasoSeleccionado
                                    , "CodigoUsuarioQueLee": CodigoUsuarioQueLee
                }),
                url: '@Url.Action("VerificarDisponibilidadCaso", "CaseInformation")',
                contentType: "application/json",
                dataType: 'json',
                success: function (Dato) {
                    EstadoOcupacion = Dato;
                }
            });

            return EstadoOcupacion;
        }

        function ObtenerDatosCaso(CodigoCasoALeer) {
            var Cargo;

            $.ajax({
                type: "POST",
                async: false,
                data: JSON.stringify({ "CodigoCasoALeer": CodigoCasoALeer }),
                url: '@Url.Action("ObtenerDatosCaso", "CaseInformation")',
                contentType: "application/json",
                dataType: 'json',
                success: function (DatosCaso) {
                    Caso = DatosCaso;
                    // console.log(Caso);
                    // console.log("ObtenerDatosCaso");
                }
            });

            return Caso;
        }

        function CargarCaso(Caso) {            
            
            // Cada vez que se carga un nuevo caso los valores originales de Paciente, Ajustador, Aseguradora, Provider.
            ValorOriginalNombrePaciente = Caso.Patient;
            ValorOriginalNombreAjustador = Caso.Adjuster;
            ValorOriginalNombreAseguradora = Caso.Insurer;
            ValorOriginalNombreProveedor = Caso.Provider;        
            ValorOriginalNombreSupervisor = Caso.CaseSupervisor
              
            /*********** PACIENTE ***********/
            $("#hdCodigoPaciente").val(Caso.PatientCode);
            $("#cmbPaciente").val(Caso.PatientCode).trigger("change");



            /*********** CASO ***********/
            
            if (Caso.CaseAccidentDate == null || Caso.CaseAccidentDate == "" || Caso.CaseAccidentDate == "01/01/1900" || Caso.CaseAccidentDate == "1/1/1900" || Caso.CaseAccidentDate == "01/01/0001") {
                // console.log("txtFechaAccidente-a");
                $("#txtFechaAccidente").val("");
            }
            else {
                // console.log("txtFechaAccidente-b");
                $("#txtFechaAccidente").datepicker("setDate", Caso.CaseAccidentDate);
            }
                //$("#txtFechaAccidente").val(convierteFecha(Caso.CaseAccidentDate));


            $("#txtDaño").val(Caso.CaseInjury);
            $("#txtStatus").val(Caso.CaseStatus ? "OPEN" : "CLOSED");
            $("#txtClaim").val(Caso.CaseCaseCode);


            // console.log("AJUSTADOR");

            /******** AJUSTADOR ********/
            if (Caso.AdjusterCode == null || Caso.Adjuster.trim() == "" || Caso.Adjuster == null) {
                $("#hdCodigoAjustador").val("0");
                $("#cmbAjustador").val("0").trigger("change");
            }
            else {
                $("#hdCodigoAjustador").val(Caso.AdjusterCode);
                $("#cmbAjustador").val(Caso.AdjusterCode).trigger("change");
            }

            $("#txtAdjusterPhone").val(Caso.AdjusterPhone);
            $("#txtAdjusterPhoneExt").val(Caso.AdjusterPhoneExt);
            // console.log("ASEGURADORAxx");
            
            /******** ASEGURADORA ********/
            if (Caso.InsurerCode == null || Caso.Insurer.trim() == "" || Caso.Insurer == null) {
                $("#hdCodigoAseguradora").val("0");
                $("#cmbAseguradora").val("0").trigger("change");
            }
            else {
                $("#hdCodigoAseguradora").val(Caso.InsurerCode);
                $("#cmbAseguradora").val(Caso.InsurerCode).trigger("change");
            }

            $("#txtDireccionAseguradora").val(Caso.InsurerAddress);
            $("#txtCiudadAseguradora").val(Caso.InsurerCity);
            $("#txtEstadoAseguradora").val(Caso.InsurerState);
            $("#txtCodigoPostalAseguradora").val(Caso.InsurerZipCode);
            $("#txtExtensionCodigoPostalAseguradora").val(Caso.InsurerZipCodeExt);
            $("#txtTelefonoAseguradora").val(Caso.InsurerPhone);
            $("#txtExtensionTelefonoAseguradora").val(Caso.InsurerPhoneExt);
            $("#txtFaxAseguradora").val(Caso.InsurerFax);

            /*********** CASO ***********/
            $("#txtContacto1").val(Caso.CaseContact1);
            $("#txtContacto2").val(Caso.CaseContact2);
            $("#txtPrice").val(Caso.CasePrice.toFixed(2));


            if (Caso.CaseReferralDate == "01/01/1900" || Caso.CaseReferralDate == "1/1/1900" || Caso.CaseReferralDate == null || Caso.CaseReferralDate == "01/01/0001") {
                // console.log("txtFechaReferencia-bx");
                $("#txtFechaReferencia").val("");
            }
            else {
                // console.log("txtFechaReferencia-ax");
                if (Caso.CaseReferralDate.length == 10)
                    fecha = Caso.CaseReferralDate;
                else
                    fecha = convierteFecha(Caso.CaseReferralDate);

                $("#txtFechaReferencia").datepicker("setDate", fecha);
                
            }
            
            
            /******** PROVEEDOR ********/
            $("#hdCodigoProveedor").val("0");
            $("#cmbProveedor").val("0").trigger("change");
            if (Caso.ProviderCode == null || Caso.Provider.trim() == "") {
                // console.log("PROVEEDOR-a");
                $("#hdCodigoProveedor").val("0");
                $("#cmbProveedor").val("0").trigger("change");
            }
            else {
                // console.log("PROVEEDOR-b");
                $("#hdCodigoProveedor").val(Caso.ProviderCode);
                $("#cmbProveedor").val(Caso.ProviderCode).trigger("change");
            }

            /******** SUPERVISOR ********/
            $("#hdCodigoCaseSupervisor").val("0");
            $("#cmbCaseSupervisor").val("0").trigger("change");
            if (Caso.CaseSupervisorCode == null || Caso.CaseSupervisor.trim() == "") {
                // console.log("SUPERVISOR-a");
                $("#hdCodigoCaseSupervisor").val("0");
                $("#cmbCaseSupervisor").val("0").trigger("change");
            }
            else {
                // console.log("SUPERVISOR-b");
                $("#hdCodigoCaseSupervisor").val(Caso.CaseSupervisorCode);
                $("#cmbCaseSupervisor").val(Caso.CaseSupervisorCode).trigger("change");
            }


            // console.log("Longshore");
            /*********** CASO ***********/
            // Longshore
            if (Caso.CaseLongshore == null || Caso.CaseLongshore == 0)
                $("#cbLongshore").prop("checked", false);
            else
                $("#cbLongshore").prop("checked", true);

            // Company Status
            if (Caso.CaseCompanyStatus == null || Caso.CaseCompanyStatus == 0)
                $("#cbEstadoEmpresa").prop("checked", false);
            else
                $("#cbEstadoEmpresa").prop("checked", true);

            // Other
            if (Caso.CaseOther == null || Caso.CaseOther == 0)
                $("#cbOtro").prop("checked", false);
            else
                $("#cbOtro").prop("checked", true);

            $("#txtOtroTexto").val(Caso.CaseOtherText); 
                          
            // Presumption
            if (Caso.CasePresumption == null || Caso.CasePresumption == 0)
                $("#cbPresuncion").prop("checked", false);
            else 
                $("#cbPresuncion").prop("checked", true);        

            // Acuity //mg
            if (Caso.CaseAcuity == 0 || Caso.CaseAcuity == null) {
                
                $("#hdCodigoAcuity").val("0");
                $("#cmbAcuity").val("0").trigger("change");
            }
            else {
                $("#hdCodigoAcuity").val(Caso.CaseAcuity);
                $("#cmbAcuity").val(Caso.CaseAcuity).trigger("change");
                
            }

            ///******** AJUSTADOR ********/
            //if (Caso.AdjusterCode == null || Caso.Adjuster.trim() == "" || Caso.Adjuster == null) {
            //    $("#hdCodigoAjustador").val("0");
            //    $("#cmbAcuity").val("0").trigger("change");
            //}
            //else {
            //    $("#hdCodigoAjustador").val(Caso.AdjusterCode);
            //    $("#cmbAjustador").val(Caso.AdjusterCode).trigger("change");
            //}


            // console.log("Translation");
            // Translation
            if (Caso.CaseTranslation == null) {
                $("#cbTrasladoSi").prop("checked", false);
                $("#cbTrasladoNo").prop("checked", false);
            }
            else {
                if (Caso.CaseTranslation == true) {
                    $("#cbTrasladoSi").prop("checked", true);
                    $("#cbTrasladoNo").prop("checked", false);
                }
                else if (Caso.CaseTranslation == false) {
                    $("#cbTrasladoSi").prop("checked", false);
                    $("#cbTrasladoNo").prop("checked", true);
                }
            }

            // Transportation
            if (Caso.CaseTransportation == null) {
                $("#cbTransporteSi").prop("checked", false);
                $("#cbTransporteNo").prop("checked", false);
            }
            else {
                if (Caso.CaseTransportation == true) {
                    $("#cbTransporteSi").prop("checked", true);
                    $("#cbTransporteNo").prop("checked", false);
                }
                else if (Caso.CaseTransportation == false) {
                    $("#cbTransporteSi").prop("checked", false);
                    $("#cbTransporteNo").prop("checked", true);
                }
            }

            // PhysicalTherapy
            if (Caso.CasePhysicalTherapy == null) {
                $("#cbTerapiaFisicaSi").prop("checked", false);
                $("#cbTerapiaFisicaNo").prop("checked", false);
            }
            else {
                if (Caso.CasePhysicalTherapy == true) {
                    $("#cbTerapiaFisicaSi").prop("checked", true);
                    $("#cbTerapiaFisicaNo").prop("checked", false);
                }
                else if (Caso.CasePhysicalTherapy == false) {
                    $("#cbTerapiaFisicaSi").prop("checked", false);
                    $("#cbTerapiaFisicaNo").prop("checked", true);
                }
            }


            // Permission to Contact
            if (Caso.CasePermisionContact == null) {
                $("#cbPermisoContactoSi").prop("checked", false);
                $("#cbPermisoContactoNo").prop("checked", false);
            }
            else {
                if (Caso.CasePermisionContact == true) {
                    $("#cbPermisoContactoSi").prop("checked", true);
                    $("#cbPermisoContactoNo").prop("checked", false);
                }
                else if (Caso.CasePermisionContact == false) {
                    $("#cbPermisoContactoSi").prop("checked", false);
                    $("#cbPermisoContactoNo").prop("checked", true);
                }
            }
          
            $("#txtEmpresaTraslado").val(Caso.CaseTranslationCompany);
            $("#txtEmpresaTransporte").val(Caso.CaseTransportationCompany);
            $("#txtEmpresaTerapiaFisica").val(Caso.CasePhysicalTherapyCompany);
            $("#txtEmpresaPermisoContacto").val(Caso.CasePermisionContactCompany);
          
            $("#txtNotas").val(Caso.CaseComment);

            CargarDoctores(Caso.CaseCode);
            CargarAbogados(Caso.CaseCode);
        }




        function CargarDoctores(CodigoCaso) {
            // console.log("CargarDoctores");
            $("#tblDoctor").DataTable().clear();

            $.ajax({
                type: "POST",
                async: false,
                data: JSON.stringify({ "CodigoCaso": CodigoCaso }),
                url: '@Url.Action("ObtenerDoctoresCaso", "CaseMed")',
                contentType: "application/json",
                dataType: 'json',
                success: function (Data) {
                    $.each(Data, function (indice, Valor) {
                      $('#tblDoctor').dataTable().fnAddData([Valor.Codigo, (Valor.NombreCompleto == null ? "" : Valor.NombreCompleto.toUpperCase()), (Valor.Direccion == null ? "" : Valor.Direccion.toUpperCase()), (Valor.Ciudad == null ? "" : Valor.Ciudad.toUpperCase()), (Valor.Estado == null ? "" : Valor.Estado.toUpperCase()), (Valor.CodigoPostal == null ? "" : Valor.CodigoPostal), (Valor.ExtensionCodigoPostal == null ? "" : Valor.ExtensionCodigoPostal.toUpperCase()), (Valor.Telefono == null ? "" : Valor.Telefono), (Valor.ExtensionTelefono == null ? "" : Valor.ExtensionTelefono), (Valor.TelefonoAlternativo == null ? "" : Valor.TelefonoAlternativo), (Valor.Fax == null ? "" : Valor.Fax), (Valor.Especialidad == null ? "" : Valor.Especialidad.toUpperCase()), (Valor.Oficina == null ? "" : Valor.Oficina.toUpperCase()), "<a class='btn EliminarDoctor btn-danger btn-bitbucket'>Delete  </a>"]);
                    });

                    var otable = $("#tblDoctor").dataTable().fnDestroy();
                    otable = $('#tblDoctor').DataTable({
                        columnDefs: [{ className: "hidden", "targets": [0] }],
                        order: [[1, "asc"]],
                        "bFilter": false
                    });


                }
            });
        }

        function CargarAbogados(CodigoCaso) {
                $("#tblAbogado").DataTable().clear();


                $.ajax({
                    type: "POST",
                    async: false,
                    data: JSON.stringify({ "CodigoCaso": CodigoCaso }),
                    url: '@Url.Action("ObtenerAbogadosCaso", "CaseAtt")',
                    contentType: "application/json",
                    dataType: 'json',
                    success: function (Data) {
                        $.each(Data, function (indice, Valor) {
   
                            $('#tblAbogado').dataTable().fnAddData([Valor.Codigo, (Valor.NombreCompleto == null ? "" : Valor.NombreCompleto.toUpperCase()), (Valor.Direccion == null ? "" : Valor.Direccion.toUpperCase()), (Valor.Ciudad == null ? "" : Valor.Ciudad.toUpperCase()), (Valor.Estado == null ? "" : Valor.Estado.toUpperCase()), (Valor.CodigoPostal == null ? "" : Valor.CodigoPostal.toUpperCase()), (Valor.ExtensionCodigoPostal == null ? "" : Valor.ExtensionCodigoPostal.toUpperCase()), (Valor.Telefono == null ? "" : Valor.Telefono), (Valor.Fax == null ? "" : Valor.Fax), (Valor.Especialidad == null ? "" : Valor.Especialidad.toUpperCase()), (Valor.Asistente == null ? "" : Valor.Asistente.toUpperCase()), "<a class='btn EliminarAbogado btn-danger btn-bitbucket'>Delete </a>"]);


                        });
                        var otable = $("#tblAbogado").dataTable().fnDestroy();
                        otable = $('#tblAbogado').DataTable({
                            columnDefs: [{ className: "hidden", "targets": [0] }],
                            order: [[1, "asc"]],
                            "bFilter": false
                        });

                    
                    }
                });
            }

            function ObtenerPacientes() {
                $.ajax({
                    type: "POST",
                    async: false,
                    url: '@Url.Action("ListarParaAutocompletar", "Patient")',
                    contentType: "application/json",
                    dataType: 'json',
                    success: function (Data) {
                        Pacientes = Data;
                    }
                });
            }    

            function AutocompletarPacientes() {
                var CodigoPaciente;
                var Paciente;        

                $("#txtPaciente").autocomplete(
                {
                    source: function (request, response) {
                        var results = $.map(Pacientes, function (tag) {
                            if (tag.NombreCompleto.toUpperCase().indexOf(request.term.toUpperCase()) >= 0) {
                                return {
                                    label: tag.NombreCompleto,
                                    value: tag.NombreCompleto,
                                    id: tag.Codigo
                                };
                            }
                        });

                        response(results.slice(0, 10));
                    },
                    select: function (event, ui) {
                        CodigoPaciente = ui.item.id
                        $("#hdCodigoPaciente").val(CodigoPaciente);

                        ValorOriginalNombrePaciente = $(this).val().trim(); // Cuando se selecciona un valor lo almacena en la variable "ValorOriginalNombrePaciente"  para que cuando se vuelva a escribir pero sin seleccionar ningún valor, quede en la caja de texto el valor de la variable "ValorOriginalNombrePaciente"                

                        $(this).blur(); // Quita el foco del control (necesario).

                        Paciente = ObtenerDatosPaciente(CodigoPaciente);
                        CargarPaciente(Paciente);
                        LimpiarControlesCaso();

                        //$("#txtStatus").val("Open");
                    },
                    change: function (event, ui) {
                        if (ui.item == null)
                            $(this).val(ValorOriginalNombrePaciente);
                    }
                });
            }

            function ObtenerAjustadores() {
                
                $.ajax({
                    type: "POST",
                    async: false,
                    url: '@Url.Action("ListarParaAutocompletar", "Adjuster")',
                    contentType: "application/json",
                    dataType: 'json',
                    success: function (Data) {
                        Ajustadores = Data;
                    }
                });
                // console.log(Ajustadores);
            }

            function ObtenerAseguradoras() {
                $.ajax({
                    type: "POST",
                    async: false,
                    url: '@Url.Action("ListarParaAutocompletar", "Insurer")',
                    contentType: "application/json",
                    dataType: 'json',
                    success: function (Data) {
                        Aseguradoras = Data;
                    }
                });
            }

            function ObtenerProveedores() {
                $.ajax({
                    type: "POST",
                    async: false,
                    url: '@Url.Action("ListarParaAutocompletar", "Provider")',
                    contentType: "application/json",
                    dataType: 'json',
                    success: function (Data) {
                        Proveedores = Data;
                    }
                });
            }

            function ObtenerSupervisores() {
                $.ajax({
                    type: "POST",
                    async: false,
                    url: '@Url.Action("ListarSupervisoresParaAutocompletar", "User")',
                    contentType: "application/json",
                    dataType: 'json',
                    success: function (Data) {
                        Supervisores = Data;
                    }
                });
            }

            function ObtenerDoctores() {
                $.ajax({
                    type: "POST",
                    async: false,
                    url: '@Url.Action("ListarParaAutocompletar", "Medical")',
                    contentType: "application/json",
                    dataType: 'json',
                    success: function (Data) {
                        Doctores = Data;
                    }
                });
            }

            function ObtenerAbogados() {
                $.ajax({
                    type: "POST",
                    async: false,
                    url: '@Url.Action("ListarParaAutocompletar", "Attorney")',
                    contentType: "application/json",
                    dataType: 'json',
                    success: function (Data) {
                        Abogados = Data;
                    }
                });
            }

            function ObtenerAutocompletarGeneral() // mg
            {
                
                    $.ajax({
                        type: "POST",
                        async: false,
                        url: '@Url.Action("obtenerDataInicial_case_info", "CaseInformation")',
                    contentType: "application/json",
                    dataType: 'json',
                    success: function (Data) {
                        //console.log(Data);                        
                        Pacientes = Data.Data.response['patients']; // obtiene datos de los Pacientes para autocompletado
                        CargarPacientesEnCombo(Pacientes); // Carga los pacientes en el combo autocompletable de pacientes.

                        Ajustadores = Data.Data.response['adjusters']; // Obtiene datos de los ajustadores para autocompletado                        
                        CargarAjustadoresEnCombo(Ajustadores); // Carga los ajustadores en el combo autocompletable de ajustadores.

                        Aseguradoras = Data.Data.response['insurers']; // Obtiene datos de los aseguradoras para autocompletado     (INSURER)                   
                        CargarAseguradorasEnCombo(Aseguradoras); // Carga las aseguradoras en el combo autocompletable de aseguradoras.

                        Proveedores = Data.Data.response['providers']; // Obtiene datos de las proveedores para autocompletado                        
                        CargarProveedoresEnCombo(Proveedores); // Carga los proveedores en el combo autocompletable de proveedores.

                        Supervisores = Data.Data.response['supervisors']; // Obtiene datos de los supervisores para autocompletado                        
                        CargarSupervisoresEnCombo(Supervisores); // Carga los supervisores en el combo autocompletable de supervisores.

                        Doctores = Data.Data.response['medicals']; // Obtiene datos de los doctores para autocompletado
                        CargarDoctoresEnCombo(Doctores); // Carga los doctores en el combo autocompletable de doctores.

                        Abogados = Data.Data.response['attorneys'];   // Obtiene datos de los abogados para autocompletado                        
                        CargarAbogadosEnCombo(Abogados); // Carga los abogados en el combo autocompletable de abogados.


                    }
                });
            
            }

    function ObtenerAutocompletarGeneralEstados_Especialidades() // mg
    {

        console.log("--ObtenerAutocompletarGeneralEstados_Especialidadesxx--");
        $.ajax({
            type: "POST",
            async: true,
            url: '@Url.Action("obtener_especialidades_estados", "CaseInformation")',
                        contentType: "application/json",
                        dataType: 'json',
                        success: function (Data) {
                           // console.log(Data);

                            EstadosPais = Data.Data.Data.response['estados'];
                            //Ciudades = Data.Data.Data.response['ciudades'];

                            EspecialidadesD = Data.Data.Data.response['especialidadMedicals'];
                            CargarEspecialidadesDoctor(EspecialidadesD);

                            EspecialidadesA = Data.Data.Data.response['especialidadAttorneys'];
                            CargarEspecialidadesAbogado(EspecialidadesA);
                        }
                    });

    }
   
    function AutocompletarAjustadores() {
                var CodigoAjustador;
                var Ajustador;

                $("#txtAjustador").autocomplete(
                {
                    source: function (request, response) {
                        var results = $.map(Ajustadores, function (tag) {
                            if (tag.NombreCompleto.toUpperCase().indexOf(request.term.toUpperCase()) >= 0) {
                                return {
                                    label: tag.NombreCompleto, 
                                    value: tag.NombreCompleto,
                                    id: tag.Codigo
                                };
                            }
                        });

                        response(results.slice(0, 10));
                    },
            select: function (event, ui) {
                        CodigoAjustador = ui.item.id
                        $("#hdCodigoAjustador").val(CodigoAjustador);

                        ValorOriginalNombreAjustador = $(this).val().trim(); // Cuando se selecciona una valor lo almacena en la variable "ValorOriginal"  para que cuando se vuelva a escribir pero sin seleccionar ningún valor, quede en la caja de texto el valor de la variable "ValorOriginal"                

                        $(this).blur(); // Quita el foco del control (necesario).

                        Ajustador = ObtenerDatosAjustador(CodigoAjustador);
                        CargarAjustador(Ajustador);
                    },
            change: function (event, ui) {
                        if (ui.item == null)
                            $(this).val(ValorOriginalNombreAjustador);
                    }
                });
            }

    function AutocompletarAseguradoras() {
                var CodigoAseguradora;
                var Aseguradora;

                $("#txtAseguradora").autocomplete(
                {
                    source: function (request, response) {
                        var results = $.map(Aseguradoras, function (tag) {
                            if (tag.NombreCompleto.toUpperCase().indexOf(request.term.toUpperCase()) >= 0) {
                                return {
                                    label: tag.NombreCompleto, 
                                    value: tag.NombreCompleto,
                                    id: tag.Codigo
                                };
                            }
                        });

                        response(results.slice(0, 10));
                    },
            select: function (event, ui) {
                        CodigoAseguradora = ui.item.id
                        $("#hdCodigoAseguradora").val(CodigoAseguradora);
                
                        ValorOriginalNombreAseguradora = $(this).val().trim(); // Cuando se selecciona una valor lo almacena en la variable "ValorOriginal"  para que cuando se vuelva a escribir pero sin seleccionar ningún valor, quede en la caja de texto el valor de la variable "ValorOriginal"                

                        $(this).blur(); // Quita el foco del control (necesario).

                        Aseguradora = ObtenerDatosAseguradora(CodigoAseguradora);
                        CargarAseguradora(Aseguradora);
                    },
            change: function (event, ui) {
                        if (ui.item == null)
                            $(this).val(ValorOriginalNombreAseguradora);
                    }
                });
            }

    function AutocompletarProveedores() {
                var CodigoProveedor;
                var Proveedor;

                $("#txtProveedor").autocomplete(
                {
                    source: function (request, response) {
                        var results = $.map(Proveedores, function (tag) {
                            if (tag.NombreCompleto.toUpperCase().indexOf(request.term.toUpperCase()) >= 0) {
                                return {
                                    label: tag.NombreCompleto, 
                                    value: tag.NombreCompleto,
                                    id: tag.Codigo
                                };
                            }
                        });

                        response(results.slice(0, 10));
                    },
            select: function (event, ui) {
                        CodigoProveedor = ui.item.id;
                        $("#hdCodigoProveedor").val(CodigoProveedor);

                        ValorOriginalNombreProveedor = $(this).val().trim(); // Cuando se selecciona una valor lo almacena en la variable "ValorOriginal"  para que cuando se vuelva a escribir pero sin seleccionar ningún valor, quede en la caja de texto el valor de la variable "ValorOriginal"                

                        $(this).blur(); // Quita el foco del control (necesario).
                    },
            change: function (event, ui) {
                        if (ui.item == null)
                            $(this).val(ValorOriginalNombreProveedor);
                    }
                });
            }

    function AutocompletarSupervisores() {
                var CodigoSupervisor;
                var Supervisor;

                $("#txtCaseSupervisor").autocomplete(
                {
                    source: function (request, response) {
                        var results = $.map(Supervisores, function (tag) {
                            if (tag.NombreCompleto.toUpperCase().indexOf(request.term.toUpperCase()) >= 0) {
                                return {
                                    label: tag.NombreCompleto, 
                                    value: tag.NombreCompleto,
                                    id: tag.Codigo
                                };
                            }
                        });

                        response(results.slice(0, 10));
                    },
            select: function (event, ui) {
                        CodigoSupervisor = ui.item.id
                        $("#hdCodigoCaseSupervisor").val(CodigoSupervisor);

                        ValorOriginalNombreSupervisor = $(this).val().trim(); // Cuando se selecciona una valor lo almacena en la variable "ValorOriginal"  para que cuando se vuelva a escribir pero sin seleccionar ningún valor, quede en la caja de texto el valor de la variable "ValorOriginal"                

                        $(this).blur(); // Quita el foco del control (necesario).
                    },
            change: function (event, ui) {
                        if (ui.item == null)
                            $(this).val(ValorOriginalNombreSupervisor);
                    }
                });
            }    

    function AutocompletarDoctores() {
                var CodigoDoctor;
                var Doctor;

                $("#txtDoctor").autocomplete(
                {
                    source: function (request, response) {
                        var results = $.map(Doctores, function (tag) {
                    if (tag.NombreCompleto.toUpperCase().indexOf(request.term.toUpperCase()) >= 0) {
                                return {
                                    label: tag.NombreCompleto, 
                                    value: tag.NombreCompleto,
                                    id: tag.Codigo
                                };
                            }
                        });

                        response(results.slice(0, 10));
                    },
                    select: function (event, ui) {
                        CodigoDoctor = ui.item.id
                        $("#hdCodigoDoctorParaAsignar").val(CodigoDoctor);

                        ValorOriginalNombreDoctor = $(this).val().trim(); // Cuando se selecciona una valor lo almacena en la variable "ValorOriginal"  para que cuando se vuelva a escribir pero sin seleccionar ningún valor, quede en la caja de texto el valor de la variable "ValorOriginal"                

                        $(this).blur(); // Quita el foco del control (necesario).

                        $("#btnAsignaDoctor").prop("disabled", false);
                    },
                    change: function (event, ui) {
                        if (ui.item == null)
                            $(this).val(ValorOriginalNombreDoctor);
                    }
                });
            }

    function AutocompletarAbogados() {
                var CodigoAbogado;
                var Abogado;

                $("#txtAbogado").autocomplete(
                {
                    source: function (request, response) {
                        var results = $.map(Abogados, function (tag) {
                            if (tag.NombreCompleto.toUpperCase().indexOf(request.term.toUpperCase()) >= 0) {
                                return {
                                    label: tag.NombreCompleto,
                                    value: tag.NombreCompleto,
                                    id: tag.Codigo
                                };
                            }
                        });

                        response(results.slice(0, 10));
                    },
                    select: function (event, ui) {
                        CodigoAbogado = ui.item.id
                        $("#hdCodigoAbogadoParaAsignar").val(CodigoAbogado);

                        ValorOriginalNombreAbogado = $(this).val().trim(); // Cuando se selecciona una valor lo almacena en la variable "ValorOriginal"  para que cuando se vuelva a escribir pero sin seleccionar ningún valor, quede en la caja de texto el valor de la variable "ValorOriginal"                

                        $(this).blur(); // Quita el foco del control (necesario).

                        $("#btnAsignaAbogado").prop("disabled", false);
                    },
                    change: function (event, ui) {
                        if (ui.item == null)
                            $(this).val(ValorOriginalNombreAbogado);
                    }
                });
            }
     
    function LimpiarControlesPaciente() {
                

                $("#hdCodigoPaciente").val("");

                $("#btnRegistrarPaciente").prop("disabled", false);
                $("#btnEditarPaciente").addClass("hidden");
                $("#cmbPaciente").prop("disabled", false);

                //$("#cmbPaciente").val("0").trigger("change");
                $("#txtNumeroSeguroSocial").val("");
                $("#txtFechaNacimiento").val("");
                $("#txtDireccion").val("");
                $("#txtCiudad").val("");
                $("#txtEstadoPais").val("");
                $("#txtCodigoPostal").val("");
                $("#txtExtensionCodigoPostal").val("");
                $("#txtTelefono").val("");
                $("#txtTelefonoAlternativo").val("");
                $("#rdbMasculino").prop("checked", false);
                $("#rdbFemenino").prop("checked", false);       

                $("#btnRegistrarPaciente").removeClass("hidden");
                $("#btnEditarPaciente").addClass("hidden");
                // console.log("FINLimpiarControlesPaciente");
            }

    function LimpiarControlesCaso() {
                // console.log("LimpiarControlesCaso");
                /*********** CASO ***********/
                //$("#btnRegistrar").attr("data_accion", "nuevo");
                //$("#txtFechaAccidente").datepicker("setDate", new Date());
                $("#txtFechaAccidente").val("");
                $("#txtDaño").val("");
                $("#txtStatus").val("");
                $("#txtClaim").val("");
                /******** AJUSTADOR ********/
                $("#hdCodigoAjustador").val("");
                // $("#txtAjustador").val("");
                //$("#cmbAjustador").val("0").trigger("change");
                $("#txtAdjusterPhone").val("");
                $("#txtAdjusterPhoneExt").val("");
                /******** ASEGURADORA ********/
                $("#hdCodigoAseguradora").val("");
                // $("#txtAseguradora").val("");
                //$("#cmbAseguradora").val("0").trigger("change");
                $("#txtDireccionAseguradora").val("");
                $("#txtCiudadAseguradora").val("");
                $("#txtEstadoAseguradora").val("");
                $("#txtCodigoPostalAseguradora").val("");
                $("#txtExtensionCodigoPostalAseguradora").val("");
                $("#txtTelefonoAseguradora").val("");
                $("#txtExtensionTelefonoAseguradora").val("");
                $("#txtFaxAseguradora").val("");
                /*********** CASO ***********/
                $("#txtContacto1").val("");
                $("#txtContacto2").val("");
                $("#txtPrice").val("");
                //$("#txtFechaReferencia").datepicker("setDate", new Date());
                $("#txtFechaReferencia").val("");
                /******** PROVEEDOR ********/
                $("#hdCodigoProveedor").val("0");
                //$("#cmbProveedor").val("0").trigger("change");            
                /******** SUPERVISOR ********/
                $("#hdCodigoCaseSupervisor").val("");
                // $("#txtCaseSupervisor").val("");
//                $("#cmbCaseSupervisor").val("0").trigger("change");

                /*********** CASO ***********/
                $(".LongshoreCompanyStatusOther").prop("checked", false); // deschekea los tres primeros checks
                $("#txtOtroTexto").val("");
                $("#cbPresuncion").prop("checked", false);
                $("#cmbAcuity").val("0");
                $(".Traslado").prop("checked", false);
                $(".Transporte").prop("checked", false);
                $(".TerapiaFisica").prop("checked", false);
                $(".PermisoContacto").prop("checked", false);
                $("#txtEmpresaTraslado").val("");
                $("#txtEmpresaTransporte").val("");
                $("#txtEmpresaTerapiaFisica").val("");
                $("#txtEmpresaPermisoContacto").val("");
                $("#txtNotas").val("");

                /******** PROVEEDOR ********/
                $("#hdCodigoAcuity").val("0");
                //$("#cmbAcuity").val("0").trigger("change");
                // console.log("FinLimpiarControlesCaso");
            }

    function LimpiarTablas() {
            
                $("#tblDoctor").DataTable().clear();
                var otable = $("#tblDoctor").dataTable().fnDestroy();
                otable = $('#tblDoctor').DataTable({
                    columnDefs: [{ className: "hidden", "targets": [0] }]
                });

                $("#tblAbogado").DataTable().clear();
                var otable = $("#tblAbogado").dataTable().fnDestroy();
                otable = $('#tblAbogado').DataTable({
                    columnDefs: [{ className: "hidden", "targets": [0] }]
                });
            }
    function LimpiarAutocompletar() {
                
                $("#cmbPaciente").val("0").trigger("change");
                
                $("#cmbAseguradora").val("0").trigger("change");
                $("#cmbProveedor").val("0").trigger("change");
                
                $("#cmbAjustador").val("0").trigger("change");
                $("#cmbAcuity").val("0").trigger("change");
                $("#cmbCaseSupervisor").val("0").trigger("change");
            }


    function ObtenerDatosPaciente(CodigoPaciente) {
                var Paciente;
                $.ajax({
                    type: "POST",
                    async: false,
                    data: JSON.stringify({ "Codigo": parseInt(CodigoPaciente) }),
                    url: '@Url.Action("Buscar", "Patient")',
                    contentType: "application/json",
                    dataType: 'json',
                    success: function (DatosPaciente) {
                        Paciente = DatosPaciente;
                    }
                });

                return Paciente;
            }

            function ObtenerDatosAjustador(CodigoAjustador) {
                var Ajustador;
                // console.log("xxxxxxXXXXEdherXxxxxxxxxxx");
                $.ajax({
                    type: "POST",
                    async: false,
                    data: JSON.stringify({ "Codigo": parseInt(CodigoAjustador) }),
                    url: '@Url.Action("ObtenerDatosParaEditar", "Adjuster")',
                    contentType: "application/json",
                    dataType: 'json',
                    success: function (DatosAjustador) {
                        Ajustador = DatosAjustador;
                    }
                });

                return Ajustador;
            }

            function ObtenerDatosAseguradora(CodigoAseguradora) {
                var Aseguradora;

                $.ajax({
                    type: "POST",
                    async: false,
                    data: JSON.stringify({ "Codigo": parseInt(CodigoAseguradora) }),
                    url: '@Url.Action("ObtenerDatosParaEditar", "Insurer")',
                    contentType: "application/json",
                    dataType: 'json',
                    success: function (DatosAseguradora) {
                        Aseguradora = DatosAseguradora;
                    }
                });

                return Aseguradora;
            }


            function CargarAjustador(Ajustador) {


                $("#txtAdjusterPhone").val(Ajustador.Adj_phone);
                $("#txtAdjusterPhoneExt").val(Ajustador.Adj_phoneExt);



            }

            function CargarAseguradora(Aseguradora) {
                ///$("#txtAseguradora").val(Aseguradora.Ins_name);
             

                //$("hdCodigoAseguradora").val(Aseguradora.Ins_code);
                //$("#cmbAseguradora").val(Aseguradora.Adj_code).trigger("change");

                $("#txtDireccionAseguradora").val(Aseguradora.Ins_address);
                $("#txtCiudadAseguradora").val(Aseguradora.Ins_city);
            
                if (Aseguradora.Sta_abbreviation == 'undefined' || Aseguradora.Sta_abbreviation == "" || Aseguradora.Sta_abbreviation == null)
                    $("#txtEstadoAseguradora").val(Aseguradora.Ins_state);
                else
                    $("#txtEstadoAseguradora").val(Aseguradora.Sta_abbreviation);
        
                
            
                $("#txtCodigoPostalAseguradora").val(Aseguradora.Ins_zipCode);
                $("#txtExtensionCodigoPostalAseguradora").val(Aseguradora.Ins_zipExt);
                $("#txtTelefonoAseguradora").val(Aseguradora.Ins_phone);
                $("#txtExtensionTelefonoAseguradora").val(Aseguradora.Ins_phoneExt);
                $("#txtFaxAseguradora").val(Aseguradora.Ins_fax);
            
            }

            function CargarPaciente(Paciente) {
                // console.log("-CargarPaciente-");
            
                $("#txtPaciente").val(Paciente.Pat_firstName + " " + Paciente.Pat_lastName);
                $("#txtNumeroSeguroSocial").val(Paciente.Pat_socialSecurityNumberD);
                //console.log("lenth : " + Paciente.Pat_birthday.length);

                // console.log(Paciente.Pat_birthday);
                if (Paciente.Pat_birthday == "01/01/1900" || Paciente.Pat_birthday == "1/1/1900" || Paciente.Pat_birthday == null || Paciente.Pat_birthday == "01/01/0001" || Paciente.Pat_birthday == "") {
                    // console.log("Paciente.Pat_birthday-a");
                    //$("#txtFechaNacimiento").datepicker("setDate", convierteFecha(Paciente.Pat_birthday));
                    Paciente.Pat_birthday = "";
                }
                else {
                    // console.log("Paciente.Pat_birthday-b");
                    $("#txtFechaNacimiento").val(Paciente.Pat_birthday);                
                }


                $("#txtDireccion").val(Paciente.Pat_address);
                $("#txtCiudad").val(Paciente.Pat_city);            
                //$("#txtFechaNacimiento").datepicker("setDate", Patient.Pat_birthday);

                if (Paciente.Sta_abbreviation != null && Paciente.Sta_abbreviation != "" && Paciente.Sta_abbreviation != 'undefined')
                    $("#txtEstadoPais").val(Paciente.Sta_abbreviation);
                else 
                    $("#txtEstadoPais").val(Paciente.Pat_state);
                
                $("#txtCodigoPostal").val(Paciente.Pat_zipCode);
                $("#txtExtensionCodigoPostal").val(Paciente.Pat_zipCodeExt);
                $("#txtTelefono").val(Paciente.Pat_phone);
                $("#txtTelefonoAlternativo").val(Paciente.Pat_fax);
                if (Paciente.Pat_sex == 'M') {
                    $("#rdbMasculino").prop("checked", true);
                    $("#rdbFemenino").prop("checked", false);
                } 
                else if (Paciente.Pat_sex == 'F') {
                    $("#rdbMasculino").prop("checked", false);
                    $("#rdbFemenino").prop("checked", true);
                }
                else {
                    $("#rdbMasculino").prop("checked", false);
                    $("#rdbFemenino").prop("checked", false);
                }
                // Habilita o deshabilita los controles del sexo (radios y botón "Actualizar")
                $("#rdbMasculino").attr("disabled", false);
                $("#rdbFemenino").attr("disabled", false);
                $("#btnActualizarSexo").attr("disabled", false);
                // console.log("-FIN_CargarPaciente-");
            }

            function CargarProveedor(Proveedor) {
                // console.log("CargarProveedor");
                //$("#txtProveedor").val(Proveedor.Pro_firstName + " " + Proveedor.Pro_lastName);//MG
                
                // console.log(Proveedor.Pro_code);
                $("#hdCodigoProveedor").val(Proveedor.Pro_code); // utilizado para  MetodoActualizaProveedor()
                $("#cmbProveedor").val(Proveedor.Pro_code).trigger("change");
                // console.log("FinCargarProveedor");
            }

            function CargarFormularioPacienteModal(Paciente) {
                // console.log("CargarFormularioPacienteModal");
                $("#NombrePacienteModal").val(Paciente.Pat_firstName);
                $("#ApellidoPacienteModal").val(Paciente.Pat_lastName);

                // console.log("Paciente.Pat_birthday-a");
                if (Paciente.Pat_birthday != null) {
                    if (Paciente.Pat_birthday.length <= 10) //formato : 08/05/2016
                    {
                        // console.log("FechaNacimientoPacienteModal-a");
                        $("#FechaNacimientoPacienteModal").val(Paciente.Pat_birthday);
                    }
                    else {
                        // console.log("FechaNacimientoPacienteModal-b");
                        // console.log(Paciente.Pat_birthday);
                        $("#FechaNacimientoPacienteModal").val(convierteFecha(Paciente.Pat_birthday));
                    }
                }
                else
                    $("#FechaNacimientoPacienteModal").val("");


                $("#NumeroSeguroSocialDPacienteModal").val(Paciente.Pat_socialSecurityNumberD);
                $("#DireccionPacienteModal").val(Paciente.Pat_address);


                //if (Paciente.Sta_abbreviation != null && Paciente.Sta_abbreviation != "" && Paciente.Sta_abbreviation != 'undefined')
                //    $("#EstadoPaisPacienteModal").val(Paciente.Sta_abbreviation);
                //else
                //    $("#EstadoPaisPacienteModal").val(Paciente.Pat_state);




                // Cargar el estado del país
                if (Paciente.Pat_state == "" || Paciente.Pat_state == null) {
                    $("#hdAbreviaturaEstadoPaisPacienteModal").val("");
                    $("#EstadoPaisPacienteModal").val("");
                }
                else {
                    $("#hdAbreviaturaEstadoPaisPacienteModal").val(Paciente.Sta_abbreviation);
                    $("#EstadoPaisPacienteModal").val(Paciente.Pat_state);
                }




                $("#CiudadPacienteModal").val(Paciente.Pat_city);
                        


                $("#CodigoPostalPacienteModal").val(Paciente.Pat_zipCode);
                $("#ExtensionCodigoPostalPacienteModal").val(Paciente.Pat_zipCodeExt);
                $("#TelefonoPacienteModal").val(Paciente.Pat_phone);
                $("#TelefonoAlternativoPacienteModal").val(Paciente.Pat_fax);
            
                if (Paciente.Pat_sex == 'M') {
                    $("#rdbMasculinoPacienteModal").prop("checked", true);
                    $("#rdbFemeninoPacienteModal").prop("checked", false);
                }
                else if (Paciente.Pat_sex == 'F') {
                    $("#rdbMasculinoPacienteModal").prop("checked", false);
                    $("#rdbFemeninoPacienteModal").prop("checked", true);
                }
                else {
                    $("#rdbMasculinoPacienteModal").prop("checked", false);
                    $("#rdbFemeninoPacienteModal").prop("checked", false);
                }
                // Habilita o deshabilita los controles del sexo (radios y botón "Actualizar")
                /*$("#rdbMasculino").attr("disabled", false);
                $("#rdbFemenino").attr("disabled", false);
                $("#btnActualizarSexo").attr("disabled", false);*/
                // console.log("FINCargarFormularioPacienteModal");

            }




            function llenaModalPaciente(Data, accion) {
                $("#seleccionado").val(0);
                //////////////////////////////////////////////////////
                //$("#tblModalInsurer").find("tr:gt(0)").remove();
                $("#tblModalPaciente").DataTable().clear();
                $.each(Data.Resultado, function (i, val) {
                    if (val.Pat_firstName != null || val.Pat_firstName != null) {

                        if (val.Pat_status == true)
                            status = "Active";
                        else
                            status = "Inactive";
                        //val.Pat_code = 20;
                        $('#tblModalPaciente').dataTable().fnAddData([
                            val.Pat_code, val.Pat_firstName, val.Pat_lastName, val.Pat_state, val.Pat_city, val.Pat_zipCode, status, "<input type='radio'  name='idRadio' value='" + val.Ins_code + "'>"]);
                    }
                });


                var otable = $("#tblModalPaciente").dataTable().fnDestroy();
                otable = $('#tblModalPaciente').DataTable({
                    columnDefs: [{ className: "hidden", "targets": [0] }]
                });

                $("#accion").val(accion);
                $("#btnModal").trigger("click");

            }


       
            function llenaModalAseguradora(Data, accion) {

                $("#seleccionado").val(0);

                //$("#tblModalInsurer").find("tr:gt(0)").remove();
                $("#tblModalInsurer").DataTable().clear();
                $.each(Data.Resultado, function (i, val) {
                    if (val.Ins_name != null) {

                        if (val.Ins_status == true)
                            status = "Active";
                        else
                            status = "Inactive";

                        $('#tblModalInsurer').dataTable().fnAddData([
                            val.Ins_code, val.Ins_name, val.Ins_city, val.Ins_state, val.Ins_zipCode, status, "<input type='radio' class='rdbSeleccionaCoincidencia' name='idRadio' value='" + val.Ins_code + "' style='cursor: pointer;' >"]);
                    }
                });


                var otable = $("#tblModalInsurer").dataTable().fnDestroy();
                otable = $('#tblModalInsurer').DataTable({
                    columnDefs: [{ className: "hidden", "targets": [0] }]
                });

                $("#accion").val(accion);
                $("#btnModalInsurerHom").trigger("click");

            }


       

            function llenaModalAjustador(Data, accion) {

                $("#seleccionadoAdjusterHom").val(0);
                ///////////////////////////////////////////////////////////////        

                $("#tblModalAdjusterHom").DataTable().clear();
                $.each(Data.Resultado, function (i, val) {
                    if (val.Adj_firstName != null || val.Adj_lastName != null) {
                        if (val.Adj_status == true)
                            status = "Active";
                        else
                            status = "Inactive";

                        $('#tblModalAdjusterHom').dataTable().fnAddData([
                            val.Adj_code, val.Adj_firstName, val.Adj_lastName, val.Adj_phone, val.Adj_phoneExt, status, "<input type='radio' class='rdbSeleccionaCoincidencia' name='idRadio' value='" + val.Adj_code + "' style='cursor: pointer;' >"]);
                    }
                });


                var otable = $("#tblModalAdjusterHom").dataTable().fnDestroy();
                otable = $('#tblModalAdjusterHom').DataTable({
                    //columnDefs: [{ className: "hidden", "targets": [0] }],
                    columnDefs: [{ className: "text-center", "targets": "_all" }],
                    columnDefs: [{ className: "hidden", "targets": [0] }]

                });

                $("#accionAdjusterHom").val(accion);
                $("#btnModalAdjusterHom").trigger("click");

            }


            function llenaModalAseguradora(Data, accion) {
         
                $("#seleccionado").val(0);

                //$("#tblModalInsurer").find("tr:gt(0)").remove();
                $("#tblModalInsurer").DataTable().clear();
                $.each(Data.Resultado, function (i, val) {
                    if (val.Ins_name != null) {

                        if (val.Ins_status == true)
                            status = "Active";
                        else
                            status = "Inactive";

                        $('#tblModalInsurer').dataTable().fnAddData([
                            val.Ins_code, val.Ins_name, val.Ins_city, val.Ins_state, val.Ins_zipCode, status, "<input type='radio' class='rdbSeleccionaCoincidencia' name='idRadio' value='" + val.Ins_code + "' style='cursor: pointer;' >"]);
                    }
                });


                var otable = $("#tblModalInsurer").dataTable().fnDestroy();
                otable = $('#tblModalInsurer').DataTable({
                    columnDefs: [{ className: "hidden", "targets": [0] }]
                });

                $("#accion").val(accion);
                $("#btnModalInsurerHom").trigger("click");

            }

            function llenaModalProveedor(Data, accion) {
          
                $("#seleccionadoProviderHom").val(0);
                ///////////////////////////////////////////////////////////////        

                $("#tblModalProviderHom").DataTable().clear();
                $.each(Data.Resultado, function (i, val) {
                    if (val.Pro_firstName != null || val.Pro_lastName != null) {
                        if (val.Pro_status == true)
                            status = "Active";
                        else
                            status = "Inactive";

                        $('#tblModalProviderHom').dataTable().fnAddData([
                            val.Pro_code, val.Pro_firstName.toUpperCase(), val.Pro_lastName.toUpperCase(), val.Pro_number, status, "<input type='radio'  name='idRadio' value='" + val.Pro_code + "'>"]);
                    }
                });


                var otable = $("#tblModalProviderHom").dataTable().fnDestroy();
                otable = $('#tblModalProviderHom').DataTable({
                    //columnDefs: [{ className: "hidden", "targets": [0] }],
                    columnDefs: [{ className: "text-center", "targets": "_all" }],
                    columnDefs: [{ className: "hidden", "targets": [0] }]

                });

                $("#accionProviderHom").val(accion);
                $("#btnModalProviderHom").trigger("click"); 

            }


            function llenaModalPaciente(Data, accion) {
                
                $("#seleccionadoPatientHom").val(0);
                //////////////////////////////////////////////////////
                //$("#tblModalInsurer").find("tr:gt(0)").remove();
                $("#tblModalPatientHom").DataTable().clear();
                $.each(Data.Resultado, function (i, val) {
                    if (val.Pat_firstName != null || val.Pat_firstName != null) {

                        if (val.Pat_status == true)
                            status = "Active";
                        else
                            status = "Inactive";
                        //val.Pat_code = 20;
                        $('#tblModalPatientHom').dataTable().fnAddData([
                            val.Pat_code, val.Pat_firstName.toUpperCase(), val.Pat_lastName.toUpperCase(), val.Pat_state, val.Pat_city, val.Pat_zipCode, status, "<input type='radio'  name='idRadio' value='" + val.Ins_code + "'>"]);
                    }
                });


                var otable = $("#tblModalPatientHom").dataTable().fnDestroy();
                otable = $('#tblModalPatientHom').DataTable({
                    columnDefs: [{ className: "hidden", "targets": [0] }]
                });

                $("#accionPacienteHom").val(accion);
                $("#btnModalPacienteHom").trigger("click");

            }


            function llenaModalDoctor(Data, accion) {



                $("#seleccionadoDoctorHom").val(0);
                //////////////////////////////////////////////////////
                //$("#tblModalInsurer").find("tr:gt(0)").remove();
                $("#tblModalDoctorHom").DataTable().clear();
                $.each(Data.Resultado, function (i, val) {
                    if (val.Med_firstName != null || val.Med_lastName != null) {

                        if (val.Med_status == true)
                            status = "Active";
                        else
                            status = "Inactive";


                        //val.Pat_code = 20;
                        //$('#tblModalDoctorHom').dataTable().fnAddData([
                        //val.Pat_code, val.Pat_firstName, val.Pat_lastName, val.Pat_state, val.Pat_city, val.Pat_zipCode, status, "<input type='radio'  name='idRadio' value='" + val.Ins_code + "'>"]);

                        $('#tblModalDoctorHom').dataTable().fnAddData([
                                  val.Med_code, val.Med_firstName.toUpperCase(), val.Med_lastName.toUpperCase(), val.Med_zipCode, val.Med_state, status, "<input type='radio'  name='idRadio' value='" + val.Med_code + "'>"]);
                    }
                });
     

                var otable = $("#tblModalDoctorHom").dataTable().fnDestroy();
                otable = $('#tblModalDoctorHom').DataTable({
                    columnDefs: [{ className: "hidden", "targets": [0] }]
                });

                $("#accionDoctorHom").val(accion);
                $("#btnModalDoctorHom").trigger("click");

            }

            function llenaModalAbogado(Data, accion) {
                console.log("llenandoModal");
                console.log(Data);
                $("#seleccionadoAbogadoHom").val(0);
                //////////////////////////////////////////////////////
                //$("#tblModalInsurer").find("tr:gt(0)").remove();
                $("#tblModalAbogadoHom").DataTable().clear();//URGENTE
                $.each(Data.Resultado, function (i, val) {
                    if (val.Att_firstName != null || val.Att_lastName != null) {

                        if (val.Att_status == true)
                            status = "Active";
                        else
                            status = "Inactive";


                        //val.Pat_code = 20;
                        //$('#tblModalDoctorHom').dataTable().fnAddData([
                        //val.Pat_code, val.Pat_firstName, val.Pat_lastName, val.Pat_state, val.Pat_city, val.Pat_zipCode, status, "<input type='radio'  name='idRadio' value='" + val.Ins_code + "'>"]);

                        $('#tblModalAbogadoHom').dataTable().fnAddData([//
                                  val.Att_code, val.Att_firstName.toUpperCase(), val.Att_lastName.toUpperCase(), val.Att_city, val.Att_state, status, "<input type='radio'  name='idRadio' value='" + val.Att_code + "'>"]);
                    }
                });


                var otable = $("#tblModalAbogadoHom").dataTable().fnDestroy();
                otable = $('#tblModalAbogadoHom').DataTable({
                    columnDefs: [{ className: "hidden", "targets": [0] }]
                });

                $("#accionAbogadoHom").val(accion);
                $("#btnModalAbogadoHom").trigger("click");

            }



            function registraActualizaModalPaciente(e) {

        
                accion = $("#accionPatientHom").val();
                seleccionado = $("#seleccionadoPatientHom").val();
                estadoSeleccion = $("#estadoSeleccionPatientHom").val();

                if (seleccionado > 0)
                    $("#hdCodigoModalPaciente").val(seleccionado);//doy valor al codigo de cliente, codigo tomado desde modal, para que asi se pueda modificar

        


                // Obtiene la el nombre de la ciudad seleccionada o ingresada
                if ($("#hdCiudadPacienteModal").val() == "") // Si no se ha seleccionado una ciudad del autocompletado el valor que se registrará será el valor de la caja de texto
                    NombreCiudad = $("#CiudadPacienteModal").val();
                else // Si se ha seleccionado una ciudad del autocompletado el valor que se registrará será el id seleccionado (nombre de la ciudad).
                    NombreCiudad = $("#CiudadPacienteModal").val()
                // ----------------------------------------------------------

                Sexo = ($("#rdbMasculinoPacienteModal").prop("checked") == true ? "M" : "F") // obtiene el sexo

                var Paciente = LlenarPaciente($("#hdCodigoModalPaciente").val()
                                              , ($("#NombrePacienteModal").val().trim() == '' ? null : $("#NombrePacienteModal").val().trim())
                                              , ($("#ApellidoPacienteModal").val().trim() == '' ? null : $("#ApellidoPacienteModal").val().trim())
                                              , ($("#FechaNacimientoPacienteModal").val().trim() == '' ? null : $("#FechaNacimientoPacienteModal").val().trim())
                                              , ($("#NumeroSeguroSocialDPacienteModal").val().trim() == '' ? null : $("#NumeroSeguroSocialDPacienteModal").val().trim())
                                              , ($("#DireccionPacienteModal").val().trim() == '' ? null : $("#DireccionPacienteModal").val().trim())
                                              , ($("#hdAbreviaturaEstadoPaisPacienteModal").val().trim() == '' ? null : $("#hdAbreviaturaEstadoPaisPacienteModal").val().trim())
                                              , NombreCiudad
                                              , ($("#CodigoPostalPacienteModal").val().trim() == '' ? null : $("#CodigoPostalPacienteModal").val().trim())
                                              , ($("#ExtensionCodigoPostalPacienteModal").val().trim() == '' ? null : $("#ExtensionCodigoPostalPacienteModal").val().trim())
                                              , ($("#TelefonoPacienteModal").val().trim() == '' ? null : $("#TelefonoPacienteModal").val().trim())
                                              , ($("#TelefonoAlternativoPacienteModal").val().trim() == '' ? null : $("#TelefonoAlternativoPacienteModal").val().trim())
                                              , Sexo)


                if (seleccionado > 0)//si selecciono alguna fila
                {
                    if (estadoSeleccion == "Inactive") // si el estado de la fila seleccionada es inactivo
                    {
                        ////////////////// Pregunta cuando esta inactivo
                        swal({
                            title: "Do you want to active patient?",
                            text: "You will be able to recover the information !",
                            type: "warning",
                            showCancelButton: true,
                            confirmButtonColor: "#DD6B55",
                            confirmButtonText: "Yes, activate it!",
                            closeOnConfirm: false,
                            closeOnCancel: false
                        },
                       function (isConfirm) {
                           if (isConfirm) {
                               //swal("Ok!", "Your information has been saved.", "success");

                               metodoActualizaPaciente(e, Paciente, "inactivo");
                               //$("#btnCancelarModalPatientHom").trigger("click");
                               //$("#btnCancelarPacienteModal").trigger("click");
                           }
                           else {
                               swal("Cancelled", "The information was not saved !!", "error");
                               return 0;
                           }
                       });

                    } // cuando el estado de la fila es activo
                    else {


                        metodoActualizaPaciente(e, Paciente, "activo");
                        mensaje = "Your information has been saved";
                        error = "Success";
                        MensajeError(mensaje, error);
                        $("#btnCancelarModal").trigger("click");
                        $("#btnCancelar").trigger("click");
                    }


                }
                else// cuando no selecciono nada
                {

                    if (accion == 'registra')
                        metodoRegistraPaciente(Paciente);
                    //brenher
                    //$("#btnCancelarModalAjustadorHom").trigger("click");


                }
            }




            function registraActualizaModalAseguradora(e) {

                accion = $("#accion").val();
                seleccionado = $("#seleccionado").val();
                estadoSeleccion = $("#estadoSeleccion").val();
                if (seleccionado > 0)
                    $("#hdCodigoAseguradora").val(seleccionado);//doy valor al codigo de cliente, codigo tomado desde modal, para que asi se pueda modificar


                var NombreCiudad;
                var CodigoAseguradoraParaActualizar = null;

                // Obtiene la el nombre de la ciudad seleccionada o ingresada
                if ($("#hdCiudadInsurerModal").val() == "") // Si no se ha seleccionado una ciudad del autocompletado el valor que se registrará será el valor de la caja de texto
                    NombreCiudad = $("#txtCiudadInsurerModal").val();
                else // Si se ha seleccionado una ciudad del autocompletado el valor que se registrará será el id seleccionado (nombre de la ciudad).
                    NombreCiudad = $("#hdCiudadInsurerModal").val();
                // ----------------------------------------------------------

                $.each($(".rdbSeleccionaCoincidencia"), function (i, val) {
                    if ($(val).prop("checked"))
                        CodigoAseguradoraParaActualizar = val.value;
                });


                ///////////////////////////////////////////////////////////
                var Insurer = LlenarAseguradora($("#hdCodigoAseguradora").val()
                                      , ($("#txtNombreInsurerModal").val().trim() == "" ? null : $("#txtNombreInsurerModal").val().trim().toUpperCase())
                                      , ($("#txtTelefonoInsurerModal").val().trim() == "" ? null : $("#txtTelefonoInsurerModal").val().trim().toUpperCase())
                                      , ($("#txtExtInsurerModal").val().trim() == "" ? null : $("#txtExtInsurerModal").val().trim())
                                      , ($("#FaxInsurerModal").val().trim() == "" ? null : $("#FaxInsurerModal").val().trim())
                                      , ($("#txtCalleAseguradoraModal").val().trim() == "" ? null : $("#txtCalleAseguradoraModal").val().trim().toUpperCase())
                                      , NombreCiudad
                                      , $("#hdAbreviaturaEstadoPaisInsurerModal").val().trim()
                                      , ($("#txtZipInsurerModal").val().trim() == "" ? null : $("#txtZipInsurerModal").val().trim())
                                      , ($("#txtExtCodeInsurerModal").val().trim() == "" ? null : $("#txtExtCodeInsurerModal").val().trim())
                                      , ($("#txtTpaInsurerModal").val().trim() == "" ? null : $("#txtTpaInsurerModal").val().trim())
                                      , ($("#txtFeinSCInsurerModal").val().trim() == "" ? null : $("#txtFeinSCInsurerModal").val().trim())
                                      , ($("#txtCarrierInsurerModal").val().trim() == "" ? null : $("#txtCarrierInsurerModal").val().trim())
                                      , ($("#txtFeinCCInsurerModal").val().trim() == "" ? null : $("#txtFeinCCInsurerModal").val().trim()))
                //////////////////////////////////////////////////////////////////////////
                if (seleccionado > 0)//si selecciono alguna fila
                {

                    if (estadoSeleccion == "Inactive") // si el estado de la fila seleccionada es inactivo
                    {
                        ////////////////// Pregunta cuando esta inactivo
                        swal({
                            title: "Do you want to active insurer?",
                            text: "You will be able to recover the information !",
                            type: "warning",
                            showCancelButton: true,
                            confirmButtonColor: "#DD6B55",
                            confirmButtonText: "Yes, activate it!",
                            closeOnConfirm: false,
                            closeOnCancel: false
                        },
                       function (isConfirm) {
                           if (isConfirm) {
                               //swal("Ok!", "Your information has been saved.", "success");

                               metodoActualizaAseguradora(e, Insurer, "inactivo");
                               $("#btnCancelar").trigger("click");
                               $("#btnCancelarModalInsurerHom").trigger("click");
                           }
                           else {
                               swal("Cancelled", "The information was not saved !!", "error");
                               return 0;
                           }
                       });

                    } // cuando el estado de la fila es activo
                    else {

                        metodoActualizaAseguradora(e, Insurer, "activo");
                        //mensaje = "Your information has been saved";
                        //error = "Success";
                        //MensajeError(mensaje, error);
                        $("#btnCancelarModalInsurerHom").trigger("click");
                    
                    }


                }
                else// cuando no selecciono nada
                {

                    if (accion == 'registra') {
                        metodoRegistraAseguradora(Insurer);
                        $("#btnCancelarModalInsurerHom").trigger("click");
                   
                    }
                    //else {

                    //    metodoActualizaInsurer(e, "activo");
                    //}


                }
                ///////////////////////////////////////////////////////
                // console.log("swwwwwwwwwwwww");
            }


            function registraActualizaModalProveedor(e) {
                
                accion = $("#accionProviderHom").val();
                seleccionado = $("#seleccionadoProviderHom").val();
                estadoSeleccion = $("#estadoSeleccionProviderHom").val();

                // console.log(accion);
                // console.log(seleccionado);
                // console.log(estadoSeleccion);

                if (seleccionado > 0)
                    $("#hdCodigoModalProveedor").val(seleccionado);//doy valor al codigo de cliente, codigo tomado desde modal, para que asi se pueda modificar

                var Proveedor = LlenarProveedor($("#hdCodigoModalProveedor").val()
                                      , $("#txtNombreProviderModal").val().trim().toUpperCase()
                                      , $("#txtApellidoProviderModal").val().trim().toUpperCase()
                                      , $("#txtNumberProviderModal").val().trim())



                if (seleccionado > 0)//si selecciono alguna fila
                {
                    if (estadoSeleccion == "Inactive") // si el estado de la fila seleccionada es inactivo
                    {
                        ////////////////// Pregunta cuando esta inactivo
                        swal({
                            title: "Do you want to be an active provider?",
                            text: "You will be able to recover the information !",
                            type: "warning",
                            showCancelButton: true,
                            confirmButtonColor: "#DD6B55",
                            confirmButtonText: "Yes, activate it!",
                            closeOnConfirm: false,
                            closeOnCancel: false
                        },
                       function (isConfirm) {
                           if (isConfirm) {
                               //swal("Ok!", "Your information has been saved.", "success");

                               metodoActualizaProveedor(e, Proveedor, "inactivo");
                               $("#btnCancelarModal").trigger("click");
                               $("#btnCancelar").trigger("click");
                           }
                           else {
                               swal("Cancelled", "The information was not saved !!", "error");
                               return 0;
                           }
                       });

                    } // cuando el estado de la fila es activo, actualiza lo registrado con los nuevos dato del formulario modal.
                    else {

                        metodoActualizaProvider(e, Proveedor, "activo");
                        //mensaje = "Your information has been saved";
                        //error = "Success";
                        //MensajeError(mensaje, error);
                        $("#btnCancelarModal").trigger("click");
                        $("#btnCancelar").trigger("click");
                    }


                }
                else// cuando no selecciono nada
                {

                    if (accion == 'registra')
                        metodoRegistraProveedor(Proveedor);

                    $("#btnCancelarModalProveedorHom").trigger("click");


                }
            }


            function registraActualizaModalAjustador(e) {

            
                accion = $("#accionAdjusterHom").val();
                seleccionado = $("#seleccionadoAdjusterHom").val();
                estadoSeleccion = $("#estadoSeleccionAdjusterHom").val();
            
                if (seleccionado > 0)
                    $("#hdCodigoModalAjustador").val(seleccionado);//doy valor al codigo de cliente, codigo tomado desde modal, para que asi se pueda modificar

            

                var Ajustador = LlenarAjustador($("#hdCodigoModalAjustador").val()
                                  , ($("#txtNombreAdjusterModal").val().trim() == '' ? null : $("#txtNombreAdjusterModal").val().trim().toUpperCase())
                                  , ($("#txtApellidoAdjusterModal").val().trim() == '' ? null : $("#txtApellidoAdjusterModal").val().trim().toUpperCase())
                                  , ($("#txtPhoneAdjusterModal").val().trim() == '' ? null : $("#txtPhoneAdjusterModal").val().trim().toUpperCase())
                                  , ($("#txtExtAdjusterModal").val().trim() == '' ? null : $("#txtExtAdjusterModal").val().trim()))

                if (seleccionado > 0)//si selecciono alguna fila
                {
                    if (estadoSeleccion == "Inactive") // si el estado de la fila seleccionada es inactivo
                    {
                        ////////////////// Pregunta cuando esta inactivo
                        swal({
                            title: "Do you want to be an active provider?",
                            text: "You will be able to recover the information !",
                            type: "warning",
                            showCancelButton: true,
                            confirmButtonColor: "#DD6B55",
                            confirmButtonText: "Yes, activate it!",
                            closeOnConfirm: false,
                            closeOnCancel: false
                        },
                       function (isConfirm) {
                           if (isConfirm) {
                               //swal("Ok!", "Your information has been saved.", "success");

                               metodoActualizaAjustador(e, Ajustador, "inactivo");
                               $("#btnCancelarModal").trigger("click");
                               $("#btnCancelar").trigger("click");
                           }
                           else {
                               swal("Cancelled", "The information was not saved !!", "error");
                               return 0;
                           }
                       });

                    } // cuando el estado de la fila es activo
                    else {


                        metodoActualizaAjustador(e, Ajustador, "activo");
                        mensaje = "Your information has been saved";
                        error = "Success";
                        MensajeError(mensaje, error);
                        $("#btnCancelarModal").trigger("click");
                        $("#btnCancelar").trigger("click");
                    }


                }
                else// cuando no selecciono nada
                {

                    if (accion == 'registra')
                        metodoRegistraAjustador(Ajustador);

                    $("#btnCancelarModalAjustadorHom").trigger("click");


                }
            }



            function registraActualizaModalDoctor(e) {//

                accion = $("#accionDoctorHom").val();
                seleccionado = $("#seleccionadoDoctorHom").val();
                estadoSeleccion = $("#estadoSeleccionDoctorHom").val();

                if (seleccionado > 0)
                    $("#hdCodigoDoctorParaAsignar").val(seleccionado);//doy valor al codigo de cliente, codigo tomado desde modal, para que asi se pueda modificar


                var NombreCiudad;
                var CodigoAseguradoraParaActualizar = null;

                // Obtiene la el nombre de la ciudad seleccionada o ingresada
                if ($("#hdCiudadInsurerModal").val() == "") // Si no se ha seleccionado una ciudad del autocompletado el valor que se registrará será el valor de la caja de texto
                    NombreCiudad = $("#txtCiudadInsurerModal").val();
                else // Si se ha seleccionado una ciudad del autocompletado el valor que se registrará será el id seleccionado (nombre de la ciudad).
                    NombreCiudad = $("#hdCiudadInsurerModal").val();
                // ----------------------------------------------------------

                $.each($(".rdbSeleccionaCoincidencia"), function (i, val) {
                    if ($(val).prop("checked"))
                        CodigoAseguradoraParaActualizar = val.value;
                });

                ///////////////////////////////////////////////////////////////////

                var Doctor = LlenarDoctor(
                                            $("#hdCodigoDoctorParaAsignar").val()
                                          , $("#txtNombreDoctor").val().trim()
                                          , $("#txtApellidoDoctor").val().trim()
                                          , $("#txtDireccionDoctor").val().trim()
                                          , NombreCiudad
                                          , $("#hdAbreviaturaEstadoPaisDoctor").val()
                                          , $("#txtCodigoPostalDoctor").val().trim()
                                          , $("#txtExtensionCodigoPostalDoctor").val().trim()
                                          , $("#txtTelefonoDoctor").val().trim()
                                          , $("#txtExtensionTelefonoDoctor").val().trim()
                                          , $("#txtTelefonoAlternativoDoctor").val().trim()
                                          , $("#txtFaxDoctor").val().trim()
                                          , $("#cmbEspecialidadesDoctor").val()
                                          , $("#txtOficinaDoctor").val().trim())
                ///////////////////////////////////////////////////////////
                //var Insurer = LlenarAseguradora($("#hdCodigo").val()
                //                      , ($("#txtNombreInsurerModal").val().trim() == "" ? null : $("#txtNombreInsurerModal").val().trim().toUpperCase())
                //                      , ($("#txtTelefonoInsurerModal").val().trim() == "" ? null : $("#txtTelefonoInsurerModal").val().trim())
                //                      , ($("#txtExtInsurerModal").val().trim() == "" ? null : $("#txtExtInsurerModal").val().trim())
                //                      , ($("#FaxInsurerModal").val().trim() == "" ? null : $("#FaxInsurerModal").val().trim())
                //                      , ($("#txtCalleAseguradoraModal").val().trim() == "" ? null : $("#txtCalleAseguradoraModal").val().trim().toUpperCase())
                //                      , NombreCiudad
                //                      , $("#hdAbreviaturaEstadoPaisInsurerModal").val().trim()
                //                      , ($("#txtZipInsurerModal").val().trim() == "" ? null : $("#txtZipInsurerModal").val().trim())
                //                      , ($("#txtExtCodeInsurerModal").val().trim() == "" ? null : $("#txtExtCodeInsurerModal").val().trim())
                //                      , ($("#txtTpaInsurerModal").val().trim() == "" ? null : $("#txtTpaInsurerModal").val().trim())
                //                      , ($("#txtFeinSCInsurerModal").val().trim() == "" ? null : $("#txtFeinSCInsurerModal").val().trim())
                //                      , ($("#txtCarrierInsurerModal").val().trim() == "" ? null : $("#txtCarrierInsurerModal").val().trim())
                //                      , ($("#txtFeinCCInsurerModal").val().trim() == "" ? null : $("#txtFeinCCInsurerModal").val().trim()))
                //////////////////////////////////////////////////////////////////////////
                if (seleccionado > 0)//si selecciono alguna fila
                {

                    if (estadoSeleccion == "Inactive") // si el estado de la fila seleccionada es inactivo
                    {
                        ////////////////// Pregunta cuando esta inactivo
                        swal({
                            title: "Do you want to active doctor?",
                            text: "You will be able to recover the information !",
                            type: "warning",
                            showCancelButton: true,
                            confirmButtonColor: "#DD6B55",
                            confirmButtonText: "Yes, activate it!",
                            closeOnConfirm: false,
                            closeOnCancel: false
                        },
                       function (isConfirm) {
                           if (isConfirm) {
                               //swal("Ok!", "Your information has been saved.", "success");

                               metodoActualizaDoctor(e, Doctor, "inactivo");
                               $("#btnCancelarDoctorModal").trigger("click");
                               $("#btnCancelarModalDoctorHom").trigger("click");
                           }
                           else {
                               swal("Cancelled", "The information was not saved !!", "error");
                               return 0;
                           }
                       });

                    } // cuando el estado de la fila es activo
                    else {

                        metodoActualizaDoctor(e, Doctor, "activo");
                        mensaje = "Your information has been saved";
                        error = "Success";
                        MensajeError(mensaje, error);
                        $("#btnCancelarModalDoctorHom").trigger("click");
                    
                    }


                }
                else// cuando no selecciono nada
                {

                    if (accion == 'registra') {
                        metodoRegistraMedico(Doctor);
                        metodo
                        $("#btnCancelarModalDoctorHom").trigger("click");
                    }
                    //else {

                    //    metodoActualizaInsurer(e, "activo");
                    //}


                }
                ///////////////////////////////////////////////////////
            }

            function registraActualizaModalAbogado(e) {//URGENTE

                accion = $("#accionAbogadoHom").val();
                seleccionado = $("#seleccionadoAbogadoHom").val();
                estadoSeleccion = $("#estadoSeleccionAbogadoHom").val();

                if (seleccionado > 0)
                    $("#hdCodigoAbogadoParaAsignar").val(seleccionado);//doy valor al codigo de cliente, codigo tomado desde modal, para que asi se pueda modificar


                var NombreCiudad;
                //var CodigoAseguradoraParaActualizar = null;

                    // Obtiene la el nombre de la ciudad seleccionada o ingresada
                if ($("#hdCiudadAbogado").val() == "") // Si no se ha seleccionado una ciudad del autocompletado el valor que se registrará será el valor de la caja de texto
                    NombreCiudad = $("#txtCiudadAbogado").val();
                else// Si se ha seleccionado una ciudad del autocompletado el valor que se registrará será el id seleccionado (nombre de la ciudad).
                    NombreCiudad = $("#hdCiudadAbogado").val();
                    // ----------------------------------------------------------

                //$.each($(".rdbSeleccionaCoincidencia"), function (i, val) {
                //    if ($(val).prop("checked"))
                //        CodigoAseguradoraParaActualizar = val.value;
                //});

                ///////////////////////////////////////////////////////////////////

                var Abogado = LlenarAbogado(
                                            $("#hdCodigoAbogadoParaAsignar").val()
                                          , $("#txtNombreAbogado").val().trim()
                                          , $("#txtApellidoAbogado").val().trim()
                                          , $("#txtDireccionAbogado").val().trim()
                                          , NombreCiudad
                                          , $("#hdAbreviaturaEstadoPaisAbogado").val()
                                          , $("#txtCodigoPostalAbogado").val().trim()
                                          , $("#txtExtensionCodigoPostalAbogado").val().trim()
                                          , $("#txtTelefonoAbogado").val().trim()
                                          , $("#txtFaxAbogado").val().trim()
                                          , $("#txtAsistenteAbogado").val().trim()                                          
                                          , $("#cmbEspecialidadesAbogado").val())
               
                if (seleccionado > 0)//si selecciono alguna fila
                {

                    if (estadoSeleccion == "Inactive") // si el estado de la fila seleccionada es inactivo
                    {
                        ////////////////// Pregunta cuando esta inactivo
                        swal({
                            title: "Do you want to active Attorney?",
                            text: "You will be able to recover the information !",
                            type: "warning",
                            showCancelButton: true,
                            confirmButtonColor: "#DD6B55",
                            confirmButtonText: "Yes, activate it!",
                            closeOnConfirm: false,
                            closeOnCancel: false
                        },
                       function (isConfirm) {
                           if (isConfirm) {
                               //swal("Ok!", "Your information has been saved.", "success");

                               metodoActualizaDoctor(e, Doctor, "inactivo");
                               $("#btnCancelarAttorneyModal").trigger("click");
                               $("#btnCancelarModalAttorneyHom").trigger("click");
                           }
                           else {
                               swal("Cancelled", "The information was not saved !!", "error");
                               return 0;
                           }
                       });

                    } // cuando el estado de la fila es activo
                    else {

                        metodoActualizaDoctor(e, Doctor, "activo");
                        mensaje = "Your information has been saved";
                        error = "Success";
                        MensajeError(mensaje, error);
                        $("#btnCancelarModalAttorneyHom").trigger("click");

                    }


                }
                else// cuando no selecciono nada
                {

                    if (accion == 'registra') {
                        metodoRegistraAbogado(Abogado);                        
                        $("#btnCancelarAbogadoModal").trigger("click");
                    }

                }
                ///////////////////////////////////////////////////////
            }

            

            function registraActualizaEspecialidad(e) {

                accion = $("#accionDoctorHom").val();
                seleccionado = $("#seleccionadoDoctorHom").val();
                estadoSeleccion = $("#estadoSeleccionDoctorHom").val();

                if (seleccionado > 0)
                    $("#hdCodigo").val(seleccionado);//doy valor al codigo de cliente, codigo tomado desde modal, para que asi se pueda modificar


                var NombreCiudad;
                var CodigoAseguradoraParaActualizar = null;

                // Obtiene la el nombre de la ciudad seleccionada o ingresada
                if ($("#hdCiudadInsurerModal").val() == "") // Si no se ha seleccionado una ciudad del autocompletado el valor que se registrará será el valor de la caja de texto
                    NombreCiudad = $("#txtCiudadInsurerModal").val();
                else // Si se ha seleccionado una ciudad del autocompletado el valor que se registrará será el id seleccionado (nombre de la ciudad).
                    NombreCiudad = $("#hdCiudadInsurerModal").val();
                // ----------------------------------------------------------

                $.each($(".rdbSeleccionaCoincidencia"), function (i, val) {
                    if ($(val).prop("checked"))
                        CodigoAseguradoraParaActualizar = val.value;
                });

            
                ///////////////////////////////////////////////////////////
                var Insurer = LlenarAseguradora($("#hdCodigo").val()
                                      , ($("#txtNombreInsurerModal").val().trim() == "" ? null : $("#txtNombreInsurerModal").val().trim().toUpperCase())
                                      , ($("#txtTelefonoInsurerModal").val().trim() == "" ? null : $("#txtTelefonoInsurerModal").val().trim())
                                      , ($("#txtExtInsurerModal").val().trim() == "" ? null : $("#txtExtInsurerModal").val().trim())
                                      , ($("#FaxInsurerModal").val().trim() == "" ? null : $("#FaxInsurerModal").val().trim())
                                      , ($("#txtCalleAseguradoraModal").val().trim() == "" ? null : $("#txtCalleAseguradoraModal").val().trim().toUpperCase())
                                      , NombreCiudad
                                      , $("#hdAbreviaturaEstadoPaisInsurerModal").val().trim()
                                      , ($("#txtZipInsurerModal").val().trim() == "" ? null : $("#txtZipInsurerModal").val().trim())
                                      , ($("#txtExtCodeInsurerModal").val().trim() == "" ? null : $("#txtExtCodeInsurerModal").val().trim())
                                      , ($("#txtTpaInsurerModal").val().trim() == "" ? null : $("#txtTpaInsurerModal").val().trim())
                                      , ($("#txtFeinSCInsurerModal").val().trim() == "" ? null : $("#txtFeinSCInsurerModal").val().trim())
                                      , ($("#txtCarrierInsurerModal").val().trim() == "" ? null : $("#txtCarrierInsurerModal").val().trim())
                                      , ($("#txtFeinCCInsurerModal").val().trim() == "" ? null : $("#txtFeinCCInsurerModal").val().trim()))
                //////////////////////////////////////////////////////////////////////////
                if (seleccionado > 0)//si selecciono alguna fila
                {

                    if (estadoSeleccion == "Inactive") // si el estado de la fila seleccionada es inactivo
                    {
                        ////////////////// Pregunta cuando esta inactivo
                        swal({
                            title: "Do you want to active insurer?",
                            text: "You will be able to recover the information !",
                            type: "warning",
                            showCancelButton: true,
                            confirmButtonColor: "#DD6B55",
                            confirmButtonText: "Yes, activate it!",
                            closeOnConfirm: false,
                            closeOnCancel: false
                        },
                       function (isConfirm) {
                           if (isConfirm) {
                               //swal("Ok!", "Your information has been saved.", "success");
                               metodoActualizaAseguradora(e, Insurer, "inactivo");
                               $("#btnCancelar").trigger("click");
                               $("#btnCancelarModalInsurerHom").trigger("click");
                           }
                           else {
                               swal("Cancelled", "The information was not saved !!", "error");
                               return 0;
                           }
                       });

                    } // cuando el estado de la fila es activo
                    else {

                        metodoActualizaAseguradora(e, Insurer, "activo");
                        mensaje = "Your information has been saved";
                        error = "Success";
                        MensajeError(mensaje, error);
                        $("#btnCancelarModalInsurerHom").trigger("click");
                    
                    }


                }
                else// cuando no selecciono nada
                {

                    if (accion == 'registra') {
                        metodoRegistraAseguradora(Insurer);
                        $("#btnCancelarModalInsurerHom").trigger("click");
                    }
         

                }
                ///////////////////////////////////////////////////////
            }
            /////////// eventos click en tabla

            $("#tblModalPatientHom tbody").on('click', 'tr', function ()  //selecciona fila de tabla  
            {

                var name;  // Ins_name
                var ciudad;// Ins_city            
                var state; // Ins_state            
                var zip_code; // Ins_zipCode
                var status; // Ins_status
                var codigo; // Ins_code
                var seleccionado;
            

                var aPos = $("#tblModalPatientHom").dataTable().fnGetPosition(this);
                var aData = $("#tblModalPatientHom").dataTable().fnGetData(aPos);

                codigo = aData[0];
                status = aData[6];
                seleccionado = aData[7];

            

                var $radios = $("input:radio[name=idRadio]");
                $radios.filter('[value=' + codigo + ']').prop('checked', true);
                $("#seleccionadoPatientHom").val(codigo);
                $("#estadoSeleccionPatientHom").val(status);

            });


            $("#tblModalInsurer tbody").on('click', 'tr', function ()  //selecciona fila de tabla  
            {

                var name;  // Ins_name
                var ciudad;// Ins_city            
                var state; // Ins_state            
                var zip_code; // Ins_zipCode
                var status; // Ins_status
                var codigo; // Ins_code
                var seleccionado;


                var aPos = $("#tblModalInsurer").dataTable().fnGetPosition(this);
                var aData = $("#tblModalInsurer").dataTable().fnGetData(aPos);

                codigo = aData[0];
                name = aData[1];
                ciudad = aData[2];
                state = aData[3];
                zip_code = aData[4];
                status = aData[5];
                seleccionado = aData[6];



                var $radios = $("input:radio[name=idRadio]");
                $radios.filter('[value=' + codigo + ']').prop('checked', true);
                $("#seleccionado").val(codigo);
                $("#estadoSeleccion").val(status);

            });




    

            $("#tblModalAdjusterHom tbody").on('click', 'tr', function ()  //selecciona fila de tabla  
            {


                var name;  // pro_firstname
                var apellido;// pro_lastname
                var idnumber; // pro_number        
                var status; // Ins_status
                var codigo; // Ins_code
                var seleccionado;


                var aPos = $("#tblModalAdjusterHom").dataTable().fnGetPosition(this);
                var aData = $("#tblModalAdjusterHom").dataTable().fnGetData(aPos);


                codigo = aData[0];
                status = aData[5];


                var $radios = $("input:radio[name=idRadio]");
                $radios.filter('[value=' + codigo + ']').prop('checked', true);
                $("#seleccionadoAdjusterHom").val(codigo);
                $("#estadoSeleccionAdjusterHom").val(status);


            });

            $("#tblModalProviderHom tbody").on('click', 'tr', function ()  //selecciona fila de tabla  
            {

                var name;  // pro_firstname
                var apellido;// pro_lastname
                var idnumber; // pro_number        
                var status; // Ins_status
                var codigo; // Ins_code
                var seleccionado;

                
                
                var aPos = $("#tblModalProviderHom").dataTable().fnGetPosition(this);
                var aData = $("#tblModalProviderHom").dataTable().fnGetData(aPos);

                codigo = aData[0];
                status = aData[4];

                // console.log("tblModalProviderHom_click");
                // console.log(codigo);
                // console.log(status);


                var $radios = $("input:radio[name=idRadio]");
                $radios.filter('[value=' + codigo + ']').prop('checked', true);
                $("#seleccionadoProviderHom").val(codigo);
                $("#estadoSeleccionProviderHom").val(status);


            });


            $("#tblModalDoctorHom tbody").on('click', 'tr', function ()  //selecciona fila de tabla  
            {

                var status; // Ins_status
                var codigo; // Ins_code
                var seleccionado;


                var aPos = $("#tblModalDoctorHom").dataTable().fnGetPosition(this);
                var aData = $("#tblModalDoctorHom").dataTable().fnGetData(aPos);

                codigo = aData[0];
                status = aData[5];
                seleccionado = aData[6];

            

                var $radios = $("input:radio[name=idRadio]");
                $radios.filter('[value=' + codigo + ']').prop('checked', true);
                $("#seleccionadoDoctorHom").val(codigo);
                $("#estadoSeleccionDoctorHom").val(status);

            });

            $("#tblModalAbogadoHom tbody").on('click', 'tr', function ()  //selecciona fila de tabla  
            {

                var status; // Ins_status
                var codigo; // Ins_code
                var seleccionado;


                var aPos = $("#tblModalAbogadoHom").dataTable().fnGetPosition(this);
                var aData = $("#tblModalAbogadoHom").dataTable().fnGetData(aPos);

                codigo = aData[0];
                status = aData[5];
                seleccionado = aData[6];



                var $radios = $("input:radio[name=idRadio]");
                $radios.filter('[value=' + codigo + ']').prop('checked', true);
                $("#seleccionadoAbogadoHom").val(codigo);
                $("#estadoSeleccionAbogadoHom").val(status);

            });
            /////////// eventos cancelar

            $("#btnCancelarInsurerModal").on("click", function () {
                LimpiarControlesRegistroNuevaAseguradora();
            });

            $("#btnCancelarProviderModal").on("click", function () {
                LimpiarControlesRegistroNuevoProveedor();
            });


            $("#btnCancelarAjustadorModal").on("click", function () {
                LimpiarControlesRegistroNuevoAjustador();
            });

            $("#btnCancelarModalAdjusterHom").on("click", function () {
                $("#txtNombreAdjusterModal").focus();
            });
            $("#btnCancelarModalEspecialidadHom").on("click", function () {
                LimpiarControlesEspecialidad();
            });
            $("#btnCancelarModalEspecialidadHomAbogado").on("click", function () {
                LimpiarControlesEspecialidadAbogado();
            });
        

            //Agregar fila a tabla




            function AgregaFilaDoctorCaso(Doctor) {
                //Paciente.Cit_code = "--";
                //Paciente.Sta_code = "--"; 
                //Doctor.Med_lastName,
                $('#tblDoctor').dataTable().fnAddData([Doctor.med_code, Doctor.Med_firstName, Doctor.Med_address, Doctor.Med_city, Doctor.Med_state, Doctor.Med_zipCode, Doctor.Med_zipCodeExt, Doctor.Med_phone, Doctor.Med_phoneExt, Doctor.Med_alternatePhone, Doctor.Med_fax, comboSeleccionado, Doctor.Med_office, '<a class="btn EditarDoctor btn-white btn-bitbucket"><i class="fa fa-pencil text-danger"></i></a> &nbsp; <a class="btn EliminarDoctor  btn-white btn-bitbucket"><i class="fa fa-trash-o text-danger"></i> </a>']);

                var otable = $("#tblDoctor").dataTable().fnDestroy();
                otable = $('#tblDoctor').DataTable({
                    columnDefs: [{ className: "hidden", "targets": [0] }],
                    dom: '<"html5buttons"B>lTfgitp'
                });
                dato = Doctor.Med_firstName + " " + Doctor.Med_lastName;
                otable = $('.dataTables-example').dataTable().fnFilter(dato);


                ///otable =  $("#tblPacientes").dataTable({ "columnDefs": [{className:"hidden","targets": [0,6,8]}]  });
            }

            function AgregaFilaAbogadoCaso(Abogado) {
                //Paciente.Cit_code = "--";
                //Paciente.Sta_code = "--"; 
                //Doctor.Med_lastName,
                $('#tblDoctor').dataTable().fnAddData([Doctor.med_code, Doctor.Med_firstName, Doctor.Med_address, Doctor.Med_city, Doctor.Med_state, Doctor.Med_zipCode, Doctor.Med_zipCodeExt, Doctor.Med_phone, Doctor.Med_phoneExt, Doctor.Med_alternatePhone, Doctor.Med_fax, comboSeleccionado, Doctor.Med_office, '<a class="btn EditarDoctor btn-white btn-bitbucket"><i class="fa fa-pencil text-danger"></i></a> &nbsp; <a class="btn EliminarDoctor  btn-white btn-bitbucket"><i class="fa fa-trash-o text-danger"></i> </a>']);

                var otable = $("#tblDoctor").dataTable().fnDestroy();
                otable = $('#tblDoctor').DataTable({
                    columnDefs: [{ className: "hidden", "targets": [0] }],
                    dom: '<"html5buttons"B>lTfgitp'
                });
                dato = Doctor.Med_firstName + " " + Doctor.Med_lastName;
                otable = $('.dataTables-example').dataTable().fnFilter(dato);


                ///otable =  $("#tblPacientes").dataTable({ "columnDefs": [{className:"hidden","targets": [0,6,8]}]  });
            }



   

            function AgregaFilaTablaCaso(Claim, codigoPaciente, nombreCompletoPaciente, apellidoPaciente, Aseguradora, FechaAccidente, estadoCaso, CodCaseNew) {

                //$('#tblCasos').dataTable().fnSetColumnVis(0, false, false);

                //$('#tblCasos').DataTable().clear();                        
                //var rowindex = $('#tblCasos').dataTable().fnAddData([CodCaseNew, Claim, codigoPaciente, nombreCompletoPaciente, apellidoPaciente, Aseguradora, FechaAccidente, estadoCaso, '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a class="btn SeleccionarCaso btn-danger btn-bitbucket" href="#detalleCase">Select</a>']);
                //var row = $('#tblCasos').dataTable().fnGetNodes(rowindex);
                //$(row).attr('id', CodCaseNew);

                //var otable = $("#tblCasos").dataTable().fnDestroy();

                //otable = $("#tblCasos").DataTable({
                //    pageLength: 5,
                //    columnDefs: [{ className: "hidden", "targets": [0,2,4] }]
                //});

                //dato = nombreCompletoPaciente;
                //otable = $('#tblCasos').dataTable().fnFilter(dato);
                //$("#txtBuscaCaso").val(dato);

                dato = "";
                recargaInformacionTabla(dato);

                //////$("#tblCasos_length").css("display", "none");
                //////$("#tblCasos_filter").css("display", "none");           

                ////////////////////////////////////////////////////////////
            }
            function EditaFilaTablaCaso(Claim, codigoPaciente, nombreCompletoPaciente, apellidoPaciente, Aseguradora, FechaAccidente, estadoCaso, CodCaseNew) {

                //$('#tblCasos').dataTable().fnSetColumnVis(0, false, false);

                // console.log("EditaFilaTablaCaso");
                ////aPos = $("#tblCasos").dataTable().fnGetPosition($("#" + CodCaseNew).closest('tr')[0]);
                ///$('#tblCasos').dataTable().fnUpdate([CodCaseNew, Claim, codigoPaciente, nombreCompletoPaciente, apellidoPaciente, Aseguradora, FechaAccidente, estadoCaso, '<a class="btn SeleccionarCaso btn-danger btn-bitbucket" href="#detalleCase">Select</a>'], aPos, undefined, true);


                //var otable = $("#tblCasos").dataTable().fnDestroy();

                //otable = $("#tblCasos").DataTable({
                //    pageLength: 5,
                //    columnDefs: [{ className: "hidden", "targets": [0, 2] }]
                //});
                // console.log("xxxxxxxxxx");
                ////////dato = nombreCompletoPaciente;
                //otable = $('#tblCasos').dataTable().fnFilter(dato);            
                // console.log("finEditaTabla");
                dato_busca = "";
                recargaInformacionTabla(dato_busca);
                ////////////////////////////////////////////////////////////
                //////$("#tblCasos_filter").css("display", "none");
                //////$("#tblCasos_length").css("display", "none");
            }
        
            function recargaInformacionTabla(dato_busca) {
                console.log("recargaInformacionTabla");
                $.ajax({
                    type: "POST",
                    async: false,
                    url: '@Url.Action("ListaCasosParaBusquedaAvanzada_tabla", "CaseInformation")',
                    contentType: false,
                    contentType: false,
                    success: function (Data) {
                        console.log("correcto");
                        $('#tblCasos').DataTable().ajax.reload();
                        $("#tblCasos_filter").css("display", "none");
                        $("#tblCasos_length").css("display", "none");
              }
              });
            }


            ///Otras Funciones
            function convierteFecha(dato) {
                //console.log(dato);
                datoString = dato.toString();
                var dateString = datoString.substr(6);
                var currentime = new Date(parseInt(dateString));
                //alert(currentime);
                var month = currentime.getMonth();
                //alert(month);
            

                if (month <= 9)
                    month = "0" + month;

                var day = currentime.getDate();
                if (day <= 9)
                    day = "0" + day;
            

                var year = currentime.getFullYear();
                //alert(year);
                //var myDate = day + "/" + month + "/" + year;
                var myDate = month + "/" + day + "/" + year;
                //alert(myDate);
                return myDate;
            }

     

            function ActualizaSexoPaciente(e) {
                e.preventDefault();

                var CodigoPaciente = parseInt($("#hdCodigoPaciente").val());
                var Sexo = null;

                //Sexo = ($("#rdbMasculino").prop("checked") == true ? "M" : "F") // obtiene el sexo            
                if ($("#rdbMasculino").prop("checked") == false && $("#rdbFemenino").prop("checked") == false) // valida el sexo
                {
                    e.stopPropagation();
                    error = "Error";
                    mensaje = "Please select sex";
                    MensajeError(mensaje, error);
                    return false;
                }

                if ($("#rdbMasculino").prop("checked") == true)
                    Sexo = 'M';
                if ($("#rdbFemenino").prop("checked") == true)
                    Sexo = 'F';



                $.ajax({
                    type: "POST",
                    async: false,
                    data: JSON.stringify({ "Codigo": CodigoPaciente, "Sexo": Sexo }),
                    url: '@Url.Action("ActualizaSexo", "Patient")',
                    contentType: "application/json",
                    dataType: 'json',
                    success: function (Data) {
                        error = "Successful!";
                        mensaje = "Data save correctly...";
                        MensajeError(mensaje, error);

                        if (Sexo == 'F') {
                            $("#rdbMasculinoPacienteModal").prop("checked", false);
                            $("#rdbFemeninoPacienteModal").prop("checked", true);
                        }
                        else {
                            $("#rdbMasculinoPacienteModal").prop("checked", true);
                            $("#rdbFemeninoPacienteModal").prop("checked", false);
                        }

                    }
                });

                //$("#btnCancelaActualizarSexoPacienteModal").trigger("click");Edherb

            }
    
            $("#tblModalEspecialidad > tbody").on("click", "tr > td > a", EditaSeleccionaEspecialidad);  
    

            function EditaSeleccionaEspecialidad(e) {
                e.preventDefault();

                var CodigoEsp = parseInt($(this).parent().parent().find("td:eq(0)").html());
                var nombEsp = $(this).parent().parent().find("td:eq(1)").html();

        
        
                //alert("bien");
                dato = nombEsp.trim();
                var otable = $("#tblModalEspecialidad").dataTable();
                var target_row = $(this).closest("tr").get(0);
                var aPos = otable.fnGetPosition(target_row);

                $("#txtEspecialidad").val(dato);
                $("#txtEspecialidadCodigo").val(CodigoEsp);
                $("#btnRegistraAgregaEspecialidad").html("Update");

            };

            $("#tblModalEspecialidadAbogado > tbody").on("click", "tr > td > a", EditaSeleccionaEspecialidadAbogado);

            function EditaSeleccionaEspecialidadAbogado(e) {
                e.preventDefault();

                var CodigoEsp = parseInt($(this).parent().parent().find("td:eq(0)").html());
                var nombEsp = $(this).parent().parent().find("td:eq(1)").html();

                //alert("bien");
                dato = nombEsp.trim();
                var otable = $("#tblModalEspecialidadAbogado").dataTable();
                var target_row = $(this).closest("tr").get(0);
                var aPos = otable.fnGetPosition(target_row);

                $("#txtEspecialidadAbogado").val(dato);
                $("#txtEspecialidadCodigoAbogado").val(CodigoEsp);
                $("#btnRegistraAgregaEspecialidadAbogado").html("Update");

            };
   
            function agregaEspecialidad(e) {
                textEsp = $("#txtEspecialidad").val().toUpperCase();
                codEsp = $("#txtEspecialidadCodigo").val();
        

                if ($("#txtEspecialidad").val() != "") {
                    var Especialidad = LlenarEspecialidad(codEsp, textEsp, 'M');//MEDICAL=DOCTOR
                    if (codEsp > 0)
                        actualizaEspecialidad(codEsp, textEsp, Especialidad, 'M');
                    else
                        registraEspecialidad(codEsp, textEsp, Especialidad, 'M');
                
                }
                else {
                    //alert("Select a speciality");
                    error = "Error!";
                    mensaje = "Select a specialty!";
                    MensajeError(mensaje, error);
                }
            }

            function agregaEspecialidadAbogado(e) {
                textEsp = $("#txtEspecialidadAbogado").val().toUpperCase();
                codEsp = $("#txtEspecialidadCodigoAbogado").val();


                if ($("#txtEspecialidadAbogado").val() != "") {
                    var Especialidad = LlenarEspecialidad(codEsp, textEsp, 'A');//ABOGADO
                    if (codEsp > 0)
                        actualizaEspecialidad(codEsp, textEsp, Especialidad, "A");
                    else
                        registraEspecialidad(codEsp, textEsp, Especialidad, "A");
                }
                else {
                    
                    error = "Error!";
                    mensaje = "Select a specialty!";
                    MensajeError(mensaje, error);
                }
            }
    




            function LlenarEspecialidad(Codigo, Nombre, Tipo) {
                var especialidadJson =
                    {
                        "Spe_code": Codigo,
                        "Spe_name": Nombre,
                        "Spe_type": Tipo

                    }
                return especialidadJson;
            }


            function registraEspecialidad(codigo, descripcion, Especialidad, tipo) {
 
                $.ajax({
                    type: "POST",
                    async: false,
                    data: JSON.stringify(Especialidad),
                    url: '@Url.Action("Create", "Specialty")',
                    contentType: "application/json",
                    dataType: 'json',
                    success: function (Data) {
                        if (Data[0].ErrorMessage == "") {
                        
                        
                            //AgregaFilaEspecialidad(Especialidad,'M', Data[0].SpecialtyErrorCode);
                            error = "Successful!";
                            mensaje = "Data save correctly...";
                            MensajeError(mensaje, error);
                            LimpiarControlesEspecialidad();
                            if (tipo == "M")
                                CargarEspecialidadesDoctor();
                            else 
                                CargarEspecialidadesAbogado();
                        }
                        else {
                            if (Data[0].PatientErrorCode == 2601) {

                            }
                            else
                                error = "Error in register!!";

                        
                            mensaje = Data[0].ErrorMessage;                        
                            MensajeError(mensaje, error);
                        }
                    }
                });
            }


            function actualizaEspecialidad(codEsp, textEsp, Especialidad, tipo) {
       
                $.ajax({
                    type: "POST",
                    async: false,
                    data: JSON.stringify(Especialidad),
                    url: '@Url.Action("ActualizarDatos", "Specialty")',
                    contentType: "application/json",
                    dataType: 'json',
                    success: function (Data) {
                        EspecialidadX = Especialidad;
                        seleccionado = $("#cmbTipoEspecialidad option:selected").html();
                        Especialidad = (Data);

                        if (Data[0].ErrorMessage == "") {
                            aPos = $("#apos").val();
                            var otable = $("#tblEspecialidad").dataTable();

                            //seleccionado = $("#cmbTipoEspecialidad option:selected").html();
                            //EditaFila(EspecialidadX, seleccionado, aPos, otable);
                            error = "Successful!";
                            mensaje = "Data save correctly...";
                            MensajeError(mensaje, error);                        
                            LimpiarControlesEspecialidad();                        
                            if (tipo == "M")
                                CargarEspecialidadesDoctor();
                            else
                                CargarEspecialidadesAbogado();
                        }
                        else {
                            error = "Error!";
                            mensaje = Data[0].ErrorMessage + "...";
                            $("#cmbTipoEspecialidad").focus();//el error solo se muestra en SSD                        
                        }
                        MensajeError(mensaje, error);
                    }
                });

            }

            function generaPdf() {
        
                var urlx = $("#linkPdf").attr("data-url");
                codigoCase = $("#hdCodigoCaso").val();
                codigoPaciente = $("#hdCodigoPaciente").val();        
                nombreCompletoPaciente = $("#select2-cmbPaciente-container").text().toUpperCase();
                nombreCompletoPaciente = nombreCompletoPaciente.replace(" ", "_");

                if (codigoCase > 0 && codigoPaciente > 0) {
            
                    urlx = urlx + "?codigoCase=" + codigoCase + "&codigoPaciente=" + codigoPaciente + "&pacienteNombre=" + nombreCompletoPaciente;
            
                    window.open(urlx);
                }
                else {
                    error = "Error";
                    mensaje = "Select a case";
                    MensajeError(mensaje, error);
                }

            }

            function validaNumeros(e) {
       
                if (!((e.which >= 48 && e.which <= 57) || (e.which == 40 || e.which == 41) || (e.which == 32 || e.which == 8 || e.which == 0 || e.which == 46)))//46punto
                {
                    e.preventDefault();
                    return false;
                }
            }
            function validaNumerosSinPunto(e) {

                if (!((e.which >= 48 && e.which <= 57) || (e.which == 40 || e.which == 41) || (e.which == 32 || e.which == 8 || e.which == 0)))//
                {
                    e.preventDefault();
                    return false;
                }
            }
            function ocultaBotones() {
        
                $("#cmbDoctor").prop("disabled", true);
                $("#cmbAbogado").prop("disabled", true);
                $("#btnNuevoDoctor").prop("disabled", true);
                $("#btnAsignaDoctor").prop("disabled", true);
                $("#btnNuevoAbogado").prop("disabled", true);
                $("#btnAsignaAbogado").prop("disabled", true);
                $("#txtDoctor").prop("disabled", true);
                $("#txtAbogado").prop("disabled", true);
                $("#generaPdf").prop("disabled", true);
        
            }

            function muestraBotones() {
                
                $("#muestraDetalleDoctor").css("display", "block");                
                $("#cmbDoctor").prop("disabled", false);
                $("#cmbAbogado").prop("disabled", false);
                $("#muestraDetalleAbogado").css("display", "block");
                $("#btnNuevoDoctor").prop("disabled", false);
                $("#btnAsignaDoctor").prop("disabled", false);
                $("#btnNuevoAbogado").prop("disabled", false);
                $("#btnAsignaAbogado").prop("disabled", false);
                $("#txtDoctor").prop("disabled", false);
                $("#txtAbogado").prop("disabled", false);
                //$("#generaPdf").prop("disabled", false);
            }

            function ocultaTablaCaso() {

        
                $("#tblCasos_filter").css({ "display": "none" });
                $("#tblCasos > tbody").css({ "display": "none" });
                $("#tblCasos_paginate").css("display", "none");
            }

            function MensajeError(mensaje, error) {
                console.log("mensajeError");
                swal({
                    title: error,
                    text: mensaje,
                    html: true
                });
            }


            function funcionCaseInformacionDesdeNode_llamada() {

                    dato_busca = $("#txtBuscaCaso").val();

                    console.log("recargaInformacionTabla");
                    $.ajax({
                        type: "POST",
                        async: false,
                        url: '@Url.Action("ListaCasosParaBusquedaAvanzada_tabla", "CaseInformation")',
                        contentType: false,                        
                        success: function (Data) {
                        console.log("correcto");
                        $('#tblCasos').DataTable().ajax.reload();
                        if (dato_busca != "")
                            setTimeout(function () { otable = $('#tblCasos').dataTable().fnFilter(dato_busca) }, "1000");
                        else
                            setTimeout(function () { otable = $('#tblCasos').dataTable().fnFilter("") }, "1000");

                        }
                     });
            }
            
    $('input.letterNombre').on('keypress', function (e) {

        console.log(e.which);
        if ((e.which == 209 || e.which == 241) || (e.which == 225 || e.which == 233 || e.which == 237 || e.which == 243 || e.which == 250) || (e.which == 46 || e.which == 193 || e.which == 190 || e.which == 201 || e.which == 205 || e.which == 211 || e.which == 218)) {

        } else {
            if (!((e.which >= 65 && e.which <= 90) || (e.which == 32 || e.which == 8 || e.which == 0 || e.which == 45) || (e.which >= 97 && e.which <= 122))) {
                e.preventDefault();
                return false;
            }
        }
    });

</script>



