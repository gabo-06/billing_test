@model IEnumerable<Billing.Web.Models.PMedical>

@{
    ViewBag.Title = "Medical";
} 

<div >
       <div class="row">
            <!--///////////////////FORMULARIO///////////////////////-->
                <div class="col-lg-12">
                    <div class="ibox float-e-margins">
                        <div class="ibox-title  header_formulario">
                            <h5>REGISTER DOCTORS AND FACILITIES</h5>
                             
                            </div> 

                        <div class="ibox-content" id="frmRegistroDoctor" style="display: none;">
                            <form method="get" class="form-horizontal">
                                <input type="hidden" id="hdCodigo" />
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">First Name <span style="color:red; font-size:15px;"> (*)</span></label>
                                    <div class="col-sm-6">
                                        <input type="text" class="form-control letterNombre" id="Nombre" autofocus  tabindex="1"/>
                                    </div>
                                </div>
                                @*<div class="hr-line-dashed"></div>*@
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">Last name <span style="color:red; font-size:15px;"> (*)</span></label>
                                    <div class="col-sm-6">
                                        <input type="text" class="form-control letterNombre" id="Apellido" tabindex="2"/> 
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">Street</label>
                                    <div class="col-sm-6">
                                        <input type="text" class="form-control" id="Direccion"  tabindex="3"/>
                                    </div>
                                </div>           
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">State <span style="color:red; font-size:15px;"> (*)</span></label>
                                    <div class="col-sm-6">
                                        <span style="font-size: 0.8em; font-style: normal;">type a word to find matches</span>
                                        <span style="color:red; font-size: 0.8em; font-style: italic;">(if you do not belong to any state, select the "NONE" option from the list)</span>
                                        <input type="hidden" id="hdAbreviaturaEstadoPais" />
                                        <input type="text" class="form-control" id="EstadoPais" tabindex="4" />
                                    </div>
                                </div>                                                                              
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">City <span style="color:red; font-size:15px;"> (*)</span></label>
                                    <div class="col-sm-6">
                                        <span style="font-size: 0.8em; font-style: normal;">type a word to find matches</span>
                                        <input type="hidden" id="hdCiudad" />
                                        <input type="text" class="form-control" id="Ciudad" tabindex="5" />
                                    </div>
                                </div>    
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">Zip Code</label>
                                    <div class="col-sm-3">
                                        <input type="text" maxlength ="5" class="form-control"  id="CodigoPostal" tabindex="6" />
                                    </div>
                                    <label class="col-sm-1 control-label">Ext</label>
                                    <div class="col-sm-2">
                                        <input type="text" maxlength ="4" class="form-control" id="ExtensionCodigoPostal"  tabindex="7"/>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">Phone</label>
                                    <div class="col-sm-3">
                                        <input type="text" class="form-control" id="Telefono"  data-mask ="999-999-9999" placeholder="" tabindex="8"/>
                                    </div>
                                    <label class="col-sm-1 control-label">Ext</label>
                                    <div class="col-sm-2">
                                        <input type="text" class="form-control" id="ExtensionTelefono" maxlength ="5" placeholder="" tabindex="9"/>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="col-sm-3 control-label"> Alternative Phone</label>
                                    <div class="col-sm-6">
                                        <input type="text" class="form-control" id="TelefonoAlternativo" data-mask ="999-999-9999" tabindex="10" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">Fax</label>
                                    <div class="col-sm-6">
                                        <input type="text" class="form-control" id="Fax" data-mask ="999-999-9999" tabindex="11" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">Speciality <span style="color:red; font-size:15px;"> (*)</span></label>
                                    <div class="col-sm-6">
                                        @*<input type="text" class="form-control" id="Ciudad" />*@
                                        <select id="cmbEspecialidades" class="form-control m-b" tabindex="12">
                                            @*<option selected value=''>-- SELECTED --</option>*@
                                        </select>
                                    </div>
                                </div>    
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">Office</label>
                                    <div class="col-sm-6">
                                        <input type="text" class="form-control" id="Oficina" tabindex="13"/>
                                    </div>
                                </div>   
                                
                                <div class="hr-line-dashed"></div>
                                <div class="form-group">
                                    <div class="col-sm-8 col-sm-offset-2 text-center">
                                        <button id="btnRegistrar" class="btn btn-primary" type="submit" tabindex="14">Register</button>
                                        <button id="btnActualizar" class="btn btn-white" type="button" disabled tabindex="14">Update</button>
                                        <button id="btnCancelar" class="btn btn-danger" type="button" tabindex="15">Cancel</button>
                                        <input type="hidden" id="apos" value="0" >
                                        <input type="hidden" id="atable" value="0" >
                                    </div>
                                </div>                                  
                            </form>
                        </div>
                    </div>
                </div>
            
           <!--///////////////////LISTA///////////////////////-->
                <div class="col-lg-12">
                <div class="ibox float-e-margins">
                    <div class="ibox-title">
                        @*<h5>Basic Data Tables example with responsive plugin</h5>*@
                        <button class="btn btn-danger"   id="EnlaceCrearNuevo" type="button" >
                            <i class="fa fa-paste"></i> Create New
                         </button>                        
                        <button type="button" class="btn btn-primary"  id="btnModal" data-toggle="modal" data-target="#myModal4" style="display:none;"></button>
                        <div class="ibox-tools">
                            <a class="collapse-link">
                                <i class="fa fa-chevron-up"></i>
                            </a>
                        </div>
                    </div>
                    <div class="ibox-content">
                      @Html.Partial("Medical_List")
                    </div>
                </div>
            </div>
            </div>    
          
</div>


@Html.Partial("footer")

    
<!--/////////////////////MODAL//////////////////-->
    
  <div class="modal inmodal" id="myModal4" tabindex="-1" role="dialog"  aria-hidden="true">
                            <div class="modal-dialog">
                                    <div class="modal-content animated fadeIn">
                                        <div class="modal-header">
                                            <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                                            <i class="fa fa-fa fa-warning modal-icon"></i>
                                            <h4 class="modal-title">Matches Found</h4>
                                            <!--<small>Patients were found with similiar names and surnames!.</small>-->
                                        </div>
                                        <div class="modal-body">
                                            <p><strong>Patient were found with similiar names and surnames!.</strong> If the patient attemps to register this in the following list, click Cancel to not register duplicate data, if you are sure that there is no patient record, click to continue.</p>



                            <table class="table table-bordered" id="tblModalMedical">
                                <thead >
                                <tr>
                                    <th ></th>
                                    <th class="th_tabla">First Name</th>
                                    <th class="th_tabla">Last Name</th>
                                    <th class="th_tabla">State</th>
                                    <th class="th_tabla" >City</th>
                                    <th class="th_tabla" >Status</th>
                                    <th class="th_tabla" >Select</th>
                                </tr>
                                </thead>
                                <tbody>
                              
                                </tbody>
                            </table>

                       
                                        </div>
                                        <div class="modal-footer">
                                            <button id="btnCancelarModal"  type="button" class="btn btn-white" data-dismiss="modal" >Cancel</button>
                                            <button  id="btnRegistrarModal" type="button" class="btn btn-primary" >Continue</button>
                                            <input  id="accion" type="hidden" value="registra" />
                                            <input  id="seleccionado" type="hidden" value="0" />                                                    
                                            <input  id="estadoSeleccion" type="hidden" value="0" />  
                                        </div>
                                    </div>
                            </div>
</div>

<!----------------------------------------------->    


<script>

    $(Inicio);

    var websocket = io.connect(ServidorPuertoNode);

    // Función que libera el caso del usuario logueado actualmente.
    function LiberaCasoDeUsuarioActual(CodigoUsuarioActual) {
        // console.log(CodigoUsuarioActual);

        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify({ "CodigoUsuarioActual": CodigoUsuarioActual }),
            url: '@Url.Action("LiberaCasoDeUsuarioActual", "CaseInformation")',
            contentType: "application/json",
            dataType: 'json'
        });
    }

    function Inicio()
    {
        // Actualiza la variable globlal "ProcesoActual" declarada en index.cshtml de MasterViewer con el nombre del proceso donde se está actualmente (Para los mantenedores se actualiza con una cadena vacía ya que no se requiere mostrar una advertencia cuando se abandona alguno de ellos).
        ProcesoActual = "";
        // console.log(ProcesoActual);
        LiberaCasoDeUsuarioActual(CodigoUsuarioGlobal);

        $('input:text').on('keypress', function (e) {
        
                if (e.which == 13 || e.which == 9) {
                currentTabIndex = parseInt($(this).attr("tabindex"));
        
                currentTabIndex = currentTabIndex + 1;
                $("input[tabindex=" + currentTabIndex + "]").select();
                e.preventDefault();
            }
        
        });

        $('input.letter').on('keypress', function (e) {
        
            if ((e.which == 209 || e.which == 241) || (e.which == 225 || e.which == 233 || e.which == 237 || e.which == 243 || e.which == 250) || (e.which == 46 || e.which == 193 || e.which == 190 || e.which == 201 || e.which == 205 || e.which == 211 || e.which == 218)) {
        
            } else {
                if (!((e.which >= 65 && e.which <= 90) || (e.which == 32 || e.which == 8 || e.which == 0 ) || (e.which >= 97 && e.which <= 122))) {
                    e.preventDefault();
                    return false;
                }
            }
        });
        //ESTE PERMITE USO DE GUION
        $('input.letterNombre').on('keypress', function (e) {

            if ((e.which == 209 || e.which == 241) || (e.which == 225 || e.which == 233 || e.which == 237 || e.which == 243 || e.which == 250) || (e.which == 46 || e.which == 193 || e.which == 190 || e.which == 201 || e.which == 205 || e.which == 211 || e.which == 218)) {

            } else {
                if (!((e.which >= 65 && e.which <= 90) || (e.which == 32 || e.which == 8 || e.which == 0 || e.which == 45) || (e.which >= 97 && e.which <= 122))) {
                    e.preventDefault();
                    return false;
                }
            }
        });

        $("#Ciudad").autocomplete({ delay: 0 });
        OntenerEstadosPais();
        ObtenerCiudades();
        AutocompletarEstadosPais();
        AutocompletarCiudades();

        $("#EnlaceCrearNuevo").on("click", NuevoDoctor);
        $("#btnRegistrar").on("click", RegistrarDoctor); // Dispara la función que registra un doctor, cuando se hace click en el botón registrar del formulario de registro.
        $("#btnActualizar").on("click", ActualizarDatos);
        $("#btnCancelar").on("click", CancelarRegistro); // Dispara la función de cancelacion.
        $("#btnRegistrarModal").on("click", registraActualizaModalMedical);

        $("#tblDoctores > tbody").on("click", "tr > td > .EditarDoctor", EditarDoctor); // Cuando se hace click en ícono de lápiz de cada fila de la tabla se expande el formulario de registro con los datos cargados para poder modificarlos.        
        $("#tblDoctores > tbody").on("click", "tr > td > .EliminarDoctor", EliminaDoctorModal); // Cuando se hace click en ícono de la papelera de cada fila de la tabla se muestra una confirmación para eliminar el registro actual.


        $("#CodigoPostal").on("keypress", validaNumerosSinPunto);
        controlaTab();
    }

    function controlaTab()
    {

        $('.form-control').on('keydown', function (e) {
            //
            console.log("control_keydown");
            if (e.keyCode == 9) {
                e.preventDefault();
                var tabindex = $(this).attr('tabindex');
                console.log(tabindex);
                tabindex++;
                console.log(tabindex);
                $("[tabindex='" + tabindex + "']").focus();
            }

        });
    }
    function validaNumerosSinPunto(e) {

        if (!((e.which >= 48 && e.which <= 57) || (e.which == 40 || e.which == 41) || (e.which == 32 || e.which == 8 || e.which == 0)))//
        {
            e.preventDefault();
            return false;
        }
    }
    function VerificarContraccionFormularioRegistro()
    {
        if ($("#frmRegistroDoctor").css("display") == "none") // Verifica si el formulario de registro está contraído y si es así retorna true.
            return true;
    }

    function LimpiarControlesRegistro()
    {
        //console.clear();
        console.log("limpiar controles");

        ValorOriginalEstadoPais = "";
        ValorOriginalCiudad = "";

        $("#Nombre").val("");
        $("#Apellido").val("");
        $("#Direccion").val("");

        $("#hdAbreviaturaEstadoPais").val("");
        $("#EstadoPais").val("");
        $("#hdCiudad").val("");
        $("#Ciudad").val("");

        $("#CodigoPostal").val("");
        $("#ExtensionCodigoPostal").val("");
        $("#Telefono").val("");
        $("#TelefonoAlternativo").val("");

        $("#TelefonoAlternativo").val("");
        $("#Fax").val("");
        $("#cmbEspecialidades").val("");
        $("#Oficina").val("");
    }

    function NuevoDoctor(e)
    {
        e.preventDefault();

        LimpiarControlesRegistro();
        CargarEspecialidades();

        $("#btnRegistrar").attr("disabled", false); // Habilita el botón registrar.
        $("#btnActualizar").attr("disabled", true); // Deshabilita el botón actualizar.

        //if (VerificarContraccionFormularioRegistro() == true) // "VerificarContraccionFormularioRegistro" es una función que retorna true si el formulario de registro está contraído.
            //ExpandirFormularioRegistro($("#frmRegistroDoctor").parent().find("div:eq(0)").find("div:eq(0)").find("a:eq(0)"));

        $("#frmRegistroDoctor").css("display", "block");


        $("#Nombre").focus();
    }

    function ActualizarDatos(e)
    {        
        if ($("#Nombre").val().trim() == "") // Valida la obligatoriedad del nombre 
        {
            e.stopPropagation();

            $("#Nombre").focus();
            $("#Nombre").addClass("has-error");

            error = "Error!";
            mensaje = "Required First name!!...";
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#Apellido").val().trim() == "") // Valida la obligatoriedad del apellido
        {
            e.stopPropagation();
            $("#Apellido").focus();
            $("#Apellido").addClass("has-error");

            error = "Error!";
            mensaje = "Required Last name!!...";
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#hdAbreviaturaEstadoPais").val() == "") // Valida la obligatoriedad del ciudad 
        {
            e.stopPropagation();

            error = "Error!";
            mensaje = "Please select a State from the list!!...";
            MensajeError(mensaje, error);

            $("#EstadoPais").focus();
            return false;
        }
        else if ($("#hdCiudad").val() == "" && $("#Ciudad").val() == "") // Valida la obligatoriedad de la ciudad (valida que se seleccione una ciudad del autocompletado o que se escriba una ciudad en la caja de texto)
        {
            e.stopPropagation();

            error = "Error!";
            mensaje = "Please select a City from the list!!...";
            MensajeError(mensaje, error);

            $("#Ciudad").focus();
            return false;
        }
        else if ($("#cmbEspecialidades").val() == "" || $("#cmbEspecialidades").val() == null)
        {
            e.preventDefault();

            $("#cmbEspecialidades").focus();
            $("#cmbEspecialidades").addClass("has-error");

            mensaje = "Error!";
            error = "Select a Specialty!!...";
            MensajeError(mensaje, error);
            return false;
        }
        else
        {
            e.preventDefault();

            var NombreCiudad;

            // Obtiene la el nombre de la ciudad seleccionada o ingresada
            if ($("#hdCiudad").val() == "") // Si no se ha seleccionado una ciudad del autocompletado el valor que se registrará será el valor de la caja de texto
                NombreCiudad = $("#Ciudad").val();
            else // Si se ha seleccionado una ciudad del autocompletado el valor que se registrará será el id seleccionado (nombre de la ciudad).
                NombreCiudad = $("#hdCiudad").val()
            // ----------------------------------------------------------
            
            aPos = $("#apos").val();
        
            var Doctor = LlenarDoctor(  $("#hdCodigo").val()
                                      , $("#Nombre").val().trim()
                                      , $("#Apellido").val().trim()
                                      , $("#Direccion").val().trim()
                                      , NombreCiudad
                                      , $("#hdAbreviaturaEstadoPais").val()
                                      , $("#CodigoPostal").val().trim()
                                      , $("#ExtensionCodigoPostal").val().trim()
                                      , $("#Telefono").val().trim()
                                      , $("#ExtensionTelefono").val().trim()
                                      , $("#TelefonoAlternativo").val().trim()
                                      , $("#Fax").val().trim()
                                      , $("#cmbEspecialidades").val()
                                      , $("#Oficina").val().trim())

            // Primero verifica que no exista un paciente homónimo.
            $.ajax({
                type: "POST",
                async: false,
                data: JSON.stringify(Doctor),
                url: '@Url.Action("BuscarHomonimos", "Medical")',
                contentType: "application/json",
                dataType: 'json',
                success: function (Data)
                {
                    if (!Data.Resultado) // Si no se encontraron homónimos.
                    {
                        // Llamará al código que actualizara al paciente.
                        comboSeleccionado = $("#cmbEspecialidades option:selected").html();
                        metodoActualizaMedico(e, comboSeleccionado, "activo");
                    }
                    else // Si se encontraron homónimos.
                    {
                        llenaModal(Data, 'actualiza');
                    }
                }
             });
        }
    }

    $("#tblModalMedical tbody").on('click', 'tr', function ()  //selecciona fila de tabla  
    {
        var aPos = $("#tblModalMedical").dataTable().fnGetPosition(this);
        var aData = $("#tblModalMedical").dataTable().fnGetData(aPos);

        codigo = aData[0];
        status = aData[5];

        var $radios = $("input:radio[name=idRadio]");
        $radios.filter('[value=' + codigo + ']').prop('checked', true);
        $("#seleccionado").val(codigo);
        $("#estadoSeleccion").val(status);
    });

    function registraActualizaModalMedical(e)
    {

        accion = $("#accion").val();
        seleccionado = $("#seleccionado").val();

        estadoSeleccion = $("#estadoSeleccion").val();

        if (seleccionado > 0)
            $("#hdCodigo").val(seleccionado);//doy valor al codigo de cliente, codigo tomado desde modal, para que asi se pueda modificar

        comboSeleccionado = $("#cmbEspecialidades option:selected").html();
       

        if (seleccionado > 0)//si selecciono alguna fila
        {
            if (estadoSeleccion == "Inactive") // si el estado de la fila seleccionada es inactivo
            {
                ////////////////// Pregunta cuando esta inactivo
                swal({
                    title: "Do you want to active medical?",
                    text: "You will not be able to recover the information !",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Yes, activate it!",
                    closeOnConfirm: false,
                    closeOnCancel: false
                },
               function (isConfirm) {
                   if (isConfirm) {
                       metodoActualizaMedico(e, comboSeleccionado, "inactivo");

                       $("#btnCancelarModal").trigger("click");
                       $("#btnCancelar").trigger("click");
                   }
                   else {
                       swal("Cancelled", "The information was not saved !!", "error");
                       return 0;
                   }
               });

            } // cuando el estado de la fila es activo
            else {
                metodoActualizaMedico(e, comboSeleccionado, "activo");
                mensaje = "Data Saved Successfully!!!";
                error = "Success!!";
                MensajeError(mensaje, error);
                $("#btnCancelarModal").trigger("click");
                $("#btnCancelar").trigger("click");
            }
        }
        else// cuando no selecciono nada
        {

            if (accion == 'registra')
                metodoRegistraMedico(e, comboSeleccionado);
            else
                metodoActualizaMedico(e, comboSeleccionado, "activo");

            $("#btnCancelarModal").trigger("click");
            $("#btnCancelar").trigger("click");
        }
    }

    function metodoRegistraMedico(e, comboSeleccionado)
    {
        e.preventDefault();

        var NombreCiudad;

        // Obtiene la el nombre de la ciudad seleccionada o ingresada
        if ($("#hdCiudad").val() == "") // Si no se ha seleccionado una ciudad del autocompletado el valor que se registrará será el valor de la caja de texto
            NombreCiudad = $("#Ciudad").val();
        else // Si se ha seleccionado una ciudad del autocompletado el valor que se registrará será el id seleccionado (nombre de la ciudad).
            NombreCiudad = $("#hdCiudad").val()
        // ----------------------------------------------------------
        aPos = $("#apos").val();

        var Doctor = LlenarDoctor($("#hdCodigo").val()
                                  , $("#Nombre").val().trim()
                                  , $("#Apellido").val().trim()
                                  , $("#Direccion").val().trim()
                                  , NombreCiudad
                                  , $("#hdAbreviaturaEstadoPais").val()
                                  , $("#CodigoPostal").val().trim()
                                  , $("#ExtensionCodigoPostal").val().trim()
                                  , $("#Telefono").val().trim()
                                  , $("#ExtensionTelefono").val().trim()
                                  , $("#TelefonoAlternativo").val().trim()
                                  , $("#Fax").val().trim()
                                  , $("#cmbEspecialidades").val()
                                  , $("#Oficina").val().trim())

         $.ajax({
             type: "POST",
             async: false,
             data: JSON.stringify(Doctor),
             url: '@Url.Action("create", "Medical")',
             contentType: "application/json",
             dataType: 'json',
             success: function (Data)
             {
                 DoctorX = Doctor;
                 Doctor = (Data);

                 if (Data[0].ErrorMessage == "")
                 {

                     var otable = $("#tblDoctores").dataTable();
                     codigoNuevoDoctor = Data[0].MedicalErrorCode
                     AgregaFila(DoctorX,comboSeleccionado,codigoNuevoDoctor);
         
                     error = "Success!";
                     mensaje = "Data Saved Successfully!!!";
                     LimpiarControlesRegistro();
                     $("#frmRegistroDoctor").css("display", "none");
                     ObtenerCiudades();
                    // En "metodoRegistraMedico".
                    actualizaTrazabilidad(DoctorX.Med_code, DoctorX.Med_firstName, DoctorX.Med_lastName)
                 }
                 else
                 {
                     error = "Error!";
                     mensaje = Data[0].ErrorMessage + "...";
                 }
         
                 MensajeError(mensaje, error);
             }
         });
    }

    function metodoActualizaMedico(e, comboSeleccionado,activo)
    {
        e.preventDefault();
        aPos = $("#apos").val();
        var NombreCiudad;

        // Obtiene la el nombre de la ciudad seleccionada o ingresada
        if ($("#hdCiudad").val() == "") // Si no se ha seleccionado una ciudad del autocompletado el valor que se registrará será el valor de la caja de texto
            NombreCiudad = $("#Ciudad").val();
        else // Si se ha seleccionado una ciudad del autocompletado el valor que se registrará será el id seleccionado (nombre de la ciudad).
            NombreCiudad = $("#hdCiudad").val()
        // ----------------------------------------------------------
        


        var Doctor = LlenarDoctor($("#hdCodigo").val()
                                  , $("#Nombre").val().trim()
                                  , $("#Apellido").val().trim()
                                  , $("#Direccion").val().trim()
                                  //, NombreCiudad
                                  , $("#Ciudad").val().trim()
                                  , $("#hdAbreviaturaEstadoPais").val()
                                  , $("#CodigoPostal").val().trim()
                                  , $("#ExtensionCodigoPostal").val().trim()
                                  , $("#Telefono").val().trim()
                                  , $("#ExtensionTelefono").val().trim()
                                  , $("#TelefonoAlternativo").val().trim()
                                  , $("#Fax").val().trim()
                                  , $("#cmbEspecialidades").val()
                                  , $("#Oficina").val().trim())




         $.ajax({
             type: "POST",
             async: false,
             data: JSON.stringify(Doctor),
             url: '@Url.Action("ActualizarDatos", "Medical")',
             contentType: "application/json",
             dataType: 'json', 
             success: function (Data)
             {
                 DoctorX = Doctor;
                 Doctor = (Data);

                 if (Data[0].ErrorMessage == "")
                 {
                    if (activo == "inactivo")
                    {
                         AgregaFila(DoctorX);
                     }
                    if (activo == "activo")
                    {
                         EditaFila(DoctorX);
                     }

                     error = "Success!";
                     mensaje = "Data Saved Successfully";
                     LimpiarControlesRegistro();
                     $("#frmRegistroDoctor").css("display", "none");

                    // En "metodoActualizaMedico".
                     ObtenerCiudades();
                    actualizaTrazabilidad(DoctorX.Med_code, DoctorX.Med_firstName, DoctorX.Med_lastName)
                 }
                 else
                 {
                     error = "Error!";
                     mensaje = Data[0].MensajeError + "...";
                 }
                 MensajeError(mensaje, error);
         
             }
         });
    }


    function RegistrarDoctor(e)
    {
        if ($("#Nombre").val().trim() == "") // Valida la obligatoriedad del nombre 
        {
            e.stopPropagation();

            $("#Nombre").focus();
            $("#Nombre").addClass("has-error");

            error = "Error!";
            mensaje = "Required First name!!...";
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#Apellido").val().trim() == "") // Valida la obligatoriedad del apellido
        {
            e.stopPropagation();
            $("#Apellido").focus();
            $("#Apellido").addClass("has-error");
            error = "Error!";
            mensaje = "Required Last name!!...";
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#hdAbreviaturaEstadoPais").val() == "") // Valida la obligatoriedad del estado
        {
            e.stopPropagation();
            error = "Error!";
            mensaje = "Select a State from the list!!...";
            MensajeError(mensaje, error);
            $("#EstadoPais").focus();
            return false;
        }
        else if ($("#hdCiudad").val() == "" && $("#Ciudad").val() == "") // Valida la obligatoriedad de la ciudad (valida que se seleccione una ciudad del autocompletado o que se escriba una ciudad en la caja de texto)
        {
            e.stopPropagation();
            error = "Error!";
            mensaje = "Select or type a City from the list!!...";
            MensajeError(mensaje, error);
            $("#Ciudad").focus();
            return false;
        }
        else if ($("#cmbEspecialidades").val() == "" || $("#cmbEspecialidades").val() == null) {
            e.preventDefault();

            $("#cmbEspecialidades").focus();
            $("#cmbEspecialidades").addClass("has-error");

            mensaje = "Error!";
            error = "Select a Specialty!!...";
            MensajeError(mensaje, error);                        
            return false;
        }
        else
        {
            e.preventDefault();

            var NombreCiudad;

            // Obtiene la el nombre de la ciudad seleccionada o ingresada
            if ($("#hdCiudad").val().trim() == "") // Si no se ha seleccionado una ciudad del autocompletado el valor que se registrará será el valor de la caja de texto
                NombreCiudad = $("#Ciudad").val().trim();
            else // Si se ha seleccionado una ciudad del autocompletado el valor que se registrará será el id seleccionado (nombre de la ciudad).
                NombreCiudad = $("#hdCiudad").val().trim()
            // ----------------------------------------------------------
             
            var Doctor = LlenarDoctor(
                                        null
                                      , $("#Nombre").val().trim()
                                      , $("#Apellido").val().trim()
                                      , $("#Direccion").val().trim()
                                      , NombreCiudad
                                      , $("#hdAbreviaturaEstadoPais").val()
                                      , $("#CodigoPostal").val().trim()
                                      , $("#ExtensionCodigoPostal").val().trim()
                                      , $("#Telefono").val().trim()
                                      , $("#ExtensionTelefono").val().trim()                                      
                                      , $("#TelefonoAlternativo").val().trim()
                                      , $("#Fax").val().trim()
                                      , $("#cmbEspecialidades").val()
                                      , $("#Oficina").val().trim())

            // Primero verifica que no exista un paciente homónimo.
            $.ajax({
                type: "POST",
                async: false,
                data: JSON.stringify(Doctor),
                url: '@Url.Action("BuscarHomonimos", "Medical")',
                contentType: "application/json",
                dataType: 'json',
                success: function (Data)
                {
                    if(!Data.Resultado) // Si no se encuentran homónimos
                    {
                        // Llamará al código que registrará al paciente.
                        comboSeleccionado = $("#cmbEspecialidades option:selected").html();                        
                        metodoRegistraMedico(e, comboSeleccionado);
                    }
                    else // Si se encontraron homónimos.
                    {
                        // Muestra las coincidencias de hómónimos.
                        llenaModal(Data,'registra');
                    }                    
                }
            });
        }
    }

    // Esta funcción se ejecuta para actualizar el mantenedor de auditoría a través de node.
    function actualizaTrazabilidad(codigoMedico, nombreMedico, apellidoMedico)
    {        
        var parametros
       
        parametros = {
            'codigoMedicoActualizado': codigoMedico
           , 'nombreMedicoActualizado': nombreMedico
           , 'apellidoMedicoActualizado': apellidoMedico
        }

        websocket.emit('actualizaTrazabilidadMedico', parametros)
    }

    function llenaModal(Data, accion)
    {
        ///////////////////////////////////////////////////////////////////
        $("#seleccionado").val(0);
        //////////////////////////////////////////////////////
        //$("#tblModalInsurer").find("tr:gt(0)").remove();
        $("#tblModalMedical").DataTable().clear();

        $.each(Data.Resultado, function (i, val) {
            if (val.Med_firstName != null || val.Med_lastName != null) {

                if (val.Med_status == true)
                    status = "Active";
                else
                    status = "Inactive";
                
                $('#tblModalMedical').dataTable().fnAddData([
                    val.Med_code, val.Med_firstName, val.Med_lastName, val.Med_zipCode, val.Med_state, status, "<input type='radio'  name='idRadio' value='" + val.Med_code + "'>"]);
            }
        });


        var otable = $("#tblModalMedical").dataTable().fnDestroy();
        otable = $('#tblModalMedical').DataTable({
            columnDefs: [{ className: "hidden", "targets": [0] }]
        });

        $("#accion").val(accion);
        $("#btnModal").trigger("click");
    }

    function LlenarDoctor(Codigo, Nombre, Apellido, Direccion, NombreCiudad, AbreviaturaEstadoPais, CodigoPostal, ExtensionCodigoPostal, Telefono, ExtensionTelefono, TelefonoAlternativo, Fax, CodigoEspecialidad, Oficina)
    {
        var DoctorJson =
            {
                  "Med_code": Codigo
                , "Med_firstName": Nombre.toUpperCase()
                , "Med_lastName": Apellido.toUpperCase()
                , "Med_address": Direccion.toUpperCase()
                , "Med_city": NombreCiudad
                , "Med_state": AbreviaturaEstadoPais
                , "Med_zipCode": CodigoPostal
                , "Med_zipCodeExt": ExtensionCodigoPostal
                , "Med_phone": Telefono
                , "Med_phoneExt": ExtensionTelefono
                , "Med_alternatePhone": TelefonoAlternativo
                , "Med_fax": Fax
                , "Spe_code": CodigoEspecialidad
                , "Med_office": Oficina
                , "Med_operatorUser": CodigoUsuarioGlobal
            }

        return DoctorJson;
    }

    function CargarEspecialidades()
    {
        var CodigoEspecialidad;
        var NombreEspecialidad;
        var Especialidades;

        $("#cmbEspecialidades").addClass("form-control m-b");
        $("#cmbEspecialidades").empty();

        $.ajax({
            async: false,
            url: '@Url.Action("ListaEspecialidadesDoctor", "Specialty")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data)
            {
                Especialidades  = Data;
            }
        });

        $.map(Especialidades, function (val, i)
        {
            CodigoEspecialidad = val.Spe_code;
            NombreEspecialidad = val.Spe_name;

            if (NombreEspecialidad == "---------------")
                $("#cmbEspecialidades").append("<option selected value='" + CodigoEspecialidad + "'>" + NombreEspecialidad + "</option>");
            else
                $("#cmbEspecialidades").append("<option value='" + CodigoEspecialidad + "'>" + NombreEspecialidad + "</option>");
        });
    }

    function CargarDatosFormulario(Doctor)
    {
        ValorOriginalEstadoPais = Doctor.Med_state;
        ValorOriginalCiudad = Doctor.Med_city;
        
        //if (VerificarContraccionFormularioRegistro() == true) // "VerificarContraccionFormularioRegistro" es una función que retorna true si el formulario de registro está contraído.
        //    ExpandirFormularioRegistro($("#frmRegistroDoctor").parent().find("div:eq(0)").find("div:eq(0)").find("a:eq(0)"));

        $("#frmRegistroDoctor").css("display", "block");

        $("#hdCodigo").val(Doctor.Med_code);
        $("#Nombre").val(Doctor.Med_firstName);
        $("#Apellido").val(Doctor.Med_lastName);
        $("#Direccion").val(Doctor.Med_address);

       
        // Cargar el estado del país
        if (Doctor.Med_state == "" || Doctor.Med_state == null) {
            $("#hdAbreviaturaEstadoPais").val("");
            $("#EstadoPais").val("");
        }
        else {
            $("#hdAbreviaturaEstadoPais").val(Doctor.Sta_abbreviation);
            $("#EstadoPais").val(Doctor.Med_state);
        }

        // Carga la ciudad
        if (Doctor.Med_city == "" || Doctor.Med_city == null) {
            $("#hdCiudad").val("");
            $("#Ciudad").val("");
        }
        else {
            $("#hdCiudad").val(Doctor.Med_city);
            $("#Ciudad").val(Doctor.Med_city);
        }


        $("#CodigoPostal").val(Doctor.Med_zipCode);
        $("#ExtensionCodigoPostal").val(Doctor.Med_zipCodeExt);
        $("#Telefono").val(Doctor.Med_phone);
        $("#ExtensionTelefono").val(Doctor.Med_phoneExt);
        $("#TelefonoAlternativo").val(Doctor.Med_alternatePhone);
        $("#Fax").val(Doctor.Med_fax);

        ///////////////////////////////////////////////////
        
        //$('#cmbEspecialidades option:eq(' + Doctor.Spe_name + ')').prop('selected', true);        
        $("#cmbEspecialidades").val(Doctor.Specialty.Spe_code); // Combo especialidades
        console.clear();
        console.log(Doctor.Specialty.Spe_name);
        $("#Oficina").val(Doctor.Med_office);
        $("#Nombre").focus();
    }

    function EditarDoctor(e)
    {
        e.preventDefault();

        var otable = $("#tblDoctores").dataTable();
        var target_row = $(this).closest("tr").get(0);
        var aPos = otable.fnGetPosition(target_row);

        $("#btnRegistrar").attr("disabled", true); // Deshabilita el botón registrar.
        $("#btnActualizar").attr("disabled", false); // Habilita el botón actualizar.

        /* 
        La siguiente línea obtiene el código del doctor seleccionado.
        El primer parent obtiene la columna padre del botón editar que se ha presionado,
        el segundo parent obtiene la fila padre de la columna padre del botón editar que se ha presionado,
        para finalmente con el método "find" en esa misma fila buscar la columna "0" que es donde se encuentra 
        el código del doctor seleccionado. 
        */
        var CodigoDoctor = $(this).parent().parent().find("td:eq(0)").html();

        var Doctor;

        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify({ "CodigoDoctor": parseInt(CodigoDoctor) }),
            url: '@Url.Action("ObtenerDatosParaEditar", "Medical")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data)
            {
                Doctor = (Data);
            }
        });

        LimpiarControlesRegistro();
        CargarEspecialidades();
        CargarDatosFormulario(Doctor); // Muestra los datos de la fila seleccionada con el lapicito en el formulario de registro para poder cambiarlos.

        $("#apos").val(aPos);
    }

    function EliminaDoctorModal(e)
    {
        e.preventDefault();
                
        var codDoc = $(this).parent().parent().find("td:eq(0)").html();
        var nomDoc = $(this).parent().parent().find("td:eq(1)").html();
        var apeDoc = $(this).parent().parent().find("td:eq(2)").html();

        dato = nomDoc.trim() + " " + apeDoc.trim();

        var otable = $("#tblDoctores").dataTable();
        var target_row = $(this).closest("tr").get(0);
        var aPos = otable.fnGetPosition(target_row);

        ///limpia formulario
        LimpiarControlesRegistro();

        if (VerificarContraccionFormularioRegistro() != true) // "VerificarContraccionFormularioRegistro" es una función que retorna true si el formulario de registro está contraído.
            ExpandirFormularioRegistro($("#frmRegistroDoctor").parent().find("div:eq(0)").find("div:eq(0)").find("a:eq(0)"));
        ///

        swal({            
            title: "Do you want to delete this doctor?",
            text: "You will not be able to recover the information from " + dato + "!",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes",
            cancelButtonText: "No",
            closeOnConfirm: false,
            closeOnCancel: true
        }, function (isConfirm) {
            if (isConfirm)
            {
                swal("Deleted!", "Your file information has been deleted.", "success");
                EliminarDoctor(codDoc, aPos, otable);

                // En "EliminaDoctorModal".
                actualizaTrazabilidad(codDoc, nomDoc, apeDoc)
            }
            else
            {
                swal("Cancelled", "The information was not eliminated", "error");
                return 0;
            }
        });
    }

    function MensajeError(mensaje, error)
    {
        swal({
            title: mensaje,
            text: error
        });
    }

    function EliminarDoctor(CodigoDoctor, pos, otable)
    {

        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify({ "CodigoDoctor": parseInt(CodigoDoctor) }),
            url: '@Url.Action("Delete", "Medical")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data)
            {
                if (Data["0"].MedicalErrorCode == 50000)
                { 
                    mensaje = Data["0"].ErrorMessage;
                    MensajeError("Error!", mensaje);
                }
                else
                {
                    dato = "";
                    recargaInformacionTabla(dato);
                    controlaTab();

                    websocket.emit('funcionActualizacionTablaMedicalNode', 'Mantenedor_Medical');
                    websocket.on('funcionMedicalDesdeNode', function (data) {
                        funcionMedicalDesdeNode_llamada(data);
                    });
                }
            }
        });
    }

    function OntenerEstadosPais()
    {
        $.ajax({
            type: "POST",
            async: false,
            url: '@Url.Action("ListaEstados", "State")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data)
            {
                EstadosPais = Data;
            }
        });
    }

    function ObtenerCiudades()
    {
        $.ajax({
            type: "POST",
            async: true,
            url: '@Url.Action("ListaCiudades", "City")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data)
            {
                Ciudades = Data;
            }
        });
    }

    function AutocompletarEstadosPais()
    {
        var CodigoEstadoPais;

        $("#EstadoPais").autocomplete(        {
            source: function (request, response)            {
                var results = $.map(EstadosPais, function (tag)                {
                    if (tag.Sta_name.toUpperCase().indexOf(request.term.toUpperCase()) >= 0)                    {
                        return {
                            label: tag.Sta_name,
                            value: tag.Sta_name,
                            id: tag.Sta_abbreviation
                        };
                    }
                });

                response(results.slice(0, 10));
            },
            select: function (event, ui)
            {
                CodigoEstadoPais = ui.item.id;
                $("#hdAbreviaturaEstadoPais").val(CodigoEstadoPais);

                ValorOriginalEstadoPais = $(this).val().trim();

                //$(this).blur();
                $("#Ciudad").focus();
            },
            change: function (event, ui)
            {
                if (ui.item == null)
                    $(this).val(ValorOriginalEstadoPais);
            }
        });
    }

    function AutocompletarCiudades()
    {

        var CodigoCiudad;
        
        $("#Ciudad").autocomplete({
            source: function (request, response) {
                        var results = $.map(Ciudades, function (tag) {
                            if (tag.Cit_name.toUpperCase().indexOf(request.term.toUpperCase()) >= 0) {
                                return {
                                    label: tag.Cit_name,
                                    value: tag.Cit_name,
                                    id: tag.Cit_name
                                };
                            }
                        });

                        response(results.slice(0, 10));
                    },
                    select: function (event, ui) {
                        CodigoCiudad = ui.item.id;
                        $("#hdCiudad").val(CodigoCiudad);

                        ValorOriginalCiudad = $(this).val().trim();

                // $(this).blur();
                        $("#CodigoPostal").focus();
                    },
                    change: function (event, ui) {
                       // if (ui.item == null)
                       //     $(this).val(ValorOriginalCiudad);
                    }
        });
    }

    function CancelarRegistro()
    {
        $("#frmRegistroDoctor").css("display", "none");


        LimpiarControlesRegistro();
        $("#btnRegistrar").attr("disabled", false); // Habilita el botón registrar.
        $("#btnActualizar").attr("disabled", true); // Deshabilita el botón actualizar.
    }

    //function AgregaFila(Doctor, comboSeleccionado, codigoNuevoDoctor)
    function AgregaFila(Doctor)
    {
        //Paciente.Cit_code = "--";
        //Paciente.Sta_code = "--"; 
        //$('#tblDoctores').dataTable().fnAddData([codigoNuevoDoctor, Doctor.Med_firstName, Doctor.Med_lastName, Doctor.Med_address, Doctor.Med_city, Doctor.Med_state, Doctor.Med_zipCode, Doctor.Med_zipCodeExt, Doctor.Med_phone, Doctor.Med_phoneExt, Doctor.Med_alternatePhone, Doctor.Med_fax, comboSeleccionado, Doctor.Med_office, '<a class="btn EditarDoctor btn-white btn-bitbucket"><i class="fa fa-pencil text-danger"></i></a> &nbsp; <a class="btn EliminarDoctor  btn-white btn-bitbucket"><i class="fa fa-trash-o text-danger"></i> </a>']);

        //var otable = $("#tblDoctores").dataTable().fnDestroy();
        //otable = $('.dataTables-example').DataTable({
        //    columnDefs: [{ className: "hidden", "targets": [0] }],
        //    dom: '<"html5buttons"B>lTfgitp',
        //    buttons: [
        //        { extend: 'copy' },
        //        { extend: 'csv' },
        //        { extend: 'excel', title: 'ExampleFile' },
        //        { extend: 'pdf', title: 'ExampleFile' },

        //        {
        //            extend: 'print',
        //            customize: function (win) {
        //                $(win.document.body).addClass('white-bg');
        //                $(win.document.body).css('font-size', '10px');

        //                $(win.document.body).find('table')
        //                        .addClass('compact')
        //                        .css('font-size', 'inherit');
        //            }
        //        }
        //    ]
        //});


        dato = Doctor.Med_firstName + " " + Doctor.Med_lastName;
        //otable = $('.dataTables-example').dataTable().fnFilter(dato);
        //////////////////////////////////
        recargaInformacionTabla(dato);

        websocket.emit('funcionActualizacionTablaMedicalNode', 'Mantenedor_Medical');
        websocket.on('funcionMedicalDesdeNode', function (data){
            funcionEnviaMedicalDesdeNode_llamada(data); 
        });

        ///otable =  $("#tblPacientes").dataTable({ "columnDefs": [{className:"hidden","targets": [0,6,8]}]  });
    }
    function funcionEnviaMedicalDesdeNode_llamada(data) {
        console.log("funcionEnviaMedicalDesdeNode_llamada");
        console.log(data);

        dato_busca = ""; // este campo se usa para filtro en tabla
        var otable = $("#tblDoctores").dataTable();
        recargaInformacionTabla(dato_busca);
    }


    function MensajeError(mensaje, error) {
        swal({
            title: error,
            text: mensaje
        });
    }


    //    function EditaFila(Doctor, pos, otable, comboSeleccionado)
    function EditaFila(Doctor)
    {
        //$('#tblDoctores').dataTable().fnAddData([CodMedNew, Doctor.Med_firstName, Doctor.Med_lastName, Doctor.Med_address, Doctor.Med_city, Doctor.Med_state, Doctor.Med_zipCode, Doctor.Med_zipCodeExt, Doctor.Med_phone, Doctor.Med_alternatePhone, "Especialidad", Doctor.Med_office, '<a class="btn EditarPaciente btn-white btn-bitbucket"><i class="fa fa-pencil text-danger"></i></a> &nbsp; <a class="btn EliminarDoctor  btn-white btn-bitbucket"><i class="fa fa-trash-o text-danger"></i> </a>']);
        //otable.fnUpdate([Doctor.Med_code, Doctor.Med_firstName, Doctor.Med_lastName, Doctor.Med_address, Doctor.Med_city, Doctor.Med_state, Doctor.Med_zipCode, Doctor.Med_zipCodeExt, Doctor.Med_phone, Doctor.Med_phoneExt, Doctor.Med_alternatePhone, Doctor.Med_fax, comboSeleccionado, Doctor.Med_office, '<a class="btn EditarDoctor btn-white btn-bitbucket"><i class="fa fa-pencil text-danger"></i></a> &nbsp; <a class="btn EliminarDoctor  btn-white btn-bitbucket"><i class="fa fa-trash-o text-danger"></i> </a>'], pos, undefined, true);


        dato = Doctor.Med_firstName + " " + Doctor.Med_lastName;
        //otable = $('.dataTables-example').dataTable().fnFilter(dato);
        recargaInformacionTabla(dato);

        websocket.emit('funcionActualizacionTablaMedicalNode', 'Mantenedor_Medical');
        websocket.on('funcionMedicalDesdeNode', function (data) {
            funcionEnviaMedicalDesdeNode_llamada(data);
        });

    }



    function recargaInformacionTabla(dato_busca)
    {

        $.ajax({
            type: "POST",
            async: false,
            url: '@Url.Action("ListaMedicosTabla", "Medical")',
            contentType: false,
            contentType: false,
            success: function (Data) {
                
                $('#tblDoctores').DataTable().ajax.reload();

                if (dato_busca != "")
                    setTimeout(function () { otable = $('#tblDoctores').dataTable().fnFilter(dato) }, "1000");
                else 
                    setTimeout(function () { otable = $('#tblDoctores').dataTable().fnFilter("") }, "1000");

            }
        });
    }

</script>    



