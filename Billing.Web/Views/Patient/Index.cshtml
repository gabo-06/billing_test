@model IEnumerable<Billing.Web.Models.PPatient>

@{
    ViewBag.Title = "Patient";
}

<div>
       <div class="row"> 
           <!--///////////////////FORMULARIO///////////////////////-->
                <div class="col-lg-12" id="divPatient">
                    <div class="ibox float-e-margins">
                        <div class="ibox-title  header_formulario">
                            <h5>REGISTER PATIENTS</h5>
                            
                            </div>
                        
                        <div class="ibox-content" id="frmRegistroPaciente" style="display: none;">
                            <form method="get" class="form-horizontal">
                                <input type="hidden" id="hdCodigo" />
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">First Name<span style="color:red; font-size:15px;"> (*)</span></label>
                                    <div class="col-sm-6">
                                        <input type="text" class="form-control letterNombre" id="Nombre" autofocus tabindex="1" />
                                    </div>
                                </div>
                                @*<div class="hr-line-dashed"></div>*@
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">Patient's Last name<span style="color:red; font-size:15px;"> (*)</span></label>
                                    <div class="col-sm-6">
                                        <input type="text" class="form-control letterNombre" id="Apellido" tabindex="2" />
                                    </div>
                                </div>
                             


@*                            <div class="form-group" id="FechaBirthday">
                                <label class="col-sm-3 control-label">Birthday</label>
                                <div class="input-group date col-sm-6" style="padding-left: 16px;padding-right: 16px;">
                                    <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                                    <input type="text" class="form-control dtpFecha" id="FechaNacimiento" value="" readonly  tabindex="3" />
                                </div>
                            </div>*@



                            <!--<div class="form-group text-center" id="FechaBirthday">
                            <label class="col-sm-3 control-label">Birthday: </label>
                            <div class="col-sm-6 input-group date">
                                <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                                <input type="text" class="form-control " id="FechaNacimiento" autocomplete="off" maxlength="10" tabindex="3" data-mask="99/99/9999">
                            </div>
                            </div>-->



<div class="form-group text-center" id="FechaBirthday">
<label class="col-sm-3 control-label">Birthday: </label>
<div class="input-group date col-sm-6" >
    <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
    <input class="form-control dtpFecha" type="text" id="FechaNacimiento" autocomplete="off" style="background: #ffffff; width: 100%;" maxlength="10" data-mask="99/99/9999" value="" tabindex="3">
</div>
</div>




                                @*<div class="hr-line-dashed"></div>*@
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">SSNumber</label>
                                    <div class="col-sm-6">
                                        <input type="text" class="form-control" id="NumeroSeguroSocialD" data-mask ="999-99-9999"   tabindex="4" />
                                    </div>
                                </div>
                                @*<div class="hr-line-dashed"></div>*@
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">Street</label>
                                    <div class="col-sm-6">
                                        <input type="text" class="form-control" id="Direccion"   tabindex="5" />
                                    </div>
                                </div>
                                @*<div class="hr-line-dashed"></div>*@
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">State<span style="color:red; font-size:15px;"> (*)</span></label>
                                    <div class="col-sm-6">
                                        <span style="font-size: 0.8em; font-style: normal;">type a word to find matches</span>
                                        <span style="color:red; font-size: 0.8em; font-style: italic;">(if you do not belong to any state, select the "NONE" option from the list)</span>
                                        <input type="hidden" id="hdAbreviaturaEstadoPais" />
                                        <input type="text" class="form-control" id="EstadoPais"  tabindex="6" />
                                    </div>
                                </div>

                                @*<div class="hr-line-dashed"></div>*@
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">City<span style="color:red; font-size:15px;"> (*)</span></label>
                                    <div class="col-sm-6">
                                        <span style="font-size: 0.8em; font-style: normal;">type a word to find matches</span>
                                        <input type="hidden" id="hdCiudad" />
                                        <input type="text" class="form-control" id="Ciudad"  tabindex="7" />
                                    </div>
                                </div>
                                @*<div class="hr-line-dashed"></div>*@
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">Zip code</label>
                                    <div class="col-sm-6">
                                        <input type="text" maxlength ="5" class="form-control"  id="CodigoPostal"  tabindex="8" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">Ext</label>
                                    <div class="col-sm-6">
                                        <input type="text" maxlength ="4" class="form-control" id="ExtensionCodigoPostal"  tabindex="9" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">Phone</label>
                                    <div class="col-sm-6">
                                        <input type="text" class="form-control" id="Telefono"  data-mask ="999-999-9999" placeholder=""  tabindex="10" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">Alternative Phone</label>
                                    <div class="col-sm-6">
                                        <input type="text" class="form-control" id="TelefonoAlternativo" data-mask ="999-999-9999"  tabindex="11" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="col-sm-3 control-label"> Sex <span style="color:red; font-size:15px;"> (*)</span></label>
                                    <div class="col-sm-6">
                                        <input type="radio" name="Sexo" class="OpcionSexo" id="rdbMasculino" value="M" style="cursor: pointer;"  tabindex="12" ckecked="true" /> &nbsp Male
                                        <input type="radio" name="Sexo" class="OpcionSexo" id="rdbFemenino" value="F"  style="cursor: pointer;"   tabindex="13" />&nbsp Female
                                    </div>
                                </div>
                                <div class="hr-line-dashed"></div>
                                <div class="form-group">
                                    <div class="col-sm-8 col-sm-offset-2 text-center">
                                        <button id="btnRegistrar" class="btn btn-primary" type="submit"  tabindex="14" >Register</button>
                                        <button id="btnActualizar" class="btn btn-white" type="button" disabled tabindex="14">Update</button>
                                        <button id="btnCancelar" class="btn btn-danger" type="button" tabindex="15">Cancel</button>
                                        <input type="hidden" id="apos" value="0" >
                                        <input type="hidden" id="atable" value="0" >
                                        <input type="hidden" id="url" value="@Url.Action("Create", "Patient")">
                                        <input type="hidden" id="actualizoCiudad" value="s">
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            
           <!--///////////////////LISTA///////////////////////-->
                  @Html.Partial("patient_list")
        </div>    
          
</div>

@Html.Partial("footer")




 
<!--/////////////////////MODAL//////////////////-->

  <div class="modal inmodal" id="myModal4" tabindex="-1" role="dialog"  aria-hidden="true">
                            <div class="modal-dialog">
                                    <div class="modal-content animated fadeIn">
                                        <div class="modal-header">
                                            <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                                            <i class="fa fa-fa fa-warning modal-icon"></i>
                                            <h4 class="modal-title">Matches Found</h4>
                                            <!--<small>Patients were found with similiar names and surnames!.</small>-->
                                        </div>
                                        <div class="modal-body">
                                            <p><strong>Patient were found with similiar names and surnames!.</strong> If the patient attemps to register this in the following list, click Cancel to not register duplicate data, if you are sure that there is no patient record, click to continue.</p>



                            <table class="table table-bordered" id="tblModalPaciente">
                                <thead >
                                <tr>
                                    <th>Codigo</th>
                                    <th class="th_tabla">First Name</th>
                                    <th class="th_tabla">Patient's Last name</th>
                                    <th class="th_tabla">State</th>
                                    <th class="th_tabla" >City</th>
                                    <th class="th_tabla" >Zip</th>
                                    <!--<th class="th_tabla">Address</th>-->
                                    <th class="th_tabla">Status</th>
                                    <th class="th_tabla">Select</th>
                                </tr>
                                </thead>
                                <tbody>
                              
                                </tbody>
                            </table>

                       
                                        </div>
                                        <div class="modal-footer">
                                            <button id="btnCancelarModal"  type="button" class="btn btn-white" data-dismiss="modal" >Cancel</button>
                                            <button  id="btnRegistrarModal" type="button" class="btn btn-primary" >Continue</button>
                                            <input  id="accion" type="hidden" value="registra" />
                                            <input  id="seleccionado" type="hidden" value="0" />                                                    
                                            <input  id="estadoSeleccion" type="hidden" value="0" />     
                                        </div>
                                    </div>
                            </div>
</div>



<!----------------------------------------------->


<script>
    $(Inicio);


    var websocket = io.connect(ServidorPuertoNode);
    // Función que libera el caso del usuario logueado actualmente.
    function LiberaCasoDeUsuarioActual(CodigoUsuarioActual) {
        // console.log(CodigoUsuarioActual);

        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify({ "CodigoUsuarioActual": CodigoUsuarioActual }),
            url: '@Url.Action("LiberaCasoDeUsuarioActual", "CaseInformation")',
                contentType: "application/json",
                dataType: 'json'
            });
    }


    function Inicio()
    {
        // Actualiza la variable globlal "ProcesoActual" declarada en index.cshtml de MasterViewer con el nombre del proceso donde se está actualmente (Para los mantenedores se actualiza con una cadena vacía ya que no se requiere mostrar una advertencia cuando se abandona alguno de ellos).
        ProcesoActual = "";

        LiberaCasoDeUsuarioActual(CodigoUsuarioGlobal);

        $("#Ciudad").autocomplete({ delay: 0 });

        $(".input-group").css("width", "49%");
        $(".input-group").css("padding-left", "16px");

        $('input:text').on('keypress', function (e) {

            console.log("-input:text-");
            if (e.which == 13 || e.which == 9) {
                currentTabIndex = parseInt($(this).attr("tabindex"));

                currentTabIndex = currentTabIndex + 1;
                $("input[tabindex=" + currentTabIndex + "]").select();

                e.preventDefault();
            }
            //e.preventDefault();
        });

        $("#CodigoPostal").on("keypress", validaNumerosSinPunto);

        $('input.letter').on('keypress', function (e) {
           
            if ((e.which == 209 || e.which == 241) || (e.which == 225 || e.which == 233 || e.which == 237 || e.which == 243 || e.which == 250) || (e.which == 46 || e.which == 193 || e.which == 190 || e.which == 201 || e.which == 205 || e.which == 211 || e.which == 218)) {

            
            }
            else {
                if (!((e.which >= 65 && e.which <= 90) || (e.which == 32 || e.which == 8 || e.which == 0 ) || (e.which >= 97 && e.which <= 122))) {
                    e.preventDefault();
                   
                    return false;
                }
            }


        });

        $('input.letterNombre').on('keypress', function (e) {

            if ((e.which == 209 || e.which == 241) || (e.which == 225 || e.which == 233 || e.which == 237 || e.which == 243 || e.which == 250) || (e.which == 46 || e.which == 193 || e.which == 190 || e.which == 201 || e.which == 205 || e.which == 211 || e.which == 218)) {


            }
            else {
                if (!((e.which >= 65 && e.which <= 90) || (e.which == 32 || e.which == 8 || e.which == 0 || e.which == 45) || (e.which >= 97 && e.which <= 122))) {
                    e.preventDefault();

                    return false;
                }
            }


        });

        

        $(".dtpFecha").parent(".input-group").find(".input-group-addon").on("click", function () {
            // console.log($(this).parent(".input-group").find(".dtpFecha"));
            $(this).parent(".input-group").find(".dtpFecha").trigger("click");
            $(this).parent(".input-group").find(".dtpFecha").focus();
        });



        $('.dtpFecha').datepicker({
            todayBtn: "linked",
            keyboardNavigation: false,
            forceParse: false,
            calendarWeeks: true,
            autoclose: true
        });

        //$(".input-group-addon").on("click", function () {
        //    console.log("click");
        //    $(this).datepicker("hide");
        //    $(".dtpFecha").trigger("click");
        //});




        $('#tblModalPatient').DataTable({
            order: [[1, "asc"]]
        });


        ////////////////////////////////////////////////////////////////////////
        //$("#tblModalInsurer tbody tr").on('click', function ()  //selecciona fila de tabla  
        $("#tblModalPaciente tbody").on('click', 'tr', function ()  //selecciona fila de tabla  
        {

            var name;  // Ins_name
            var ciudad;// Ins_city            
            var state; // Ins_state            
            var zip_code; // Ins_zipCode
            var status; // Ins_status
            var codigo; // Ins_code
            var seleccionado;


            var aPos = $("#tblModalPaciente").dataTable().fnGetPosition(this);
            var aData = $("#tblModalPaciente").dataTable().fnGetData(aPos);

            codigo = aData[0];
            /*name = aData[1];
            ciudad = aData[2];
            state = aData[3];
            zip_code = aData[4];*/
            status = aData[6];
            //seleccionado = aData[6];


            console.log(status);
            console.log(codigo);

            var $radios = $("input:radio[name=idRadio]");
            $radios.filter('[value=' + codigo + ']').prop('checked', true);

            $("#seleccionado").val(codigo);
            $("#estadoSeleccion").val(status);

        });

    //}
    //$(document).ready(function () {


        var $radios = $("input:radio[name=Sexo]");
        $radios.filter('[value=M]').prop('checked', true);
        ////////////////////////////////////////////////////////


        ////$(".dtpFecha").datepicker("setDate").on("changeDate", function (e) {
        ////    alert("aki");
        ////    $(this).datepicker("hide");
        ////}); // Establece el control datepicker a los campos de fecha.


        ////$('#FechaBirthday .input-group.date').datepicker({
        ////    todayBtn: "linked",
        ////    keyboardNavigation: false,
        ////    forceParse: false,
        ////    calendarWeeks: true,
        ////    autoclose: true
        ////});

        $('#FechaNacimiento').datepicker({
            todayBtn: "linked",
            keyboardNavigation: false,
            forceParse: false,
            calendarWeeks: true,
            autoclose: true
        });
        

        ////////////////////////////////////////////////////////
        ObtenerEstadosPais();
        ObtenerCiudades();
        AutocompletarEstadosPais();
        AutocompletarCiudades();



        // Cuando se hace click en el enlace "Create New" este código hace que se despliegue el formulario de registro.
        $("#EnlaceCrearNuevo").on("click", function (e) {
            e.preventDefault();

            LimpiarControlesRegistro();

            $("#btnRegistrar").attr("disabled", false); // Habilita el botón registrar.
            $("#btnActualizar").attr("disabled", true); // Deshabilita el botón actualizar.

            var $radios = $("input:radio[name=Sexo]");
            $radios.filter('[value=M]').prop('checked', true);

            $("#frmRegistroPaciente").css("display", "block");

            var position = $("#divPatient").position();
            scroll(0, position.top);
            $("#divPatient").find("#Nombre").focus();
        });

        $("#btnRegistrar").on("click", RegistrarPaciente); // Dispara la función que registra un paciente, cuando se hace click en el botón registrar del formulario de registro.
        $("#tblPacientes > tbody").on("click", "tr > td > .EditarPaciente", EditarPaciente); // Cuando se hace click en ícono de lápiz de cada fila de la tabla se expande el formulario de registro con los datos cargados para poder modificarlos.        
        $("#tblPacientes > tbody").on("click", "tr > td > .EliminarPaciente", EliminaPacienteModal); // Cuando se hace click en ícono de la papelera de cada fila de la tabla se muestra una confirmación para eliminar el registro actual.
        $("#btnActualizar").on("click", ActualizarDatos);
        $("#btnCancelar").on("click", CancelarRegistro); // Dispara la función de cancelacion.
        $("#btnRegistrarModal").on("click", registraActualizaModalPaciente);

        controlaTab();
        ///////////////////////////VALIDA PERMISO//////////////////////       

        if ($("#permiso").val() == "digit") // jala del mastercontroller, variable se guarda en 
            $("#NumeroSeguroSocialD").prop("readonly", true);
        ///////////////////////////////////////////////////////////////

    }


    function controlaTab() {

        $('.form-control').on('keydown', function (e) {
            //
            console.log("control_keydown");
            if (e.keyCode == 9) {
                e.preventDefault();
                var tabindex = $(this).attr('tabindex');
                console.log(tabindex);
                tabindex++;
                console.log(tabindex);
                $("[tabindex='" + tabindex + "']").focus();
            }

        });
    }

    function validaNumerosSinPunto(e)
    {

        if (!((e.which >= 48 && e.which <= 57) || (e.which == 40 || e.which == 41) || (e.which == 32 || e.which == 8 || e.which == 0)))//
        {
            e.preventDefault();
            return false;
        }
    }

    function LimpiarControlesRegistro()
    {
        ValorOriginalEstadoPais = "";
        ValorOriginalCiudad = "";

        $("#Nombre").val("");
        $("#Apellido").val("");
        $("#NumeroSeguroSocialD").val("");
        $("#Direccion").val("");

        $("#hdAbreviaturaEstadoPais").val("");
        $("#EstadoPais").val("");
        $("#hdCiudad").val("");
        $("#Ciudad").val("");

        $("#CodigoPostal").val("");
        $("#ExtensionCodigoPostal").val("");
        $("#Telefono").val("");
        $("#TelefonoAlternativo").val("");

        $("#FechaNacimiento").datepicker("setDate", null);
        $("#FechaNacimiento").val("");

        $("#rdbMasculino").prop("checked", false);
        $("#rdbFemenino").prop("checked", false);
    }




    function VerificarContraccionFormularioRegistro() {
        if ($("#frmRegistroPaciente").css("display") == "none") // Verifica si el formulario de registro está contraído y si es así retorna true.
            return true;
    }

    function LlenarPaciente(Codigo
                            , Nombre
                            , Apellido
                            , FechaNacimiento
                            , NumeroSeguroSocial
                            , Direccion
                            , AbreviaturaEstadoPais
                            , NombreCiudad
                            , CodigoPostal
                            , ExtensionCodigoPostal
                            , Telefono
                            , TelefonoAlternativo
                            , Sexo)
    {
        var PacienteJson =
            {
                  "Pat_code": Codigo
                , "Pat_firstName": Nombre.toUpperCase()
                , "Pat_lastName": Apellido.toUpperCase()
                , "Pat_birthday": FechaNacimiento
                , "Pat_socialSecurityNumberD": ((NumeroSeguroSocial == "") ? null : NumeroSeguroSocial)
                , "Pat_address": ((Direccion == "") ? null : Direccion.toUpperCase())
                , "Pat_state": ((AbreviaturaEstadoPais == "") ? null : AbreviaturaEstadoPais.toUpperCase())
                , "Pat_city": ((NombreCiudad == "") ? null : NombreCiudad.toUpperCase())
                , "Pat_zipCode": ((CodigoPostal == "") ? null : CodigoPostal)
                , "Pat_zipCodeExt": ((ExtensionCodigoPostal == "") ? null : ExtensionCodigoPostal)
                , "Pat_phone": ((Telefono == "") ? null : Telefono)
                , "Pat_fax": ((TelefonoAlternativo == "") ? null : TelefonoAlternativo)
                , "Pat_sex": Sexo
                , "Pat_operatorUser": CodigoUsuarioGlobal
            }

        return PacienteJson;
    }

    function RegistrarPaciente(e)
    {        
        if ($("#Nombre").val().trim() == "") // Valida la obligatoriedad del nombre 
        {
            e.stopPropagation();

            $("#Nombre").focus();
            $("#Nombre").addClass("has-error");

            mensaje = "Error!";
            error = "Required First name!!...";
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#Apellido").val().trim() == "") // Valida la obligatoriedad del apellido
        {
            e.stopPropagation();
            $("#Apellido").focus();
            $("#Apellido").addClass("has-error");
            mensaje = "Error!";
            error = "Required Last name!!...";
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#hdAbreviaturaEstadoPais").val() == "") // Valida la obligatoriedad del ciudad 
        {
            e.stopPropagation();

            mensaje = "Error!";
            error = "Select a State from the list!!...";
            MensajeError(mensaje, error);

            $("#EstadoPais").focus();

            return false;
        }
        else if ($("#hdCiudad").val() == "" && $("#Ciudad").val() == "") // Valida la obligatoriedad de la ciudad (valida que se seleccione una ciudad del autocompletado o que se escriba una ciudad en la caja de texto)
        {
            e.stopPropagation();

            mensaje = "Error!";
            error = "Select or type a City from the list!!...";
            MensajeError(mensaje, error);

            $("#Ciudad").focus();

            return false;
        }
        else if (($("#rdbMasculino").prop("checked") == false) && ($("#rdbFemenino").prop("checked") == false))//valida sexo
        {
            e.stopPropagation();
            mensaje = "Error!";
            error = "Please select Sex for this Patient!!...";
            MensajeError(mensaje, error);
        }
        else {
            e.preventDefault();
            var NombreCiudad;
            var Sexo = null; // almacena el sexo del paciente que se va a registrar

            // Obtiene la el nombre de la ciudad seleccionada o ingresada
            if ($("#hdCiudad").val() == "") // Si no se ha seleccionado una ciudad del autocompletado el valor que se registrará será el valor de la caja de texto
                NombreCiudad = $("#Ciudad").val();
            else // Si se ha seleccionado una ciudad del autocompletado el valor que se registrará será el id seleccionado (nombre de la ciudad).
                NombreCiudad = $("#hdCiudad").val()
            // ----------------------------------------------------------

            Sexo = ($("#rdbMasculino").prop("checked") == true ? "M" : "F") // obtiene el sexo

            var Paciente = LlenarPaciente(null
                                          , $("#Nombre").val().trim()
                                          , $("#Apellido").val().trim()
                                          , $("#FechaNacimiento").val().trim()
                                          , $("#NumeroSeguroSocialD").val().trim()
                                          , $("#Direccion").val().trim()
                                          , $("#hdAbreviaturaEstadoPais").val()
                                          , NombreCiudad
                                          , $("#CodigoPostal").val().trim()
                                          , $("#ExtensionCodigoPostal").val().trim()
                                          , $("#Telefono").val().trim()
                                          , $("#TelefonoAlternativo").val().trim()
                                          , Sexo)

            // Primero verifica que no exista un paciente homónimo.

            $.ajax({
                type: "POST",
                async: false,
                data: JSON.stringify(Paciente),
                url: '@Url.Action("BuscarHomonimos", "Patient")',
                contentType: "application/json",
                dataType: 'json',
                success: function (Data)
                {
                    /*******************************************************
                    Este "Data" puede tener tres tipos de resultados:
                        Cuando no encuentra coincidencias.
                        1) Object {Resultado: false}    

                        Cuando el número de seguridad social está repetido.
                        2)  Pat_address:""
                            Pat_city:""
                            Pat_firstName:"The social security number is repeated"
                            Pat_lastName:""
                            Pat_state:""
                            Pat_status:false
                            Pat_zipCode:""

                        Cuando encuentra coincidencias (En este caso encontró una)
                        3)  Pat_address:"1915 SPARKLE LANE"
                            Pat_city:"AJO"
                            Pat_firstName:"JUANECO"
                            Pat_lastName:"MARTINEZXY"
                            Pat_state:"CO"
                            Pat_status:true
                            Pat_zipCode:"34690"
                    *******************************************************/
                    if (!Data.Resultado)
                    {
                        // Llamará al código que registrará al paciente.
                        metodoRegistraPaciente(e, Paciente);
                    }
                    else // Si se encontraron homónimos.
                    {
                        console.log(Data); // Muestra las coincidencias de hómónimos.                         

                        if (Data.Resultado[0].Pat_firstName == 'The social security number is repeated') {
                            mensaje = "Error!";
                            error = Data.Resultado[0].Pat_firstName;
                            MensajeError(mensaje, error);
                        }
                        else // Si se encontraron homónimos.
                        { 
                            // Muestra las coincidencias de hómónimos.
                            llenaModal(Data, 'registra');
                        }
                    }
                }
            });
        }
    }

    // Esta función se ejecuta para actualizar el mantenedor de auditoría a través de node.
    function actualizaTrazabilidad(codigoPaciente, nombrePaciente, apellidoPaciente)
    {
       // debugger
        var parametros
        console.log("actualizaTraza");
        console.log(codigoPaciente);
        console.log(nombrePaciente);
        console.log(apellidoPaciente);
        console.log("-------------------");

        parametros = {
            'codigoPacienteActualizado': codigoPaciente
           , 'nombrePacienteActualizado': nombrePaciente
           , 'apellidoPacienteActualizado': apellidoPaciente
        }

        websocket.emit('actualizaTrazabilidadPaciente', parametros)
    }

    function metodoRegistraPaciente(e, Paciente)
    {
        e.preventDefault();

        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify(Paciente),
            url: '@Url.Action("Create", "Patient")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data)
            {
                if (Data[0].ErrorMessage == "")
                {
                    AgregaFila(Paciente, Data[0].PatientErrorCode);
                    mensaje = "Success!";
                    error = "Data Saved Successfully!!!";
                    MensajeError(mensaje, error);
                    $("#frmRegistroPaciente").css("display", "none");
                    ObtenerCiudades();
                    // En "metodoRegistraPaciente".
                    actualizaTrazabilidad(Paciente.Pat_code, Paciente.Pat_firstName, Paciente.Pat_lastName);
                }
                else
                {
                    if (Data[0].PatientErrorCode == 2601)
                    {
                        $("#NumeroSeguroSocialD").focus();
                        mensaje = "The social security number already exists";
                    }
                    else
                        mensaje = "Error in register!!";

                    error = Data[0].ErrorMessage;
                    codigo = Data[0].PatientErrorCode;
                    MensajeError(mensaje, Data[0].ErrorMessage);
                }
            }
        });
    }

    function ActualizarDatos(e)
    {
        //debugger;
        if ($("#Nombre").val().trim() == "") // Valida la obligatoriedad del nombre 
        {
            e.stopPropagation();

            $("#Nombre").focus();
            $("#Nombre").addClass("has-error");

            mensaje = "Error!";
            error = "Required First name!!...";
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#Apellido").val().trim() == "") // Valida la obligatoriedad del apellido
        {
            e.stopPropagation();

            $("#Apellido").focus();
            $("#Apellido").addClass("has-error");

            mensaje = "Error!";
            error = "Required Last name!!...";
            MensajeError(mensaje, error);
            return false;
        }
        else if ($("#hdAbreviaturaEstadoPais").val() == "") // Valida la obligatoriedad del ciudad
        {
            e.stopPropagation();

            mensaje = "Error!";            
            error = "Please select a State from the list!!...";
            MensajeError(mensaje, error);

            $("#EstadoPais").focus();
            return false;
        }
        else if ($("#hdCiudad").val() == "" && $("#Ciudad").val() == "") // Valida la obligatoriedad de la ciudad (valida que se seleccione una ciudad del autocompletado o que se escriba una ciudad en la caja de texto)
        {
            e.stopPropagation();

            mensaje = "Error!";
            error = "Please select a City from the list!!...";
            MensajeError(mensaje, error);

            $("#Ciudad").focus();
            return false;
        }
        else if (($("#rdbMasculino").prop("checked") == false) && ($("#rdbFemenino").prop("checked") == false))//valida sexo
        {
            e.stopPropagation();
            mensaje = "Error!";
            error = "Please select Sex for this Patient!!...";
            MensajeError(mensaje, error);
        }
        else {
            e.preventDefault();

            var NombreCiudad;
            var Sexo = null; // almacena el sexo del paciente que se va a registrar
            
            // Obtiene la el nombre de la ciudad seleccionada o ingresada
            if ($("#hdCiudad").val() == "") // Si no se ha seleccionado una ciudad del autocompletado el valor que se registrará será el valor de la caja de texto
                NombreCiudad = $("#Ciudad").val();
            else // Si se ha seleccionado una ciudad del autocompletado el valor que se registrará será el id seleccionado (nombre de la ciudad).
                NombreCiudad = $("#hdCiudad").val()
            // ----------------------------------------------------------


            aPos = $("#apos").val();

            Sexo = ($("#rdbMasculino").prop("checked") == true ? "M" : "F") // obtiene el sexo

            var Paciente = LlenarPaciente($("#hdCodigo").val()
                                          , $("#Nombre").val().trim()
                                          , $("#Apellido").val().trim()
                                          , $("#FechaNacimiento").val().trim()
                                          , $("#NumeroSeguroSocialD").val().trim()
                                          , $("#Direccion").val().trim()
                                          , $("#hdAbreviaturaEstadoPais").val()
                                          , NombreCiudad
                                          , $("#CodigoPostal").val().trim()
                                          , $("#ExtensionCodigoPostal").val().trim()
                                          , $("#Telefono").val().trim()
                                          , $("#TelefonoAlternativo").val().trim()
                                          , Sexo)

            // Primero verifica que no exista un paciente homónimo.
            $.ajax({
                type: "POST",
                async: false,
                data: JSON.stringify(Paciente),
                url: '@Url.Action("BuscarHomonimos", "Patient")',
                contentType: "application/json",
                dataType: 'json',
                success: function (Data) {
                    console.clear();

                    if (!Data.Resultado) // Si no se encontraron homónimos.
                    {
                        // Llamará al código que actualizará al paciente.
                        metodoActualizaPaciente(e, Paciente);
                    }
                    else // Si se encontraron homónimos.
                    {
                        llenaModal(Data, 'actualiza');
                    }
                }
            });
        }
    }

    function metodoActualizaPaciente(e, Paciente, activo)
    {
        e.preventDefault();
        aPos = $("#apos").val();
    
        console.log(Paciente);
        console.log("metodoActualizaPaciente");
        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify(Paciente),
            url: '@Url.Action("Actualizar", "Patient")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data)
            {
                PacienteX = Paciente;
                Paciente = (Data);

                if (Data[0].ErrorMessage == "")
                {
                    var otable = $("#tblPacientes").dataTable();

                    EditaFila(PacienteX, otable);

                    mensaje = "Success!";
                    error = "Data Saved Successfully!!!";
                    LimpiarControlesRegistro();
                    
                    $("#frmRegistroPaciente").css("display", "none");
                    ObtenerCiudades();
                    // En "metodoActualizaPaciente".
                    //debugger;
                    actualizaTrazabilidad(PacienteX.Pat_code, PacienteX.Pat_firstName, PacienteX.Pat_lastName)

                }
                else
                {
                    mensaje = "Error!";
                    error = Data[0].ErrorMessage + "...";
                    $("#NumeroSeguroSocialD").focus();//el error solo se muestra en SSD
                }

                MensajeError(mensaje, error);
            }
        });
    }

    function llenaModal(Data, accion) {

        $("#seleccionado").val(0);
        //////////////////////////////////////////////////////
        //$("#tblModalInsurer").find("tr:gt(0)").remove();
        $("#tblModalPaciente").DataTable().clear();
        $.each(Data.Resultado, function (i, val) {
            if (val.Pat_firstName != null || val.Pat_firstName != null) {

                if (val.Pat_status == true)
                    status = "Active";
                else
                    status = "Inactive";
                //val.Pat_code = 20;
                $('#tblModalPaciente').dataTable().fnAddData([
                    val.Pat_code, val.Pat_firstName, val.Pat_lastName, val.Pat_state, val.Pat_city, val.Pat_zipCode, status, "<input type='radio'  name='idRadio' value='" + val.Ins_code + "'>"]);
            }
        });

        var otable = $("#tblModalPaciente").dataTable().fnDestroy();
        otable = $('#tblModalPaciente').DataTable({
            columnDefs: [{ className: "hidden", "targets": [0] }]
        });

        $("#accion").val(accion);
        $("#btnModal").trigger("click");
    }

    function registraActualizaModalPaciente(e)
    {
        e.preventDefault();
        accion = $("#accion").val();
        seleccionado = $("#seleccionado").val();
        estadoSeleccion = $("#estadoSeleccion").val();

        if (seleccionado > 0)
         $("#hdCodigo").val(seleccionado);//doy valor al codigo de cliente, codigo tomado desde modal, para que asi se pueda modificar

        // Obtiene la el nombre de la ciudad seleccionada o ingresada
        if ($("#hdCiudad").val() == "") // Si no se ha seleccionado una ciudad del autocompletado el valor que se registrará será el valor de la caja de texto
            NombreCiudad = $("#Ciudad").val();
        else // Si se ha seleccionado una ciudad del autocompletado el valor que se registrará será el id seleccionado (nombre de la ciudad).
            NombreCiudad = $("#hdCiudad").val()
        // ----------------------------------------------------------
        Sexo = ($("#rdbMasculino").prop("checked") == true ? "M" : "F"); // obtiene el sexo

        var Paciente = LlenarPaciente($("#hdCodigo").val()
                              , $("#Nombre").val().trim()
                              , $("#Apellido").val().trim()
                              , $("#FechaNacimiento").val().trim()
                              , $("#NumeroSeguroSocialD").val().trim()
                              , $("#Direccion").val().trim()
                              , $("#hdAbreviaturaEstadoPais").val()
                              , NombreCiudad
                              , $("#CodigoPostal").val().trim()
                              , $("#ExtensionCodigoPostal").val().trim()
                              , $("#Telefono").val().trim()
                              , $("#TelefonoAlternativo").val().trim()
                              , Sexo)
        
        $("#hdCodigo").val(seleccionado);//doy valor al codigo de cliente, codigo tomado desde modal, para que asi se pueda modificar

        if (seleccionado > 0)//si selecciono alguna fila
        {
            if (estadoSeleccion == "Inactive") // si el estado de la fila seleccionada es inactivo
            {
                ////////////////// Pregunta cuando esta inactivo
                swal({
                    title: "Do you want to active patient?",
                    text: "You will not be able to recover the information !",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Yes, activate it!",
                    closeOnConfirm: false,
                    closeOnCancel: false
                },
               function (isConfirm)
               {
                   if (isConfirm)
                   {
                       metodoActualizaPaciente(e, Paciente, "inactivo");

                       $("#btnCancelarModal").trigger("click");
                       $("#btnCancelar").trigger("click");
                   }
                   else
                   {
                       swal("Cancelled", "The information was not saved !!", "error");
                       return 0;
                   }
               });

            } // cuando el estado de la fila es activo
            else
            {
                metodoActualizaPaciente(e, Paciente, "activo");                

                mensaje = "Your information has been saved";
                error = "Success";
                MensajeError(mensaje, error);
                $("#btnCancelarModal").trigger("click");
                $("#btnCancelar").trigger("click");
            }
        }
        else// cuando no selecciono nada
        {
            if (accion == 'registra')
            {
                metodoRegistraPaciente(e, Paciente)                
            }
            else
            {
                metodoActualizaPaciente(e, Paciente, "activo")                
            }

            $("#btnCancelarModal").trigger("click")
            $("#btnCancelar").trigger("click")
        }
    }

    function EditarPaciente(e)
    {
        console.log("EditarPaciente");
        e.preventDefault();

        var otable = $("#tblPacientes").dataTable();
        var target_row = $(this).closest("tr").get(0);
        var aPos = otable.fnGetPosition(target_row);

        LimpiarControlesRegistro();

        $("#btnRegistrar").attr("disabled", true); // Deshabilita el botón registrar.
        $("#btnActualizar").attr("disabled", false); // Habilita el botón actualizar.
        
        /* 
        La siguiente línea obtiene el código del paciente seleccionado.
        El primer parent obtiene la columna padre del botón editar que se ha presionado,
        el segundo parent obtiene la fila padre de la columna padre del botón editar que se ha presionado,
        para finalmente con el método "find" en esa misma fila buscar la columna "0" que es donde se encuentra 
        el código del paciente seleccionado. 
        */
        var CodigoPaciente = $(this).parent().parent().find("td:eq(0)").html();

        var Paciente;

        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify({ "Codigo": parseInt(CodigoPaciente) }),
            url: '@Url.Action("Buscar", "Patient")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data) {
                Paciente = (Data);
            }
        });

        var position = $("#divPatient").position();
        scroll(0, position.top);

        //if (Paciente.Pat_birthday != null )
        //{
        //    myDate = convierteFecha(Paciente.Pat_birthday);
        //    Paciente.Pat_birthday = myDate;
        //}

        if (Paciente.Pat_birthday == "01/01/1900" || Paciente.Pat_birthday == "1/1/1900" || Paciente.Pat_birthday == null || Paciente.Pat_birthday == "01/01/0001" || Paciente.Pat_birthday == "")        
            Paciente.Pat_birthday = "";

        CargarDatosFormulario(Paciente); // Muestra los datos de la fila seleccionada con el lapicito en el formulario de registro para poder cambiarlos.
        $("#divPatient").find("#Nombre").focus();
        $("#apos").val(aPos);
    }

    function convierteFecha(dato) {
        console.log("convierteFecha");
        var dateString = dato.substr(6);
        var currentime = new Date(parseInt(dateString));
        var month = currentime.getMonth() + 1;
        var day = currentime.getDate();
        var year = currentime.getFullYear();
        //var myDate = day + "/" + month + "/" + year;
        var myDate = month + "/" + day + "/" + year;
        return myDate;
    }

    function MensajeError(mensaje, error) {
        swal({
            title: mensaje,
            text: error
        });
    }

    function EliminaPacienteModal(e)
    {
        e.preventDefault();

        var codPac = $(this).parent().parent().find("td:eq(0)").html();
        var nomPac = $(this).parent().parent().find("td:eq(1)").html();
        var apePac = $(this).parent().parent().find("td:eq(2)").html();

        dato = nomPac.trim() + " " + apePac.trim();

        var otable = $("#tblPacientes").dataTable();
        var target_row = $(this).closest("tr").get(0);
        var aPos = otable.fnGetPosition(target_row);
                
        LimpiarControlesRegistro();

        $("#frmRegistroPaciente").css("display", "none");

        swal({
            title: "Do you want to delete this patient?",
            text: "You will not be able to recover the information from " + dato + "!",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes",
            cancelButtonText: "No",
            closeOnConfirm: false,
            closeOnCancel: true
        },
        function (isConfirm)
        {
            if (isConfirm)
            {
                swal("Deleted!", "Your file information has been deleted.", "success");
                EliminarPaciente(codPac, aPos, otable);

                // En "EliminaPacienteModal".
                actualizaTrazabilidad(codPac, nomPac, apePac)
            }
            else
            {
                swal("Cancelled", "The information was not eliminated", "error");
                return 0;
            }
        });
    }

    function CancelarRegistro()
    {


        $("#frmRegistroPaciente").css("display", "none");

        LimpiarControlesRegistro();
        $("#btnRegistrar").attr("disabled", false); // Habilita el botón registrar.
        $("#btnActualizar").attr("disabled", true); // Deshabilita el botón actualizar.

    }

    function CargarDatosFormulario(Paciente)
    {
        console.log("CargarDatosFormulario");
        ValorOriginalEstadoPais = Paciente.Pat_state;
        ValorOriginalCiudad = Paciente.Pat_city;

        if (VerificarContraccionFormularioRegistro() == true) // "VerificarContraccionFormularioRegistro" es una función que retorna true si el formulario de registro está contraído.
            ExpandirFormularioRegistro($("#frmRegistroPaciente").parent().find("div:eq(0)").find("div:eq(0)").find("a:eq(0)"));

        $("#frmRegistroPaciente").css("display", "block");

        $("#hdCodigo").val(Paciente.Pat_code);
        $("#Nombre").val(Paciente.Pat_firstName);
        $("#Apellido").val(Paciente.Pat_lastName);
        // debugger
        $("#FechaNacimiento").datepicker("setDate", Paciente.Pat_birthday);
        $("#NumeroSeguroSocialD").val(Paciente.Pat_socialSecurityNumberD);
        $("#Direccion").val(Paciente.Pat_address);

        // Cargar el estado del país
        if (Paciente.Pat_state == "" || Paciente.Pat_state == null)
        {
            $("#hdAbreviaturaEstadoPais").val("");
            $("#EstadoPais").val("");
        }
        else {
            $("#hdAbreviaturaEstadoPais").val(Paciente.Sta_abbreviation);
            $("#EstadoPais").val(Paciente.Pat_state);
        }

        // Carga la ciudad
        if (Paciente.Pat_city == "" || Paciente.Pat_city == null)
        {
            $("#hdCiudad").val("");
            $("#Ciudad").val("");
        }
        else {
            $("#hdCiudad").val(Paciente.Pat_city);
            $("#Ciudad").val(Paciente.Pat_city);
        }

        $("#CodigoPostal").val(Paciente.Pat_zipCode);
        $("#ExtensionCodigoPostal").val(Paciente.Pat_zipCodeExt);
        $("#Telefono").val(Paciente.Pat_phone);
        $("#TelefonoAlternativo").val(Paciente.Pat_fax);

        if (Paciente.Pat_sex == 'M') {
            $("#rdbMasculino").prop("checked", true);
            $("#rdbFemenino").prop("checked", false);
        }
        else if (Paciente.Pat_sex == 'F') {
            $("#rdbMasculino").prop("checked", false);
            $("#rdbFemenino").prop("checked", true);
        }
        else {
            $("#rdbMasculino").prop("checked", false);
            $("#rdbFemenino").prop("checked", false);
        }
    }

    function EliminarPaciente(CodigoPaciente, pos, otable)
    {
        $.ajax({
            type: "POST",
            async: false,
            data: JSON.stringify({ "Codigo": parseInt(CodigoPaciente) }),
            url: '@Url.Action("Delete", "Patient")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data) {
                console.log(Data);
                if (Data[0].PatientErrorCode == 50000) { /// 50000 es el nro de error general 
                    //mensaje = "You can not delete patient he has an active case!!!";
                    mensaje = Data[0].ErrorMessage;
                    MensajeError("Error!", mensaje);
                }
                else {
                    //Paciente = (Data);
                    //otable.fnDeleteRow(pos);
                    //dato = Paciente.Pat_firstName + " " + Paciente.Pat_lastName;                    
                    dato = "";
                    recargaInformacionTabla(dato, otable);
                    controlaTab();

                    websocket.emit('funcionActualizacionTablaPacienteNode', 'GaboSex');
                    websocket.on('funcionEnviadaDesdeNode', function (data) {
                        funcionEnviadaDesdeNode_llamada(data);
                    });

                }
            }
        });
    }



    var EstadosPais;
    var Ciudades;

    function ObtenerEstadosPais() {
        $.ajax({
            type: "POST",
            async: false,
            url: '@Url.Action("ListaEstados", "State")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data) {
                EstadosPais = Data;
            }
        });
    }

    function ObtenerCiudades()
    {
        $.ajax({
            type: "POST",
            async: true,
            url: '@Url.Action("ListaCiudades", "City")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data) {
                Ciudades = null;
                Ciudades = Data;
                //console.log(Ciudades);
            }
        });
    }


    function AutocompletarEstadosPais()
    {
        var CodigoEstadoPais;

        $("#EstadoPais").autocomplete({
            source: function (request, response)
            {
                var results = $.map(EstadosPais, function (tag)
                {
                    if (tag.Sta_name.toUpperCase().indexOf(request.term.toUpperCase()) >= 0)
                    {
                        return {
                            label: tag.Sta_name,
                            value: tag.Sta_name,
                            id: tag.Sta_abbreviation
                        };
                    }
                });

                response(results.slice(0, 10));
            },
            select: function (event, ui)
            {
                
                CodigoEstadoPais = ui.item.id;
                $("#hdAbreviaturaEstadoPais").val(CodigoEstadoPais);

                ValorOriginalEstadoPais = $(this).val().trim();

                //$(this).blur();
                $("#Ciudad").focus();
            },
            change: function (event, ui)
            {
                if (ui.item == null)
                    $(this).val(ValorOriginalEstadoPais);
            }
        });
    }

    //function AutocompletarCiudades() {
    //    var CodigoCiudad;

    //    $("#Ciudad").autocomplete({
    //        source: function (request, response) {
    //            var results = $.map(Ciudades, function (tag) {
    //                if (tag.Cit_name.toUpperCase().indexOf(request.term.toUpperCase()) >= 0) {
    //                    return {
    //                        label: tag.Cit_name,
    //                        value: tag.Cit_name,
    //                        id: tag.Cit_name
    //                    };
    //                }
    //            });

    //            response(results.slice(0, 10));
    //        },
    //        select: function (event, ui) {
    //            CodigoCiudad = ui.item.id;
    //            $("#hdCiudad").val(CodigoCiudad);

    //            ValorOriginalCiudad = $(this).val().trim();

    //            //$(this).blur();
    //            $("#CodigoPostal").focus();
    //        },
    //        change: function (event, ui) {
    //            if (ui.item == null)
    //                $(this).val(ValorOriginalCiudad);
    //        }
    //    });
    //}

    function AutocompletarCiudades()
    {
        var CodigoCiudad;    
        console.log("autoooooo");
        $("#Ciudad").autocomplete({
            source: function (request, response)
            {
                var results = $.map(Ciudades, function (tag)
                {
                    if (tag.Cit_name.toUpperCase().indexOf(request.term.toUpperCase()) >= 0)
                    {
                        return {                                   
        
                            label: tag.Cit_name,
                            value: tag.Cit_name,
                            id: tag.Cit_name
                        };
                    }
                });
        
                response(results.slice(0, 10));
            },
            select: function (event, ui)
            {
                CodigoCiudad = ui.item.id;
                $("#hdCiudad").val(CodigoCiudad);
        
                ValorOriginalCiudad = $(this).val().trim();
                console.log("SELECT");
                //$("#actualizoCiudad").val("n");//indica que eligio una ciudad por lo tanto no es nuevo//n = no,s =si, por defectto el input tiene "s"
                // $(this).blur();
                $("#CodigoPostal").focus();
            },
            change: function (event, ui)
            {
                console.log("CHANGE");

             //   if (ui.item == null)
             //       $(this).val(ValorOriginalCiudad);
            }
        
        });
        
        // $("#Ciudad").autocomplete({
        //     source: function (request, response)
        //     {
        //         $.ajax({
        //             type: 'POST',
        //             aync: false,
        //             url: '@Url.Action("ListaCiudades", "City")',
        //             contentType: "application/json",
        //             dataType: 'json',
        //             success: function (data)
        //             {
        //                 
        //                 Ciudades = data;
        // 
        //                 var results = $.map(Ciudades, function (tag)
        //                 {
        //                     if (tag.Cit_name.toUpperCase().indexOf(request.term.toUpperCase()) >= 0)
        //                     {
        //                         return {                                   
        // 
        //                             label: tag.Cit_name,
        //                             value: tag.Cit_name,
        //                             id: tag.Cit_name
        //                         };
        //                     }
        //                 });
        // 
        //                 response(results.slice(0, 10));
        //             },
        //             select: function (event, ui)
        //             {
        //                 
        // 
        //                 CodigoCiudad = ui.item.id;
        //                 $("#hdCiudad").val(CodigoCiudad);
        // 
        //                 ValorOriginalCiudad = $(this).val().trim();
        // 
        //                 // $(this).blur();
        //                 $("#CodigoPostal").focus();
        //             },
        //             change: function (event, ui)
        //             {
        //                 
        // 
        //                 if (ui.item == null)
        //                     $(this).val(ValorOriginalCiudad);
        //             }
        //         })
        //     }
        // });
        
    }

    function AgregaFila(Paciente, CodPatNew) {
        Paciente.Cit_code = "--";
        Paciente.Sta_code = "--";
        //$('#tblPacientes').dataTable().fnSetColumnVis(0, false, false);    


       // $('#tblPacientes').dataTable().fnAddData([
           //CodPatNew, Paciente.Pat_firstName, Paciente.Pat_lastName, Paciente.Pat_birthday, Paciente.Pat_socialSecurityNumberD, Paciente.Pat_address, Paciente.Cit_code, Paciente.Pat_city,
           //Paciente.Sta_code, Paciente.Pat_state, Paciente.Pat_zipCode, Paciente.Pat_zipCodeExt, Paciente.Pat_phone, Paciente.Pat_fax, Paciente.Pat_sex, '<a class="btn EditarPaciente btn-white btn-bitbucket"><i class="fa fa-pencil text-danger"></i></a> &nbsp; <a class="btn EliminarPaciente  btn-white btn-bitbucket"><i class="fa fa-trash-o text-danger"></i> </a>']);

        //var otable = $("#tblPacientes").dataTable().fnDestroy();
        ////otable = $('.dataTables-example').DataTable({
        //otable = $("#tblPacientes").DataTable({
        //    columnDefs: [{ className: "hidden", "targets": [0, 6, 8] }],
        //    //dom: '<"html5buttons"B>lTfgitp',
        //    //buttons: [
        //    //    { extend: 'copy' },
        //    //    { extend: 'csv' },
        //    //    { extend: 'excel', title: 'ExampleFile' },
        //    //    { extend: 'pdf', title: 'ExampleFile' },

        //    //    {
        //    //        extend: 'print',
        //    //        customize: function (win) {
        //    //            $(win.document.body).addClass('white-bg');
        //    //            $(win.document.body).css('font-size', '10px');

        //    //            $(win.document.body).find('table')
        //    //                    .addClass('compact')
        //    //                    .css('font-size', 'inherit');
        //    //        }
        //    //    }
        //    //]
        //});
        ///otable =  $("#tblPacientes").dataTable({ "columnDefs": [{className:"hidden","targets": [0,6,8]}]  });

        console.log(Paciente, CodPatNew);
        otable = $("#tblPacientes").DataTable();
        //dato = Paciente.Pat_firstName + " " + Paciente.Pat_lastName;
        //otable = $('.dataTables-example').dataTable().fnFilter(dato);

        dato = Paciente.Pat_firstName + " " + Paciente.Pat_lastName;
        //////////////////////////////////
        recargaInformacionTabla(dato, otable);
        //////////////////////////////////

        websocket.emit('funcionActualizacionTablaPacienteNode', 'GaboSex');
        websocket.on('funcionEnviadaDesdeNode', function (data) {
            funcionEnviadaDesdeNode_llamada(data);
        });
        
    }

    //function EditaFila(Paciente, pos, otable)
    function EditaFila(Paciente,  otable)
     {
        Paciente.Cit_code = "--";
        Paciente.Sta_code = "--";
        

        console.log(otable);
        //console.log(pos);
        console.log(Paciente);

        //otable.fnUpdate([
        //Paciente.Pat_code, Paciente.Pat_firstName, Paciente.Pat_lastName, Paciente.Pat_birthday, Paciente.Pat_socialSecurityNumberD, Paciente.Pat_address,Paciente.Cit_code,Paciente.Pat_city,
        //   Paciente.Sta_code,Paciente.Pat_state, Paciente.Pat_zipCode, Paciente.Pat_zipCodeExt, Paciente.Pat_phone, Paciente.Pat_fax, Paciente.Pat_sex, '<a class="btn EditarPaciente btn-white btn-bitbucket"><i class="fa fa-pencil text-danger"></i></a> &nbsp; <a class="btn EliminarPaciente btn-white btn-bitbucket"><i class="fa fa-trash-o text-danger"></i> </a>'], pos, undefined, true);

        dato = Paciente.Pat_firstName + " " + Paciente.Pat_lastName;        
        //////////////////////////////////
        recargaInformacionTabla(dato, otable);
        //////////////////////////////////
        
        websocket.emit('funcionActualizacionTablaPacienteNode', 'GaboSex');
        websocket.on('funcionEnviadaDesdeNode', function (data) {
            funcionEnviadaDesdeNode_llamada(data);
        });
        
        
    }

    function funcionEnviadaDesdeNode_llamada(data)
    {
        console.log("funcionEnviadaDesdeNode_llamada");
        console.log(data);
        
        dato_busca = ""; // este campo se usa para filtro en tabla
        var otable = $("#tblPacientes").dataTable();
        recargaInformacionTabla(dato_busca, otable);
    }


    function recargaInformacionTabla(dato_busca, otable)
    {
        console.log("recargaInformacionTabla");
        $.ajax({
            type: "POST",
            async: false,
            url: '@Url.Action("ListarPacientesTest", "Patient")',
            contentType: false,
            contentType: false,            
            success: function (Data)
            {
                console.log("correcto");
                $('#tblPacientes').DataTable().ajax.reload();

                if (dato_busca != "")                
                    setTimeout(function () { otable = $('#tblPacientes').dataTable().fnFilter(dato_busca) }, "1000");
                else 
                    setTimeout(function () { otable = $('#tblPacientes').dataTable().fnFilter("") }, "1000");
            }
           });
    }

    function ControlarTeclaEstadoPais(e) {
        var KeyCode = e.keyCode || e.which;

        if (KeyCode != 9)
            if ($("#hdAbreviaturaEstadoPais").val() != "") // Al presionar una tecla, si el valor del campo oculto del estado tiene un valor entonces quedará vacío, pero se está validando que sea una tecla distinta de TAB.
                $("#hdAbreviaturaEstadoPais").val("");
    }

    function ControlarTeclaCiudad() {
        if ($("#hdCiudad").val() != "")
            $("#hdCiudad").val("");
    }

    @*    function llenaTablaBrenher()
    {

        //var data = <%= Model.ListarPacientes %>
        //data = eval(data);
        //console.log(data);
        //return false;
        $("#tblPacientes").DataTable().clear(); //mg
       
            $.ajax({
                type: "POST",
                async: false,
                url: '@Url.Action("ListarPacientes", "Patient")',
            contentType: "application/json",
            dataType: 'json',
            success: function (Data) {
                //EstadosPais = Data;
                ListaPacientes = Data;
            }
        });
        return false;
        $.each(ListaPacientes, function (i, Paciente) {
                $('#tblPacientes').dataTable().fnAddData([
                    Paciente.Pat_code, Paciente.Pat_firstName, Paciente.Pat_lastName, Paciente.Pat_birthday, Paciente.Pat_socialSecurityNumberD, Paciente.Pat_address, Paciente.Cit_code, Paciente.Pat_city,
                     Paciente.Sta_code, Paciente.Pat_state, Paciente.Pat_zipCode, Paciente.Pat_zipCodeExt, Paciente.Pat_phone, Paciente.Pat_fax, Paciente.Pat_sex, '<a class="btn EditarPaciente btn-white btn-bitbucket"><i class="fa fa-pencil text-danger"></i></a> &nbsp; <a class="btn EliminarPaciente  btn-white btn-bitbucket"><i class="fa fa-trash-o text-danger"></i> </a>']);
            
        });

        var otable = $("#tblPacientes").dataTable().fnDestroy();
        otable = $('#tblPacientes').DataTable({
            columnDefs: [{ className: "hidden", "targets": [0] }]
        });


        return false;
      

    }*@    
</script>          